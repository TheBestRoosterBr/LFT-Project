
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROW ASSIGN BINARY_NUMBER BITWISE_AND BITWISE_AND_ASSIGN BITWISE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGN BITWISE_SHIFT_LEFT BITWISE_SHIFT_RIGHT BITWISE_XOR BITWISE_XOR_ASSIGN CHARACTER COLON COMMA COMMENT DECREMENT DIVIDE DIVIDE_ASSIGN DOT EQUALS_THEN FLOAT_NUMBER GREATER_EQUALS GREATER_THEN HEXADECIMAL_NUMBER IDENTIFIER INCREMENT KEYWORD_AUTO KEYWORD_BREAK KEYWORD_CASE KEYWORD_CONST KEYWORD_CONTINUE KEYWORD_DEFAULT KEYWORD_DO KEYWORD_ELSE KEYWORD_ENUM KEYWORD_EXTERN KEYWORD_FOR KEYWORD_GOTO KEYWORD_IF KEYWORD_REGISTER KEYWORD_RETURN KEYWORD_SIGNED KEYWORD_SIZEOF KEYWORD_STATIC KEYWORD_STRUCT KEYWORD_SWITCH KEYWORD_TYPEDEF KEYWORD_UNION KEYWORD_UNSIGNED KEYWORD_VOLATILE KEYWORD_WHILE LBRACE LBRACKET LESS_EQUALS LESS_THEN LOGICAL_AND LOGICAL_OR LPAREN MINUS MINUS_ASSIGN MODULUS MODULUS_ASSIGN MULTILINE_COMMENT NOT NOT_EQUALS NUMBER OCTAL_NUMBER PLUS PLUS_ASSIGN PRE_PROCESSOR QUESTION_MARK RBRACE RBRACKET RPAREN SEMICOLON SHIFT_LEFT_ASSIGN SHIFT_RIGHT_ASSIGN STRING TIMES TIMES_ASSIGN TYPE_CHAR TYPE_DOUBLE TYPE_FLOAT TYPE_INT TYPE_LONG TYPE_SHORT TYPE_VOID\n        program : function_signature SEMICOLON program\n                | variable_declaration SEMICOLON program\n                | function program\n                |\n    \n        command_block : LBRACE RBRACE\n                      | LBRACE command_list RBRACE\n    \n        command_list : command command_list\n                    | command\n    \n        command : variable_declaration SEMICOLON\n                | variable_declaration ASSIGN expression SEMICOLON\n                | IDENTIFIER ASSIGN expression SEMICOLON\n                | expression SEMICOLON\n                | SEMICOLON\n    \n        function : function_signature command_block\n    \n        function_signature : type IDENTIFIER LPAREN signature_param_list RPAREN\n                            | pointer IDENTIFIER LPAREN signature_param_list RPAREN\n                            | type IDENTIFIER LPAREN RPAREN\n                            | pointer IDENTIFIER LPAREN RPAREN\n    \n        signature_param_list : signature_param COMMA signature_param\n                             | signature_param\n    \n        signature_param : type\n                        | pointer\n                        | type multiple_bracket_signature\n                        | pointer multiple_bracket_signature\n                        | variable_declaration\n                        | variable_declaration multiple_bracket_signature\n    \n        multiple_bracket_signature : LBRACKET RBRACKET multiple_bracket_with_bounds\n                                    | multiple_bracket_with_bounds\n\n    \n        multiple_bracket_with_bounds : bracket_with_bounds multiple_bracket_with_bounds\n                                     | bracket_with_bounds\n    \n        bracket_with_bounds : LBRACKET number_id RBRACKET\n    \n        number_id : IDENTIFIER\n                  | integer_number\n    \n        variable_declaration : type IDENTIFIER\n                             | pointer IDENTIFIER\n    \n        pointer : type multiple_times\n    \n        type : user_types\n            | primitive_types\n    \n        user_types : IDENTIFIER\n                    | KEYWORD_STRUCT IDENTIFIER\n    \n        primitive_types : TYPE_CHAR\n                        | TYPE_INT\n                        | TYPE_SHORT\n                        | TYPE_LONG\n                        | TYPE_FLOAT\n                        | TYPE_DOUBLE\n                        | TYPE_VOID\n    \n        multiple_times : TIMES multiple_times\n                        | TIMES\n    \n        integer_number : NUMBER\n                       | BINARY_NUMBER\n                       | HEXADECIMAL_NUMBER\n                       | OCTAL_NUMBER\n    \n        expression : and_assign_bitwise_operator\n    \n        and_assign_bitwise_operator : xor_assign_bitwise_operator BITWISE_AND_ASSIGN and_assign_bitwise_operator\n                                    | xor_assign_bitwise_operator\n    \n        xor_assign_bitwise_operator : or_assign_bitwise_operator BITWISE_XOR_ASSIGN xor_assign_bitwise_operator\n                                    | or_assign_bitwise_operator\n    \n        or_assign_bitwise_operator : or_assign_bitwise_operator BITWISE_OR_ASSIGN left_shift_bitwise_assign\n                                    | left_shift_bitwise_assign\n    \n        left_shift_bitwise_assign : IDENTIFIER\n                                  | integer_number\n    '
    
_lr_action_items = {'$end':([0,1,4,18,19,21,22,28,29,47,51,],[-4,0,-4,-4,-14,-4,-3,-1,-5,-2,-6,]),'IDENTIFIER':([0,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,25,27,29,31,33,35,36,37,48,49,50,51,53,54,55,56,59,60,61,62,66,77,81,85,86,92,],[6,6,23,-39,26,-37,-38,27,-41,-42,-43,-44,-45,-46,-47,6,-14,35,6,-36,-49,-40,-5,35,-13,-39,57,58,6,-48,6,-6,-9,71,-12,71,71,71,71,57,58,89,6,-10,-11,89,]),'KEYWORD_STRUCT':([0,4,18,19,20,21,29,31,33,48,50,51,53,55,81,85,86,],[10,10,10,-14,10,10,-5,10,-13,10,10,-6,-9,-12,10,-10,-11,]),'TYPE_CHAR':([0,4,18,19,20,21,29,31,33,48,50,51,53,55,81,85,86,],[11,11,11,-14,11,11,-5,11,-13,11,11,-6,-9,-12,11,-10,-11,]),'TYPE_INT':([0,4,18,19,20,21,29,31,33,48,50,51,53,55,81,85,86,],[12,12,12,-14,12,12,-5,12,-13,12,12,-6,-9,-12,12,-10,-11,]),'TYPE_SHORT':([0,4,18,19,20,21,29,31,33,48,50,51,53,55,81,85,86,],[13,13,13,-14,13,13,-5,13,-13,13,13,-6,-9,-12,13,-10,-11,]),'TYPE_LONG':([0,4,18,19,20,21,29,31,33,48,50,51,53,55,81,85,86,],[14,14,14,-14,14,14,-5,14,-13,14,14,-6,-9,-12,14,-10,-11,]),'TYPE_FLOAT':([0,4,18,19,20,21,29,31,33,48,50,51,53,55,81,85,86,],[15,15,15,-14,15,15,-5,15,-13,15,15,-6,-9,-12,15,-10,-11,]),'TYPE_DOUBLE':([0,4,18,19,20,21,29,31,33,48,50,51,53,55,81,85,86,],[16,16,16,-14,16,16,-5,16,-13,16,16,-6,-9,-12,16,-10,-11,]),'TYPE_VOID':([0,4,18,19,20,21,29,31,33,48,50,51,53,55,81,85,86,],[17,17,17,-14,17,17,-5,17,-13,17,17,-6,-9,-12,17,-10,-11,]),'SEMICOLON':([2,3,20,23,26,31,32,33,34,35,38,39,40,41,42,43,44,45,46,53,55,57,58,64,69,70,71,72,73,74,75,80,84,85,86,],[18,21,33,-34,-35,33,53,-13,55,-61,-54,-56,-58,-60,-62,-50,-51,-52,-53,-9,-12,-34,-35,-17,-18,85,-61,86,-55,-57,-59,-15,-16,-10,-11,]),'LBRACE':([2,64,69,80,84,],[20,-17,-18,-15,-16,]),'TIMES':([5,6,8,9,11,12,13,14,15,16,17,25,27,35,36,62,],[25,-39,-37,-38,-41,-42,-43,-44,-45,-46,-47,25,-40,-39,25,25,]),'LBRACKET':([6,8,9,11,12,13,14,15,16,17,24,25,27,49,57,58,62,66,67,79,87,95,],[-39,-37,-38,-41,-42,-43,-44,-45,-46,-47,-36,-49,-40,-48,-34,-35,77,77,77,92,92,-31,]),'COMMA':([6,8,9,11,12,13,14,15,16,17,24,25,27,49,57,58,62,65,66,67,76,78,79,82,83,91,94,95,],[-39,-37,-38,-41,-42,-43,-44,-45,-46,-47,-36,-49,-40,-48,-34,-35,-21,81,-22,-25,-23,-28,-30,-24,-26,-29,-27,-31,]),'RPAREN':([6,8,9,11,12,13,14,15,16,17,24,25,27,48,49,50,57,58,62,63,65,66,67,68,76,78,79,82,83,91,93,94,95,],[-39,-37,-38,-41,-42,-43,-44,-45,-46,-47,-36,-49,-40,64,-48,69,-34,-35,-21,80,-20,-22,-25,84,-23,-28,-30,-24,-26,-29,-19,-27,-31,]),'RBRACE':([20,30,31,33,52,53,55,85,86,],[29,51,-8,-13,-7,-9,-12,-10,-11,]),'NUMBER':([20,31,33,53,54,55,56,59,60,61,77,85,86,92,],[43,43,-13,-9,43,-12,43,43,43,43,43,-10,-11,43,]),'BINARY_NUMBER':([20,31,33,53,54,55,56,59,60,61,77,85,86,92,],[44,44,-13,-9,44,-12,44,44,44,44,44,-10,-11,44,]),'HEXADECIMAL_NUMBER':([20,31,33,53,54,55,56,59,60,61,77,85,86,92,],[45,45,-13,-9,45,-12,45,45,45,45,45,-10,-11,45,]),'OCTAL_NUMBER':([20,31,33,53,54,55,56,59,60,61,77,85,86,92,],[46,46,-13,-9,46,-12,46,46,46,46,46,-10,-11,46,]),'LPAREN':([23,26,],[48,50,]),'ASSIGN':([32,35,57,58,],[54,56,-34,-35,]),'BITWISE_XOR_ASSIGN':([35,40,41,42,43,44,45,46,71,75,],[-61,60,-60,-62,-50,-51,-52,-53,-61,-59,]),'BITWISE_OR_ASSIGN':([35,40,41,42,43,44,45,46,71,75,],[-61,61,-60,-62,-50,-51,-52,-53,-61,-59,]),'BITWISE_AND_ASSIGN':([35,39,40,41,42,43,44,45,46,71,74,75,],[-61,59,-58,-60,-62,-50,-51,-52,-53,-61,-57,-59,]),'RBRACKET':([43,44,45,46,77,88,89,90,],[-50,-51,-52,-53,87,95,-32,-33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,4,18,21,],[1,22,28,47,]),'function_signature':([0,4,18,21,],[2,2,2,2,]),'variable_declaration':([0,4,18,20,21,31,48,50,81,],[3,3,3,32,3,32,67,67,67,]),'function':([0,4,18,21,],[4,4,4,4,]),'type':([0,4,18,20,21,31,48,50,81,],[5,5,5,36,5,36,62,62,62,]),'pointer':([0,4,18,20,21,31,48,50,81,],[7,7,7,37,7,37,66,66,66,]),'user_types':([0,4,18,20,21,31,48,50,81,],[8,8,8,8,8,8,8,8,8,]),'primitive_types':([0,4,18,20,21,31,48,50,81,],[9,9,9,9,9,9,9,9,9,]),'command_block':([2,],[19,]),'multiple_times':([5,25,36,62,],[24,49,24,24,]),'command_list':([20,31,],[30,52,]),'command':([20,31,],[31,31,]),'expression':([20,31,54,56,],[34,34,70,72,]),'and_assign_bitwise_operator':([20,31,54,56,59,],[38,38,38,38,73,]),'xor_assign_bitwise_operator':([20,31,54,56,59,60,],[39,39,39,39,39,74,]),'or_assign_bitwise_operator':([20,31,54,56,59,60,],[40,40,40,40,40,40,]),'left_shift_bitwise_assign':([20,31,54,56,59,60,61,],[41,41,41,41,41,41,75,]),'integer_number':([20,31,54,56,59,60,61,77,92,],[42,42,42,42,42,42,42,90,90,]),'signature_param_list':([48,50,],[63,68,]),'signature_param':([48,50,81,],[65,65,93,]),'multiple_bracket_signature':([62,66,67,],[76,82,83,]),'multiple_bracket_with_bounds':([62,66,67,79,87,],[78,78,78,91,94,]),'bracket_with_bounds':([62,66,67,79,87,],[79,79,79,79,79,]),'number_id':([77,92,],[88,88,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function_signature SEMICOLON program','program',3,'p_program','sintatic.py',7),
  ('program -> variable_declaration SEMICOLON program','program',3,'p_program','sintatic.py',8),
  ('program -> function program','program',2,'p_program','sintatic.py',9),
  ('program -> <empty>','program',0,'p_program','sintatic.py',10),
  ('command_block -> LBRACE RBRACE','command_block',2,'p_command_block','sintatic.py',16),
  ('command_block -> LBRACE command_list RBRACE','command_block',3,'p_command_block','sintatic.py',17),
  ('command_list -> command command_list','command_list',2,'p_command_list','sintatic.py',23),
  ('command_list -> command','command_list',1,'p_command_list','sintatic.py',24),
  ('command -> variable_declaration SEMICOLON','command',2,'p_command','sintatic.py',30),
  ('command -> variable_declaration ASSIGN expression SEMICOLON','command',4,'p_command','sintatic.py',31),
  ('command -> IDENTIFIER ASSIGN expression SEMICOLON','command',4,'p_command','sintatic.py',32),
  ('command -> expression SEMICOLON','command',2,'p_command','sintatic.py',33),
  ('command -> SEMICOLON','command',1,'p_command','sintatic.py',34),
  ('function -> function_signature command_block','function',2,'p_function','sintatic.py',40),
  ('function_signature -> type IDENTIFIER LPAREN signature_param_list RPAREN','function_signature',5,'p_funcion_signature','sintatic.py',46),
  ('function_signature -> pointer IDENTIFIER LPAREN signature_param_list RPAREN','function_signature',5,'p_funcion_signature','sintatic.py',47),
  ('function_signature -> type IDENTIFIER LPAREN RPAREN','function_signature',4,'p_funcion_signature','sintatic.py',48),
  ('function_signature -> pointer IDENTIFIER LPAREN RPAREN','function_signature',4,'p_funcion_signature','sintatic.py',49),
  ('signature_param_list -> signature_param COMMA signature_param','signature_param_list',3,'p_signature_param_list','sintatic.py',55),
  ('signature_param_list -> signature_param','signature_param_list',1,'p_signature_param_list','sintatic.py',56),
  ('signature_param -> type','signature_param',1,'p_signature_param','sintatic.py',62),
  ('signature_param -> pointer','signature_param',1,'p_signature_param','sintatic.py',63),
  ('signature_param -> type multiple_bracket_signature','signature_param',2,'p_signature_param','sintatic.py',64),
  ('signature_param -> pointer multiple_bracket_signature','signature_param',2,'p_signature_param','sintatic.py',65),
  ('signature_param -> variable_declaration','signature_param',1,'p_signature_param','sintatic.py',66),
  ('signature_param -> variable_declaration multiple_bracket_signature','signature_param',2,'p_signature_param','sintatic.py',67),
  ('multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_with_bounds','multiple_bracket_signature',3,'p_multiple_bracket_signature','sintatic.py',73),
  ('multiple_bracket_signature -> multiple_bracket_with_bounds','multiple_bracket_signature',1,'p_multiple_bracket_signature','sintatic.py',74),
  ('multiple_bracket_with_bounds -> bracket_with_bounds multiple_bracket_with_bounds','multiple_bracket_with_bounds',2,'p_multiple_bracket_with_bounds','sintatic.py',81),
  ('multiple_bracket_with_bounds -> bracket_with_bounds','multiple_bracket_with_bounds',1,'p_multiple_bracket_with_bounds','sintatic.py',82),
  ('bracket_with_bounds -> LBRACKET number_id RBRACKET','bracket_with_bounds',3,'p_bracket_with_bounds','sintatic.py',88),
  ('number_id -> IDENTIFIER','number_id',1,'p_number_id','sintatic.py',94),
  ('number_id -> integer_number','number_id',1,'p_number_id','sintatic.py',95),
  ('variable_declaration -> type IDENTIFIER','variable_declaration',2,'p_variable_declaration','sintatic.py',101),
  ('variable_declaration -> pointer IDENTIFIER','variable_declaration',2,'p_variable_declaration','sintatic.py',102),
  ('pointer -> type multiple_times','pointer',2,'p_pointer','sintatic.py',108),
  ('type -> user_types','type',1,'p_type','sintatic.py',114),
  ('type -> primitive_types','type',1,'p_type','sintatic.py',115),
  ('user_types -> IDENTIFIER','user_types',1,'p_user_types','sintatic.py',121),
  ('user_types -> KEYWORD_STRUCT IDENTIFIER','user_types',2,'p_user_types','sintatic.py',122),
  ('primitive_types -> TYPE_CHAR','primitive_types',1,'p_primitive_types','sintatic.py',128),
  ('primitive_types -> TYPE_INT','primitive_types',1,'p_primitive_types','sintatic.py',129),
  ('primitive_types -> TYPE_SHORT','primitive_types',1,'p_primitive_types','sintatic.py',130),
  ('primitive_types -> TYPE_LONG','primitive_types',1,'p_primitive_types','sintatic.py',131),
  ('primitive_types -> TYPE_FLOAT','primitive_types',1,'p_primitive_types','sintatic.py',132),
  ('primitive_types -> TYPE_DOUBLE','primitive_types',1,'p_primitive_types','sintatic.py',133),
  ('primitive_types -> TYPE_VOID','primitive_types',1,'p_primitive_types','sintatic.py',134),
  ('multiple_times -> TIMES multiple_times','multiple_times',2,'p_multiple_times','sintatic.py',140),
  ('multiple_times -> TIMES','multiple_times',1,'p_multiple_times','sintatic.py',141),
  ('integer_number -> NUMBER','integer_number',1,'p_integer_number','sintatic.py',147),
  ('integer_number -> BINARY_NUMBER','integer_number',1,'p_integer_number','sintatic.py',148),
  ('integer_number -> HEXADECIMAL_NUMBER','integer_number',1,'p_integer_number','sintatic.py',149),
  ('integer_number -> OCTAL_NUMBER','integer_number',1,'p_integer_number','sintatic.py',150),
  ('expression -> and_assign_bitwise_operator','expression',1,'p_expression','sintatic.py',156),
  ('and_assign_bitwise_operator -> xor_assign_bitwise_operator BITWISE_AND_ASSIGN and_assign_bitwise_operator','and_assign_bitwise_operator',3,'p_and_assign_bitwise_operator','sintatic.py',162),
  ('and_assign_bitwise_operator -> xor_assign_bitwise_operator','and_assign_bitwise_operator',1,'p_and_assign_bitwise_operator','sintatic.py',163),
  ('xor_assign_bitwise_operator -> or_assign_bitwise_operator BITWISE_XOR_ASSIGN xor_assign_bitwise_operator','xor_assign_bitwise_operator',3,'p_xor_assign_bitwise_operator','sintatic.py',169),
  ('xor_assign_bitwise_operator -> or_assign_bitwise_operator','xor_assign_bitwise_operator',1,'p_xor_assign_bitwise_operator','sintatic.py',170),
  ('or_assign_bitwise_operator -> or_assign_bitwise_operator BITWISE_OR_ASSIGN left_shift_bitwise_assign','or_assign_bitwise_operator',3,'p_or_assign_bitwise_operator','sintatic.py',176),
  ('or_assign_bitwise_operator -> left_shift_bitwise_assign','or_assign_bitwise_operator',1,'p_or_assign_bitwise_operator','sintatic.py',177),
  ('left_shift_bitwise_assign -> IDENTIFIER','left_shift_bitwise_assign',1,'p_left_shift_bitwise_assign','sintatic.py',183),
  ('left_shift_bitwise_assign -> integer_number','left_shift_bitwise_assign',1,'p_left_shift_bitwise_assign','sintatic.py',184),
]
