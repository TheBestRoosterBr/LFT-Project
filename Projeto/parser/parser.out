Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    KEYWORD_BREAK
    KEYWORD_CASE
    KEYWORD_CONST
    KEYWORD_CONTINUE
    KEYWORD_DEFAULT
    KEYWORD_DO
    KEYWORD_ELSE
    KEYWORD_ENUM
    KEYWORD_FOR
    KEYWORD_IF
    KEYWORD_SWITCH
    KEYWORD_TYPEDEF
    KEYWORD_WHILE
    LABEL
    MULTILINE_COMMENT
    PRE_PROCESSOR

Grammar

Rule 0     S' -> program
Rule 1     program -> <empty>
Rule 2     program -> function_signature SEMICOLON program
Rule 3     program -> variable_declaration_list SEMICOLON program
Rule 4     program -> function program
Rule 5     program -> expression program
Rule 6     program -> struct_declaration program
Rule 7     program -> union_declaration program
Rule 8     command_block -> LBRACE RBRACE
Rule 9     command_block -> LBRACE command_list RBRACE
Rule 10    command_list -> command command_list
Rule 11    command_list -> command
Rule 12    command -> variable_declaration_list SEMICOLON
Rule 13    command -> expression_list SEMICOLON
Rule 14    command -> struct_declaration
Rule 15    command -> union_declaration
Rule 16    command -> SEMICOLON
Rule 17    command -> label
Rule 18    command -> KEYWORD_GOTO IDENTIFIER SEMICOLON
Rule 19    command -> return_stm SEMICOLON
Rule 20    label -> IDENTIFIER COLON
Rule 21    function -> function_signature command_block
Rule 22    function_signature -> type_identifier LPAREN signature_param_list RPAREN
Rule 23    function_signature -> type_identifier LPAREN RPAREN
Rule 24    signature_param_list -> signature_param COMMA signature_param
Rule 25    signature_param_list -> signature_param
Rule 26    signature_param -> type
Rule 27    signature_param -> pointer
Rule 28    signature_param -> type multiple_bracket_signature
Rule 29    signature_param -> pointer multiple_bracket_signature
Rule 30    signature_param -> type_identifier
Rule 31    signature_param -> type_identifier multiple_bracket_signature
Rule 32    multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_signature
Rule 33    multiple_bracket_signature -> LBRACKET RBRACKET
Rule 34    multiple_bracket_signature -> bracket_with_bounds multiple_bracket_signature
Rule 35    multiple_bracket_signature -> bracket_with_bounds
Rule 36    bracket_with_bounds -> LBRACKET number_id RBRACKET
Rule 37    number_id -> IDENTIFIER
Rule 38    number_id -> integer_number
Rule 39    value_list -> LBRACE value_list_item RBRACE
Rule 40    value_list_item -> expression
Rule 41    value_list_item -> expression COMMA value_list_item
Rule 42    value_list_item -> value_list
Rule 43    value_list_item -> value_list COMMA value_list_item
Rule 44    type_identifier -> type IDENTIFIER
Rule 45    type_identifier -> pointer IDENTIFIER
Rule 46    variable_declaration_list -> type identifier_list
Rule 47    variable_declaration_list -> pointer identifier_list
Rule 48    identifier_list -> IDENTIFIER
Rule 49    identifier_list -> IDENTIFIER COMMA identifier_list
Rule 50    identifier_list -> IDENTIFIER multiple_bracket_signature
Rule 51    identifier_list -> IDENTIFIER multiple_bracket_signature COMMA identifier_list
Rule 52    identifier_list -> IDENTIFIER ASSIGN expression
Rule 53    identifier_list -> IDENTIFIER ASSIGN expression COMMA identifier_list
Rule 54    identifier_list -> IDENTIFIER multiple_bracket_signature ASSIGN value_list
Rule 55    identifier_list -> IDENTIFIER multiple_bracket_signature ASSIGN value_list COMMA identifier_list
Rule 56    identifier_list -> IDENTIFIER ASSIGN value_list
Rule 57    identifier_list -> IDENTIFIER ASSIGN value_list COMMA identifier_list
Rule 58    pointer -> type multiple_times
Rule 59    type -> user_types
Rule 60    type -> primitive_types
Rule 61    type -> type_modifier type
Rule 62    struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON
Rule 63    struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
Rule 64    struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON
Rule 65    struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON
Rule 66    union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON
Rule 67    union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
Rule 68    union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON
Rule 69    union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON
Rule 70    struct_or_union_member_list -> variable_declaration_list SEMICOLON
Rule 71    struct_or_union_member_list -> variable_declaration_list SEMICOLON struct_or_union_member_list
Rule 72    struct_or_union_member_list -> struct_declaration
Rule 73    struct_or_union_member_list -> struct_declaration SEMICOLON struct_or_union_member_list
Rule 74    struct_or_union_member_list -> union_declaration
Rule 75    struct_or_union_member_list -> union_declaration SEMICOLON struct_or_union_member_list
Rule 76    type_modifier -> KEYWORD_STATIC
Rule 77    type_modifier -> KEYWORD_UNSIGNED
Rule 78    type_modifier -> KEYWORD_VOLATILE
Rule 79    type_modifier -> KEYWORD_EXTERN
Rule 80    type_modifier -> KEYWORD_SIGNED
Rule 81    type_modifier -> KEYWORD_REGISTER
Rule 82    user_types -> KEYWORD_STRUCT IDENTIFIER
Rule 83    user_types -> KEYWORD_UNION IDENTIFIER
Rule 84    primitive_types -> TYPE_CHAR
Rule 85    primitive_types -> TYPE_INT
Rule 86    primitive_types -> TYPE_SHORT
Rule 87    primitive_types -> TYPE_LONG
Rule 88    primitive_types -> TYPE_FLOAT
Rule 89    primitive_types -> TYPE_DOUBLE
Rule 90    primitive_types -> TYPE_VOID
Rule 91    multiple_times -> TIMES multiple_times
Rule 92    multiple_times -> TIMES
Rule 93    integer_number -> NUMBER
Rule 94    integer_number -> BINARY_NUMBER
Rule 95    integer_number -> HEXADECIMAL_NUMBER
Rule 96    integer_number -> OCTAL_NUMBER
Rule 97    expression_list -> expression
Rule 98    expression_list -> expression expression_list
Rule 99    expression -> assign_exp
Rule 100   assign_operator -> ASSIGN
Rule 101   assign_operator -> TIMES_ASSIGN
Rule 102   assign_operator -> DIVIDE_ASSIGN
Rule 103   assign_operator -> MODULUS_ASSIGN
Rule 104   assign_operator -> PLUS_ASSIGN
Rule 105   assign_operator -> MINUS_ASSIGN
Rule 106   assign_operator -> SHIFT_LEFT_ASSIGN
Rule 107   assign_operator -> SHIFT_RIGHT_ASSIGN
Rule 108   assign_operator -> BITWISE_AND_ASSIGN
Rule 109   assign_operator -> BITWISE_XOR_ASSIGN
Rule 110   assign_operator -> BITWISE_OR_ASSIGN
Rule 111   assign_exp -> unary_exp assign_operator assign_exp
Rule 112   assign_exp -> ternary_conditional_exp
Rule 113   ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
Rule 114   ternary_conditional_exp -> logical_exp
Rule 115   logical_exp -> logical_or_exp
Rule 116   logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp
Rule 117   logical_or_exp -> logical_and_exp
Rule 118   logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp
Rule 119   logical_and_exp -> bitwise_or_exp
Rule 120   bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp
Rule 121   bitwise_or_exp -> bitwise_xor_exp
Rule 122   bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp
Rule 123   bitwise_xor_exp -> bitwise_and_exp
Rule 124   bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp
Rule 125   bitwise_and_exp -> is_equals_exp
Rule 126   is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp
Rule 127   is_equals_exp -> is_not_equals_exp
Rule 128   is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp
Rule 129   is_not_equals_exp -> greater_then_exp
Rule 130   greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp
Rule 131   greater_then_exp -> greater_equals_exp
Rule 132   greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp
Rule 133   greater_equals_exp -> less_then_exp
Rule 134   less_then_exp -> less_then_exp LESS_THEN less_equals_exp
Rule 135   less_then_exp -> less_equals_exp
Rule 136   less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp
Rule 137   less_equals_exp -> left_shift_exp
Rule 138   left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
Rule 139   left_shift_exp -> right_shift_exp
Rule 140   right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
Rule 141   right_shift_exp -> plus_exp
Rule 142   plus_exp -> plus_exp PLUS minus_exp
Rule 143   plus_exp -> minus_exp
Rule 144   minus_exp -> minus_exp MINUS times_exp
Rule 145   minus_exp -> times_exp
Rule 146   times_exp -> times_exp TIMES divide_exp
Rule 147   times_exp -> divide_exp
Rule 148   divide_exp -> divide_exp DIVIDE modulus_exp
Rule 149   divide_exp -> modulus_exp
Rule 150   modulus_exp -> modulus_exp MODULUS unary_exp
Rule 151   modulus_exp -> unary_exp
Rule 152   unary_exp -> postfix_exp
Rule 153   unary_exp -> INCREMENT unary_exp
Rule 154   unary_exp -> DECREMENT unary_exp
Rule 155   unary_exp -> unary_operator unary_exp
Rule 156   unary_exp -> cast_exp unary_exp
Rule 157   unary_exp -> sizeof_exp
Rule 158   sizeof_exp -> KEYWORD_SIZEOF unary_exp
Rule 159   sizeof_exp -> KEYWORD_SIZEOF type
Rule 160   sizeof_exp -> KEYWORD_SIZEOF pointer
Rule 161   cast_exp -> LPAREN type RPAREN
Rule 162   cast_exp -> LPAREN pointer RPAREN
Rule 163   unary_operator -> BITWISE_AND
Rule 164   unary_operator -> TIMES
Rule 165   unary_operator -> PLUS
Rule 166   unary_operator -> MINUS
Rule 167   unary_operator -> BITWISE_COMPLEMENT
Rule 168   unary_operator -> NOT
Rule 169   postfix_exp -> postfix_exp LBRACKET expression RBRACKET
Rule 170   postfix_exp -> postfix_exp LPAREN RPAREN
Rule 171   postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN
Rule 172   postfix_exp -> postfix_exp DOT IDENTIFIER
Rule 173   postfix_exp -> postfix_exp ARROW IDENTIFIER
Rule 174   postfix_exp -> postfix_exp INCREMENT
Rule 175   postfix_exp -> postfix_exp DECREMENT
Rule 176   postfix_exp -> primary_exp
Rule 177   function_call_parameters -> expression
Rule 178   function_call_parameters -> expression COMMA function_call_parameters
Rule 179   primary_exp -> identifier_exp
Rule 180   identifier_exp -> IDENTIFIER
Rule 181   identifier_exp -> string_exp
Rule 182   string_exp -> STRING
Rule 183   string_exp -> number_exp
Rule 184   number_exp -> integer_number
Rule 185   number_exp -> FLOAT_NUMBER
Rule 186   number_exp -> CHARACTER
Rule 187   number_exp -> parentesis_exp
Rule 188   return_stm -> KEYWORD_RETURN
Rule 189   return_stm -> KEYWORD_RETURN expression
Rule 190   parentesis_exp -> LPAREN expression RPAREN

Terminals, with rules where they appear

ARROW                : 173
ASSIGN               : 52 53 54 55 56 57 100
BINARY_NUMBER        : 94
BITWISE_AND          : 124 163
BITWISE_AND_ASSIGN   : 108
BITWISE_COMPLEMENT   : 167
BITWISE_OR           : 120
BITWISE_OR_ASSIGN    : 110
BITWISE_SHIFT_LEFT   : 138
BITWISE_SHIFT_RIGHT  : 140
BITWISE_XOR          : 122
BITWISE_XOR_ASSIGN   : 109
CHARACTER            : 186
COLON                : 20 113
COMMA                : 24 41 43 49 51 53 55 57 178
COMMENT              : 
DECREMENT            : 154 175
DIVIDE               : 148
DIVIDE_ASSIGN        : 102
DOT                  : 172
EQUALS_THEN          : 126
FLOAT_NUMBER         : 185
GREATER_EQUALS       : 132
GREATER_THEN         : 130
HEXADECIMAL_NUMBER   : 95
IDENTIFIER           : 18 20 37 44 45 48 49 50 51 52 53 54 55 56 57 62 63 66 67 82 83 172 173 180
INCREMENT            : 153 174
KEYWORD_BREAK        : 
KEYWORD_CASE         : 
KEYWORD_CONST        : 
KEYWORD_CONTINUE     : 
KEYWORD_DEFAULT      : 
KEYWORD_DO           : 
KEYWORD_ELSE         : 
KEYWORD_ENUM         : 
KEYWORD_EXTERN       : 79
KEYWORD_FOR          : 
KEYWORD_GOTO         : 18
KEYWORD_IF           : 
KEYWORD_REGISTER     : 81
KEYWORD_RETURN       : 188 189
KEYWORD_SIGNED       : 80
KEYWORD_SIZEOF       : 158 159 160
KEYWORD_STATIC       : 76
KEYWORD_STRUCT       : 62 63 64 65 82
KEYWORD_SWITCH       : 
KEYWORD_TYPEDEF      : 
KEYWORD_UNION        : 66 67 68 69 83
KEYWORD_UNSIGNED     : 77
KEYWORD_VOLATILE     : 78
KEYWORD_WHILE        : 
LABEL                : 
LBRACE               : 8 9 39 62 63 64 65 66 67 68 69
LBRACKET             : 32 33 36 169
LESS_EQUALS          : 136
LESS_THEN            : 134
LOGICAL_AND          : 118
LOGICAL_OR           : 116
LPAREN               : 22 23 161 162 170 171 190
MINUS                : 144 166
MINUS_ASSIGN         : 105
MODULUS              : 150
MODULUS_ASSIGN       : 103
MULTILINE_COMMENT    : 
NOT                  : 168
NOT_EQUALS           : 128
NUMBER               : 93
OCTAL_NUMBER         : 96
PLUS                 : 142 165
PLUS_ASSIGN          : 104
PRE_PROCESSOR        : 
QUESTION_MARK        : 113
RBRACE               : 8 9 39 62 63 64 65 66 67 68 69
RBRACKET             : 32 33 36 169
RPAREN               : 22 23 161 162 170 171 190
SEMICOLON            : 2 3 12 13 16 18 19 62 63 64 65 66 67 68 69 70 71 73 75
SHIFT_LEFT_ASSIGN    : 106
SHIFT_RIGHT_ASSIGN   : 107
STRING               : 182
TIMES                : 91 92 146 164
TIMES_ASSIGN         : 101
TYPE_CHAR            : 84
TYPE_DOUBLE          : 89
TYPE_FLOAT           : 88
TYPE_INT             : 85
TYPE_LONG            : 87
TYPE_SHORT           : 86
TYPE_VOID            : 90
error                : 

Nonterminals, with rules where they appear

assign_exp           : 99 111
assign_operator      : 111
bitwise_and_exp      : 122 123 124
bitwise_or_exp       : 118 119 120
bitwise_xor_exp      : 120 121 122
bracket_with_bounds  : 34 35
cast_exp             : 156
command              : 10 11
command_block        : 21
command_list         : 9 10
divide_exp           : 146 147 148
expression           : 5 40 41 52 53 97 98 113 169 177 178 189 190
expression_list      : 13 98
function             : 4
function_call_parameters : 171 178
function_signature   : 2 21
greater_equals_exp   : 130 131 132
greater_then_exp     : 128 129 130
identifier_exp       : 179
identifier_list      : 46 47 49 51 53 55 57
integer_number       : 38 184
is_equals_exp        : 124 125 126
is_not_equals_exp    : 126 127 128
label                : 17
left_shift_exp       : 136 137 138
less_equals_exp      : 134 135 136
less_then_exp        : 132 133 134
logical_and_exp      : 116 117 118
logical_exp          : 113 114
logical_or_exp       : 115 116
minus_exp            : 142 143 144
modulus_exp          : 148 149 150
multiple_bracket_signature : 28 29 31 32 34 50 51 54 55
multiple_times       : 58 91
number_exp           : 183
number_id            : 36
parentesis_exp       : 187
plus_exp             : 140 141 142
pointer              : 27 29 45 47 160 162
postfix_exp          : 152 169 170 171 172 173 174 175
primary_exp          : 176
primitive_types      : 60
program              : 2 3 4 5 6 7 0
return_stm           : 19
right_shift_exp      : 138 139 140
signature_param      : 24 24 25
signature_param_list : 22
sizeof_exp           : 157
string_exp           : 181
struct_declaration   : 6 14 72 73
struct_or_union_member_list : 63 65 67 69 71 73 75
ternary_conditional_exp : 112 113
times_exp            : 144 145 146
type                 : 26 28 44 46 58 61 159 161
type_identifier      : 22 23 30 31
type_modifier        : 61
unary_exp            : 111 150 151 153 154 155 156 158
unary_operator       : 155
union_declaration    : 7 15 74 75
user_types           : 59
value_list           : 42 43 54 55 56 57
value_list_item      : 39 41 43
variable_declaration_list : 3 12 70 71

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> .
    (2) program -> . function_signature SEMICOLON program
    (3) program -> . variable_declaration_list SEMICOLON program
    (4) program -> . function program
    (5) program -> . expression program
    (6) program -> . struct_declaration program
    (7) program -> . union_declaration program
    (22) function_signature -> . type_identifier LPAREN signature_param_list RPAREN
    (23) function_signature -> . type_identifier LPAREN RPAREN
    (46) variable_declaration_list -> . type identifier_list
    (47) variable_declaration_list -> . pointer identifier_list
    (21) function -> . function_signature command_block
    (99) expression -> . assign_exp
    (62) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (64) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE SEMICOLON
    (65) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (66) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON
    (67) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (68) union_declaration -> . KEYWORD_UNION LBRACE RBRACE SEMICOLON
    (69) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (44) type_identifier -> . type IDENTIFIER
    (45) type_identifier -> . pointer IDENTIFIER
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    $end            reduce using rule 1 (program -> .)
    KEYWORD_STRUCT  shift and go to state 13
    KEYWORD_UNION   shift and go to state 15
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    program                        shift and go to state 1
    function_signature             shift and go to state 2
    variable_declaration_list      shift and go to state 3
    function                       shift and go to state 4
    expression                     shift and go to state 5
    struct_declaration             shift and go to state 6
    union_declaration              shift and go to state 7
    type_identifier                shift and go to state 8
    type                           shift and go to state 10
    pointer                        shift and go to state 11
    assign_exp                     shift and go to state 12
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 1

    (0) S' -> program .



state 2

    (2) program -> function_signature . SEMICOLON program
    (21) function -> function_signature . command_block
    (8) command_block -> . LBRACE RBRACE
    (9) command_block -> . LBRACE command_list RBRACE

    SEMICOLON       shift and go to state 79
    LBRACE          shift and go to state 81

    command_block                  shift and go to state 80

state 3

    (3) program -> variable_declaration_list . SEMICOLON program

    SEMICOLON       shift and go to state 82


state 4

    (4) program -> function . program
    (1) program -> .
    (2) program -> . function_signature SEMICOLON program
    (3) program -> . variable_declaration_list SEMICOLON program
    (4) program -> . function program
    (5) program -> . expression program
    (6) program -> . struct_declaration program
    (7) program -> . union_declaration program
    (22) function_signature -> . type_identifier LPAREN signature_param_list RPAREN
    (23) function_signature -> . type_identifier LPAREN RPAREN
    (46) variable_declaration_list -> . type identifier_list
    (47) variable_declaration_list -> . pointer identifier_list
    (21) function -> . function_signature command_block
    (99) expression -> . assign_exp
    (62) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (64) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE SEMICOLON
    (65) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (66) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON
    (67) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (68) union_declaration -> . KEYWORD_UNION LBRACE RBRACE SEMICOLON
    (69) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (44) type_identifier -> . type IDENTIFIER
    (45) type_identifier -> . pointer IDENTIFIER
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    $end            reduce using rule 1 (program -> .)
    KEYWORD_STRUCT  shift and go to state 13
    KEYWORD_UNION   shift and go to state 15
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    function                       shift and go to state 4
    program                        shift and go to state 83
    function_signature             shift and go to state 2
    variable_declaration_list      shift and go to state 3
    expression                     shift and go to state 5
    struct_declaration             shift and go to state 6
    union_declaration              shift and go to state 7
    type_identifier                shift and go to state 8
    type                           shift and go to state 10
    pointer                        shift and go to state 11
    assign_exp                     shift and go to state 12
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 5

    (5) program -> expression . program
    (1) program -> .
    (2) program -> . function_signature SEMICOLON program
    (3) program -> . variable_declaration_list SEMICOLON program
    (4) program -> . function program
    (5) program -> . expression program
    (6) program -> . struct_declaration program
    (7) program -> . union_declaration program
    (22) function_signature -> . type_identifier LPAREN signature_param_list RPAREN
    (23) function_signature -> . type_identifier LPAREN RPAREN
    (46) variable_declaration_list -> . type identifier_list
    (47) variable_declaration_list -> . pointer identifier_list
    (21) function -> . function_signature command_block
    (99) expression -> . assign_exp
    (62) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (64) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE SEMICOLON
    (65) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (66) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON
    (67) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (68) union_declaration -> . KEYWORD_UNION LBRACE RBRACE SEMICOLON
    (69) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (44) type_identifier -> . type IDENTIFIER
    (45) type_identifier -> . pointer IDENTIFIER
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    $end            reduce using rule 1 (program -> .)
    KEYWORD_STRUCT  shift and go to state 13
    KEYWORD_UNION   shift and go to state 15
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    expression                     shift and go to state 5
    program                        shift and go to state 84
    function_signature             shift and go to state 2
    variable_declaration_list      shift and go to state 3
    function                       shift and go to state 4
    struct_declaration             shift and go to state 6
    union_declaration              shift and go to state 7
    type_identifier                shift and go to state 8
    type                           shift and go to state 10
    pointer                        shift and go to state 11
    assign_exp                     shift and go to state 12
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 6

    (6) program -> struct_declaration . program
    (1) program -> .
    (2) program -> . function_signature SEMICOLON program
    (3) program -> . variable_declaration_list SEMICOLON program
    (4) program -> . function program
    (5) program -> . expression program
    (6) program -> . struct_declaration program
    (7) program -> . union_declaration program
    (22) function_signature -> . type_identifier LPAREN signature_param_list RPAREN
    (23) function_signature -> . type_identifier LPAREN RPAREN
    (46) variable_declaration_list -> . type identifier_list
    (47) variable_declaration_list -> . pointer identifier_list
    (21) function -> . function_signature command_block
    (99) expression -> . assign_exp
    (62) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (64) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE SEMICOLON
    (65) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (66) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON
    (67) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (68) union_declaration -> . KEYWORD_UNION LBRACE RBRACE SEMICOLON
    (69) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (44) type_identifier -> . type IDENTIFIER
    (45) type_identifier -> . pointer IDENTIFIER
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    $end            reduce using rule 1 (program -> .)
    KEYWORD_STRUCT  shift and go to state 13
    KEYWORD_UNION   shift and go to state 15
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    struct_declaration             shift and go to state 6
    program                        shift and go to state 85
    function_signature             shift and go to state 2
    variable_declaration_list      shift and go to state 3
    function                       shift and go to state 4
    expression                     shift and go to state 5
    union_declaration              shift and go to state 7
    type_identifier                shift and go to state 8
    type                           shift and go to state 10
    pointer                        shift and go to state 11
    assign_exp                     shift and go to state 12
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 7

    (7) program -> union_declaration . program
    (1) program -> .
    (2) program -> . function_signature SEMICOLON program
    (3) program -> . variable_declaration_list SEMICOLON program
    (4) program -> . function program
    (5) program -> . expression program
    (6) program -> . struct_declaration program
    (7) program -> . union_declaration program
    (22) function_signature -> . type_identifier LPAREN signature_param_list RPAREN
    (23) function_signature -> . type_identifier LPAREN RPAREN
    (46) variable_declaration_list -> . type identifier_list
    (47) variable_declaration_list -> . pointer identifier_list
    (21) function -> . function_signature command_block
    (99) expression -> . assign_exp
    (62) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (64) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE SEMICOLON
    (65) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (66) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON
    (67) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (68) union_declaration -> . KEYWORD_UNION LBRACE RBRACE SEMICOLON
    (69) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (44) type_identifier -> . type IDENTIFIER
    (45) type_identifier -> . pointer IDENTIFIER
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    $end            reduce using rule 1 (program -> .)
    KEYWORD_STRUCT  shift and go to state 13
    KEYWORD_UNION   shift and go to state 15
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    union_declaration              shift and go to state 7
    program                        shift and go to state 86
    function_signature             shift and go to state 2
    variable_declaration_list      shift and go to state 3
    function                       shift and go to state 4
    expression                     shift and go to state 5
    struct_declaration             shift and go to state 6
    type_identifier                shift and go to state 8
    type                           shift and go to state 10
    pointer                        shift and go to state 11
    assign_exp                     shift and go to state 12
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 8

    (22) function_signature -> type_identifier . LPAREN signature_param_list RPAREN
    (23) function_signature -> type_identifier . LPAREN RPAREN

    LPAREN          shift and go to state 87


state 9

    (161) cast_exp -> LPAREN . type RPAREN
    (162) cast_exp -> LPAREN . pointer RPAREN
    (190) parentesis_exp -> LPAREN . expression RPAREN
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (99) expression -> . assign_exp
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    KEYWORD_STRUCT  shift and go to state 91
    KEYWORD_UNION   shift and go to state 92
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    type                           shift and go to state 88
    pointer                        shift and go to state 89
    expression                     shift and go to state 90
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18
    assign_exp                     shift and go to state 12
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 10

    (46) variable_declaration_list -> type . identifier_list
    (44) type_identifier -> type . IDENTIFIER
    (58) pointer -> type . multiple_times
    (48) identifier_list -> . IDENTIFIER
    (49) identifier_list -> . IDENTIFIER COMMA identifier_list
    (50) identifier_list -> . IDENTIFIER multiple_bracket_signature
    (51) identifier_list -> . IDENTIFIER multiple_bracket_signature COMMA identifier_list
    (52) identifier_list -> . IDENTIFIER ASSIGN expression
    (53) identifier_list -> . IDENTIFIER ASSIGN expression COMMA identifier_list
    (54) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list
    (55) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (56) identifier_list -> . IDENTIFIER ASSIGN value_list
    (57) identifier_list -> . IDENTIFIER ASSIGN value_list COMMA identifier_list
    (91) multiple_times -> . TIMES multiple_times
    (92) multiple_times -> . TIMES

    IDENTIFIER      shift and go to state 94
    TIMES           shift and go to state 96

    identifier_list                shift and go to state 93
    multiple_times                 shift and go to state 95

state 11

    (47) variable_declaration_list -> pointer . identifier_list
    (45) type_identifier -> pointer . IDENTIFIER
    (48) identifier_list -> . IDENTIFIER
    (49) identifier_list -> . IDENTIFIER COMMA identifier_list
    (50) identifier_list -> . IDENTIFIER multiple_bracket_signature
    (51) identifier_list -> . IDENTIFIER multiple_bracket_signature COMMA identifier_list
    (52) identifier_list -> . IDENTIFIER ASSIGN expression
    (53) identifier_list -> . IDENTIFIER ASSIGN expression COMMA identifier_list
    (54) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list
    (55) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (56) identifier_list -> . IDENTIFIER ASSIGN value_list
    (57) identifier_list -> . IDENTIFIER ASSIGN value_list COMMA identifier_list

    IDENTIFIER      shift and go to state 98

    identifier_list                shift and go to state 97

state 12

    (99) expression -> assign_exp .

    KEYWORD_STRUCT  reduce using rule 99 (expression -> assign_exp .)
    KEYWORD_UNION   reduce using rule 99 (expression -> assign_exp .)
    TYPE_CHAR       reduce using rule 99 (expression -> assign_exp .)
    TYPE_INT        reduce using rule 99 (expression -> assign_exp .)
    TYPE_SHORT      reduce using rule 99 (expression -> assign_exp .)
    TYPE_LONG       reduce using rule 99 (expression -> assign_exp .)
    TYPE_FLOAT      reduce using rule 99 (expression -> assign_exp .)
    TYPE_DOUBLE     reduce using rule 99 (expression -> assign_exp .)
    TYPE_VOID       reduce using rule 99 (expression -> assign_exp .)
    KEYWORD_STATIC  reduce using rule 99 (expression -> assign_exp .)
    KEYWORD_UNSIGNED reduce using rule 99 (expression -> assign_exp .)
    KEYWORD_VOLATILE reduce using rule 99 (expression -> assign_exp .)
    KEYWORD_EXTERN  reduce using rule 99 (expression -> assign_exp .)
    KEYWORD_SIGNED  reduce using rule 99 (expression -> assign_exp .)
    KEYWORD_REGISTER reduce using rule 99 (expression -> assign_exp .)
    INCREMENT       reduce using rule 99 (expression -> assign_exp .)
    DECREMENT       reduce using rule 99 (expression -> assign_exp .)
    BITWISE_AND     reduce using rule 99 (expression -> assign_exp .)
    TIMES           reduce using rule 99 (expression -> assign_exp .)
    PLUS            reduce using rule 99 (expression -> assign_exp .)
    MINUS           reduce using rule 99 (expression -> assign_exp .)
    BITWISE_COMPLEMENT reduce using rule 99 (expression -> assign_exp .)
    NOT             reduce using rule 99 (expression -> assign_exp .)
    LPAREN          reduce using rule 99 (expression -> assign_exp .)
    KEYWORD_SIZEOF  reduce using rule 99 (expression -> assign_exp .)
    IDENTIFIER      reduce using rule 99 (expression -> assign_exp .)
    STRING          reduce using rule 99 (expression -> assign_exp .)
    FLOAT_NUMBER    reduce using rule 99 (expression -> assign_exp .)
    CHARACTER       reduce using rule 99 (expression -> assign_exp .)
    NUMBER          reduce using rule 99 (expression -> assign_exp .)
    BINARY_NUMBER   reduce using rule 99 (expression -> assign_exp .)
    HEXADECIMAL_NUMBER reduce using rule 99 (expression -> assign_exp .)
    OCTAL_NUMBER    reduce using rule 99 (expression -> assign_exp .)
    $end            reduce using rule 99 (expression -> assign_exp .)
    RPAREN          reduce using rule 99 (expression -> assign_exp .)
    SEMICOLON       reduce using rule 99 (expression -> assign_exp .)
    RBRACKET        reduce using rule 99 (expression -> assign_exp .)
    COMMA           reduce using rule 99 (expression -> assign_exp .)
    COLON           reduce using rule 99 (expression -> assign_exp .)
    RBRACE          reduce using rule 99 (expression -> assign_exp .)


state 13

    (62) struct_declaration -> KEYWORD_STRUCT . IDENTIFIER LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> KEYWORD_STRUCT . IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (64) struct_declaration -> KEYWORD_STRUCT . LBRACE RBRACE SEMICOLON
    (65) struct_declaration -> KEYWORD_STRUCT . LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (82) user_types -> KEYWORD_STRUCT . IDENTIFIER

    IDENTIFIER      shift and go to state 99
    LBRACE          shift and go to state 100


state 14

    (180) identifier_exp -> IDENTIFIER .

    LBRACKET        reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    LPAREN          reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    DOT             reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    ARROW           reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    INCREMENT       reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    DECREMENT       reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    ASSIGN          reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    MODULUS_ASSIGN  reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    SHIFT_LEFT_ASSIGN reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_AND_ASSIGN reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_XOR_ASSIGN reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_OR_ASSIGN reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    MODULUS         reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    TIMES           reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    MINUS           reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    PLUS            reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_SHIFT_RIGHT reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_SHIFT_LEFT reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    LESS_THEN       reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    GREATER_THEN    reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    EQUALS_THEN     reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_AND     reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_XOR     reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_OR      reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    QUESTION_MARK   reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    KEYWORD_STRUCT  reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    KEYWORD_UNION   reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    TYPE_CHAR       reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    TYPE_INT        reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    TYPE_SHORT      reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    TYPE_LONG       reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    TYPE_FLOAT      reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    TYPE_DOUBLE     reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    TYPE_VOID       reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    KEYWORD_STATIC  reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    KEYWORD_UNSIGNED reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    KEYWORD_VOLATILE reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    KEYWORD_EXTERN  reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    KEYWORD_SIGNED  reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    KEYWORD_REGISTER reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_COMPLEMENT reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    NOT             reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    KEYWORD_SIZEOF  reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    STRING          reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    FLOAT_NUMBER    reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    CHARACTER       reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    NUMBER          reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BINARY_NUMBER   reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    HEXADECIMAL_NUMBER reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    OCTAL_NUMBER    reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    $end            reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    RPAREN          reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    RBRACKET        reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    COMMA           reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    COLON           reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    RBRACE          reduce using rule 180 (identifier_exp -> IDENTIFIER .)


state 15

    (66) union_declaration -> KEYWORD_UNION . IDENTIFIER LBRACE RBRACE SEMICOLON
    (67) union_declaration -> KEYWORD_UNION . IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (68) union_declaration -> KEYWORD_UNION . LBRACE RBRACE SEMICOLON
    (69) union_declaration -> KEYWORD_UNION . LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (83) user_types -> KEYWORD_UNION . IDENTIFIER

    IDENTIFIER      shift and go to state 101
    LBRACE          shift and go to state 102


state 16

    (59) type -> user_types .

    IDENTIFIER      reduce using rule 59 (type -> user_types .)
    TIMES           reduce using rule 59 (type -> user_types .)
    RPAREN          reduce using rule 59 (type -> user_types .)
    ASSIGN          reduce using rule 59 (type -> user_types .)
    TIMES_ASSIGN    reduce using rule 59 (type -> user_types .)
    DIVIDE_ASSIGN   reduce using rule 59 (type -> user_types .)
    MODULUS_ASSIGN  reduce using rule 59 (type -> user_types .)
    PLUS_ASSIGN     reduce using rule 59 (type -> user_types .)
    MINUS_ASSIGN    reduce using rule 59 (type -> user_types .)
    SHIFT_LEFT_ASSIGN reduce using rule 59 (type -> user_types .)
    SHIFT_RIGHT_ASSIGN reduce using rule 59 (type -> user_types .)
    BITWISE_AND_ASSIGN reduce using rule 59 (type -> user_types .)
    BITWISE_XOR_ASSIGN reduce using rule 59 (type -> user_types .)
    BITWISE_OR_ASSIGN reduce using rule 59 (type -> user_types .)
    MODULUS         reduce using rule 59 (type -> user_types .)
    DIVIDE          reduce using rule 59 (type -> user_types .)
    MINUS           reduce using rule 59 (type -> user_types .)
    PLUS            reduce using rule 59 (type -> user_types .)
    BITWISE_SHIFT_RIGHT reduce using rule 59 (type -> user_types .)
    BITWISE_SHIFT_LEFT reduce using rule 59 (type -> user_types .)
    LESS_EQUALS     reduce using rule 59 (type -> user_types .)
    LESS_THEN       reduce using rule 59 (type -> user_types .)
    GREATER_EQUALS  reduce using rule 59 (type -> user_types .)
    GREATER_THEN    reduce using rule 59 (type -> user_types .)
    NOT_EQUALS      reduce using rule 59 (type -> user_types .)
    EQUALS_THEN     reduce using rule 59 (type -> user_types .)
    BITWISE_AND     reduce using rule 59 (type -> user_types .)
    BITWISE_XOR     reduce using rule 59 (type -> user_types .)
    BITWISE_OR      reduce using rule 59 (type -> user_types .)
    LOGICAL_AND     reduce using rule 59 (type -> user_types .)
    LOGICAL_OR      reduce using rule 59 (type -> user_types .)
    QUESTION_MARK   reduce using rule 59 (type -> user_types .)
    KEYWORD_STRUCT  reduce using rule 59 (type -> user_types .)
    KEYWORD_UNION   reduce using rule 59 (type -> user_types .)
    TYPE_CHAR       reduce using rule 59 (type -> user_types .)
    TYPE_INT        reduce using rule 59 (type -> user_types .)
    TYPE_SHORT      reduce using rule 59 (type -> user_types .)
    TYPE_LONG       reduce using rule 59 (type -> user_types .)
    TYPE_FLOAT      reduce using rule 59 (type -> user_types .)
    TYPE_DOUBLE     reduce using rule 59 (type -> user_types .)
    TYPE_VOID       reduce using rule 59 (type -> user_types .)
    KEYWORD_STATIC  reduce using rule 59 (type -> user_types .)
    KEYWORD_UNSIGNED reduce using rule 59 (type -> user_types .)
    KEYWORD_VOLATILE reduce using rule 59 (type -> user_types .)
    KEYWORD_EXTERN  reduce using rule 59 (type -> user_types .)
    KEYWORD_SIGNED  reduce using rule 59 (type -> user_types .)
    KEYWORD_REGISTER reduce using rule 59 (type -> user_types .)
    INCREMENT       reduce using rule 59 (type -> user_types .)
    DECREMENT       reduce using rule 59 (type -> user_types .)
    BITWISE_COMPLEMENT reduce using rule 59 (type -> user_types .)
    NOT             reduce using rule 59 (type -> user_types .)
    LPAREN          reduce using rule 59 (type -> user_types .)
    KEYWORD_SIZEOF  reduce using rule 59 (type -> user_types .)
    STRING          reduce using rule 59 (type -> user_types .)
    FLOAT_NUMBER    reduce using rule 59 (type -> user_types .)
    CHARACTER       reduce using rule 59 (type -> user_types .)
    NUMBER          reduce using rule 59 (type -> user_types .)
    BINARY_NUMBER   reduce using rule 59 (type -> user_types .)
    HEXADECIMAL_NUMBER reduce using rule 59 (type -> user_types .)
    OCTAL_NUMBER    reduce using rule 59 (type -> user_types .)
    $end            reduce using rule 59 (type -> user_types .)
    SEMICOLON       reduce using rule 59 (type -> user_types .)
    RBRACKET        reduce using rule 59 (type -> user_types .)
    COMMA           reduce using rule 59 (type -> user_types .)
    COLON           reduce using rule 59 (type -> user_types .)
    RBRACE          reduce using rule 59 (type -> user_types .)
    LBRACKET        reduce using rule 59 (type -> user_types .)


state 17

    (60) type -> primitive_types .

    IDENTIFIER      reduce using rule 60 (type -> primitive_types .)
    TIMES           reduce using rule 60 (type -> primitive_types .)
    RPAREN          reduce using rule 60 (type -> primitive_types .)
    ASSIGN          reduce using rule 60 (type -> primitive_types .)
    TIMES_ASSIGN    reduce using rule 60 (type -> primitive_types .)
    DIVIDE_ASSIGN   reduce using rule 60 (type -> primitive_types .)
    MODULUS_ASSIGN  reduce using rule 60 (type -> primitive_types .)
    PLUS_ASSIGN     reduce using rule 60 (type -> primitive_types .)
    MINUS_ASSIGN    reduce using rule 60 (type -> primitive_types .)
    SHIFT_LEFT_ASSIGN reduce using rule 60 (type -> primitive_types .)
    SHIFT_RIGHT_ASSIGN reduce using rule 60 (type -> primitive_types .)
    BITWISE_AND_ASSIGN reduce using rule 60 (type -> primitive_types .)
    BITWISE_XOR_ASSIGN reduce using rule 60 (type -> primitive_types .)
    BITWISE_OR_ASSIGN reduce using rule 60 (type -> primitive_types .)
    MODULUS         reduce using rule 60 (type -> primitive_types .)
    DIVIDE          reduce using rule 60 (type -> primitive_types .)
    MINUS           reduce using rule 60 (type -> primitive_types .)
    PLUS            reduce using rule 60 (type -> primitive_types .)
    BITWISE_SHIFT_RIGHT reduce using rule 60 (type -> primitive_types .)
    BITWISE_SHIFT_LEFT reduce using rule 60 (type -> primitive_types .)
    LESS_EQUALS     reduce using rule 60 (type -> primitive_types .)
    LESS_THEN       reduce using rule 60 (type -> primitive_types .)
    GREATER_EQUALS  reduce using rule 60 (type -> primitive_types .)
    GREATER_THEN    reduce using rule 60 (type -> primitive_types .)
    NOT_EQUALS      reduce using rule 60 (type -> primitive_types .)
    EQUALS_THEN     reduce using rule 60 (type -> primitive_types .)
    BITWISE_AND     reduce using rule 60 (type -> primitive_types .)
    BITWISE_XOR     reduce using rule 60 (type -> primitive_types .)
    BITWISE_OR      reduce using rule 60 (type -> primitive_types .)
    LOGICAL_AND     reduce using rule 60 (type -> primitive_types .)
    LOGICAL_OR      reduce using rule 60 (type -> primitive_types .)
    QUESTION_MARK   reduce using rule 60 (type -> primitive_types .)
    KEYWORD_STRUCT  reduce using rule 60 (type -> primitive_types .)
    KEYWORD_UNION   reduce using rule 60 (type -> primitive_types .)
    TYPE_CHAR       reduce using rule 60 (type -> primitive_types .)
    TYPE_INT        reduce using rule 60 (type -> primitive_types .)
    TYPE_SHORT      reduce using rule 60 (type -> primitive_types .)
    TYPE_LONG       reduce using rule 60 (type -> primitive_types .)
    TYPE_FLOAT      reduce using rule 60 (type -> primitive_types .)
    TYPE_DOUBLE     reduce using rule 60 (type -> primitive_types .)
    TYPE_VOID       reduce using rule 60 (type -> primitive_types .)
    KEYWORD_STATIC  reduce using rule 60 (type -> primitive_types .)
    KEYWORD_UNSIGNED reduce using rule 60 (type -> primitive_types .)
    KEYWORD_VOLATILE reduce using rule 60 (type -> primitive_types .)
    KEYWORD_EXTERN  reduce using rule 60 (type -> primitive_types .)
    KEYWORD_SIGNED  reduce using rule 60 (type -> primitive_types .)
    KEYWORD_REGISTER reduce using rule 60 (type -> primitive_types .)
    INCREMENT       reduce using rule 60 (type -> primitive_types .)
    DECREMENT       reduce using rule 60 (type -> primitive_types .)
    BITWISE_COMPLEMENT reduce using rule 60 (type -> primitive_types .)
    NOT             reduce using rule 60 (type -> primitive_types .)
    LPAREN          reduce using rule 60 (type -> primitive_types .)
    KEYWORD_SIZEOF  reduce using rule 60 (type -> primitive_types .)
    STRING          reduce using rule 60 (type -> primitive_types .)
    FLOAT_NUMBER    reduce using rule 60 (type -> primitive_types .)
    CHARACTER       reduce using rule 60 (type -> primitive_types .)
    NUMBER          reduce using rule 60 (type -> primitive_types .)
    BINARY_NUMBER   reduce using rule 60 (type -> primitive_types .)
    HEXADECIMAL_NUMBER reduce using rule 60 (type -> primitive_types .)
    OCTAL_NUMBER    reduce using rule 60 (type -> primitive_types .)
    $end            reduce using rule 60 (type -> primitive_types .)
    SEMICOLON       reduce using rule 60 (type -> primitive_types .)
    RBRACKET        reduce using rule 60 (type -> primitive_types .)
    COMMA           reduce using rule 60 (type -> primitive_types .)
    COLON           reduce using rule 60 (type -> primitive_types .)
    RBRACE          reduce using rule 60 (type -> primitive_types .)
    LBRACKET        reduce using rule 60 (type -> primitive_types .)


state 18

    (61) type -> type_modifier . type
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER

    KEYWORD_STRUCT  shift and go to state 91
    KEYWORD_UNION   shift and go to state 92
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33

    type_modifier                  shift and go to state 18
    type                           shift and go to state 103
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17

state 19

    (111) assign_exp -> unary_exp . assign_operator assign_exp
    (151) modulus_exp -> unary_exp .
    (100) assign_operator -> . ASSIGN
    (101) assign_operator -> . TIMES_ASSIGN
    (102) assign_operator -> . DIVIDE_ASSIGN
    (103) assign_operator -> . MODULUS_ASSIGN
    (104) assign_operator -> . PLUS_ASSIGN
    (105) assign_operator -> . MINUS_ASSIGN
    (106) assign_operator -> . SHIFT_LEFT_ASSIGN
    (107) assign_operator -> . SHIFT_RIGHT_ASSIGN
    (108) assign_operator -> . BITWISE_AND_ASSIGN
    (109) assign_operator -> . BITWISE_XOR_ASSIGN
    (110) assign_operator -> . BITWISE_OR_ASSIGN

    MODULUS         reduce using rule 151 (modulus_exp -> unary_exp .)
    DIVIDE          reduce using rule 151 (modulus_exp -> unary_exp .)
    TIMES           reduce using rule 151 (modulus_exp -> unary_exp .)
    MINUS           reduce using rule 151 (modulus_exp -> unary_exp .)
    PLUS            reduce using rule 151 (modulus_exp -> unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 151 (modulus_exp -> unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 151 (modulus_exp -> unary_exp .)
    LESS_EQUALS     reduce using rule 151 (modulus_exp -> unary_exp .)
    LESS_THEN       reduce using rule 151 (modulus_exp -> unary_exp .)
    GREATER_EQUALS  reduce using rule 151 (modulus_exp -> unary_exp .)
    GREATER_THEN    reduce using rule 151 (modulus_exp -> unary_exp .)
    NOT_EQUALS      reduce using rule 151 (modulus_exp -> unary_exp .)
    EQUALS_THEN     reduce using rule 151 (modulus_exp -> unary_exp .)
    BITWISE_AND     reduce using rule 151 (modulus_exp -> unary_exp .)
    BITWISE_XOR     reduce using rule 151 (modulus_exp -> unary_exp .)
    BITWISE_OR      reduce using rule 151 (modulus_exp -> unary_exp .)
    LOGICAL_AND     reduce using rule 151 (modulus_exp -> unary_exp .)
    LOGICAL_OR      reduce using rule 151 (modulus_exp -> unary_exp .)
    QUESTION_MARK   reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_STRUCT  reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_UNION   reduce using rule 151 (modulus_exp -> unary_exp .)
    TYPE_CHAR       reduce using rule 151 (modulus_exp -> unary_exp .)
    TYPE_INT        reduce using rule 151 (modulus_exp -> unary_exp .)
    TYPE_SHORT      reduce using rule 151 (modulus_exp -> unary_exp .)
    TYPE_LONG       reduce using rule 151 (modulus_exp -> unary_exp .)
    TYPE_FLOAT      reduce using rule 151 (modulus_exp -> unary_exp .)
    TYPE_DOUBLE     reduce using rule 151 (modulus_exp -> unary_exp .)
    TYPE_VOID       reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_STATIC  reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_UNSIGNED reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_VOLATILE reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_EXTERN  reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_SIGNED  reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_REGISTER reduce using rule 151 (modulus_exp -> unary_exp .)
    INCREMENT       reduce using rule 151 (modulus_exp -> unary_exp .)
    DECREMENT       reduce using rule 151 (modulus_exp -> unary_exp .)
    BITWISE_COMPLEMENT reduce using rule 151 (modulus_exp -> unary_exp .)
    NOT             reduce using rule 151 (modulus_exp -> unary_exp .)
    LPAREN          reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_SIZEOF  reduce using rule 151 (modulus_exp -> unary_exp .)
    IDENTIFIER      reduce using rule 151 (modulus_exp -> unary_exp .)
    STRING          reduce using rule 151 (modulus_exp -> unary_exp .)
    FLOAT_NUMBER    reduce using rule 151 (modulus_exp -> unary_exp .)
    CHARACTER       reduce using rule 151 (modulus_exp -> unary_exp .)
    NUMBER          reduce using rule 151 (modulus_exp -> unary_exp .)
    BINARY_NUMBER   reduce using rule 151 (modulus_exp -> unary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 151 (modulus_exp -> unary_exp .)
    OCTAL_NUMBER    reduce using rule 151 (modulus_exp -> unary_exp .)
    $end            reduce using rule 151 (modulus_exp -> unary_exp .)
    RPAREN          reduce using rule 151 (modulus_exp -> unary_exp .)
    SEMICOLON       reduce using rule 151 (modulus_exp -> unary_exp .)
    RBRACKET        reduce using rule 151 (modulus_exp -> unary_exp .)
    COMMA           reduce using rule 151 (modulus_exp -> unary_exp .)
    COLON           reduce using rule 151 (modulus_exp -> unary_exp .)
    RBRACE          reduce using rule 151 (modulus_exp -> unary_exp .)
    ASSIGN          shift and go to state 105
    TIMES_ASSIGN    shift and go to state 106
    DIVIDE_ASSIGN   shift and go to state 107
    MODULUS_ASSIGN  shift and go to state 108
    PLUS_ASSIGN     shift and go to state 109
    MINUS_ASSIGN    shift and go to state 110
    SHIFT_LEFT_ASSIGN shift and go to state 111
    SHIFT_RIGHT_ASSIGN shift and go to state 112
    BITWISE_AND_ASSIGN shift and go to state 113
    BITWISE_XOR_ASSIGN shift and go to state 114
    BITWISE_OR_ASSIGN shift and go to state 115

    assign_operator                shift and go to state 104

state 20

    (112) assign_exp -> ternary_conditional_exp .

    KEYWORD_STRUCT  reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    KEYWORD_UNION   reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    TYPE_CHAR       reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    TYPE_INT        reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    TYPE_SHORT      reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    TYPE_LONG       reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    TYPE_FLOAT      reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    TYPE_DOUBLE     reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    TYPE_VOID       reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    KEYWORD_STATIC  reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    KEYWORD_UNSIGNED reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    KEYWORD_VOLATILE reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    KEYWORD_EXTERN  reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    KEYWORD_SIGNED  reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    KEYWORD_REGISTER reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    INCREMENT       reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    DECREMENT       reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    BITWISE_AND     reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    TIMES           reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    PLUS            reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    MINUS           reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    BITWISE_COMPLEMENT reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    NOT             reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    LPAREN          reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    KEYWORD_SIZEOF  reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    IDENTIFIER      reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    STRING          reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    FLOAT_NUMBER    reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    CHARACTER       reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    NUMBER          reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    BINARY_NUMBER   reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    HEXADECIMAL_NUMBER reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    OCTAL_NUMBER    reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    $end            reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    RPAREN          reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    SEMICOLON       reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    RBRACKET        reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    COMMA           reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    COLON           reduce using rule 112 (assign_exp -> ternary_conditional_exp .)
    RBRACE          reduce using rule 112 (assign_exp -> ternary_conditional_exp .)


state 21

    (84) primitive_types -> TYPE_CHAR .

    IDENTIFIER      reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    TIMES           reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    RPAREN          reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    ASSIGN          reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    TIMES_ASSIGN    reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    DIVIDE_ASSIGN   reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    MODULUS_ASSIGN  reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    PLUS_ASSIGN     reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    MINUS_ASSIGN    reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    SHIFT_LEFT_ASSIGN reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    SHIFT_RIGHT_ASSIGN reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    BITWISE_AND_ASSIGN reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    BITWISE_XOR_ASSIGN reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    BITWISE_OR_ASSIGN reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    MODULUS         reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    DIVIDE          reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    MINUS           reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    PLUS            reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    BITWISE_SHIFT_RIGHT reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    BITWISE_SHIFT_LEFT reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    LESS_EQUALS     reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    LESS_THEN       reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    GREATER_EQUALS  reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    GREATER_THEN    reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    NOT_EQUALS      reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    EQUALS_THEN     reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    BITWISE_AND     reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    BITWISE_XOR     reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    BITWISE_OR      reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    LOGICAL_AND     reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    LOGICAL_OR      reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    QUESTION_MARK   reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    KEYWORD_STRUCT  reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    KEYWORD_UNION   reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    TYPE_CHAR       reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    TYPE_INT        reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    TYPE_SHORT      reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    TYPE_LONG       reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    TYPE_FLOAT      reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    TYPE_DOUBLE     reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    TYPE_VOID       reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    KEYWORD_STATIC  reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    KEYWORD_UNSIGNED reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    KEYWORD_VOLATILE reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    KEYWORD_EXTERN  reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    KEYWORD_SIGNED  reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    KEYWORD_REGISTER reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    INCREMENT       reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    DECREMENT       reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    BITWISE_COMPLEMENT reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    NOT             reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    LPAREN          reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    KEYWORD_SIZEOF  reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    STRING          reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    FLOAT_NUMBER    reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    CHARACTER       reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    NUMBER          reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    BINARY_NUMBER   reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    HEXADECIMAL_NUMBER reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    OCTAL_NUMBER    reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    $end            reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    SEMICOLON       reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    RBRACKET        reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    COMMA           reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    COLON           reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    RBRACE          reduce using rule 84 (primitive_types -> TYPE_CHAR .)
    LBRACKET        reduce using rule 84 (primitive_types -> TYPE_CHAR .)


state 22

    (85) primitive_types -> TYPE_INT .

    IDENTIFIER      reduce using rule 85 (primitive_types -> TYPE_INT .)
    TIMES           reduce using rule 85 (primitive_types -> TYPE_INT .)
    RPAREN          reduce using rule 85 (primitive_types -> TYPE_INT .)
    ASSIGN          reduce using rule 85 (primitive_types -> TYPE_INT .)
    TIMES_ASSIGN    reduce using rule 85 (primitive_types -> TYPE_INT .)
    DIVIDE_ASSIGN   reduce using rule 85 (primitive_types -> TYPE_INT .)
    MODULUS_ASSIGN  reduce using rule 85 (primitive_types -> TYPE_INT .)
    PLUS_ASSIGN     reduce using rule 85 (primitive_types -> TYPE_INT .)
    MINUS_ASSIGN    reduce using rule 85 (primitive_types -> TYPE_INT .)
    SHIFT_LEFT_ASSIGN reduce using rule 85 (primitive_types -> TYPE_INT .)
    SHIFT_RIGHT_ASSIGN reduce using rule 85 (primitive_types -> TYPE_INT .)
    BITWISE_AND_ASSIGN reduce using rule 85 (primitive_types -> TYPE_INT .)
    BITWISE_XOR_ASSIGN reduce using rule 85 (primitive_types -> TYPE_INT .)
    BITWISE_OR_ASSIGN reduce using rule 85 (primitive_types -> TYPE_INT .)
    MODULUS         reduce using rule 85 (primitive_types -> TYPE_INT .)
    DIVIDE          reduce using rule 85 (primitive_types -> TYPE_INT .)
    MINUS           reduce using rule 85 (primitive_types -> TYPE_INT .)
    PLUS            reduce using rule 85 (primitive_types -> TYPE_INT .)
    BITWISE_SHIFT_RIGHT reduce using rule 85 (primitive_types -> TYPE_INT .)
    BITWISE_SHIFT_LEFT reduce using rule 85 (primitive_types -> TYPE_INT .)
    LESS_EQUALS     reduce using rule 85 (primitive_types -> TYPE_INT .)
    LESS_THEN       reduce using rule 85 (primitive_types -> TYPE_INT .)
    GREATER_EQUALS  reduce using rule 85 (primitive_types -> TYPE_INT .)
    GREATER_THEN    reduce using rule 85 (primitive_types -> TYPE_INT .)
    NOT_EQUALS      reduce using rule 85 (primitive_types -> TYPE_INT .)
    EQUALS_THEN     reduce using rule 85 (primitive_types -> TYPE_INT .)
    BITWISE_AND     reduce using rule 85 (primitive_types -> TYPE_INT .)
    BITWISE_XOR     reduce using rule 85 (primitive_types -> TYPE_INT .)
    BITWISE_OR      reduce using rule 85 (primitive_types -> TYPE_INT .)
    LOGICAL_AND     reduce using rule 85 (primitive_types -> TYPE_INT .)
    LOGICAL_OR      reduce using rule 85 (primitive_types -> TYPE_INT .)
    QUESTION_MARK   reduce using rule 85 (primitive_types -> TYPE_INT .)
    KEYWORD_STRUCT  reduce using rule 85 (primitive_types -> TYPE_INT .)
    KEYWORD_UNION   reduce using rule 85 (primitive_types -> TYPE_INT .)
    TYPE_CHAR       reduce using rule 85 (primitive_types -> TYPE_INT .)
    TYPE_INT        reduce using rule 85 (primitive_types -> TYPE_INT .)
    TYPE_SHORT      reduce using rule 85 (primitive_types -> TYPE_INT .)
    TYPE_LONG       reduce using rule 85 (primitive_types -> TYPE_INT .)
    TYPE_FLOAT      reduce using rule 85 (primitive_types -> TYPE_INT .)
    TYPE_DOUBLE     reduce using rule 85 (primitive_types -> TYPE_INT .)
    TYPE_VOID       reduce using rule 85 (primitive_types -> TYPE_INT .)
    KEYWORD_STATIC  reduce using rule 85 (primitive_types -> TYPE_INT .)
    KEYWORD_UNSIGNED reduce using rule 85 (primitive_types -> TYPE_INT .)
    KEYWORD_VOLATILE reduce using rule 85 (primitive_types -> TYPE_INT .)
    KEYWORD_EXTERN  reduce using rule 85 (primitive_types -> TYPE_INT .)
    KEYWORD_SIGNED  reduce using rule 85 (primitive_types -> TYPE_INT .)
    KEYWORD_REGISTER reduce using rule 85 (primitive_types -> TYPE_INT .)
    INCREMENT       reduce using rule 85 (primitive_types -> TYPE_INT .)
    DECREMENT       reduce using rule 85 (primitive_types -> TYPE_INT .)
    BITWISE_COMPLEMENT reduce using rule 85 (primitive_types -> TYPE_INT .)
    NOT             reduce using rule 85 (primitive_types -> TYPE_INT .)
    LPAREN          reduce using rule 85 (primitive_types -> TYPE_INT .)
    KEYWORD_SIZEOF  reduce using rule 85 (primitive_types -> TYPE_INT .)
    STRING          reduce using rule 85 (primitive_types -> TYPE_INT .)
    FLOAT_NUMBER    reduce using rule 85 (primitive_types -> TYPE_INT .)
    CHARACTER       reduce using rule 85 (primitive_types -> TYPE_INT .)
    NUMBER          reduce using rule 85 (primitive_types -> TYPE_INT .)
    BINARY_NUMBER   reduce using rule 85 (primitive_types -> TYPE_INT .)
    HEXADECIMAL_NUMBER reduce using rule 85 (primitive_types -> TYPE_INT .)
    OCTAL_NUMBER    reduce using rule 85 (primitive_types -> TYPE_INT .)
    $end            reduce using rule 85 (primitive_types -> TYPE_INT .)
    SEMICOLON       reduce using rule 85 (primitive_types -> TYPE_INT .)
    RBRACKET        reduce using rule 85 (primitive_types -> TYPE_INT .)
    COMMA           reduce using rule 85 (primitive_types -> TYPE_INT .)
    COLON           reduce using rule 85 (primitive_types -> TYPE_INT .)
    RBRACE          reduce using rule 85 (primitive_types -> TYPE_INT .)
    LBRACKET        reduce using rule 85 (primitive_types -> TYPE_INT .)


state 23

    (86) primitive_types -> TYPE_SHORT .

    IDENTIFIER      reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    TIMES           reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    RPAREN          reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    ASSIGN          reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    TIMES_ASSIGN    reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    DIVIDE_ASSIGN   reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    MODULUS_ASSIGN  reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    PLUS_ASSIGN     reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    MINUS_ASSIGN    reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    SHIFT_LEFT_ASSIGN reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    SHIFT_RIGHT_ASSIGN reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    BITWISE_AND_ASSIGN reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    BITWISE_XOR_ASSIGN reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    BITWISE_OR_ASSIGN reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    MODULUS         reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    DIVIDE          reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    MINUS           reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    PLUS            reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    BITWISE_SHIFT_RIGHT reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    BITWISE_SHIFT_LEFT reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    LESS_EQUALS     reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    LESS_THEN       reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    GREATER_EQUALS  reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    GREATER_THEN    reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    NOT_EQUALS      reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    EQUALS_THEN     reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    BITWISE_AND     reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    BITWISE_XOR     reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    BITWISE_OR      reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    LOGICAL_AND     reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    LOGICAL_OR      reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    QUESTION_MARK   reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    KEYWORD_STRUCT  reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    KEYWORD_UNION   reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    TYPE_CHAR       reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    TYPE_INT        reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    TYPE_SHORT      reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    TYPE_LONG       reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    TYPE_FLOAT      reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    TYPE_DOUBLE     reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    TYPE_VOID       reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    KEYWORD_STATIC  reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    KEYWORD_UNSIGNED reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    KEYWORD_VOLATILE reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    KEYWORD_EXTERN  reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    KEYWORD_SIGNED  reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    KEYWORD_REGISTER reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    INCREMENT       reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    DECREMENT       reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    BITWISE_COMPLEMENT reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    NOT             reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    LPAREN          reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    KEYWORD_SIZEOF  reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    STRING          reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    FLOAT_NUMBER    reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    CHARACTER       reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    NUMBER          reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    BINARY_NUMBER   reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    HEXADECIMAL_NUMBER reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    OCTAL_NUMBER    reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    $end            reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    SEMICOLON       reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    RBRACKET        reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    COMMA           reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    COLON           reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    RBRACE          reduce using rule 86 (primitive_types -> TYPE_SHORT .)
    LBRACKET        reduce using rule 86 (primitive_types -> TYPE_SHORT .)


state 24

    (87) primitive_types -> TYPE_LONG .

    IDENTIFIER      reduce using rule 87 (primitive_types -> TYPE_LONG .)
    TIMES           reduce using rule 87 (primitive_types -> TYPE_LONG .)
    RPAREN          reduce using rule 87 (primitive_types -> TYPE_LONG .)
    ASSIGN          reduce using rule 87 (primitive_types -> TYPE_LONG .)
    TIMES_ASSIGN    reduce using rule 87 (primitive_types -> TYPE_LONG .)
    DIVIDE_ASSIGN   reduce using rule 87 (primitive_types -> TYPE_LONG .)
    MODULUS_ASSIGN  reduce using rule 87 (primitive_types -> TYPE_LONG .)
    PLUS_ASSIGN     reduce using rule 87 (primitive_types -> TYPE_LONG .)
    MINUS_ASSIGN    reduce using rule 87 (primitive_types -> TYPE_LONG .)
    SHIFT_LEFT_ASSIGN reduce using rule 87 (primitive_types -> TYPE_LONG .)
    SHIFT_RIGHT_ASSIGN reduce using rule 87 (primitive_types -> TYPE_LONG .)
    BITWISE_AND_ASSIGN reduce using rule 87 (primitive_types -> TYPE_LONG .)
    BITWISE_XOR_ASSIGN reduce using rule 87 (primitive_types -> TYPE_LONG .)
    BITWISE_OR_ASSIGN reduce using rule 87 (primitive_types -> TYPE_LONG .)
    MODULUS         reduce using rule 87 (primitive_types -> TYPE_LONG .)
    DIVIDE          reduce using rule 87 (primitive_types -> TYPE_LONG .)
    MINUS           reduce using rule 87 (primitive_types -> TYPE_LONG .)
    PLUS            reduce using rule 87 (primitive_types -> TYPE_LONG .)
    BITWISE_SHIFT_RIGHT reduce using rule 87 (primitive_types -> TYPE_LONG .)
    BITWISE_SHIFT_LEFT reduce using rule 87 (primitive_types -> TYPE_LONG .)
    LESS_EQUALS     reduce using rule 87 (primitive_types -> TYPE_LONG .)
    LESS_THEN       reduce using rule 87 (primitive_types -> TYPE_LONG .)
    GREATER_EQUALS  reduce using rule 87 (primitive_types -> TYPE_LONG .)
    GREATER_THEN    reduce using rule 87 (primitive_types -> TYPE_LONG .)
    NOT_EQUALS      reduce using rule 87 (primitive_types -> TYPE_LONG .)
    EQUALS_THEN     reduce using rule 87 (primitive_types -> TYPE_LONG .)
    BITWISE_AND     reduce using rule 87 (primitive_types -> TYPE_LONG .)
    BITWISE_XOR     reduce using rule 87 (primitive_types -> TYPE_LONG .)
    BITWISE_OR      reduce using rule 87 (primitive_types -> TYPE_LONG .)
    LOGICAL_AND     reduce using rule 87 (primitive_types -> TYPE_LONG .)
    LOGICAL_OR      reduce using rule 87 (primitive_types -> TYPE_LONG .)
    QUESTION_MARK   reduce using rule 87 (primitive_types -> TYPE_LONG .)
    KEYWORD_STRUCT  reduce using rule 87 (primitive_types -> TYPE_LONG .)
    KEYWORD_UNION   reduce using rule 87 (primitive_types -> TYPE_LONG .)
    TYPE_CHAR       reduce using rule 87 (primitive_types -> TYPE_LONG .)
    TYPE_INT        reduce using rule 87 (primitive_types -> TYPE_LONG .)
    TYPE_SHORT      reduce using rule 87 (primitive_types -> TYPE_LONG .)
    TYPE_LONG       reduce using rule 87 (primitive_types -> TYPE_LONG .)
    TYPE_FLOAT      reduce using rule 87 (primitive_types -> TYPE_LONG .)
    TYPE_DOUBLE     reduce using rule 87 (primitive_types -> TYPE_LONG .)
    TYPE_VOID       reduce using rule 87 (primitive_types -> TYPE_LONG .)
    KEYWORD_STATIC  reduce using rule 87 (primitive_types -> TYPE_LONG .)
    KEYWORD_UNSIGNED reduce using rule 87 (primitive_types -> TYPE_LONG .)
    KEYWORD_VOLATILE reduce using rule 87 (primitive_types -> TYPE_LONG .)
    KEYWORD_EXTERN  reduce using rule 87 (primitive_types -> TYPE_LONG .)
    KEYWORD_SIGNED  reduce using rule 87 (primitive_types -> TYPE_LONG .)
    KEYWORD_REGISTER reduce using rule 87 (primitive_types -> TYPE_LONG .)
    INCREMENT       reduce using rule 87 (primitive_types -> TYPE_LONG .)
    DECREMENT       reduce using rule 87 (primitive_types -> TYPE_LONG .)
    BITWISE_COMPLEMENT reduce using rule 87 (primitive_types -> TYPE_LONG .)
    NOT             reduce using rule 87 (primitive_types -> TYPE_LONG .)
    LPAREN          reduce using rule 87 (primitive_types -> TYPE_LONG .)
    KEYWORD_SIZEOF  reduce using rule 87 (primitive_types -> TYPE_LONG .)
    STRING          reduce using rule 87 (primitive_types -> TYPE_LONG .)
    FLOAT_NUMBER    reduce using rule 87 (primitive_types -> TYPE_LONG .)
    CHARACTER       reduce using rule 87 (primitive_types -> TYPE_LONG .)
    NUMBER          reduce using rule 87 (primitive_types -> TYPE_LONG .)
    BINARY_NUMBER   reduce using rule 87 (primitive_types -> TYPE_LONG .)
    HEXADECIMAL_NUMBER reduce using rule 87 (primitive_types -> TYPE_LONG .)
    OCTAL_NUMBER    reduce using rule 87 (primitive_types -> TYPE_LONG .)
    $end            reduce using rule 87 (primitive_types -> TYPE_LONG .)
    SEMICOLON       reduce using rule 87 (primitive_types -> TYPE_LONG .)
    RBRACKET        reduce using rule 87 (primitive_types -> TYPE_LONG .)
    COMMA           reduce using rule 87 (primitive_types -> TYPE_LONG .)
    COLON           reduce using rule 87 (primitive_types -> TYPE_LONG .)
    RBRACE          reduce using rule 87 (primitive_types -> TYPE_LONG .)
    LBRACKET        reduce using rule 87 (primitive_types -> TYPE_LONG .)


state 25

    (88) primitive_types -> TYPE_FLOAT .

    IDENTIFIER      reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    TIMES           reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    RPAREN          reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    ASSIGN          reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    TIMES_ASSIGN    reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    DIVIDE_ASSIGN   reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    MODULUS_ASSIGN  reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    PLUS_ASSIGN     reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    MINUS_ASSIGN    reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    SHIFT_LEFT_ASSIGN reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    SHIFT_RIGHT_ASSIGN reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    BITWISE_AND_ASSIGN reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    BITWISE_XOR_ASSIGN reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    BITWISE_OR_ASSIGN reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    MODULUS         reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    DIVIDE          reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    MINUS           reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    PLUS            reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    BITWISE_SHIFT_RIGHT reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    BITWISE_SHIFT_LEFT reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    LESS_EQUALS     reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    LESS_THEN       reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    GREATER_EQUALS  reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    GREATER_THEN    reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    NOT_EQUALS      reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    EQUALS_THEN     reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    BITWISE_AND     reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    BITWISE_XOR     reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    BITWISE_OR      reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    LOGICAL_AND     reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    LOGICAL_OR      reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    QUESTION_MARK   reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_STRUCT  reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_UNION   reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    TYPE_CHAR       reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    TYPE_INT        reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    TYPE_SHORT      reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    TYPE_LONG       reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    TYPE_FLOAT      reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    TYPE_DOUBLE     reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    TYPE_VOID       reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_STATIC  reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_UNSIGNED reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_VOLATILE reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_EXTERN  reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_SIGNED  reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_REGISTER reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    INCREMENT       reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    DECREMENT       reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    BITWISE_COMPLEMENT reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    NOT             reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    LPAREN          reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_SIZEOF  reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    STRING          reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    FLOAT_NUMBER    reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    CHARACTER       reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    NUMBER          reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    BINARY_NUMBER   reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    HEXADECIMAL_NUMBER reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    OCTAL_NUMBER    reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    $end            reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    SEMICOLON       reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    RBRACKET        reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    COMMA           reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    COLON           reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    RBRACE          reduce using rule 88 (primitive_types -> TYPE_FLOAT .)
    LBRACKET        reduce using rule 88 (primitive_types -> TYPE_FLOAT .)


state 26

    (89) primitive_types -> TYPE_DOUBLE .

    IDENTIFIER      reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    TIMES           reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    RPAREN          reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    ASSIGN          reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    TIMES_ASSIGN    reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    DIVIDE_ASSIGN   reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    MODULUS_ASSIGN  reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    PLUS_ASSIGN     reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    MINUS_ASSIGN    reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    SHIFT_LEFT_ASSIGN reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    SHIFT_RIGHT_ASSIGN reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_AND_ASSIGN reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_XOR_ASSIGN reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_OR_ASSIGN reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    MODULUS         reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    DIVIDE          reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    MINUS           reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    PLUS            reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_SHIFT_RIGHT reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_SHIFT_LEFT reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    LESS_EQUALS     reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    LESS_THEN       reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    GREATER_EQUALS  reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    GREATER_THEN    reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    NOT_EQUALS      reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    EQUALS_THEN     reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_AND     reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_XOR     reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_OR      reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    LOGICAL_AND     reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    LOGICAL_OR      reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    QUESTION_MARK   reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_STRUCT  reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_UNION   reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    TYPE_CHAR       reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    TYPE_INT        reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    TYPE_SHORT      reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    TYPE_LONG       reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    TYPE_FLOAT      reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    TYPE_DOUBLE     reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    TYPE_VOID       reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_STATIC  reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_UNSIGNED reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_VOLATILE reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_EXTERN  reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_SIGNED  reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_REGISTER reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    INCREMENT       reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    DECREMENT       reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_COMPLEMENT reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    NOT             reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    LPAREN          reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_SIZEOF  reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    STRING          reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    FLOAT_NUMBER    reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    CHARACTER       reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    NUMBER          reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    BINARY_NUMBER   reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    HEXADECIMAL_NUMBER reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    OCTAL_NUMBER    reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    $end            reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    SEMICOLON       reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    RBRACKET        reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    COMMA           reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    COLON           reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    RBRACE          reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)
    LBRACKET        reduce using rule 89 (primitive_types -> TYPE_DOUBLE .)


state 27

    (90) primitive_types -> TYPE_VOID .

    IDENTIFIER      reduce using rule 90 (primitive_types -> TYPE_VOID .)
    TIMES           reduce using rule 90 (primitive_types -> TYPE_VOID .)
    RPAREN          reduce using rule 90 (primitive_types -> TYPE_VOID .)
    ASSIGN          reduce using rule 90 (primitive_types -> TYPE_VOID .)
    TIMES_ASSIGN    reduce using rule 90 (primitive_types -> TYPE_VOID .)
    DIVIDE_ASSIGN   reduce using rule 90 (primitive_types -> TYPE_VOID .)
    MODULUS_ASSIGN  reduce using rule 90 (primitive_types -> TYPE_VOID .)
    PLUS_ASSIGN     reduce using rule 90 (primitive_types -> TYPE_VOID .)
    MINUS_ASSIGN    reduce using rule 90 (primitive_types -> TYPE_VOID .)
    SHIFT_LEFT_ASSIGN reduce using rule 90 (primitive_types -> TYPE_VOID .)
    SHIFT_RIGHT_ASSIGN reduce using rule 90 (primitive_types -> TYPE_VOID .)
    BITWISE_AND_ASSIGN reduce using rule 90 (primitive_types -> TYPE_VOID .)
    BITWISE_XOR_ASSIGN reduce using rule 90 (primitive_types -> TYPE_VOID .)
    BITWISE_OR_ASSIGN reduce using rule 90 (primitive_types -> TYPE_VOID .)
    MODULUS         reduce using rule 90 (primitive_types -> TYPE_VOID .)
    DIVIDE          reduce using rule 90 (primitive_types -> TYPE_VOID .)
    MINUS           reduce using rule 90 (primitive_types -> TYPE_VOID .)
    PLUS            reduce using rule 90 (primitive_types -> TYPE_VOID .)
    BITWISE_SHIFT_RIGHT reduce using rule 90 (primitive_types -> TYPE_VOID .)
    BITWISE_SHIFT_LEFT reduce using rule 90 (primitive_types -> TYPE_VOID .)
    LESS_EQUALS     reduce using rule 90 (primitive_types -> TYPE_VOID .)
    LESS_THEN       reduce using rule 90 (primitive_types -> TYPE_VOID .)
    GREATER_EQUALS  reduce using rule 90 (primitive_types -> TYPE_VOID .)
    GREATER_THEN    reduce using rule 90 (primitive_types -> TYPE_VOID .)
    NOT_EQUALS      reduce using rule 90 (primitive_types -> TYPE_VOID .)
    EQUALS_THEN     reduce using rule 90 (primitive_types -> TYPE_VOID .)
    BITWISE_AND     reduce using rule 90 (primitive_types -> TYPE_VOID .)
    BITWISE_XOR     reduce using rule 90 (primitive_types -> TYPE_VOID .)
    BITWISE_OR      reduce using rule 90 (primitive_types -> TYPE_VOID .)
    LOGICAL_AND     reduce using rule 90 (primitive_types -> TYPE_VOID .)
    LOGICAL_OR      reduce using rule 90 (primitive_types -> TYPE_VOID .)
    QUESTION_MARK   reduce using rule 90 (primitive_types -> TYPE_VOID .)
    KEYWORD_STRUCT  reduce using rule 90 (primitive_types -> TYPE_VOID .)
    KEYWORD_UNION   reduce using rule 90 (primitive_types -> TYPE_VOID .)
    TYPE_CHAR       reduce using rule 90 (primitive_types -> TYPE_VOID .)
    TYPE_INT        reduce using rule 90 (primitive_types -> TYPE_VOID .)
    TYPE_SHORT      reduce using rule 90 (primitive_types -> TYPE_VOID .)
    TYPE_LONG       reduce using rule 90 (primitive_types -> TYPE_VOID .)
    TYPE_FLOAT      reduce using rule 90 (primitive_types -> TYPE_VOID .)
    TYPE_DOUBLE     reduce using rule 90 (primitive_types -> TYPE_VOID .)
    TYPE_VOID       reduce using rule 90 (primitive_types -> TYPE_VOID .)
    KEYWORD_STATIC  reduce using rule 90 (primitive_types -> TYPE_VOID .)
    KEYWORD_UNSIGNED reduce using rule 90 (primitive_types -> TYPE_VOID .)
    KEYWORD_VOLATILE reduce using rule 90 (primitive_types -> TYPE_VOID .)
    KEYWORD_EXTERN  reduce using rule 90 (primitive_types -> TYPE_VOID .)
    KEYWORD_SIGNED  reduce using rule 90 (primitive_types -> TYPE_VOID .)
    KEYWORD_REGISTER reduce using rule 90 (primitive_types -> TYPE_VOID .)
    INCREMENT       reduce using rule 90 (primitive_types -> TYPE_VOID .)
    DECREMENT       reduce using rule 90 (primitive_types -> TYPE_VOID .)
    BITWISE_COMPLEMENT reduce using rule 90 (primitive_types -> TYPE_VOID .)
    NOT             reduce using rule 90 (primitive_types -> TYPE_VOID .)
    LPAREN          reduce using rule 90 (primitive_types -> TYPE_VOID .)
    KEYWORD_SIZEOF  reduce using rule 90 (primitive_types -> TYPE_VOID .)
    STRING          reduce using rule 90 (primitive_types -> TYPE_VOID .)
    FLOAT_NUMBER    reduce using rule 90 (primitive_types -> TYPE_VOID .)
    CHARACTER       reduce using rule 90 (primitive_types -> TYPE_VOID .)
    NUMBER          reduce using rule 90 (primitive_types -> TYPE_VOID .)
    BINARY_NUMBER   reduce using rule 90 (primitive_types -> TYPE_VOID .)
    HEXADECIMAL_NUMBER reduce using rule 90 (primitive_types -> TYPE_VOID .)
    OCTAL_NUMBER    reduce using rule 90 (primitive_types -> TYPE_VOID .)
    $end            reduce using rule 90 (primitive_types -> TYPE_VOID .)
    SEMICOLON       reduce using rule 90 (primitive_types -> TYPE_VOID .)
    RBRACKET        reduce using rule 90 (primitive_types -> TYPE_VOID .)
    COMMA           reduce using rule 90 (primitive_types -> TYPE_VOID .)
    COLON           reduce using rule 90 (primitive_types -> TYPE_VOID .)
    RBRACE          reduce using rule 90 (primitive_types -> TYPE_VOID .)
    LBRACKET        reduce using rule 90 (primitive_types -> TYPE_VOID .)


state 28

    (76) type_modifier -> KEYWORD_STATIC .

    KEYWORD_STRUCT  reduce using rule 76 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_UNION   reduce using rule 76 (type_modifier -> KEYWORD_STATIC .)
    TYPE_CHAR       reduce using rule 76 (type_modifier -> KEYWORD_STATIC .)
    TYPE_INT        reduce using rule 76 (type_modifier -> KEYWORD_STATIC .)
    TYPE_SHORT      reduce using rule 76 (type_modifier -> KEYWORD_STATIC .)
    TYPE_LONG       reduce using rule 76 (type_modifier -> KEYWORD_STATIC .)
    TYPE_FLOAT      reduce using rule 76 (type_modifier -> KEYWORD_STATIC .)
    TYPE_DOUBLE     reduce using rule 76 (type_modifier -> KEYWORD_STATIC .)
    TYPE_VOID       reduce using rule 76 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_STATIC  reduce using rule 76 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_UNSIGNED reduce using rule 76 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_VOLATILE reduce using rule 76 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_EXTERN  reduce using rule 76 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_SIGNED  reduce using rule 76 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_REGISTER reduce using rule 76 (type_modifier -> KEYWORD_STATIC .)


state 29

    (77) type_modifier -> KEYWORD_UNSIGNED .

    KEYWORD_STRUCT  reduce using rule 77 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_UNION   reduce using rule 77 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_CHAR       reduce using rule 77 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_INT        reduce using rule 77 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_SHORT      reduce using rule 77 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_LONG       reduce using rule 77 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_FLOAT      reduce using rule 77 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_DOUBLE     reduce using rule 77 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_VOID       reduce using rule 77 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_STATIC  reduce using rule 77 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_UNSIGNED reduce using rule 77 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_VOLATILE reduce using rule 77 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_EXTERN  reduce using rule 77 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_SIGNED  reduce using rule 77 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_REGISTER reduce using rule 77 (type_modifier -> KEYWORD_UNSIGNED .)


state 30

    (78) type_modifier -> KEYWORD_VOLATILE .

    KEYWORD_STRUCT  reduce using rule 78 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_UNION   reduce using rule 78 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_CHAR       reduce using rule 78 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_INT        reduce using rule 78 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_SHORT      reduce using rule 78 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_LONG       reduce using rule 78 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_FLOAT      reduce using rule 78 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_DOUBLE     reduce using rule 78 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_VOID       reduce using rule 78 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_STATIC  reduce using rule 78 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_UNSIGNED reduce using rule 78 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_VOLATILE reduce using rule 78 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_EXTERN  reduce using rule 78 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_SIGNED  reduce using rule 78 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_REGISTER reduce using rule 78 (type_modifier -> KEYWORD_VOLATILE .)


state 31

    (79) type_modifier -> KEYWORD_EXTERN .

    KEYWORD_STRUCT  reduce using rule 79 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_UNION   reduce using rule 79 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_CHAR       reduce using rule 79 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_INT        reduce using rule 79 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_SHORT      reduce using rule 79 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_LONG       reduce using rule 79 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_FLOAT      reduce using rule 79 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_DOUBLE     reduce using rule 79 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_VOID       reduce using rule 79 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_STATIC  reduce using rule 79 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_UNSIGNED reduce using rule 79 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_VOLATILE reduce using rule 79 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_EXTERN  reduce using rule 79 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_SIGNED  reduce using rule 79 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_REGISTER reduce using rule 79 (type_modifier -> KEYWORD_EXTERN .)


state 32

    (80) type_modifier -> KEYWORD_SIGNED .

    KEYWORD_STRUCT  reduce using rule 80 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_UNION   reduce using rule 80 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_CHAR       reduce using rule 80 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_INT        reduce using rule 80 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_SHORT      reduce using rule 80 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_LONG       reduce using rule 80 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_FLOAT      reduce using rule 80 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_DOUBLE     reduce using rule 80 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_VOID       reduce using rule 80 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_STATIC  reduce using rule 80 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_UNSIGNED reduce using rule 80 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_VOLATILE reduce using rule 80 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_EXTERN  reduce using rule 80 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_SIGNED  reduce using rule 80 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_REGISTER reduce using rule 80 (type_modifier -> KEYWORD_SIGNED .)


state 33

    (81) type_modifier -> KEYWORD_REGISTER .

    KEYWORD_STRUCT  reduce using rule 81 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_UNION   reduce using rule 81 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_CHAR       reduce using rule 81 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_INT        reduce using rule 81 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_SHORT      reduce using rule 81 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_LONG       reduce using rule 81 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_FLOAT      reduce using rule 81 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_DOUBLE     reduce using rule 81 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_VOID       reduce using rule 81 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_STATIC  reduce using rule 81 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_UNSIGNED reduce using rule 81 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_VOLATILE reduce using rule 81 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_EXTERN  reduce using rule 81 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_SIGNED  reduce using rule 81 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_REGISTER reduce using rule 81 (type_modifier -> KEYWORD_REGISTER .)


state 34

    (152) unary_exp -> postfix_exp .
    (169) postfix_exp -> postfix_exp . LBRACKET expression RBRACKET
    (170) postfix_exp -> postfix_exp . LPAREN RPAREN
    (171) postfix_exp -> postfix_exp . LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> postfix_exp . DOT IDENTIFIER
    (173) postfix_exp -> postfix_exp . ARROW IDENTIFIER
    (174) postfix_exp -> postfix_exp . INCREMENT
    (175) postfix_exp -> postfix_exp . DECREMENT

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    ASSIGN          reduce using rule 152 (unary_exp -> postfix_exp .)
    TIMES_ASSIGN    reduce using rule 152 (unary_exp -> postfix_exp .)
    DIVIDE_ASSIGN   reduce using rule 152 (unary_exp -> postfix_exp .)
    MODULUS_ASSIGN  reduce using rule 152 (unary_exp -> postfix_exp .)
    PLUS_ASSIGN     reduce using rule 152 (unary_exp -> postfix_exp .)
    MINUS_ASSIGN    reduce using rule 152 (unary_exp -> postfix_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 152 (unary_exp -> postfix_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 152 (unary_exp -> postfix_exp .)
    BITWISE_AND_ASSIGN reduce using rule 152 (unary_exp -> postfix_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 152 (unary_exp -> postfix_exp .)
    BITWISE_OR_ASSIGN reduce using rule 152 (unary_exp -> postfix_exp .)
    MODULUS         reduce using rule 152 (unary_exp -> postfix_exp .)
    DIVIDE          reduce using rule 152 (unary_exp -> postfix_exp .)
    TIMES           reduce using rule 152 (unary_exp -> postfix_exp .)
    MINUS           reduce using rule 152 (unary_exp -> postfix_exp .)
    PLUS            reduce using rule 152 (unary_exp -> postfix_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 152 (unary_exp -> postfix_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 152 (unary_exp -> postfix_exp .)
    LESS_EQUALS     reduce using rule 152 (unary_exp -> postfix_exp .)
    LESS_THEN       reduce using rule 152 (unary_exp -> postfix_exp .)
    GREATER_EQUALS  reduce using rule 152 (unary_exp -> postfix_exp .)
    GREATER_THEN    reduce using rule 152 (unary_exp -> postfix_exp .)
    NOT_EQUALS      reduce using rule 152 (unary_exp -> postfix_exp .)
    EQUALS_THEN     reduce using rule 152 (unary_exp -> postfix_exp .)
    BITWISE_AND     reduce using rule 152 (unary_exp -> postfix_exp .)
    BITWISE_XOR     reduce using rule 152 (unary_exp -> postfix_exp .)
    BITWISE_OR      reduce using rule 152 (unary_exp -> postfix_exp .)
    LOGICAL_AND     reduce using rule 152 (unary_exp -> postfix_exp .)
    LOGICAL_OR      reduce using rule 152 (unary_exp -> postfix_exp .)
    QUESTION_MARK   reduce using rule 152 (unary_exp -> postfix_exp .)
    KEYWORD_STRUCT  reduce using rule 152 (unary_exp -> postfix_exp .)
    KEYWORD_UNION   reduce using rule 152 (unary_exp -> postfix_exp .)
    TYPE_CHAR       reduce using rule 152 (unary_exp -> postfix_exp .)
    TYPE_INT        reduce using rule 152 (unary_exp -> postfix_exp .)
    TYPE_SHORT      reduce using rule 152 (unary_exp -> postfix_exp .)
    TYPE_LONG       reduce using rule 152 (unary_exp -> postfix_exp .)
    TYPE_FLOAT      reduce using rule 152 (unary_exp -> postfix_exp .)
    TYPE_DOUBLE     reduce using rule 152 (unary_exp -> postfix_exp .)
    TYPE_VOID       reduce using rule 152 (unary_exp -> postfix_exp .)
    KEYWORD_STATIC  reduce using rule 152 (unary_exp -> postfix_exp .)
    KEYWORD_UNSIGNED reduce using rule 152 (unary_exp -> postfix_exp .)
    KEYWORD_VOLATILE reduce using rule 152 (unary_exp -> postfix_exp .)
    KEYWORD_EXTERN  reduce using rule 152 (unary_exp -> postfix_exp .)
    KEYWORD_SIGNED  reduce using rule 152 (unary_exp -> postfix_exp .)
    KEYWORD_REGISTER reduce using rule 152 (unary_exp -> postfix_exp .)
    BITWISE_COMPLEMENT reduce using rule 152 (unary_exp -> postfix_exp .)
    NOT             reduce using rule 152 (unary_exp -> postfix_exp .)
    KEYWORD_SIZEOF  reduce using rule 152 (unary_exp -> postfix_exp .)
    IDENTIFIER      reduce using rule 152 (unary_exp -> postfix_exp .)
    STRING          reduce using rule 152 (unary_exp -> postfix_exp .)
    FLOAT_NUMBER    reduce using rule 152 (unary_exp -> postfix_exp .)
    CHARACTER       reduce using rule 152 (unary_exp -> postfix_exp .)
    NUMBER          reduce using rule 152 (unary_exp -> postfix_exp .)
    BINARY_NUMBER   reduce using rule 152 (unary_exp -> postfix_exp .)
    HEXADECIMAL_NUMBER reduce using rule 152 (unary_exp -> postfix_exp .)
    OCTAL_NUMBER    reduce using rule 152 (unary_exp -> postfix_exp .)
    $end            reduce using rule 152 (unary_exp -> postfix_exp .)
    RPAREN          reduce using rule 152 (unary_exp -> postfix_exp .)
    SEMICOLON       reduce using rule 152 (unary_exp -> postfix_exp .)
    RBRACKET        reduce using rule 152 (unary_exp -> postfix_exp .)
    COMMA           reduce using rule 152 (unary_exp -> postfix_exp .)
    COLON           reduce using rule 152 (unary_exp -> postfix_exp .)
    RBRACE          reduce using rule 152 (unary_exp -> postfix_exp .)
    LBRACKET        shift and go to state 116
    LPAREN          shift and go to state 117
    DOT             shift and go to state 118
    ARROW           shift and go to state 119
    INCREMENT       shift and go to state 120
    DECREMENT       shift and go to state 121

  ! INCREMENT       [ reduce using rule 152 (unary_exp -> postfix_exp .) ]
  ! DECREMENT       [ reduce using rule 152 (unary_exp -> postfix_exp .) ]
  ! LPAREN          [ reduce using rule 152 (unary_exp -> postfix_exp .) ]


state 35

    (153) unary_exp -> INCREMENT . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    unary_exp                      shift and go to state 122
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 36

    (154) unary_exp -> DECREMENT . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    unary_exp                      shift and go to state 123
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 37

    (155) unary_exp -> unary_operator . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    unary_operator                 shift and go to state 37
    unary_exp                      shift and go to state 124
    postfix_exp                    shift and go to state 34
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 38

    (156) unary_exp -> cast_exp . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    cast_exp                       shift and go to state 38
    unary_exp                      shift and go to state 125
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 39

    (157) unary_exp -> sizeof_exp .

    ASSIGN          reduce using rule 157 (unary_exp -> sizeof_exp .)
    TIMES_ASSIGN    reduce using rule 157 (unary_exp -> sizeof_exp .)
    DIVIDE_ASSIGN   reduce using rule 157 (unary_exp -> sizeof_exp .)
    MODULUS_ASSIGN  reduce using rule 157 (unary_exp -> sizeof_exp .)
    PLUS_ASSIGN     reduce using rule 157 (unary_exp -> sizeof_exp .)
    MINUS_ASSIGN    reduce using rule 157 (unary_exp -> sizeof_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 157 (unary_exp -> sizeof_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 157 (unary_exp -> sizeof_exp .)
    BITWISE_AND_ASSIGN reduce using rule 157 (unary_exp -> sizeof_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 157 (unary_exp -> sizeof_exp .)
    BITWISE_OR_ASSIGN reduce using rule 157 (unary_exp -> sizeof_exp .)
    MODULUS         reduce using rule 157 (unary_exp -> sizeof_exp .)
    DIVIDE          reduce using rule 157 (unary_exp -> sizeof_exp .)
    TIMES           reduce using rule 157 (unary_exp -> sizeof_exp .)
    MINUS           reduce using rule 157 (unary_exp -> sizeof_exp .)
    PLUS            reduce using rule 157 (unary_exp -> sizeof_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 157 (unary_exp -> sizeof_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 157 (unary_exp -> sizeof_exp .)
    LESS_EQUALS     reduce using rule 157 (unary_exp -> sizeof_exp .)
    LESS_THEN       reduce using rule 157 (unary_exp -> sizeof_exp .)
    GREATER_EQUALS  reduce using rule 157 (unary_exp -> sizeof_exp .)
    GREATER_THEN    reduce using rule 157 (unary_exp -> sizeof_exp .)
    NOT_EQUALS      reduce using rule 157 (unary_exp -> sizeof_exp .)
    EQUALS_THEN     reduce using rule 157 (unary_exp -> sizeof_exp .)
    BITWISE_AND     reduce using rule 157 (unary_exp -> sizeof_exp .)
    BITWISE_XOR     reduce using rule 157 (unary_exp -> sizeof_exp .)
    BITWISE_OR      reduce using rule 157 (unary_exp -> sizeof_exp .)
    LOGICAL_AND     reduce using rule 157 (unary_exp -> sizeof_exp .)
    LOGICAL_OR      reduce using rule 157 (unary_exp -> sizeof_exp .)
    QUESTION_MARK   reduce using rule 157 (unary_exp -> sizeof_exp .)
    KEYWORD_STRUCT  reduce using rule 157 (unary_exp -> sizeof_exp .)
    KEYWORD_UNION   reduce using rule 157 (unary_exp -> sizeof_exp .)
    TYPE_CHAR       reduce using rule 157 (unary_exp -> sizeof_exp .)
    TYPE_INT        reduce using rule 157 (unary_exp -> sizeof_exp .)
    TYPE_SHORT      reduce using rule 157 (unary_exp -> sizeof_exp .)
    TYPE_LONG       reduce using rule 157 (unary_exp -> sizeof_exp .)
    TYPE_FLOAT      reduce using rule 157 (unary_exp -> sizeof_exp .)
    TYPE_DOUBLE     reduce using rule 157 (unary_exp -> sizeof_exp .)
    TYPE_VOID       reduce using rule 157 (unary_exp -> sizeof_exp .)
    KEYWORD_STATIC  reduce using rule 157 (unary_exp -> sizeof_exp .)
    KEYWORD_UNSIGNED reduce using rule 157 (unary_exp -> sizeof_exp .)
    KEYWORD_VOLATILE reduce using rule 157 (unary_exp -> sizeof_exp .)
    KEYWORD_EXTERN  reduce using rule 157 (unary_exp -> sizeof_exp .)
    KEYWORD_SIGNED  reduce using rule 157 (unary_exp -> sizeof_exp .)
    KEYWORD_REGISTER reduce using rule 157 (unary_exp -> sizeof_exp .)
    INCREMENT       reduce using rule 157 (unary_exp -> sizeof_exp .)
    DECREMENT       reduce using rule 157 (unary_exp -> sizeof_exp .)
    BITWISE_COMPLEMENT reduce using rule 157 (unary_exp -> sizeof_exp .)
    NOT             reduce using rule 157 (unary_exp -> sizeof_exp .)
    LPAREN          reduce using rule 157 (unary_exp -> sizeof_exp .)
    KEYWORD_SIZEOF  reduce using rule 157 (unary_exp -> sizeof_exp .)
    IDENTIFIER      reduce using rule 157 (unary_exp -> sizeof_exp .)
    STRING          reduce using rule 157 (unary_exp -> sizeof_exp .)
    FLOAT_NUMBER    reduce using rule 157 (unary_exp -> sizeof_exp .)
    CHARACTER       reduce using rule 157 (unary_exp -> sizeof_exp .)
    NUMBER          reduce using rule 157 (unary_exp -> sizeof_exp .)
    BINARY_NUMBER   reduce using rule 157 (unary_exp -> sizeof_exp .)
    HEXADECIMAL_NUMBER reduce using rule 157 (unary_exp -> sizeof_exp .)
    OCTAL_NUMBER    reduce using rule 157 (unary_exp -> sizeof_exp .)
    $end            reduce using rule 157 (unary_exp -> sizeof_exp .)
    RPAREN          reduce using rule 157 (unary_exp -> sizeof_exp .)
    SEMICOLON       reduce using rule 157 (unary_exp -> sizeof_exp .)
    RBRACKET        reduce using rule 157 (unary_exp -> sizeof_exp .)
    COMMA           reduce using rule 157 (unary_exp -> sizeof_exp .)
    COLON           reduce using rule 157 (unary_exp -> sizeof_exp .)
    RBRACE          reduce using rule 157 (unary_exp -> sizeof_exp .)


state 40

    (113) ternary_conditional_exp -> logical_exp . QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> logical_exp .

    QUESTION_MARK   shift and go to state 126
    KEYWORD_STRUCT  reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    KEYWORD_UNION   reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    TYPE_CHAR       reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    TYPE_INT        reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    TYPE_SHORT      reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    TYPE_LONG       reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    TYPE_FLOAT      reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    TYPE_DOUBLE     reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    TYPE_VOID       reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    KEYWORD_STATIC  reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    KEYWORD_UNSIGNED reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    KEYWORD_VOLATILE reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    KEYWORD_EXTERN  reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    KEYWORD_SIGNED  reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    KEYWORD_REGISTER reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    INCREMENT       reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    DECREMENT       reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    BITWISE_AND     reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    TIMES           reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    PLUS            reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    MINUS           reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    BITWISE_COMPLEMENT reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    NOT             reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    LPAREN          reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    KEYWORD_SIZEOF  reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    IDENTIFIER      reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    STRING          reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    FLOAT_NUMBER    reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    CHARACTER       reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    NUMBER          reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    BINARY_NUMBER   reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    HEXADECIMAL_NUMBER reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    OCTAL_NUMBER    reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    $end            reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    RPAREN          reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    SEMICOLON       reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    RBRACKET        reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    COMMA           reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    COLON           reduce using rule 114 (ternary_conditional_exp -> logical_exp .)
    RBRACE          reduce using rule 114 (ternary_conditional_exp -> logical_exp .)


state 41

    (176) postfix_exp -> primary_exp .

    LBRACKET        reduce using rule 176 (postfix_exp -> primary_exp .)
    LPAREN          reduce using rule 176 (postfix_exp -> primary_exp .)
    DOT             reduce using rule 176 (postfix_exp -> primary_exp .)
    ARROW           reduce using rule 176 (postfix_exp -> primary_exp .)
    INCREMENT       reduce using rule 176 (postfix_exp -> primary_exp .)
    DECREMENT       reduce using rule 176 (postfix_exp -> primary_exp .)
    ASSIGN          reduce using rule 176 (postfix_exp -> primary_exp .)
    TIMES_ASSIGN    reduce using rule 176 (postfix_exp -> primary_exp .)
    DIVIDE_ASSIGN   reduce using rule 176 (postfix_exp -> primary_exp .)
    MODULUS_ASSIGN  reduce using rule 176 (postfix_exp -> primary_exp .)
    PLUS_ASSIGN     reduce using rule 176 (postfix_exp -> primary_exp .)
    MINUS_ASSIGN    reduce using rule 176 (postfix_exp -> primary_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 176 (postfix_exp -> primary_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 176 (postfix_exp -> primary_exp .)
    BITWISE_AND_ASSIGN reduce using rule 176 (postfix_exp -> primary_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 176 (postfix_exp -> primary_exp .)
    BITWISE_OR_ASSIGN reduce using rule 176 (postfix_exp -> primary_exp .)
    MODULUS         reduce using rule 176 (postfix_exp -> primary_exp .)
    DIVIDE          reduce using rule 176 (postfix_exp -> primary_exp .)
    TIMES           reduce using rule 176 (postfix_exp -> primary_exp .)
    MINUS           reduce using rule 176 (postfix_exp -> primary_exp .)
    PLUS            reduce using rule 176 (postfix_exp -> primary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 176 (postfix_exp -> primary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 176 (postfix_exp -> primary_exp .)
    LESS_EQUALS     reduce using rule 176 (postfix_exp -> primary_exp .)
    LESS_THEN       reduce using rule 176 (postfix_exp -> primary_exp .)
    GREATER_EQUALS  reduce using rule 176 (postfix_exp -> primary_exp .)
    GREATER_THEN    reduce using rule 176 (postfix_exp -> primary_exp .)
    NOT_EQUALS      reduce using rule 176 (postfix_exp -> primary_exp .)
    EQUALS_THEN     reduce using rule 176 (postfix_exp -> primary_exp .)
    BITWISE_AND     reduce using rule 176 (postfix_exp -> primary_exp .)
    BITWISE_XOR     reduce using rule 176 (postfix_exp -> primary_exp .)
    BITWISE_OR      reduce using rule 176 (postfix_exp -> primary_exp .)
    LOGICAL_AND     reduce using rule 176 (postfix_exp -> primary_exp .)
    LOGICAL_OR      reduce using rule 176 (postfix_exp -> primary_exp .)
    QUESTION_MARK   reduce using rule 176 (postfix_exp -> primary_exp .)
    KEYWORD_STRUCT  reduce using rule 176 (postfix_exp -> primary_exp .)
    KEYWORD_UNION   reduce using rule 176 (postfix_exp -> primary_exp .)
    TYPE_CHAR       reduce using rule 176 (postfix_exp -> primary_exp .)
    TYPE_INT        reduce using rule 176 (postfix_exp -> primary_exp .)
    TYPE_SHORT      reduce using rule 176 (postfix_exp -> primary_exp .)
    TYPE_LONG       reduce using rule 176 (postfix_exp -> primary_exp .)
    TYPE_FLOAT      reduce using rule 176 (postfix_exp -> primary_exp .)
    TYPE_DOUBLE     reduce using rule 176 (postfix_exp -> primary_exp .)
    TYPE_VOID       reduce using rule 176 (postfix_exp -> primary_exp .)
    KEYWORD_STATIC  reduce using rule 176 (postfix_exp -> primary_exp .)
    KEYWORD_UNSIGNED reduce using rule 176 (postfix_exp -> primary_exp .)
    KEYWORD_VOLATILE reduce using rule 176 (postfix_exp -> primary_exp .)
    KEYWORD_EXTERN  reduce using rule 176 (postfix_exp -> primary_exp .)
    KEYWORD_SIGNED  reduce using rule 176 (postfix_exp -> primary_exp .)
    KEYWORD_REGISTER reduce using rule 176 (postfix_exp -> primary_exp .)
    BITWISE_COMPLEMENT reduce using rule 176 (postfix_exp -> primary_exp .)
    NOT             reduce using rule 176 (postfix_exp -> primary_exp .)
    KEYWORD_SIZEOF  reduce using rule 176 (postfix_exp -> primary_exp .)
    IDENTIFIER      reduce using rule 176 (postfix_exp -> primary_exp .)
    STRING          reduce using rule 176 (postfix_exp -> primary_exp .)
    FLOAT_NUMBER    reduce using rule 176 (postfix_exp -> primary_exp .)
    CHARACTER       reduce using rule 176 (postfix_exp -> primary_exp .)
    NUMBER          reduce using rule 176 (postfix_exp -> primary_exp .)
    BINARY_NUMBER   reduce using rule 176 (postfix_exp -> primary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 176 (postfix_exp -> primary_exp .)
    OCTAL_NUMBER    reduce using rule 176 (postfix_exp -> primary_exp .)
    $end            reduce using rule 176 (postfix_exp -> primary_exp .)
    RPAREN          reduce using rule 176 (postfix_exp -> primary_exp .)
    SEMICOLON       reduce using rule 176 (postfix_exp -> primary_exp .)
    RBRACKET        reduce using rule 176 (postfix_exp -> primary_exp .)
    COMMA           reduce using rule 176 (postfix_exp -> primary_exp .)
    COLON           reduce using rule 176 (postfix_exp -> primary_exp .)
    RBRACE          reduce using rule 176 (postfix_exp -> primary_exp .)


state 42

    (163) unary_operator -> BITWISE_AND .

    INCREMENT       reduce using rule 163 (unary_operator -> BITWISE_AND .)
    DECREMENT       reduce using rule 163 (unary_operator -> BITWISE_AND .)
    BITWISE_AND     reduce using rule 163 (unary_operator -> BITWISE_AND .)
    TIMES           reduce using rule 163 (unary_operator -> BITWISE_AND .)
    PLUS            reduce using rule 163 (unary_operator -> BITWISE_AND .)
    MINUS           reduce using rule 163 (unary_operator -> BITWISE_AND .)
    BITWISE_COMPLEMENT reduce using rule 163 (unary_operator -> BITWISE_AND .)
    NOT             reduce using rule 163 (unary_operator -> BITWISE_AND .)
    LPAREN          reduce using rule 163 (unary_operator -> BITWISE_AND .)
    KEYWORD_SIZEOF  reduce using rule 163 (unary_operator -> BITWISE_AND .)
    IDENTIFIER      reduce using rule 163 (unary_operator -> BITWISE_AND .)
    STRING          reduce using rule 163 (unary_operator -> BITWISE_AND .)
    FLOAT_NUMBER    reduce using rule 163 (unary_operator -> BITWISE_AND .)
    CHARACTER       reduce using rule 163 (unary_operator -> BITWISE_AND .)
    NUMBER          reduce using rule 163 (unary_operator -> BITWISE_AND .)
    BINARY_NUMBER   reduce using rule 163 (unary_operator -> BITWISE_AND .)
    HEXADECIMAL_NUMBER reduce using rule 163 (unary_operator -> BITWISE_AND .)
    OCTAL_NUMBER    reduce using rule 163 (unary_operator -> BITWISE_AND .)


state 43

    (164) unary_operator -> TIMES .

    INCREMENT       reduce using rule 164 (unary_operator -> TIMES .)
    DECREMENT       reduce using rule 164 (unary_operator -> TIMES .)
    BITWISE_AND     reduce using rule 164 (unary_operator -> TIMES .)
    TIMES           reduce using rule 164 (unary_operator -> TIMES .)
    PLUS            reduce using rule 164 (unary_operator -> TIMES .)
    MINUS           reduce using rule 164 (unary_operator -> TIMES .)
    BITWISE_COMPLEMENT reduce using rule 164 (unary_operator -> TIMES .)
    NOT             reduce using rule 164 (unary_operator -> TIMES .)
    LPAREN          reduce using rule 164 (unary_operator -> TIMES .)
    KEYWORD_SIZEOF  reduce using rule 164 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 164 (unary_operator -> TIMES .)
    STRING          reduce using rule 164 (unary_operator -> TIMES .)
    FLOAT_NUMBER    reduce using rule 164 (unary_operator -> TIMES .)
    CHARACTER       reduce using rule 164 (unary_operator -> TIMES .)
    NUMBER          reduce using rule 164 (unary_operator -> TIMES .)
    BINARY_NUMBER   reduce using rule 164 (unary_operator -> TIMES .)
    HEXADECIMAL_NUMBER reduce using rule 164 (unary_operator -> TIMES .)
    OCTAL_NUMBER    reduce using rule 164 (unary_operator -> TIMES .)


state 44

    (165) unary_operator -> PLUS .

    INCREMENT       reduce using rule 165 (unary_operator -> PLUS .)
    DECREMENT       reduce using rule 165 (unary_operator -> PLUS .)
    BITWISE_AND     reduce using rule 165 (unary_operator -> PLUS .)
    TIMES           reduce using rule 165 (unary_operator -> PLUS .)
    PLUS            reduce using rule 165 (unary_operator -> PLUS .)
    MINUS           reduce using rule 165 (unary_operator -> PLUS .)
    BITWISE_COMPLEMENT reduce using rule 165 (unary_operator -> PLUS .)
    NOT             reduce using rule 165 (unary_operator -> PLUS .)
    LPAREN          reduce using rule 165 (unary_operator -> PLUS .)
    KEYWORD_SIZEOF  reduce using rule 165 (unary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 165 (unary_operator -> PLUS .)
    STRING          reduce using rule 165 (unary_operator -> PLUS .)
    FLOAT_NUMBER    reduce using rule 165 (unary_operator -> PLUS .)
    CHARACTER       reduce using rule 165 (unary_operator -> PLUS .)
    NUMBER          reduce using rule 165 (unary_operator -> PLUS .)
    BINARY_NUMBER   reduce using rule 165 (unary_operator -> PLUS .)
    HEXADECIMAL_NUMBER reduce using rule 165 (unary_operator -> PLUS .)
    OCTAL_NUMBER    reduce using rule 165 (unary_operator -> PLUS .)


state 45

    (166) unary_operator -> MINUS .

    INCREMENT       reduce using rule 166 (unary_operator -> MINUS .)
    DECREMENT       reduce using rule 166 (unary_operator -> MINUS .)
    BITWISE_AND     reduce using rule 166 (unary_operator -> MINUS .)
    TIMES           reduce using rule 166 (unary_operator -> MINUS .)
    PLUS            reduce using rule 166 (unary_operator -> MINUS .)
    MINUS           reduce using rule 166 (unary_operator -> MINUS .)
    BITWISE_COMPLEMENT reduce using rule 166 (unary_operator -> MINUS .)
    NOT             reduce using rule 166 (unary_operator -> MINUS .)
    LPAREN          reduce using rule 166 (unary_operator -> MINUS .)
    KEYWORD_SIZEOF  reduce using rule 166 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 166 (unary_operator -> MINUS .)
    STRING          reduce using rule 166 (unary_operator -> MINUS .)
    FLOAT_NUMBER    reduce using rule 166 (unary_operator -> MINUS .)
    CHARACTER       reduce using rule 166 (unary_operator -> MINUS .)
    NUMBER          reduce using rule 166 (unary_operator -> MINUS .)
    BINARY_NUMBER   reduce using rule 166 (unary_operator -> MINUS .)
    HEXADECIMAL_NUMBER reduce using rule 166 (unary_operator -> MINUS .)
    OCTAL_NUMBER    reduce using rule 166 (unary_operator -> MINUS .)


state 46

    (167) unary_operator -> BITWISE_COMPLEMENT .

    INCREMENT       reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)
    DECREMENT       reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)
    BITWISE_AND     reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)
    TIMES           reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)
    PLUS            reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)
    MINUS           reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)
    BITWISE_COMPLEMENT reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)
    NOT             reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)
    LPAREN          reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)
    KEYWORD_SIZEOF  reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)
    IDENTIFIER      reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)
    STRING          reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)
    FLOAT_NUMBER    reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)
    CHARACTER       reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)
    NUMBER          reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)
    BINARY_NUMBER   reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)
    HEXADECIMAL_NUMBER reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)
    OCTAL_NUMBER    reduce using rule 167 (unary_operator -> BITWISE_COMPLEMENT .)


state 47

    (168) unary_operator -> NOT .

    INCREMENT       reduce using rule 168 (unary_operator -> NOT .)
    DECREMENT       reduce using rule 168 (unary_operator -> NOT .)
    BITWISE_AND     reduce using rule 168 (unary_operator -> NOT .)
    TIMES           reduce using rule 168 (unary_operator -> NOT .)
    PLUS            reduce using rule 168 (unary_operator -> NOT .)
    MINUS           reduce using rule 168 (unary_operator -> NOT .)
    BITWISE_COMPLEMENT reduce using rule 168 (unary_operator -> NOT .)
    NOT             reduce using rule 168 (unary_operator -> NOT .)
    LPAREN          reduce using rule 168 (unary_operator -> NOT .)
    KEYWORD_SIZEOF  reduce using rule 168 (unary_operator -> NOT .)
    IDENTIFIER      reduce using rule 168 (unary_operator -> NOT .)
    STRING          reduce using rule 168 (unary_operator -> NOT .)
    FLOAT_NUMBER    reduce using rule 168 (unary_operator -> NOT .)
    CHARACTER       reduce using rule 168 (unary_operator -> NOT .)
    NUMBER          reduce using rule 168 (unary_operator -> NOT .)
    BINARY_NUMBER   reduce using rule 168 (unary_operator -> NOT .)
    HEXADECIMAL_NUMBER reduce using rule 168 (unary_operator -> NOT .)
    OCTAL_NUMBER    reduce using rule 168 (unary_operator -> NOT .)


state 48

    (158) sizeof_exp -> KEYWORD_SIZEOF . unary_exp
    (159) sizeof_exp -> KEYWORD_SIZEOF . type
    (160) sizeof_exp -> KEYWORD_SIZEOF . pointer
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    KEYWORD_STRUCT  shift and go to state 91
    KEYWORD_UNION   shift and go to state 92
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    unary_exp                      shift and go to state 127
    type                           shift and go to state 128
    pointer                        shift and go to state 129
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 49

    (115) logical_exp -> logical_or_exp .
    (116) logical_or_exp -> logical_or_exp . LOGICAL_OR logical_and_exp

    QUESTION_MARK   reduce using rule 115 (logical_exp -> logical_or_exp .)
    KEYWORD_STRUCT  reduce using rule 115 (logical_exp -> logical_or_exp .)
    KEYWORD_UNION   reduce using rule 115 (logical_exp -> logical_or_exp .)
    TYPE_CHAR       reduce using rule 115 (logical_exp -> logical_or_exp .)
    TYPE_INT        reduce using rule 115 (logical_exp -> logical_or_exp .)
    TYPE_SHORT      reduce using rule 115 (logical_exp -> logical_or_exp .)
    TYPE_LONG       reduce using rule 115 (logical_exp -> logical_or_exp .)
    TYPE_FLOAT      reduce using rule 115 (logical_exp -> logical_or_exp .)
    TYPE_DOUBLE     reduce using rule 115 (logical_exp -> logical_or_exp .)
    TYPE_VOID       reduce using rule 115 (logical_exp -> logical_or_exp .)
    KEYWORD_STATIC  reduce using rule 115 (logical_exp -> logical_or_exp .)
    KEYWORD_UNSIGNED reduce using rule 115 (logical_exp -> logical_or_exp .)
    KEYWORD_VOLATILE reduce using rule 115 (logical_exp -> logical_or_exp .)
    KEYWORD_EXTERN  reduce using rule 115 (logical_exp -> logical_or_exp .)
    KEYWORD_SIGNED  reduce using rule 115 (logical_exp -> logical_or_exp .)
    KEYWORD_REGISTER reduce using rule 115 (logical_exp -> logical_or_exp .)
    INCREMENT       reduce using rule 115 (logical_exp -> logical_or_exp .)
    DECREMENT       reduce using rule 115 (logical_exp -> logical_or_exp .)
    BITWISE_AND     reduce using rule 115 (logical_exp -> logical_or_exp .)
    TIMES           reduce using rule 115 (logical_exp -> logical_or_exp .)
    PLUS            reduce using rule 115 (logical_exp -> logical_or_exp .)
    MINUS           reduce using rule 115 (logical_exp -> logical_or_exp .)
    BITWISE_COMPLEMENT reduce using rule 115 (logical_exp -> logical_or_exp .)
    NOT             reduce using rule 115 (logical_exp -> logical_or_exp .)
    LPAREN          reduce using rule 115 (logical_exp -> logical_or_exp .)
    KEYWORD_SIZEOF  reduce using rule 115 (logical_exp -> logical_or_exp .)
    IDENTIFIER      reduce using rule 115 (logical_exp -> logical_or_exp .)
    STRING          reduce using rule 115 (logical_exp -> logical_or_exp .)
    FLOAT_NUMBER    reduce using rule 115 (logical_exp -> logical_or_exp .)
    CHARACTER       reduce using rule 115 (logical_exp -> logical_or_exp .)
    NUMBER          reduce using rule 115 (logical_exp -> logical_or_exp .)
    BINARY_NUMBER   reduce using rule 115 (logical_exp -> logical_or_exp .)
    HEXADECIMAL_NUMBER reduce using rule 115 (logical_exp -> logical_or_exp .)
    OCTAL_NUMBER    reduce using rule 115 (logical_exp -> logical_or_exp .)
    $end            reduce using rule 115 (logical_exp -> logical_or_exp .)
    RPAREN          reduce using rule 115 (logical_exp -> logical_or_exp .)
    SEMICOLON       reduce using rule 115 (logical_exp -> logical_or_exp .)
    RBRACKET        reduce using rule 115 (logical_exp -> logical_or_exp .)
    COMMA           reduce using rule 115 (logical_exp -> logical_or_exp .)
    COLON           reduce using rule 115 (logical_exp -> logical_or_exp .)
    RBRACE          reduce using rule 115 (logical_exp -> logical_or_exp .)
    LOGICAL_OR      shift and go to state 130


state 50

    (179) primary_exp -> identifier_exp .

    LBRACKET        reduce using rule 179 (primary_exp -> identifier_exp .)
    LPAREN          reduce using rule 179 (primary_exp -> identifier_exp .)
    DOT             reduce using rule 179 (primary_exp -> identifier_exp .)
    ARROW           reduce using rule 179 (primary_exp -> identifier_exp .)
    INCREMENT       reduce using rule 179 (primary_exp -> identifier_exp .)
    DECREMENT       reduce using rule 179 (primary_exp -> identifier_exp .)
    ASSIGN          reduce using rule 179 (primary_exp -> identifier_exp .)
    TIMES_ASSIGN    reduce using rule 179 (primary_exp -> identifier_exp .)
    DIVIDE_ASSIGN   reduce using rule 179 (primary_exp -> identifier_exp .)
    MODULUS_ASSIGN  reduce using rule 179 (primary_exp -> identifier_exp .)
    PLUS_ASSIGN     reduce using rule 179 (primary_exp -> identifier_exp .)
    MINUS_ASSIGN    reduce using rule 179 (primary_exp -> identifier_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 179 (primary_exp -> identifier_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 179 (primary_exp -> identifier_exp .)
    BITWISE_AND_ASSIGN reduce using rule 179 (primary_exp -> identifier_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 179 (primary_exp -> identifier_exp .)
    BITWISE_OR_ASSIGN reduce using rule 179 (primary_exp -> identifier_exp .)
    MODULUS         reduce using rule 179 (primary_exp -> identifier_exp .)
    DIVIDE          reduce using rule 179 (primary_exp -> identifier_exp .)
    TIMES           reduce using rule 179 (primary_exp -> identifier_exp .)
    MINUS           reduce using rule 179 (primary_exp -> identifier_exp .)
    PLUS            reduce using rule 179 (primary_exp -> identifier_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 179 (primary_exp -> identifier_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 179 (primary_exp -> identifier_exp .)
    LESS_EQUALS     reduce using rule 179 (primary_exp -> identifier_exp .)
    LESS_THEN       reduce using rule 179 (primary_exp -> identifier_exp .)
    GREATER_EQUALS  reduce using rule 179 (primary_exp -> identifier_exp .)
    GREATER_THEN    reduce using rule 179 (primary_exp -> identifier_exp .)
    NOT_EQUALS      reduce using rule 179 (primary_exp -> identifier_exp .)
    EQUALS_THEN     reduce using rule 179 (primary_exp -> identifier_exp .)
    BITWISE_AND     reduce using rule 179 (primary_exp -> identifier_exp .)
    BITWISE_XOR     reduce using rule 179 (primary_exp -> identifier_exp .)
    BITWISE_OR      reduce using rule 179 (primary_exp -> identifier_exp .)
    LOGICAL_AND     reduce using rule 179 (primary_exp -> identifier_exp .)
    LOGICAL_OR      reduce using rule 179 (primary_exp -> identifier_exp .)
    QUESTION_MARK   reduce using rule 179 (primary_exp -> identifier_exp .)
    KEYWORD_STRUCT  reduce using rule 179 (primary_exp -> identifier_exp .)
    KEYWORD_UNION   reduce using rule 179 (primary_exp -> identifier_exp .)
    TYPE_CHAR       reduce using rule 179 (primary_exp -> identifier_exp .)
    TYPE_INT        reduce using rule 179 (primary_exp -> identifier_exp .)
    TYPE_SHORT      reduce using rule 179 (primary_exp -> identifier_exp .)
    TYPE_LONG       reduce using rule 179 (primary_exp -> identifier_exp .)
    TYPE_FLOAT      reduce using rule 179 (primary_exp -> identifier_exp .)
    TYPE_DOUBLE     reduce using rule 179 (primary_exp -> identifier_exp .)
    TYPE_VOID       reduce using rule 179 (primary_exp -> identifier_exp .)
    KEYWORD_STATIC  reduce using rule 179 (primary_exp -> identifier_exp .)
    KEYWORD_UNSIGNED reduce using rule 179 (primary_exp -> identifier_exp .)
    KEYWORD_VOLATILE reduce using rule 179 (primary_exp -> identifier_exp .)
    KEYWORD_EXTERN  reduce using rule 179 (primary_exp -> identifier_exp .)
    KEYWORD_SIGNED  reduce using rule 179 (primary_exp -> identifier_exp .)
    KEYWORD_REGISTER reduce using rule 179 (primary_exp -> identifier_exp .)
    BITWISE_COMPLEMENT reduce using rule 179 (primary_exp -> identifier_exp .)
    NOT             reduce using rule 179 (primary_exp -> identifier_exp .)
    KEYWORD_SIZEOF  reduce using rule 179 (primary_exp -> identifier_exp .)
    IDENTIFIER      reduce using rule 179 (primary_exp -> identifier_exp .)
    STRING          reduce using rule 179 (primary_exp -> identifier_exp .)
    FLOAT_NUMBER    reduce using rule 179 (primary_exp -> identifier_exp .)
    CHARACTER       reduce using rule 179 (primary_exp -> identifier_exp .)
    NUMBER          reduce using rule 179 (primary_exp -> identifier_exp .)
    BINARY_NUMBER   reduce using rule 179 (primary_exp -> identifier_exp .)
    HEXADECIMAL_NUMBER reduce using rule 179 (primary_exp -> identifier_exp .)
    OCTAL_NUMBER    reduce using rule 179 (primary_exp -> identifier_exp .)
    $end            reduce using rule 179 (primary_exp -> identifier_exp .)
    RPAREN          reduce using rule 179 (primary_exp -> identifier_exp .)
    SEMICOLON       reduce using rule 179 (primary_exp -> identifier_exp .)
    RBRACKET        reduce using rule 179 (primary_exp -> identifier_exp .)
    COMMA           reduce using rule 179 (primary_exp -> identifier_exp .)
    COLON           reduce using rule 179 (primary_exp -> identifier_exp .)
    RBRACE          reduce using rule 179 (primary_exp -> identifier_exp .)


state 51

    (117) logical_or_exp -> logical_and_exp .
    (118) logical_and_exp -> logical_and_exp . LOGICAL_AND bitwise_or_exp

    LOGICAL_OR      reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    QUESTION_MARK   reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    KEYWORD_STRUCT  reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    KEYWORD_UNION   reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    TYPE_CHAR       reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    TYPE_INT        reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    TYPE_SHORT      reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    TYPE_LONG       reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    TYPE_FLOAT      reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    TYPE_DOUBLE     reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    TYPE_VOID       reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    KEYWORD_STATIC  reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    KEYWORD_UNSIGNED reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    KEYWORD_VOLATILE reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    KEYWORD_EXTERN  reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    KEYWORD_SIGNED  reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    KEYWORD_REGISTER reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    INCREMENT       reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    DECREMENT       reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    BITWISE_AND     reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    TIMES           reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    PLUS            reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    MINUS           reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    BITWISE_COMPLEMENT reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    NOT             reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    LPAREN          reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    KEYWORD_SIZEOF  reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    IDENTIFIER      reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    STRING          reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    FLOAT_NUMBER    reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    CHARACTER       reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    NUMBER          reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    BINARY_NUMBER   reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    HEXADECIMAL_NUMBER reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    OCTAL_NUMBER    reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    $end            reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    RPAREN          reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    SEMICOLON       reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    RBRACKET        reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    COMMA           reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    COLON           reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    RBRACE          reduce using rule 117 (logical_or_exp -> logical_and_exp .)
    LOGICAL_AND     shift and go to state 131


state 52

    (181) identifier_exp -> string_exp .

    LBRACKET        reduce using rule 181 (identifier_exp -> string_exp .)
    LPAREN          reduce using rule 181 (identifier_exp -> string_exp .)
    DOT             reduce using rule 181 (identifier_exp -> string_exp .)
    ARROW           reduce using rule 181 (identifier_exp -> string_exp .)
    INCREMENT       reduce using rule 181 (identifier_exp -> string_exp .)
    DECREMENT       reduce using rule 181 (identifier_exp -> string_exp .)
    ASSIGN          reduce using rule 181 (identifier_exp -> string_exp .)
    TIMES_ASSIGN    reduce using rule 181 (identifier_exp -> string_exp .)
    DIVIDE_ASSIGN   reduce using rule 181 (identifier_exp -> string_exp .)
    MODULUS_ASSIGN  reduce using rule 181 (identifier_exp -> string_exp .)
    PLUS_ASSIGN     reduce using rule 181 (identifier_exp -> string_exp .)
    MINUS_ASSIGN    reduce using rule 181 (identifier_exp -> string_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 181 (identifier_exp -> string_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 181 (identifier_exp -> string_exp .)
    BITWISE_AND_ASSIGN reduce using rule 181 (identifier_exp -> string_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 181 (identifier_exp -> string_exp .)
    BITWISE_OR_ASSIGN reduce using rule 181 (identifier_exp -> string_exp .)
    MODULUS         reduce using rule 181 (identifier_exp -> string_exp .)
    DIVIDE          reduce using rule 181 (identifier_exp -> string_exp .)
    TIMES           reduce using rule 181 (identifier_exp -> string_exp .)
    MINUS           reduce using rule 181 (identifier_exp -> string_exp .)
    PLUS            reduce using rule 181 (identifier_exp -> string_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 181 (identifier_exp -> string_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 181 (identifier_exp -> string_exp .)
    LESS_EQUALS     reduce using rule 181 (identifier_exp -> string_exp .)
    LESS_THEN       reduce using rule 181 (identifier_exp -> string_exp .)
    GREATER_EQUALS  reduce using rule 181 (identifier_exp -> string_exp .)
    GREATER_THEN    reduce using rule 181 (identifier_exp -> string_exp .)
    NOT_EQUALS      reduce using rule 181 (identifier_exp -> string_exp .)
    EQUALS_THEN     reduce using rule 181 (identifier_exp -> string_exp .)
    BITWISE_AND     reduce using rule 181 (identifier_exp -> string_exp .)
    BITWISE_XOR     reduce using rule 181 (identifier_exp -> string_exp .)
    BITWISE_OR      reduce using rule 181 (identifier_exp -> string_exp .)
    LOGICAL_AND     reduce using rule 181 (identifier_exp -> string_exp .)
    LOGICAL_OR      reduce using rule 181 (identifier_exp -> string_exp .)
    QUESTION_MARK   reduce using rule 181 (identifier_exp -> string_exp .)
    KEYWORD_STRUCT  reduce using rule 181 (identifier_exp -> string_exp .)
    KEYWORD_UNION   reduce using rule 181 (identifier_exp -> string_exp .)
    TYPE_CHAR       reduce using rule 181 (identifier_exp -> string_exp .)
    TYPE_INT        reduce using rule 181 (identifier_exp -> string_exp .)
    TYPE_SHORT      reduce using rule 181 (identifier_exp -> string_exp .)
    TYPE_LONG       reduce using rule 181 (identifier_exp -> string_exp .)
    TYPE_FLOAT      reduce using rule 181 (identifier_exp -> string_exp .)
    TYPE_DOUBLE     reduce using rule 181 (identifier_exp -> string_exp .)
    TYPE_VOID       reduce using rule 181 (identifier_exp -> string_exp .)
    KEYWORD_STATIC  reduce using rule 181 (identifier_exp -> string_exp .)
    KEYWORD_UNSIGNED reduce using rule 181 (identifier_exp -> string_exp .)
    KEYWORD_VOLATILE reduce using rule 181 (identifier_exp -> string_exp .)
    KEYWORD_EXTERN  reduce using rule 181 (identifier_exp -> string_exp .)
    KEYWORD_SIGNED  reduce using rule 181 (identifier_exp -> string_exp .)
    KEYWORD_REGISTER reduce using rule 181 (identifier_exp -> string_exp .)
    BITWISE_COMPLEMENT reduce using rule 181 (identifier_exp -> string_exp .)
    NOT             reduce using rule 181 (identifier_exp -> string_exp .)
    KEYWORD_SIZEOF  reduce using rule 181 (identifier_exp -> string_exp .)
    IDENTIFIER      reduce using rule 181 (identifier_exp -> string_exp .)
    STRING          reduce using rule 181 (identifier_exp -> string_exp .)
    FLOAT_NUMBER    reduce using rule 181 (identifier_exp -> string_exp .)
    CHARACTER       reduce using rule 181 (identifier_exp -> string_exp .)
    NUMBER          reduce using rule 181 (identifier_exp -> string_exp .)
    BINARY_NUMBER   reduce using rule 181 (identifier_exp -> string_exp .)
    HEXADECIMAL_NUMBER reduce using rule 181 (identifier_exp -> string_exp .)
    OCTAL_NUMBER    reduce using rule 181 (identifier_exp -> string_exp .)
    $end            reduce using rule 181 (identifier_exp -> string_exp .)
    RPAREN          reduce using rule 181 (identifier_exp -> string_exp .)
    SEMICOLON       reduce using rule 181 (identifier_exp -> string_exp .)
    RBRACKET        reduce using rule 181 (identifier_exp -> string_exp .)
    COMMA           reduce using rule 181 (identifier_exp -> string_exp .)
    COLON           reduce using rule 181 (identifier_exp -> string_exp .)
    RBRACE          reduce using rule 181 (identifier_exp -> string_exp .)


state 53

    (119) logical_and_exp -> bitwise_or_exp .
    (120) bitwise_or_exp -> bitwise_or_exp . BITWISE_OR bitwise_xor_exp

    LOGICAL_AND     reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    LOGICAL_OR      reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    QUESTION_MARK   reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_STRUCT  reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_UNION   reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    TYPE_CHAR       reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    TYPE_INT        reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    TYPE_SHORT      reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    TYPE_LONG       reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    TYPE_FLOAT      reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    TYPE_DOUBLE     reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    TYPE_VOID       reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_STATIC  reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_UNSIGNED reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_VOLATILE reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_EXTERN  reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_SIGNED  reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_REGISTER reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    INCREMENT       reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    DECREMENT       reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    BITWISE_AND     reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    TIMES           reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    PLUS            reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    MINUS           reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    BITWISE_COMPLEMENT reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    NOT             reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    LPAREN          reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_SIZEOF  reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    IDENTIFIER      reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    STRING          reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    FLOAT_NUMBER    reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    CHARACTER       reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    NUMBER          reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    BINARY_NUMBER   reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    HEXADECIMAL_NUMBER reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    OCTAL_NUMBER    reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    $end            reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    RPAREN          reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    SEMICOLON       reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    RBRACKET        reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    COMMA           reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    COLON           reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    RBRACE          reduce using rule 119 (logical_and_exp -> bitwise_or_exp .)
    BITWISE_OR      shift and go to state 132


state 54

    (182) string_exp -> STRING .

    LBRACKET        reduce using rule 182 (string_exp -> STRING .)
    LPAREN          reduce using rule 182 (string_exp -> STRING .)
    DOT             reduce using rule 182 (string_exp -> STRING .)
    ARROW           reduce using rule 182 (string_exp -> STRING .)
    INCREMENT       reduce using rule 182 (string_exp -> STRING .)
    DECREMENT       reduce using rule 182 (string_exp -> STRING .)
    ASSIGN          reduce using rule 182 (string_exp -> STRING .)
    TIMES_ASSIGN    reduce using rule 182 (string_exp -> STRING .)
    DIVIDE_ASSIGN   reduce using rule 182 (string_exp -> STRING .)
    MODULUS_ASSIGN  reduce using rule 182 (string_exp -> STRING .)
    PLUS_ASSIGN     reduce using rule 182 (string_exp -> STRING .)
    MINUS_ASSIGN    reduce using rule 182 (string_exp -> STRING .)
    SHIFT_LEFT_ASSIGN reduce using rule 182 (string_exp -> STRING .)
    SHIFT_RIGHT_ASSIGN reduce using rule 182 (string_exp -> STRING .)
    BITWISE_AND_ASSIGN reduce using rule 182 (string_exp -> STRING .)
    BITWISE_XOR_ASSIGN reduce using rule 182 (string_exp -> STRING .)
    BITWISE_OR_ASSIGN reduce using rule 182 (string_exp -> STRING .)
    MODULUS         reduce using rule 182 (string_exp -> STRING .)
    DIVIDE          reduce using rule 182 (string_exp -> STRING .)
    TIMES           reduce using rule 182 (string_exp -> STRING .)
    MINUS           reduce using rule 182 (string_exp -> STRING .)
    PLUS            reduce using rule 182 (string_exp -> STRING .)
    BITWISE_SHIFT_RIGHT reduce using rule 182 (string_exp -> STRING .)
    BITWISE_SHIFT_LEFT reduce using rule 182 (string_exp -> STRING .)
    LESS_EQUALS     reduce using rule 182 (string_exp -> STRING .)
    LESS_THEN       reduce using rule 182 (string_exp -> STRING .)
    GREATER_EQUALS  reduce using rule 182 (string_exp -> STRING .)
    GREATER_THEN    reduce using rule 182 (string_exp -> STRING .)
    NOT_EQUALS      reduce using rule 182 (string_exp -> STRING .)
    EQUALS_THEN     reduce using rule 182 (string_exp -> STRING .)
    BITWISE_AND     reduce using rule 182 (string_exp -> STRING .)
    BITWISE_XOR     reduce using rule 182 (string_exp -> STRING .)
    BITWISE_OR      reduce using rule 182 (string_exp -> STRING .)
    LOGICAL_AND     reduce using rule 182 (string_exp -> STRING .)
    LOGICAL_OR      reduce using rule 182 (string_exp -> STRING .)
    QUESTION_MARK   reduce using rule 182 (string_exp -> STRING .)
    KEYWORD_STRUCT  reduce using rule 182 (string_exp -> STRING .)
    KEYWORD_UNION   reduce using rule 182 (string_exp -> STRING .)
    TYPE_CHAR       reduce using rule 182 (string_exp -> STRING .)
    TYPE_INT        reduce using rule 182 (string_exp -> STRING .)
    TYPE_SHORT      reduce using rule 182 (string_exp -> STRING .)
    TYPE_LONG       reduce using rule 182 (string_exp -> STRING .)
    TYPE_FLOAT      reduce using rule 182 (string_exp -> STRING .)
    TYPE_DOUBLE     reduce using rule 182 (string_exp -> STRING .)
    TYPE_VOID       reduce using rule 182 (string_exp -> STRING .)
    KEYWORD_STATIC  reduce using rule 182 (string_exp -> STRING .)
    KEYWORD_UNSIGNED reduce using rule 182 (string_exp -> STRING .)
    KEYWORD_VOLATILE reduce using rule 182 (string_exp -> STRING .)
    KEYWORD_EXTERN  reduce using rule 182 (string_exp -> STRING .)
    KEYWORD_SIGNED  reduce using rule 182 (string_exp -> STRING .)
    KEYWORD_REGISTER reduce using rule 182 (string_exp -> STRING .)
    BITWISE_COMPLEMENT reduce using rule 182 (string_exp -> STRING .)
    NOT             reduce using rule 182 (string_exp -> STRING .)
    KEYWORD_SIZEOF  reduce using rule 182 (string_exp -> STRING .)
    IDENTIFIER      reduce using rule 182 (string_exp -> STRING .)
    STRING          reduce using rule 182 (string_exp -> STRING .)
    FLOAT_NUMBER    reduce using rule 182 (string_exp -> STRING .)
    CHARACTER       reduce using rule 182 (string_exp -> STRING .)
    NUMBER          reduce using rule 182 (string_exp -> STRING .)
    BINARY_NUMBER   reduce using rule 182 (string_exp -> STRING .)
    HEXADECIMAL_NUMBER reduce using rule 182 (string_exp -> STRING .)
    OCTAL_NUMBER    reduce using rule 182 (string_exp -> STRING .)
    $end            reduce using rule 182 (string_exp -> STRING .)
    RPAREN          reduce using rule 182 (string_exp -> STRING .)
    SEMICOLON       reduce using rule 182 (string_exp -> STRING .)
    RBRACKET        reduce using rule 182 (string_exp -> STRING .)
    COMMA           reduce using rule 182 (string_exp -> STRING .)
    COLON           reduce using rule 182 (string_exp -> STRING .)
    RBRACE          reduce using rule 182 (string_exp -> STRING .)


state 55

    (183) string_exp -> number_exp .

    LBRACKET        reduce using rule 183 (string_exp -> number_exp .)
    LPAREN          reduce using rule 183 (string_exp -> number_exp .)
    DOT             reduce using rule 183 (string_exp -> number_exp .)
    ARROW           reduce using rule 183 (string_exp -> number_exp .)
    INCREMENT       reduce using rule 183 (string_exp -> number_exp .)
    DECREMENT       reduce using rule 183 (string_exp -> number_exp .)
    ASSIGN          reduce using rule 183 (string_exp -> number_exp .)
    TIMES_ASSIGN    reduce using rule 183 (string_exp -> number_exp .)
    DIVIDE_ASSIGN   reduce using rule 183 (string_exp -> number_exp .)
    MODULUS_ASSIGN  reduce using rule 183 (string_exp -> number_exp .)
    PLUS_ASSIGN     reduce using rule 183 (string_exp -> number_exp .)
    MINUS_ASSIGN    reduce using rule 183 (string_exp -> number_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 183 (string_exp -> number_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 183 (string_exp -> number_exp .)
    BITWISE_AND_ASSIGN reduce using rule 183 (string_exp -> number_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 183 (string_exp -> number_exp .)
    BITWISE_OR_ASSIGN reduce using rule 183 (string_exp -> number_exp .)
    MODULUS         reduce using rule 183 (string_exp -> number_exp .)
    DIVIDE          reduce using rule 183 (string_exp -> number_exp .)
    TIMES           reduce using rule 183 (string_exp -> number_exp .)
    MINUS           reduce using rule 183 (string_exp -> number_exp .)
    PLUS            reduce using rule 183 (string_exp -> number_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 183 (string_exp -> number_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 183 (string_exp -> number_exp .)
    LESS_EQUALS     reduce using rule 183 (string_exp -> number_exp .)
    LESS_THEN       reduce using rule 183 (string_exp -> number_exp .)
    GREATER_EQUALS  reduce using rule 183 (string_exp -> number_exp .)
    GREATER_THEN    reduce using rule 183 (string_exp -> number_exp .)
    NOT_EQUALS      reduce using rule 183 (string_exp -> number_exp .)
    EQUALS_THEN     reduce using rule 183 (string_exp -> number_exp .)
    BITWISE_AND     reduce using rule 183 (string_exp -> number_exp .)
    BITWISE_XOR     reduce using rule 183 (string_exp -> number_exp .)
    BITWISE_OR      reduce using rule 183 (string_exp -> number_exp .)
    LOGICAL_AND     reduce using rule 183 (string_exp -> number_exp .)
    LOGICAL_OR      reduce using rule 183 (string_exp -> number_exp .)
    QUESTION_MARK   reduce using rule 183 (string_exp -> number_exp .)
    KEYWORD_STRUCT  reduce using rule 183 (string_exp -> number_exp .)
    KEYWORD_UNION   reduce using rule 183 (string_exp -> number_exp .)
    TYPE_CHAR       reduce using rule 183 (string_exp -> number_exp .)
    TYPE_INT        reduce using rule 183 (string_exp -> number_exp .)
    TYPE_SHORT      reduce using rule 183 (string_exp -> number_exp .)
    TYPE_LONG       reduce using rule 183 (string_exp -> number_exp .)
    TYPE_FLOAT      reduce using rule 183 (string_exp -> number_exp .)
    TYPE_DOUBLE     reduce using rule 183 (string_exp -> number_exp .)
    TYPE_VOID       reduce using rule 183 (string_exp -> number_exp .)
    KEYWORD_STATIC  reduce using rule 183 (string_exp -> number_exp .)
    KEYWORD_UNSIGNED reduce using rule 183 (string_exp -> number_exp .)
    KEYWORD_VOLATILE reduce using rule 183 (string_exp -> number_exp .)
    KEYWORD_EXTERN  reduce using rule 183 (string_exp -> number_exp .)
    KEYWORD_SIGNED  reduce using rule 183 (string_exp -> number_exp .)
    KEYWORD_REGISTER reduce using rule 183 (string_exp -> number_exp .)
    BITWISE_COMPLEMENT reduce using rule 183 (string_exp -> number_exp .)
    NOT             reduce using rule 183 (string_exp -> number_exp .)
    KEYWORD_SIZEOF  reduce using rule 183 (string_exp -> number_exp .)
    IDENTIFIER      reduce using rule 183 (string_exp -> number_exp .)
    STRING          reduce using rule 183 (string_exp -> number_exp .)
    FLOAT_NUMBER    reduce using rule 183 (string_exp -> number_exp .)
    CHARACTER       reduce using rule 183 (string_exp -> number_exp .)
    NUMBER          reduce using rule 183 (string_exp -> number_exp .)
    BINARY_NUMBER   reduce using rule 183 (string_exp -> number_exp .)
    HEXADECIMAL_NUMBER reduce using rule 183 (string_exp -> number_exp .)
    OCTAL_NUMBER    reduce using rule 183 (string_exp -> number_exp .)
    $end            reduce using rule 183 (string_exp -> number_exp .)
    RPAREN          reduce using rule 183 (string_exp -> number_exp .)
    SEMICOLON       reduce using rule 183 (string_exp -> number_exp .)
    RBRACKET        reduce using rule 183 (string_exp -> number_exp .)
    COMMA           reduce using rule 183 (string_exp -> number_exp .)
    COLON           reduce using rule 183 (string_exp -> number_exp .)
    RBRACE          reduce using rule 183 (string_exp -> number_exp .)


state 56

    (121) bitwise_or_exp -> bitwise_xor_exp .
    (122) bitwise_xor_exp -> bitwise_xor_exp . BITWISE_XOR bitwise_and_exp

    BITWISE_OR      reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    LOGICAL_AND     reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    LOGICAL_OR      reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    QUESTION_MARK   reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_STRUCT  reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_UNION   reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    TYPE_CHAR       reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    TYPE_INT        reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    TYPE_SHORT      reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    TYPE_LONG       reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    TYPE_FLOAT      reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    TYPE_DOUBLE     reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    TYPE_VOID       reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_STATIC  reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_UNSIGNED reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_VOLATILE reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_EXTERN  reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_SIGNED  reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_REGISTER reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    INCREMENT       reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    DECREMENT       reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    BITWISE_AND     reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    TIMES           reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    PLUS            reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    MINUS           reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    BITWISE_COMPLEMENT reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    NOT             reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    LPAREN          reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_SIZEOF  reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    IDENTIFIER      reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    STRING          reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    FLOAT_NUMBER    reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    CHARACTER       reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    NUMBER          reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    BINARY_NUMBER   reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    HEXADECIMAL_NUMBER reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    OCTAL_NUMBER    reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    $end            reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    RPAREN          reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    SEMICOLON       reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    RBRACKET        reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    COMMA           reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    COLON           reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    RBRACE          reduce using rule 121 (bitwise_or_exp -> bitwise_xor_exp .)
    BITWISE_XOR     shift and go to state 133


state 57

    (184) number_exp -> integer_number .

    LBRACKET        reduce using rule 184 (number_exp -> integer_number .)
    LPAREN          reduce using rule 184 (number_exp -> integer_number .)
    DOT             reduce using rule 184 (number_exp -> integer_number .)
    ARROW           reduce using rule 184 (number_exp -> integer_number .)
    INCREMENT       reduce using rule 184 (number_exp -> integer_number .)
    DECREMENT       reduce using rule 184 (number_exp -> integer_number .)
    ASSIGN          reduce using rule 184 (number_exp -> integer_number .)
    TIMES_ASSIGN    reduce using rule 184 (number_exp -> integer_number .)
    DIVIDE_ASSIGN   reduce using rule 184 (number_exp -> integer_number .)
    MODULUS_ASSIGN  reduce using rule 184 (number_exp -> integer_number .)
    PLUS_ASSIGN     reduce using rule 184 (number_exp -> integer_number .)
    MINUS_ASSIGN    reduce using rule 184 (number_exp -> integer_number .)
    SHIFT_LEFT_ASSIGN reduce using rule 184 (number_exp -> integer_number .)
    SHIFT_RIGHT_ASSIGN reduce using rule 184 (number_exp -> integer_number .)
    BITWISE_AND_ASSIGN reduce using rule 184 (number_exp -> integer_number .)
    BITWISE_XOR_ASSIGN reduce using rule 184 (number_exp -> integer_number .)
    BITWISE_OR_ASSIGN reduce using rule 184 (number_exp -> integer_number .)
    MODULUS         reduce using rule 184 (number_exp -> integer_number .)
    DIVIDE          reduce using rule 184 (number_exp -> integer_number .)
    TIMES           reduce using rule 184 (number_exp -> integer_number .)
    MINUS           reduce using rule 184 (number_exp -> integer_number .)
    PLUS            reduce using rule 184 (number_exp -> integer_number .)
    BITWISE_SHIFT_RIGHT reduce using rule 184 (number_exp -> integer_number .)
    BITWISE_SHIFT_LEFT reduce using rule 184 (number_exp -> integer_number .)
    LESS_EQUALS     reduce using rule 184 (number_exp -> integer_number .)
    LESS_THEN       reduce using rule 184 (number_exp -> integer_number .)
    GREATER_EQUALS  reduce using rule 184 (number_exp -> integer_number .)
    GREATER_THEN    reduce using rule 184 (number_exp -> integer_number .)
    NOT_EQUALS      reduce using rule 184 (number_exp -> integer_number .)
    EQUALS_THEN     reduce using rule 184 (number_exp -> integer_number .)
    BITWISE_AND     reduce using rule 184 (number_exp -> integer_number .)
    BITWISE_XOR     reduce using rule 184 (number_exp -> integer_number .)
    BITWISE_OR      reduce using rule 184 (number_exp -> integer_number .)
    LOGICAL_AND     reduce using rule 184 (number_exp -> integer_number .)
    LOGICAL_OR      reduce using rule 184 (number_exp -> integer_number .)
    QUESTION_MARK   reduce using rule 184 (number_exp -> integer_number .)
    KEYWORD_STRUCT  reduce using rule 184 (number_exp -> integer_number .)
    KEYWORD_UNION   reduce using rule 184 (number_exp -> integer_number .)
    TYPE_CHAR       reduce using rule 184 (number_exp -> integer_number .)
    TYPE_INT        reduce using rule 184 (number_exp -> integer_number .)
    TYPE_SHORT      reduce using rule 184 (number_exp -> integer_number .)
    TYPE_LONG       reduce using rule 184 (number_exp -> integer_number .)
    TYPE_FLOAT      reduce using rule 184 (number_exp -> integer_number .)
    TYPE_DOUBLE     reduce using rule 184 (number_exp -> integer_number .)
    TYPE_VOID       reduce using rule 184 (number_exp -> integer_number .)
    KEYWORD_STATIC  reduce using rule 184 (number_exp -> integer_number .)
    KEYWORD_UNSIGNED reduce using rule 184 (number_exp -> integer_number .)
    KEYWORD_VOLATILE reduce using rule 184 (number_exp -> integer_number .)
    KEYWORD_EXTERN  reduce using rule 184 (number_exp -> integer_number .)
    KEYWORD_SIGNED  reduce using rule 184 (number_exp -> integer_number .)
    KEYWORD_REGISTER reduce using rule 184 (number_exp -> integer_number .)
    BITWISE_COMPLEMENT reduce using rule 184 (number_exp -> integer_number .)
    NOT             reduce using rule 184 (number_exp -> integer_number .)
    KEYWORD_SIZEOF  reduce using rule 184 (number_exp -> integer_number .)
    IDENTIFIER      reduce using rule 184 (number_exp -> integer_number .)
    STRING          reduce using rule 184 (number_exp -> integer_number .)
    FLOAT_NUMBER    reduce using rule 184 (number_exp -> integer_number .)
    CHARACTER       reduce using rule 184 (number_exp -> integer_number .)
    NUMBER          reduce using rule 184 (number_exp -> integer_number .)
    BINARY_NUMBER   reduce using rule 184 (number_exp -> integer_number .)
    HEXADECIMAL_NUMBER reduce using rule 184 (number_exp -> integer_number .)
    OCTAL_NUMBER    reduce using rule 184 (number_exp -> integer_number .)
    $end            reduce using rule 184 (number_exp -> integer_number .)
    RPAREN          reduce using rule 184 (number_exp -> integer_number .)
    SEMICOLON       reduce using rule 184 (number_exp -> integer_number .)
    RBRACKET        reduce using rule 184 (number_exp -> integer_number .)
    COMMA           reduce using rule 184 (number_exp -> integer_number .)
    COLON           reduce using rule 184 (number_exp -> integer_number .)
    RBRACE          reduce using rule 184 (number_exp -> integer_number .)


state 58

    (185) number_exp -> FLOAT_NUMBER .

    LBRACKET        reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    LPAREN          reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    DOT             reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    ARROW           reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    INCREMENT       reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    DECREMENT       reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    ASSIGN          reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    TIMES_ASSIGN    reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    MODULUS_ASSIGN  reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    PLUS_ASSIGN     reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    MINUS_ASSIGN    reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    SHIFT_LEFT_ASSIGN reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    BITWISE_AND_ASSIGN reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    BITWISE_XOR_ASSIGN reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    BITWISE_OR_ASSIGN reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    MODULUS         reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    TIMES           reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    MINUS           reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    PLUS            reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    BITWISE_SHIFT_RIGHT reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    BITWISE_SHIFT_LEFT reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    LESS_EQUALS     reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    LESS_THEN       reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    GREATER_EQUALS  reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    GREATER_THEN    reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    NOT_EQUALS      reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    EQUALS_THEN     reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    BITWISE_AND     reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    BITWISE_XOR     reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    BITWISE_OR      reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    LOGICAL_AND     reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    LOGICAL_OR      reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    QUESTION_MARK   reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_STRUCT  reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_UNION   reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    TYPE_CHAR       reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    TYPE_INT        reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    TYPE_SHORT      reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    TYPE_LONG       reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    TYPE_FLOAT      reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    TYPE_DOUBLE     reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    TYPE_VOID       reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_STATIC  reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_UNSIGNED reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_VOLATILE reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_EXTERN  reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_SIGNED  reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_REGISTER reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    BITWISE_COMPLEMENT reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    NOT             reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_SIZEOF  reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    IDENTIFIER      reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    STRING          reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    FLOAT_NUMBER    reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    CHARACTER       reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    NUMBER          reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    BINARY_NUMBER   reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    HEXADECIMAL_NUMBER reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    OCTAL_NUMBER    reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    $end            reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    RPAREN          reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    SEMICOLON       reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    RBRACKET        reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    COMMA           reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    COLON           reduce using rule 185 (number_exp -> FLOAT_NUMBER .)
    RBRACE          reduce using rule 185 (number_exp -> FLOAT_NUMBER .)


state 59

    (186) number_exp -> CHARACTER .

    LBRACKET        reduce using rule 186 (number_exp -> CHARACTER .)
    LPAREN          reduce using rule 186 (number_exp -> CHARACTER .)
    DOT             reduce using rule 186 (number_exp -> CHARACTER .)
    ARROW           reduce using rule 186 (number_exp -> CHARACTER .)
    INCREMENT       reduce using rule 186 (number_exp -> CHARACTER .)
    DECREMENT       reduce using rule 186 (number_exp -> CHARACTER .)
    ASSIGN          reduce using rule 186 (number_exp -> CHARACTER .)
    TIMES_ASSIGN    reduce using rule 186 (number_exp -> CHARACTER .)
    DIVIDE_ASSIGN   reduce using rule 186 (number_exp -> CHARACTER .)
    MODULUS_ASSIGN  reduce using rule 186 (number_exp -> CHARACTER .)
    PLUS_ASSIGN     reduce using rule 186 (number_exp -> CHARACTER .)
    MINUS_ASSIGN    reduce using rule 186 (number_exp -> CHARACTER .)
    SHIFT_LEFT_ASSIGN reduce using rule 186 (number_exp -> CHARACTER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 186 (number_exp -> CHARACTER .)
    BITWISE_AND_ASSIGN reduce using rule 186 (number_exp -> CHARACTER .)
    BITWISE_XOR_ASSIGN reduce using rule 186 (number_exp -> CHARACTER .)
    BITWISE_OR_ASSIGN reduce using rule 186 (number_exp -> CHARACTER .)
    MODULUS         reduce using rule 186 (number_exp -> CHARACTER .)
    DIVIDE          reduce using rule 186 (number_exp -> CHARACTER .)
    TIMES           reduce using rule 186 (number_exp -> CHARACTER .)
    MINUS           reduce using rule 186 (number_exp -> CHARACTER .)
    PLUS            reduce using rule 186 (number_exp -> CHARACTER .)
    BITWISE_SHIFT_RIGHT reduce using rule 186 (number_exp -> CHARACTER .)
    BITWISE_SHIFT_LEFT reduce using rule 186 (number_exp -> CHARACTER .)
    LESS_EQUALS     reduce using rule 186 (number_exp -> CHARACTER .)
    LESS_THEN       reduce using rule 186 (number_exp -> CHARACTER .)
    GREATER_EQUALS  reduce using rule 186 (number_exp -> CHARACTER .)
    GREATER_THEN    reduce using rule 186 (number_exp -> CHARACTER .)
    NOT_EQUALS      reduce using rule 186 (number_exp -> CHARACTER .)
    EQUALS_THEN     reduce using rule 186 (number_exp -> CHARACTER .)
    BITWISE_AND     reduce using rule 186 (number_exp -> CHARACTER .)
    BITWISE_XOR     reduce using rule 186 (number_exp -> CHARACTER .)
    BITWISE_OR      reduce using rule 186 (number_exp -> CHARACTER .)
    LOGICAL_AND     reduce using rule 186 (number_exp -> CHARACTER .)
    LOGICAL_OR      reduce using rule 186 (number_exp -> CHARACTER .)
    QUESTION_MARK   reduce using rule 186 (number_exp -> CHARACTER .)
    KEYWORD_STRUCT  reduce using rule 186 (number_exp -> CHARACTER .)
    KEYWORD_UNION   reduce using rule 186 (number_exp -> CHARACTER .)
    TYPE_CHAR       reduce using rule 186 (number_exp -> CHARACTER .)
    TYPE_INT        reduce using rule 186 (number_exp -> CHARACTER .)
    TYPE_SHORT      reduce using rule 186 (number_exp -> CHARACTER .)
    TYPE_LONG       reduce using rule 186 (number_exp -> CHARACTER .)
    TYPE_FLOAT      reduce using rule 186 (number_exp -> CHARACTER .)
    TYPE_DOUBLE     reduce using rule 186 (number_exp -> CHARACTER .)
    TYPE_VOID       reduce using rule 186 (number_exp -> CHARACTER .)
    KEYWORD_STATIC  reduce using rule 186 (number_exp -> CHARACTER .)
    KEYWORD_UNSIGNED reduce using rule 186 (number_exp -> CHARACTER .)
    KEYWORD_VOLATILE reduce using rule 186 (number_exp -> CHARACTER .)
    KEYWORD_EXTERN  reduce using rule 186 (number_exp -> CHARACTER .)
    KEYWORD_SIGNED  reduce using rule 186 (number_exp -> CHARACTER .)
    KEYWORD_REGISTER reduce using rule 186 (number_exp -> CHARACTER .)
    BITWISE_COMPLEMENT reduce using rule 186 (number_exp -> CHARACTER .)
    NOT             reduce using rule 186 (number_exp -> CHARACTER .)
    KEYWORD_SIZEOF  reduce using rule 186 (number_exp -> CHARACTER .)
    IDENTIFIER      reduce using rule 186 (number_exp -> CHARACTER .)
    STRING          reduce using rule 186 (number_exp -> CHARACTER .)
    FLOAT_NUMBER    reduce using rule 186 (number_exp -> CHARACTER .)
    CHARACTER       reduce using rule 186 (number_exp -> CHARACTER .)
    NUMBER          reduce using rule 186 (number_exp -> CHARACTER .)
    BINARY_NUMBER   reduce using rule 186 (number_exp -> CHARACTER .)
    HEXADECIMAL_NUMBER reduce using rule 186 (number_exp -> CHARACTER .)
    OCTAL_NUMBER    reduce using rule 186 (number_exp -> CHARACTER .)
    $end            reduce using rule 186 (number_exp -> CHARACTER .)
    RPAREN          reduce using rule 186 (number_exp -> CHARACTER .)
    SEMICOLON       reduce using rule 186 (number_exp -> CHARACTER .)
    RBRACKET        reduce using rule 186 (number_exp -> CHARACTER .)
    COMMA           reduce using rule 186 (number_exp -> CHARACTER .)
    COLON           reduce using rule 186 (number_exp -> CHARACTER .)
    RBRACE          reduce using rule 186 (number_exp -> CHARACTER .)


state 60

    (187) number_exp -> parentesis_exp .

    LBRACKET        reduce using rule 187 (number_exp -> parentesis_exp .)
    LPAREN          reduce using rule 187 (number_exp -> parentesis_exp .)
    DOT             reduce using rule 187 (number_exp -> parentesis_exp .)
    ARROW           reduce using rule 187 (number_exp -> parentesis_exp .)
    INCREMENT       reduce using rule 187 (number_exp -> parentesis_exp .)
    DECREMENT       reduce using rule 187 (number_exp -> parentesis_exp .)
    ASSIGN          reduce using rule 187 (number_exp -> parentesis_exp .)
    TIMES_ASSIGN    reduce using rule 187 (number_exp -> parentesis_exp .)
    DIVIDE_ASSIGN   reduce using rule 187 (number_exp -> parentesis_exp .)
    MODULUS_ASSIGN  reduce using rule 187 (number_exp -> parentesis_exp .)
    PLUS_ASSIGN     reduce using rule 187 (number_exp -> parentesis_exp .)
    MINUS_ASSIGN    reduce using rule 187 (number_exp -> parentesis_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 187 (number_exp -> parentesis_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 187 (number_exp -> parentesis_exp .)
    BITWISE_AND_ASSIGN reduce using rule 187 (number_exp -> parentesis_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 187 (number_exp -> parentesis_exp .)
    BITWISE_OR_ASSIGN reduce using rule 187 (number_exp -> parentesis_exp .)
    MODULUS         reduce using rule 187 (number_exp -> parentesis_exp .)
    DIVIDE          reduce using rule 187 (number_exp -> parentesis_exp .)
    TIMES           reduce using rule 187 (number_exp -> parentesis_exp .)
    MINUS           reduce using rule 187 (number_exp -> parentesis_exp .)
    PLUS            reduce using rule 187 (number_exp -> parentesis_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 187 (number_exp -> parentesis_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 187 (number_exp -> parentesis_exp .)
    LESS_EQUALS     reduce using rule 187 (number_exp -> parentesis_exp .)
    LESS_THEN       reduce using rule 187 (number_exp -> parentesis_exp .)
    GREATER_EQUALS  reduce using rule 187 (number_exp -> parentesis_exp .)
    GREATER_THEN    reduce using rule 187 (number_exp -> parentesis_exp .)
    NOT_EQUALS      reduce using rule 187 (number_exp -> parentesis_exp .)
    EQUALS_THEN     reduce using rule 187 (number_exp -> parentesis_exp .)
    BITWISE_AND     reduce using rule 187 (number_exp -> parentesis_exp .)
    BITWISE_XOR     reduce using rule 187 (number_exp -> parentesis_exp .)
    BITWISE_OR      reduce using rule 187 (number_exp -> parentesis_exp .)
    LOGICAL_AND     reduce using rule 187 (number_exp -> parentesis_exp .)
    LOGICAL_OR      reduce using rule 187 (number_exp -> parentesis_exp .)
    QUESTION_MARK   reduce using rule 187 (number_exp -> parentesis_exp .)
    KEYWORD_STRUCT  reduce using rule 187 (number_exp -> parentesis_exp .)
    KEYWORD_UNION   reduce using rule 187 (number_exp -> parentesis_exp .)
    TYPE_CHAR       reduce using rule 187 (number_exp -> parentesis_exp .)
    TYPE_INT        reduce using rule 187 (number_exp -> parentesis_exp .)
    TYPE_SHORT      reduce using rule 187 (number_exp -> parentesis_exp .)
    TYPE_LONG       reduce using rule 187 (number_exp -> parentesis_exp .)
    TYPE_FLOAT      reduce using rule 187 (number_exp -> parentesis_exp .)
    TYPE_DOUBLE     reduce using rule 187 (number_exp -> parentesis_exp .)
    TYPE_VOID       reduce using rule 187 (number_exp -> parentesis_exp .)
    KEYWORD_STATIC  reduce using rule 187 (number_exp -> parentesis_exp .)
    KEYWORD_UNSIGNED reduce using rule 187 (number_exp -> parentesis_exp .)
    KEYWORD_VOLATILE reduce using rule 187 (number_exp -> parentesis_exp .)
    KEYWORD_EXTERN  reduce using rule 187 (number_exp -> parentesis_exp .)
    KEYWORD_SIGNED  reduce using rule 187 (number_exp -> parentesis_exp .)
    KEYWORD_REGISTER reduce using rule 187 (number_exp -> parentesis_exp .)
    BITWISE_COMPLEMENT reduce using rule 187 (number_exp -> parentesis_exp .)
    NOT             reduce using rule 187 (number_exp -> parentesis_exp .)
    KEYWORD_SIZEOF  reduce using rule 187 (number_exp -> parentesis_exp .)
    IDENTIFIER      reduce using rule 187 (number_exp -> parentesis_exp .)
    STRING          reduce using rule 187 (number_exp -> parentesis_exp .)
    FLOAT_NUMBER    reduce using rule 187 (number_exp -> parentesis_exp .)
    CHARACTER       reduce using rule 187 (number_exp -> parentesis_exp .)
    NUMBER          reduce using rule 187 (number_exp -> parentesis_exp .)
    BINARY_NUMBER   reduce using rule 187 (number_exp -> parentesis_exp .)
    HEXADECIMAL_NUMBER reduce using rule 187 (number_exp -> parentesis_exp .)
    OCTAL_NUMBER    reduce using rule 187 (number_exp -> parentesis_exp .)
    $end            reduce using rule 187 (number_exp -> parentesis_exp .)
    RPAREN          reduce using rule 187 (number_exp -> parentesis_exp .)
    SEMICOLON       reduce using rule 187 (number_exp -> parentesis_exp .)
    RBRACKET        reduce using rule 187 (number_exp -> parentesis_exp .)
    COMMA           reduce using rule 187 (number_exp -> parentesis_exp .)
    COLON           reduce using rule 187 (number_exp -> parentesis_exp .)
    RBRACE          reduce using rule 187 (number_exp -> parentesis_exp .)


state 61

    (123) bitwise_xor_exp -> bitwise_and_exp .
    (124) bitwise_and_exp -> bitwise_and_exp . BITWISE_AND is_equals_exp

  ! shift/reduce conflict for BITWISE_AND resolved as shift
    BITWISE_XOR     reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    BITWISE_OR      reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    LOGICAL_AND     reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    LOGICAL_OR      reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    QUESTION_MARK   reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_STRUCT  reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_UNION   reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    TYPE_CHAR       reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    TYPE_INT        reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    TYPE_SHORT      reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    TYPE_LONG       reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    TYPE_FLOAT      reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    TYPE_DOUBLE     reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    TYPE_VOID       reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_STATIC  reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_UNSIGNED reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_VOLATILE reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_EXTERN  reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_SIGNED  reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_REGISTER reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    INCREMENT       reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    DECREMENT       reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    TIMES           reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    PLUS            reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    MINUS           reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    BITWISE_COMPLEMENT reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    NOT             reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    LPAREN          reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_SIZEOF  reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    IDENTIFIER      reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    STRING          reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    FLOAT_NUMBER    reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    CHARACTER       reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    NUMBER          reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    BINARY_NUMBER   reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    HEXADECIMAL_NUMBER reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    OCTAL_NUMBER    reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    $end            reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    RPAREN          reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    SEMICOLON       reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    RBRACKET        reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    COMMA           reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    COLON           reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    RBRACE          reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .)
    BITWISE_AND     shift and go to state 134

  ! BITWISE_AND     [ reduce using rule 123 (bitwise_xor_exp -> bitwise_and_exp .) ]


state 62

    (93) integer_number -> NUMBER .

    LBRACKET        reduce using rule 93 (integer_number -> NUMBER .)
    LPAREN          reduce using rule 93 (integer_number -> NUMBER .)
    DOT             reduce using rule 93 (integer_number -> NUMBER .)
    ARROW           reduce using rule 93 (integer_number -> NUMBER .)
    INCREMENT       reduce using rule 93 (integer_number -> NUMBER .)
    DECREMENT       reduce using rule 93 (integer_number -> NUMBER .)
    ASSIGN          reduce using rule 93 (integer_number -> NUMBER .)
    TIMES_ASSIGN    reduce using rule 93 (integer_number -> NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 93 (integer_number -> NUMBER .)
    MODULUS_ASSIGN  reduce using rule 93 (integer_number -> NUMBER .)
    PLUS_ASSIGN     reduce using rule 93 (integer_number -> NUMBER .)
    MINUS_ASSIGN    reduce using rule 93 (integer_number -> NUMBER .)
    SHIFT_LEFT_ASSIGN reduce using rule 93 (integer_number -> NUMBER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 93 (integer_number -> NUMBER .)
    BITWISE_AND_ASSIGN reduce using rule 93 (integer_number -> NUMBER .)
    BITWISE_XOR_ASSIGN reduce using rule 93 (integer_number -> NUMBER .)
    BITWISE_OR_ASSIGN reduce using rule 93 (integer_number -> NUMBER .)
    MODULUS         reduce using rule 93 (integer_number -> NUMBER .)
    DIVIDE          reduce using rule 93 (integer_number -> NUMBER .)
    TIMES           reduce using rule 93 (integer_number -> NUMBER .)
    MINUS           reduce using rule 93 (integer_number -> NUMBER .)
    PLUS            reduce using rule 93 (integer_number -> NUMBER .)
    BITWISE_SHIFT_RIGHT reduce using rule 93 (integer_number -> NUMBER .)
    BITWISE_SHIFT_LEFT reduce using rule 93 (integer_number -> NUMBER .)
    LESS_EQUALS     reduce using rule 93 (integer_number -> NUMBER .)
    LESS_THEN       reduce using rule 93 (integer_number -> NUMBER .)
    GREATER_EQUALS  reduce using rule 93 (integer_number -> NUMBER .)
    GREATER_THEN    reduce using rule 93 (integer_number -> NUMBER .)
    NOT_EQUALS      reduce using rule 93 (integer_number -> NUMBER .)
    EQUALS_THEN     reduce using rule 93 (integer_number -> NUMBER .)
    BITWISE_AND     reduce using rule 93 (integer_number -> NUMBER .)
    BITWISE_XOR     reduce using rule 93 (integer_number -> NUMBER .)
    BITWISE_OR      reduce using rule 93 (integer_number -> NUMBER .)
    LOGICAL_AND     reduce using rule 93 (integer_number -> NUMBER .)
    LOGICAL_OR      reduce using rule 93 (integer_number -> NUMBER .)
    QUESTION_MARK   reduce using rule 93 (integer_number -> NUMBER .)
    KEYWORD_STRUCT  reduce using rule 93 (integer_number -> NUMBER .)
    KEYWORD_UNION   reduce using rule 93 (integer_number -> NUMBER .)
    TYPE_CHAR       reduce using rule 93 (integer_number -> NUMBER .)
    TYPE_INT        reduce using rule 93 (integer_number -> NUMBER .)
    TYPE_SHORT      reduce using rule 93 (integer_number -> NUMBER .)
    TYPE_LONG       reduce using rule 93 (integer_number -> NUMBER .)
    TYPE_FLOAT      reduce using rule 93 (integer_number -> NUMBER .)
    TYPE_DOUBLE     reduce using rule 93 (integer_number -> NUMBER .)
    TYPE_VOID       reduce using rule 93 (integer_number -> NUMBER .)
    KEYWORD_STATIC  reduce using rule 93 (integer_number -> NUMBER .)
    KEYWORD_UNSIGNED reduce using rule 93 (integer_number -> NUMBER .)
    KEYWORD_VOLATILE reduce using rule 93 (integer_number -> NUMBER .)
    KEYWORD_EXTERN  reduce using rule 93 (integer_number -> NUMBER .)
    KEYWORD_SIGNED  reduce using rule 93 (integer_number -> NUMBER .)
    KEYWORD_REGISTER reduce using rule 93 (integer_number -> NUMBER .)
    BITWISE_COMPLEMENT reduce using rule 93 (integer_number -> NUMBER .)
    NOT             reduce using rule 93 (integer_number -> NUMBER .)
    KEYWORD_SIZEOF  reduce using rule 93 (integer_number -> NUMBER .)
    IDENTIFIER      reduce using rule 93 (integer_number -> NUMBER .)
    STRING          reduce using rule 93 (integer_number -> NUMBER .)
    FLOAT_NUMBER    reduce using rule 93 (integer_number -> NUMBER .)
    CHARACTER       reduce using rule 93 (integer_number -> NUMBER .)
    NUMBER          reduce using rule 93 (integer_number -> NUMBER .)
    BINARY_NUMBER   reduce using rule 93 (integer_number -> NUMBER .)
    HEXADECIMAL_NUMBER reduce using rule 93 (integer_number -> NUMBER .)
    OCTAL_NUMBER    reduce using rule 93 (integer_number -> NUMBER .)
    $end            reduce using rule 93 (integer_number -> NUMBER .)
    RPAREN          reduce using rule 93 (integer_number -> NUMBER .)
    SEMICOLON       reduce using rule 93 (integer_number -> NUMBER .)
    RBRACKET        reduce using rule 93 (integer_number -> NUMBER .)
    COMMA           reduce using rule 93 (integer_number -> NUMBER .)
    COLON           reduce using rule 93 (integer_number -> NUMBER .)
    RBRACE          reduce using rule 93 (integer_number -> NUMBER .)


state 63

    (94) integer_number -> BINARY_NUMBER .

    LBRACKET        reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    LPAREN          reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    DOT             reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    ARROW           reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    INCREMENT       reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    DECREMENT       reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    ASSIGN          reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    TIMES_ASSIGN    reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    MODULUS_ASSIGN  reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    PLUS_ASSIGN     reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    MINUS_ASSIGN    reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    SHIFT_LEFT_ASSIGN reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    BITWISE_AND_ASSIGN reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    BITWISE_XOR_ASSIGN reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    BITWISE_OR_ASSIGN reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    MODULUS         reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    DIVIDE          reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    TIMES           reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    MINUS           reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    PLUS            reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    BITWISE_SHIFT_RIGHT reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    BITWISE_SHIFT_LEFT reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    LESS_EQUALS     reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    LESS_THEN       reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    GREATER_EQUALS  reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    GREATER_THEN    reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    NOT_EQUALS      reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    EQUALS_THEN     reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    BITWISE_AND     reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    BITWISE_XOR     reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    BITWISE_OR      reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    LOGICAL_AND     reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    LOGICAL_OR      reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    QUESTION_MARK   reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    KEYWORD_STRUCT  reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    KEYWORD_UNION   reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    TYPE_CHAR       reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    TYPE_INT        reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    TYPE_SHORT      reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    TYPE_LONG       reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    TYPE_FLOAT      reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    TYPE_DOUBLE     reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    TYPE_VOID       reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    KEYWORD_STATIC  reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    KEYWORD_UNSIGNED reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    KEYWORD_VOLATILE reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    KEYWORD_EXTERN  reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    KEYWORD_SIGNED  reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    KEYWORD_REGISTER reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    BITWISE_COMPLEMENT reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    NOT             reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    KEYWORD_SIZEOF  reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    IDENTIFIER      reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    STRING          reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    FLOAT_NUMBER    reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    CHARACTER       reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    NUMBER          reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    BINARY_NUMBER   reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    HEXADECIMAL_NUMBER reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    OCTAL_NUMBER    reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    $end            reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    RPAREN          reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    SEMICOLON       reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    RBRACKET        reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    COMMA           reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    COLON           reduce using rule 94 (integer_number -> BINARY_NUMBER .)
    RBRACE          reduce using rule 94 (integer_number -> BINARY_NUMBER .)


state 64

    (95) integer_number -> HEXADECIMAL_NUMBER .

    LBRACKET        reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    LPAREN          reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    DOT             reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    ARROW           reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    INCREMENT       reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    DECREMENT       reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    ASSIGN          reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    TIMES_ASSIGN    reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    MODULUS_ASSIGN  reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    PLUS_ASSIGN     reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    MINUS_ASSIGN    reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    SHIFT_LEFT_ASSIGN reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_AND_ASSIGN reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_XOR_ASSIGN reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_OR_ASSIGN reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    MODULUS         reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    DIVIDE          reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    TIMES           reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    MINUS           reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    PLUS            reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_SHIFT_RIGHT reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_SHIFT_LEFT reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    LESS_EQUALS     reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    LESS_THEN       reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    GREATER_EQUALS  reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    GREATER_THEN    reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    NOT_EQUALS      reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    EQUALS_THEN     reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_AND     reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_XOR     reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_OR      reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    LOGICAL_AND     reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    LOGICAL_OR      reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    QUESTION_MARK   reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_STRUCT  reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_UNION   reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    TYPE_CHAR       reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    TYPE_INT        reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    TYPE_SHORT      reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    TYPE_LONG       reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    TYPE_FLOAT      reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    TYPE_DOUBLE     reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    TYPE_VOID       reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_STATIC  reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_UNSIGNED reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_VOLATILE reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_EXTERN  reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_SIGNED  reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_REGISTER reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_COMPLEMENT reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    NOT             reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_SIZEOF  reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    IDENTIFIER      reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    STRING          reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    FLOAT_NUMBER    reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    CHARACTER       reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    NUMBER          reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    BINARY_NUMBER   reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    HEXADECIMAL_NUMBER reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    OCTAL_NUMBER    reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    $end            reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    RPAREN          reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    SEMICOLON       reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    RBRACKET        reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    COMMA           reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    COLON           reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)
    RBRACE          reduce using rule 95 (integer_number -> HEXADECIMAL_NUMBER .)


state 65

    (96) integer_number -> OCTAL_NUMBER .

    LBRACKET        reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    LPAREN          reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    DOT             reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    ARROW           reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    INCREMENT       reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    DECREMENT       reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    ASSIGN          reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    TIMES_ASSIGN    reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    MODULUS_ASSIGN  reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    PLUS_ASSIGN     reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    MINUS_ASSIGN    reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    SHIFT_LEFT_ASSIGN reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    BITWISE_AND_ASSIGN reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    BITWISE_XOR_ASSIGN reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    BITWISE_OR_ASSIGN reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    MODULUS         reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    DIVIDE          reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    TIMES           reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    MINUS           reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    PLUS            reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    BITWISE_SHIFT_RIGHT reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    BITWISE_SHIFT_LEFT reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    LESS_EQUALS     reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    LESS_THEN       reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    GREATER_EQUALS  reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    GREATER_THEN    reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    NOT_EQUALS      reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    EQUALS_THEN     reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    BITWISE_AND     reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    BITWISE_XOR     reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    BITWISE_OR      reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    LOGICAL_AND     reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    LOGICAL_OR      reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    QUESTION_MARK   reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_STRUCT  reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_UNION   reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    TYPE_CHAR       reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    TYPE_INT        reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    TYPE_SHORT      reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    TYPE_LONG       reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    TYPE_FLOAT      reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    TYPE_DOUBLE     reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    TYPE_VOID       reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_STATIC  reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_UNSIGNED reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_VOLATILE reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_EXTERN  reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_SIGNED  reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_REGISTER reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    BITWISE_COMPLEMENT reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    NOT             reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_SIZEOF  reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    IDENTIFIER      reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    STRING          reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    FLOAT_NUMBER    reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    CHARACTER       reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    NUMBER          reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    BINARY_NUMBER   reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    HEXADECIMAL_NUMBER reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    OCTAL_NUMBER    reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    $end            reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    RPAREN          reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    SEMICOLON       reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    RBRACKET        reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    COMMA           reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    COLON           reduce using rule 96 (integer_number -> OCTAL_NUMBER .)
    RBRACE          reduce using rule 96 (integer_number -> OCTAL_NUMBER .)


state 66

    (125) bitwise_and_exp -> is_equals_exp .
    (126) is_equals_exp -> is_equals_exp . EQUALS_THEN is_not_equals_exp

    BITWISE_AND     reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    BITWISE_XOR     reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    BITWISE_OR      reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    LOGICAL_AND     reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    LOGICAL_OR      reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    QUESTION_MARK   reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_STRUCT  reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_UNION   reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    TYPE_CHAR       reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    TYPE_INT        reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    TYPE_SHORT      reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    TYPE_LONG       reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    TYPE_FLOAT      reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    TYPE_DOUBLE     reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    TYPE_VOID       reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_STATIC  reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_UNSIGNED reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_VOLATILE reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_EXTERN  reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_SIGNED  reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_REGISTER reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    INCREMENT       reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    DECREMENT       reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    TIMES           reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    PLUS            reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    MINUS           reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    BITWISE_COMPLEMENT reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    NOT             reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    LPAREN          reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_SIZEOF  reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    IDENTIFIER      reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    STRING          reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    FLOAT_NUMBER    reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    CHARACTER       reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    NUMBER          reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    BINARY_NUMBER   reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    HEXADECIMAL_NUMBER reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    OCTAL_NUMBER    reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    $end            reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    RPAREN          reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    SEMICOLON       reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    RBRACKET        reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    COMMA           reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    COLON           reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    RBRACE          reduce using rule 125 (bitwise_and_exp -> is_equals_exp .)
    EQUALS_THEN     shift and go to state 135


state 67

    (127) is_equals_exp -> is_not_equals_exp .
    (128) is_not_equals_exp -> is_not_equals_exp . NOT_EQUALS greater_then_exp

    EQUALS_THEN     reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    BITWISE_AND     reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    BITWISE_XOR     reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    BITWISE_OR      reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    LOGICAL_AND     reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    LOGICAL_OR      reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    QUESTION_MARK   reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_STRUCT  reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_UNION   reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    TYPE_CHAR       reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    TYPE_INT        reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    TYPE_SHORT      reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    TYPE_LONG       reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    TYPE_FLOAT      reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    TYPE_DOUBLE     reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    TYPE_VOID       reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_STATIC  reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_UNSIGNED reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_VOLATILE reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_EXTERN  reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_SIGNED  reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_REGISTER reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    INCREMENT       reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    DECREMENT       reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    TIMES           reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    PLUS            reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    MINUS           reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    BITWISE_COMPLEMENT reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    NOT             reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    LPAREN          reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_SIZEOF  reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    IDENTIFIER      reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    STRING          reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    FLOAT_NUMBER    reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    CHARACTER       reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    NUMBER          reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    BINARY_NUMBER   reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    HEXADECIMAL_NUMBER reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    OCTAL_NUMBER    reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    $end            reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    RPAREN          reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    SEMICOLON       reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    RBRACKET        reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    COMMA           reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    COLON           reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    RBRACE          reduce using rule 127 (is_equals_exp -> is_not_equals_exp .)
    NOT_EQUALS      shift and go to state 136


state 68

    (129) is_not_equals_exp -> greater_then_exp .
    (130) greater_then_exp -> greater_then_exp . GREATER_THEN greater_equals_exp

    NOT_EQUALS      reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    EQUALS_THEN     reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    BITWISE_AND     reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    BITWISE_XOR     reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    BITWISE_OR      reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    LOGICAL_AND     reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    LOGICAL_OR      reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    QUESTION_MARK   reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_STRUCT  reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_UNION   reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    TYPE_CHAR       reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    TYPE_INT        reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    TYPE_SHORT      reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    TYPE_LONG       reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    TYPE_FLOAT      reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    TYPE_DOUBLE     reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    TYPE_VOID       reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_STATIC  reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_UNSIGNED reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_VOLATILE reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_EXTERN  reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_SIGNED  reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_REGISTER reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    INCREMENT       reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    DECREMENT       reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    TIMES           reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    PLUS            reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    MINUS           reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    BITWISE_COMPLEMENT reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    NOT             reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    LPAREN          reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_SIZEOF  reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    IDENTIFIER      reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    STRING          reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    FLOAT_NUMBER    reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    CHARACTER       reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    NUMBER          reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    BINARY_NUMBER   reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    HEXADECIMAL_NUMBER reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    OCTAL_NUMBER    reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    $end            reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    RPAREN          reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    SEMICOLON       reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    RBRACKET        reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    COMMA           reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    COLON           reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    RBRACE          reduce using rule 129 (is_not_equals_exp -> greater_then_exp .)
    GREATER_THEN    shift and go to state 137


state 69

    (131) greater_then_exp -> greater_equals_exp .
    (132) greater_equals_exp -> greater_equals_exp . GREATER_EQUALS less_then_exp

    GREATER_THEN    reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    NOT_EQUALS      reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    EQUALS_THEN     reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    BITWISE_AND     reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    BITWISE_XOR     reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    BITWISE_OR      reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    LOGICAL_AND     reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    LOGICAL_OR      reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    QUESTION_MARK   reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_STRUCT  reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_UNION   reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    TYPE_CHAR       reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    TYPE_INT        reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    TYPE_SHORT      reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    TYPE_LONG       reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    TYPE_FLOAT      reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    TYPE_DOUBLE     reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    TYPE_VOID       reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_STATIC  reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_UNSIGNED reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_VOLATILE reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_EXTERN  reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_SIGNED  reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_REGISTER reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    INCREMENT       reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    DECREMENT       reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    TIMES           reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    PLUS            reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    MINUS           reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    BITWISE_COMPLEMENT reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    NOT             reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    LPAREN          reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_SIZEOF  reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    IDENTIFIER      reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    STRING          reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    FLOAT_NUMBER    reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    CHARACTER       reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    NUMBER          reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    BINARY_NUMBER   reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    HEXADECIMAL_NUMBER reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    OCTAL_NUMBER    reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    $end            reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    RPAREN          reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    SEMICOLON       reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    RBRACKET        reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    COMMA           reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    COLON           reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    RBRACE          reduce using rule 131 (greater_then_exp -> greater_equals_exp .)
    GREATER_EQUALS  shift and go to state 138


state 70

    (133) greater_equals_exp -> less_then_exp .
    (134) less_then_exp -> less_then_exp . LESS_THEN less_equals_exp

    GREATER_EQUALS  reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    GREATER_THEN    reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    NOT_EQUALS      reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    EQUALS_THEN     reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    BITWISE_AND     reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    BITWISE_XOR     reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    BITWISE_OR      reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    LOGICAL_AND     reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    LOGICAL_OR      reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    QUESTION_MARK   reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    KEYWORD_STRUCT  reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    KEYWORD_UNION   reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    TYPE_CHAR       reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    TYPE_INT        reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    TYPE_SHORT      reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    TYPE_LONG       reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    TYPE_FLOAT      reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    TYPE_DOUBLE     reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    TYPE_VOID       reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    KEYWORD_STATIC  reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    KEYWORD_UNSIGNED reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    KEYWORD_VOLATILE reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    KEYWORD_EXTERN  reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    KEYWORD_SIGNED  reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    KEYWORD_REGISTER reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    INCREMENT       reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    DECREMENT       reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    TIMES           reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    PLUS            reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    MINUS           reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    BITWISE_COMPLEMENT reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    NOT             reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    LPAREN          reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    KEYWORD_SIZEOF  reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    IDENTIFIER      reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    STRING          reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    FLOAT_NUMBER    reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    CHARACTER       reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    NUMBER          reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    BINARY_NUMBER   reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    HEXADECIMAL_NUMBER reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    OCTAL_NUMBER    reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    $end            reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    RPAREN          reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    SEMICOLON       reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    RBRACKET        reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    COMMA           reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    COLON           reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    RBRACE          reduce using rule 133 (greater_equals_exp -> less_then_exp .)
    LESS_THEN       shift and go to state 139


state 71

    (135) less_then_exp -> less_equals_exp .
    (136) less_equals_exp -> less_equals_exp . LESS_EQUALS left_shift_exp

    LESS_THEN       reduce using rule 135 (less_then_exp -> less_equals_exp .)
    GREATER_EQUALS  reduce using rule 135 (less_then_exp -> less_equals_exp .)
    GREATER_THEN    reduce using rule 135 (less_then_exp -> less_equals_exp .)
    NOT_EQUALS      reduce using rule 135 (less_then_exp -> less_equals_exp .)
    EQUALS_THEN     reduce using rule 135 (less_then_exp -> less_equals_exp .)
    BITWISE_AND     reduce using rule 135 (less_then_exp -> less_equals_exp .)
    BITWISE_XOR     reduce using rule 135 (less_then_exp -> less_equals_exp .)
    BITWISE_OR      reduce using rule 135 (less_then_exp -> less_equals_exp .)
    LOGICAL_AND     reduce using rule 135 (less_then_exp -> less_equals_exp .)
    LOGICAL_OR      reduce using rule 135 (less_then_exp -> less_equals_exp .)
    QUESTION_MARK   reduce using rule 135 (less_then_exp -> less_equals_exp .)
    KEYWORD_STRUCT  reduce using rule 135 (less_then_exp -> less_equals_exp .)
    KEYWORD_UNION   reduce using rule 135 (less_then_exp -> less_equals_exp .)
    TYPE_CHAR       reduce using rule 135 (less_then_exp -> less_equals_exp .)
    TYPE_INT        reduce using rule 135 (less_then_exp -> less_equals_exp .)
    TYPE_SHORT      reduce using rule 135 (less_then_exp -> less_equals_exp .)
    TYPE_LONG       reduce using rule 135 (less_then_exp -> less_equals_exp .)
    TYPE_FLOAT      reduce using rule 135 (less_then_exp -> less_equals_exp .)
    TYPE_DOUBLE     reduce using rule 135 (less_then_exp -> less_equals_exp .)
    TYPE_VOID       reduce using rule 135 (less_then_exp -> less_equals_exp .)
    KEYWORD_STATIC  reduce using rule 135 (less_then_exp -> less_equals_exp .)
    KEYWORD_UNSIGNED reduce using rule 135 (less_then_exp -> less_equals_exp .)
    KEYWORD_VOLATILE reduce using rule 135 (less_then_exp -> less_equals_exp .)
    KEYWORD_EXTERN  reduce using rule 135 (less_then_exp -> less_equals_exp .)
    KEYWORD_SIGNED  reduce using rule 135 (less_then_exp -> less_equals_exp .)
    KEYWORD_REGISTER reduce using rule 135 (less_then_exp -> less_equals_exp .)
    INCREMENT       reduce using rule 135 (less_then_exp -> less_equals_exp .)
    DECREMENT       reduce using rule 135 (less_then_exp -> less_equals_exp .)
    TIMES           reduce using rule 135 (less_then_exp -> less_equals_exp .)
    PLUS            reduce using rule 135 (less_then_exp -> less_equals_exp .)
    MINUS           reduce using rule 135 (less_then_exp -> less_equals_exp .)
    BITWISE_COMPLEMENT reduce using rule 135 (less_then_exp -> less_equals_exp .)
    NOT             reduce using rule 135 (less_then_exp -> less_equals_exp .)
    LPAREN          reduce using rule 135 (less_then_exp -> less_equals_exp .)
    KEYWORD_SIZEOF  reduce using rule 135 (less_then_exp -> less_equals_exp .)
    IDENTIFIER      reduce using rule 135 (less_then_exp -> less_equals_exp .)
    STRING          reduce using rule 135 (less_then_exp -> less_equals_exp .)
    FLOAT_NUMBER    reduce using rule 135 (less_then_exp -> less_equals_exp .)
    CHARACTER       reduce using rule 135 (less_then_exp -> less_equals_exp .)
    NUMBER          reduce using rule 135 (less_then_exp -> less_equals_exp .)
    BINARY_NUMBER   reduce using rule 135 (less_then_exp -> less_equals_exp .)
    HEXADECIMAL_NUMBER reduce using rule 135 (less_then_exp -> less_equals_exp .)
    OCTAL_NUMBER    reduce using rule 135 (less_then_exp -> less_equals_exp .)
    $end            reduce using rule 135 (less_then_exp -> less_equals_exp .)
    RPAREN          reduce using rule 135 (less_then_exp -> less_equals_exp .)
    SEMICOLON       reduce using rule 135 (less_then_exp -> less_equals_exp .)
    RBRACKET        reduce using rule 135 (less_then_exp -> less_equals_exp .)
    COMMA           reduce using rule 135 (less_then_exp -> less_equals_exp .)
    COLON           reduce using rule 135 (less_then_exp -> less_equals_exp .)
    RBRACE          reduce using rule 135 (less_then_exp -> less_equals_exp .)
    LESS_EQUALS     shift and go to state 140


state 72

    (137) less_equals_exp -> left_shift_exp .
    (138) left_shift_exp -> left_shift_exp . BITWISE_SHIFT_LEFT right_shift_exp

    LESS_EQUALS     reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    LESS_THEN       reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    GREATER_EQUALS  reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    GREATER_THEN    reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    NOT_EQUALS      reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    EQUALS_THEN     reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    BITWISE_AND     reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    BITWISE_XOR     reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    BITWISE_OR      reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    LOGICAL_AND     reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    LOGICAL_OR      reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    QUESTION_MARK   reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    KEYWORD_STRUCT  reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    KEYWORD_UNION   reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    TYPE_CHAR       reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    TYPE_INT        reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    TYPE_SHORT      reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    TYPE_LONG       reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    TYPE_FLOAT      reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    TYPE_DOUBLE     reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    TYPE_VOID       reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    KEYWORD_STATIC  reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    KEYWORD_UNSIGNED reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    KEYWORD_VOLATILE reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    KEYWORD_EXTERN  reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    KEYWORD_SIGNED  reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    KEYWORD_REGISTER reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    INCREMENT       reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    DECREMENT       reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    TIMES           reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    PLUS            reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    MINUS           reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    BITWISE_COMPLEMENT reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    NOT             reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    LPAREN          reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    KEYWORD_SIZEOF  reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    IDENTIFIER      reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    STRING          reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    FLOAT_NUMBER    reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    CHARACTER       reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    NUMBER          reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    BINARY_NUMBER   reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    HEXADECIMAL_NUMBER reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    OCTAL_NUMBER    reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    $end            reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    RPAREN          reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    SEMICOLON       reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    RBRACKET        reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    COMMA           reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    COLON           reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    RBRACE          reduce using rule 137 (less_equals_exp -> left_shift_exp .)
    BITWISE_SHIFT_LEFT shift and go to state 141


state 73

    (139) left_shift_exp -> right_shift_exp .
    (140) right_shift_exp -> right_shift_exp . BITWISE_SHIFT_RIGHT plus_exp

    BITWISE_SHIFT_LEFT reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    LESS_EQUALS     reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    LESS_THEN       reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    GREATER_EQUALS  reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    GREATER_THEN    reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    NOT_EQUALS      reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    EQUALS_THEN     reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    BITWISE_AND     reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    BITWISE_XOR     reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    BITWISE_OR      reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    LOGICAL_AND     reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    LOGICAL_OR      reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    QUESTION_MARK   reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    KEYWORD_STRUCT  reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    KEYWORD_UNION   reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    TYPE_CHAR       reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    TYPE_INT        reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    TYPE_SHORT      reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    TYPE_LONG       reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    TYPE_FLOAT      reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    TYPE_DOUBLE     reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    TYPE_VOID       reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    KEYWORD_STATIC  reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    KEYWORD_UNSIGNED reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    KEYWORD_VOLATILE reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    KEYWORD_EXTERN  reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    KEYWORD_SIGNED  reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    KEYWORD_REGISTER reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    INCREMENT       reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    DECREMENT       reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    TIMES           reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    PLUS            reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    MINUS           reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    BITWISE_COMPLEMENT reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    NOT             reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    LPAREN          reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    KEYWORD_SIZEOF  reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    IDENTIFIER      reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    STRING          reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    FLOAT_NUMBER    reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    CHARACTER       reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    NUMBER          reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    BINARY_NUMBER   reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    HEXADECIMAL_NUMBER reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    OCTAL_NUMBER    reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    $end            reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    RPAREN          reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    SEMICOLON       reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    RBRACKET        reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    COMMA           reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    COLON           reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    RBRACE          reduce using rule 139 (left_shift_exp -> right_shift_exp .)
    BITWISE_SHIFT_RIGHT shift and go to state 142


state 74

    (141) right_shift_exp -> plus_exp .
    (142) plus_exp -> plus_exp . PLUS minus_exp

  ! shift/reduce conflict for PLUS resolved as shift
    BITWISE_SHIFT_RIGHT reduce using rule 141 (right_shift_exp -> plus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 141 (right_shift_exp -> plus_exp .)
    LESS_EQUALS     reduce using rule 141 (right_shift_exp -> plus_exp .)
    LESS_THEN       reduce using rule 141 (right_shift_exp -> plus_exp .)
    GREATER_EQUALS  reduce using rule 141 (right_shift_exp -> plus_exp .)
    GREATER_THEN    reduce using rule 141 (right_shift_exp -> plus_exp .)
    NOT_EQUALS      reduce using rule 141 (right_shift_exp -> plus_exp .)
    EQUALS_THEN     reduce using rule 141 (right_shift_exp -> plus_exp .)
    BITWISE_AND     reduce using rule 141 (right_shift_exp -> plus_exp .)
    BITWISE_XOR     reduce using rule 141 (right_shift_exp -> plus_exp .)
    BITWISE_OR      reduce using rule 141 (right_shift_exp -> plus_exp .)
    LOGICAL_AND     reduce using rule 141 (right_shift_exp -> plus_exp .)
    LOGICAL_OR      reduce using rule 141 (right_shift_exp -> plus_exp .)
    QUESTION_MARK   reduce using rule 141 (right_shift_exp -> plus_exp .)
    KEYWORD_STRUCT  reduce using rule 141 (right_shift_exp -> plus_exp .)
    KEYWORD_UNION   reduce using rule 141 (right_shift_exp -> plus_exp .)
    TYPE_CHAR       reduce using rule 141 (right_shift_exp -> plus_exp .)
    TYPE_INT        reduce using rule 141 (right_shift_exp -> plus_exp .)
    TYPE_SHORT      reduce using rule 141 (right_shift_exp -> plus_exp .)
    TYPE_LONG       reduce using rule 141 (right_shift_exp -> plus_exp .)
    TYPE_FLOAT      reduce using rule 141 (right_shift_exp -> plus_exp .)
    TYPE_DOUBLE     reduce using rule 141 (right_shift_exp -> plus_exp .)
    TYPE_VOID       reduce using rule 141 (right_shift_exp -> plus_exp .)
    KEYWORD_STATIC  reduce using rule 141 (right_shift_exp -> plus_exp .)
    KEYWORD_UNSIGNED reduce using rule 141 (right_shift_exp -> plus_exp .)
    KEYWORD_VOLATILE reduce using rule 141 (right_shift_exp -> plus_exp .)
    KEYWORD_EXTERN  reduce using rule 141 (right_shift_exp -> plus_exp .)
    KEYWORD_SIGNED  reduce using rule 141 (right_shift_exp -> plus_exp .)
    KEYWORD_REGISTER reduce using rule 141 (right_shift_exp -> plus_exp .)
    INCREMENT       reduce using rule 141 (right_shift_exp -> plus_exp .)
    DECREMENT       reduce using rule 141 (right_shift_exp -> plus_exp .)
    TIMES           reduce using rule 141 (right_shift_exp -> plus_exp .)
    MINUS           reduce using rule 141 (right_shift_exp -> plus_exp .)
    BITWISE_COMPLEMENT reduce using rule 141 (right_shift_exp -> plus_exp .)
    NOT             reduce using rule 141 (right_shift_exp -> plus_exp .)
    LPAREN          reduce using rule 141 (right_shift_exp -> plus_exp .)
    KEYWORD_SIZEOF  reduce using rule 141 (right_shift_exp -> plus_exp .)
    IDENTIFIER      reduce using rule 141 (right_shift_exp -> plus_exp .)
    STRING          reduce using rule 141 (right_shift_exp -> plus_exp .)
    FLOAT_NUMBER    reduce using rule 141 (right_shift_exp -> plus_exp .)
    CHARACTER       reduce using rule 141 (right_shift_exp -> plus_exp .)
    NUMBER          reduce using rule 141 (right_shift_exp -> plus_exp .)
    BINARY_NUMBER   reduce using rule 141 (right_shift_exp -> plus_exp .)
    HEXADECIMAL_NUMBER reduce using rule 141 (right_shift_exp -> plus_exp .)
    OCTAL_NUMBER    reduce using rule 141 (right_shift_exp -> plus_exp .)
    $end            reduce using rule 141 (right_shift_exp -> plus_exp .)
    RPAREN          reduce using rule 141 (right_shift_exp -> plus_exp .)
    SEMICOLON       reduce using rule 141 (right_shift_exp -> plus_exp .)
    RBRACKET        reduce using rule 141 (right_shift_exp -> plus_exp .)
    COMMA           reduce using rule 141 (right_shift_exp -> plus_exp .)
    COLON           reduce using rule 141 (right_shift_exp -> plus_exp .)
    RBRACE          reduce using rule 141 (right_shift_exp -> plus_exp .)
    PLUS            shift and go to state 143

  ! PLUS            [ reduce using rule 141 (right_shift_exp -> plus_exp .) ]


state 75

    (143) plus_exp -> minus_exp .
    (144) minus_exp -> minus_exp . MINUS times_exp

  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            reduce using rule 143 (plus_exp -> minus_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 143 (plus_exp -> minus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 143 (plus_exp -> minus_exp .)
    LESS_EQUALS     reduce using rule 143 (plus_exp -> minus_exp .)
    LESS_THEN       reduce using rule 143 (plus_exp -> minus_exp .)
    GREATER_EQUALS  reduce using rule 143 (plus_exp -> minus_exp .)
    GREATER_THEN    reduce using rule 143 (plus_exp -> minus_exp .)
    NOT_EQUALS      reduce using rule 143 (plus_exp -> minus_exp .)
    EQUALS_THEN     reduce using rule 143 (plus_exp -> minus_exp .)
    BITWISE_AND     reduce using rule 143 (plus_exp -> minus_exp .)
    BITWISE_XOR     reduce using rule 143 (plus_exp -> minus_exp .)
    BITWISE_OR      reduce using rule 143 (plus_exp -> minus_exp .)
    LOGICAL_AND     reduce using rule 143 (plus_exp -> minus_exp .)
    LOGICAL_OR      reduce using rule 143 (plus_exp -> minus_exp .)
    QUESTION_MARK   reduce using rule 143 (plus_exp -> minus_exp .)
    KEYWORD_STRUCT  reduce using rule 143 (plus_exp -> minus_exp .)
    KEYWORD_UNION   reduce using rule 143 (plus_exp -> minus_exp .)
    TYPE_CHAR       reduce using rule 143 (plus_exp -> minus_exp .)
    TYPE_INT        reduce using rule 143 (plus_exp -> minus_exp .)
    TYPE_SHORT      reduce using rule 143 (plus_exp -> minus_exp .)
    TYPE_LONG       reduce using rule 143 (plus_exp -> minus_exp .)
    TYPE_FLOAT      reduce using rule 143 (plus_exp -> minus_exp .)
    TYPE_DOUBLE     reduce using rule 143 (plus_exp -> minus_exp .)
    TYPE_VOID       reduce using rule 143 (plus_exp -> minus_exp .)
    KEYWORD_STATIC  reduce using rule 143 (plus_exp -> minus_exp .)
    KEYWORD_UNSIGNED reduce using rule 143 (plus_exp -> minus_exp .)
    KEYWORD_VOLATILE reduce using rule 143 (plus_exp -> minus_exp .)
    KEYWORD_EXTERN  reduce using rule 143 (plus_exp -> minus_exp .)
    KEYWORD_SIGNED  reduce using rule 143 (plus_exp -> minus_exp .)
    KEYWORD_REGISTER reduce using rule 143 (plus_exp -> minus_exp .)
    INCREMENT       reduce using rule 143 (plus_exp -> minus_exp .)
    DECREMENT       reduce using rule 143 (plus_exp -> minus_exp .)
    TIMES           reduce using rule 143 (plus_exp -> minus_exp .)
    BITWISE_COMPLEMENT reduce using rule 143 (plus_exp -> minus_exp .)
    NOT             reduce using rule 143 (plus_exp -> minus_exp .)
    LPAREN          reduce using rule 143 (plus_exp -> minus_exp .)
    KEYWORD_SIZEOF  reduce using rule 143 (plus_exp -> minus_exp .)
    IDENTIFIER      reduce using rule 143 (plus_exp -> minus_exp .)
    STRING          reduce using rule 143 (plus_exp -> minus_exp .)
    FLOAT_NUMBER    reduce using rule 143 (plus_exp -> minus_exp .)
    CHARACTER       reduce using rule 143 (plus_exp -> minus_exp .)
    NUMBER          reduce using rule 143 (plus_exp -> minus_exp .)
    BINARY_NUMBER   reduce using rule 143 (plus_exp -> minus_exp .)
    HEXADECIMAL_NUMBER reduce using rule 143 (plus_exp -> minus_exp .)
    OCTAL_NUMBER    reduce using rule 143 (plus_exp -> minus_exp .)
    $end            reduce using rule 143 (plus_exp -> minus_exp .)
    RPAREN          reduce using rule 143 (plus_exp -> minus_exp .)
    SEMICOLON       reduce using rule 143 (plus_exp -> minus_exp .)
    RBRACKET        reduce using rule 143 (plus_exp -> minus_exp .)
    COMMA           reduce using rule 143 (plus_exp -> minus_exp .)
    COLON           reduce using rule 143 (plus_exp -> minus_exp .)
    RBRACE          reduce using rule 143 (plus_exp -> minus_exp .)
    MINUS           shift and go to state 144

  ! MINUS           [ reduce using rule 143 (plus_exp -> minus_exp .) ]


state 76

    (145) minus_exp -> times_exp .
    (146) times_exp -> times_exp . TIMES divide_exp

  ! shift/reduce conflict for TIMES resolved as shift
    MINUS           reduce using rule 145 (minus_exp -> times_exp .)
    PLUS            reduce using rule 145 (minus_exp -> times_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 145 (minus_exp -> times_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 145 (minus_exp -> times_exp .)
    LESS_EQUALS     reduce using rule 145 (minus_exp -> times_exp .)
    LESS_THEN       reduce using rule 145 (minus_exp -> times_exp .)
    GREATER_EQUALS  reduce using rule 145 (minus_exp -> times_exp .)
    GREATER_THEN    reduce using rule 145 (minus_exp -> times_exp .)
    NOT_EQUALS      reduce using rule 145 (minus_exp -> times_exp .)
    EQUALS_THEN     reduce using rule 145 (minus_exp -> times_exp .)
    BITWISE_AND     reduce using rule 145 (minus_exp -> times_exp .)
    BITWISE_XOR     reduce using rule 145 (minus_exp -> times_exp .)
    BITWISE_OR      reduce using rule 145 (minus_exp -> times_exp .)
    LOGICAL_AND     reduce using rule 145 (minus_exp -> times_exp .)
    LOGICAL_OR      reduce using rule 145 (minus_exp -> times_exp .)
    QUESTION_MARK   reduce using rule 145 (minus_exp -> times_exp .)
    KEYWORD_STRUCT  reduce using rule 145 (minus_exp -> times_exp .)
    KEYWORD_UNION   reduce using rule 145 (minus_exp -> times_exp .)
    TYPE_CHAR       reduce using rule 145 (minus_exp -> times_exp .)
    TYPE_INT        reduce using rule 145 (minus_exp -> times_exp .)
    TYPE_SHORT      reduce using rule 145 (minus_exp -> times_exp .)
    TYPE_LONG       reduce using rule 145 (minus_exp -> times_exp .)
    TYPE_FLOAT      reduce using rule 145 (minus_exp -> times_exp .)
    TYPE_DOUBLE     reduce using rule 145 (minus_exp -> times_exp .)
    TYPE_VOID       reduce using rule 145 (minus_exp -> times_exp .)
    KEYWORD_STATIC  reduce using rule 145 (minus_exp -> times_exp .)
    KEYWORD_UNSIGNED reduce using rule 145 (minus_exp -> times_exp .)
    KEYWORD_VOLATILE reduce using rule 145 (minus_exp -> times_exp .)
    KEYWORD_EXTERN  reduce using rule 145 (minus_exp -> times_exp .)
    KEYWORD_SIGNED  reduce using rule 145 (minus_exp -> times_exp .)
    KEYWORD_REGISTER reduce using rule 145 (minus_exp -> times_exp .)
    INCREMENT       reduce using rule 145 (minus_exp -> times_exp .)
    DECREMENT       reduce using rule 145 (minus_exp -> times_exp .)
    BITWISE_COMPLEMENT reduce using rule 145 (minus_exp -> times_exp .)
    NOT             reduce using rule 145 (minus_exp -> times_exp .)
    LPAREN          reduce using rule 145 (minus_exp -> times_exp .)
    KEYWORD_SIZEOF  reduce using rule 145 (minus_exp -> times_exp .)
    IDENTIFIER      reduce using rule 145 (minus_exp -> times_exp .)
    STRING          reduce using rule 145 (minus_exp -> times_exp .)
    FLOAT_NUMBER    reduce using rule 145 (minus_exp -> times_exp .)
    CHARACTER       reduce using rule 145 (minus_exp -> times_exp .)
    NUMBER          reduce using rule 145 (minus_exp -> times_exp .)
    BINARY_NUMBER   reduce using rule 145 (minus_exp -> times_exp .)
    HEXADECIMAL_NUMBER reduce using rule 145 (minus_exp -> times_exp .)
    OCTAL_NUMBER    reduce using rule 145 (minus_exp -> times_exp .)
    $end            reduce using rule 145 (minus_exp -> times_exp .)
    RPAREN          reduce using rule 145 (minus_exp -> times_exp .)
    SEMICOLON       reduce using rule 145 (minus_exp -> times_exp .)
    RBRACKET        reduce using rule 145 (minus_exp -> times_exp .)
    COMMA           reduce using rule 145 (minus_exp -> times_exp .)
    COLON           reduce using rule 145 (minus_exp -> times_exp .)
    RBRACE          reduce using rule 145 (minus_exp -> times_exp .)
    TIMES           shift and go to state 145

  ! TIMES           [ reduce using rule 145 (minus_exp -> times_exp .) ]


state 77

    (147) times_exp -> divide_exp .
    (148) divide_exp -> divide_exp . DIVIDE modulus_exp

    TIMES           reduce using rule 147 (times_exp -> divide_exp .)
    MINUS           reduce using rule 147 (times_exp -> divide_exp .)
    PLUS            reduce using rule 147 (times_exp -> divide_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 147 (times_exp -> divide_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 147 (times_exp -> divide_exp .)
    LESS_EQUALS     reduce using rule 147 (times_exp -> divide_exp .)
    LESS_THEN       reduce using rule 147 (times_exp -> divide_exp .)
    GREATER_EQUALS  reduce using rule 147 (times_exp -> divide_exp .)
    GREATER_THEN    reduce using rule 147 (times_exp -> divide_exp .)
    NOT_EQUALS      reduce using rule 147 (times_exp -> divide_exp .)
    EQUALS_THEN     reduce using rule 147 (times_exp -> divide_exp .)
    BITWISE_AND     reduce using rule 147 (times_exp -> divide_exp .)
    BITWISE_XOR     reduce using rule 147 (times_exp -> divide_exp .)
    BITWISE_OR      reduce using rule 147 (times_exp -> divide_exp .)
    LOGICAL_AND     reduce using rule 147 (times_exp -> divide_exp .)
    LOGICAL_OR      reduce using rule 147 (times_exp -> divide_exp .)
    QUESTION_MARK   reduce using rule 147 (times_exp -> divide_exp .)
    KEYWORD_STRUCT  reduce using rule 147 (times_exp -> divide_exp .)
    KEYWORD_UNION   reduce using rule 147 (times_exp -> divide_exp .)
    TYPE_CHAR       reduce using rule 147 (times_exp -> divide_exp .)
    TYPE_INT        reduce using rule 147 (times_exp -> divide_exp .)
    TYPE_SHORT      reduce using rule 147 (times_exp -> divide_exp .)
    TYPE_LONG       reduce using rule 147 (times_exp -> divide_exp .)
    TYPE_FLOAT      reduce using rule 147 (times_exp -> divide_exp .)
    TYPE_DOUBLE     reduce using rule 147 (times_exp -> divide_exp .)
    TYPE_VOID       reduce using rule 147 (times_exp -> divide_exp .)
    KEYWORD_STATIC  reduce using rule 147 (times_exp -> divide_exp .)
    KEYWORD_UNSIGNED reduce using rule 147 (times_exp -> divide_exp .)
    KEYWORD_VOLATILE reduce using rule 147 (times_exp -> divide_exp .)
    KEYWORD_EXTERN  reduce using rule 147 (times_exp -> divide_exp .)
    KEYWORD_SIGNED  reduce using rule 147 (times_exp -> divide_exp .)
    KEYWORD_REGISTER reduce using rule 147 (times_exp -> divide_exp .)
    INCREMENT       reduce using rule 147 (times_exp -> divide_exp .)
    DECREMENT       reduce using rule 147 (times_exp -> divide_exp .)
    BITWISE_COMPLEMENT reduce using rule 147 (times_exp -> divide_exp .)
    NOT             reduce using rule 147 (times_exp -> divide_exp .)
    LPAREN          reduce using rule 147 (times_exp -> divide_exp .)
    KEYWORD_SIZEOF  reduce using rule 147 (times_exp -> divide_exp .)
    IDENTIFIER      reduce using rule 147 (times_exp -> divide_exp .)
    STRING          reduce using rule 147 (times_exp -> divide_exp .)
    FLOAT_NUMBER    reduce using rule 147 (times_exp -> divide_exp .)
    CHARACTER       reduce using rule 147 (times_exp -> divide_exp .)
    NUMBER          reduce using rule 147 (times_exp -> divide_exp .)
    BINARY_NUMBER   reduce using rule 147 (times_exp -> divide_exp .)
    HEXADECIMAL_NUMBER reduce using rule 147 (times_exp -> divide_exp .)
    OCTAL_NUMBER    reduce using rule 147 (times_exp -> divide_exp .)
    $end            reduce using rule 147 (times_exp -> divide_exp .)
    RPAREN          reduce using rule 147 (times_exp -> divide_exp .)
    SEMICOLON       reduce using rule 147 (times_exp -> divide_exp .)
    RBRACKET        reduce using rule 147 (times_exp -> divide_exp .)
    COMMA           reduce using rule 147 (times_exp -> divide_exp .)
    COLON           reduce using rule 147 (times_exp -> divide_exp .)
    RBRACE          reduce using rule 147 (times_exp -> divide_exp .)
    DIVIDE          shift and go to state 146


state 78

    (149) divide_exp -> modulus_exp .
    (150) modulus_exp -> modulus_exp . MODULUS unary_exp

    DIVIDE          reduce using rule 149 (divide_exp -> modulus_exp .)
    TIMES           reduce using rule 149 (divide_exp -> modulus_exp .)
    MINUS           reduce using rule 149 (divide_exp -> modulus_exp .)
    PLUS            reduce using rule 149 (divide_exp -> modulus_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 149 (divide_exp -> modulus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 149 (divide_exp -> modulus_exp .)
    LESS_EQUALS     reduce using rule 149 (divide_exp -> modulus_exp .)
    LESS_THEN       reduce using rule 149 (divide_exp -> modulus_exp .)
    GREATER_EQUALS  reduce using rule 149 (divide_exp -> modulus_exp .)
    GREATER_THEN    reduce using rule 149 (divide_exp -> modulus_exp .)
    NOT_EQUALS      reduce using rule 149 (divide_exp -> modulus_exp .)
    EQUALS_THEN     reduce using rule 149 (divide_exp -> modulus_exp .)
    BITWISE_AND     reduce using rule 149 (divide_exp -> modulus_exp .)
    BITWISE_XOR     reduce using rule 149 (divide_exp -> modulus_exp .)
    BITWISE_OR      reduce using rule 149 (divide_exp -> modulus_exp .)
    LOGICAL_AND     reduce using rule 149 (divide_exp -> modulus_exp .)
    LOGICAL_OR      reduce using rule 149 (divide_exp -> modulus_exp .)
    QUESTION_MARK   reduce using rule 149 (divide_exp -> modulus_exp .)
    KEYWORD_STRUCT  reduce using rule 149 (divide_exp -> modulus_exp .)
    KEYWORD_UNION   reduce using rule 149 (divide_exp -> modulus_exp .)
    TYPE_CHAR       reduce using rule 149 (divide_exp -> modulus_exp .)
    TYPE_INT        reduce using rule 149 (divide_exp -> modulus_exp .)
    TYPE_SHORT      reduce using rule 149 (divide_exp -> modulus_exp .)
    TYPE_LONG       reduce using rule 149 (divide_exp -> modulus_exp .)
    TYPE_FLOAT      reduce using rule 149 (divide_exp -> modulus_exp .)
    TYPE_DOUBLE     reduce using rule 149 (divide_exp -> modulus_exp .)
    TYPE_VOID       reduce using rule 149 (divide_exp -> modulus_exp .)
    KEYWORD_STATIC  reduce using rule 149 (divide_exp -> modulus_exp .)
    KEYWORD_UNSIGNED reduce using rule 149 (divide_exp -> modulus_exp .)
    KEYWORD_VOLATILE reduce using rule 149 (divide_exp -> modulus_exp .)
    KEYWORD_EXTERN  reduce using rule 149 (divide_exp -> modulus_exp .)
    KEYWORD_SIGNED  reduce using rule 149 (divide_exp -> modulus_exp .)
    KEYWORD_REGISTER reduce using rule 149 (divide_exp -> modulus_exp .)
    INCREMENT       reduce using rule 149 (divide_exp -> modulus_exp .)
    DECREMENT       reduce using rule 149 (divide_exp -> modulus_exp .)
    BITWISE_COMPLEMENT reduce using rule 149 (divide_exp -> modulus_exp .)
    NOT             reduce using rule 149 (divide_exp -> modulus_exp .)
    LPAREN          reduce using rule 149 (divide_exp -> modulus_exp .)
    KEYWORD_SIZEOF  reduce using rule 149 (divide_exp -> modulus_exp .)
    IDENTIFIER      reduce using rule 149 (divide_exp -> modulus_exp .)
    STRING          reduce using rule 149 (divide_exp -> modulus_exp .)
    FLOAT_NUMBER    reduce using rule 149 (divide_exp -> modulus_exp .)
    CHARACTER       reduce using rule 149 (divide_exp -> modulus_exp .)
    NUMBER          reduce using rule 149 (divide_exp -> modulus_exp .)
    BINARY_NUMBER   reduce using rule 149 (divide_exp -> modulus_exp .)
    HEXADECIMAL_NUMBER reduce using rule 149 (divide_exp -> modulus_exp .)
    OCTAL_NUMBER    reduce using rule 149 (divide_exp -> modulus_exp .)
    $end            reduce using rule 149 (divide_exp -> modulus_exp .)
    RPAREN          reduce using rule 149 (divide_exp -> modulus_exp .)
    SEMICOLON       reduce using rule 149 (divide_exp -> modulus_exp .)
    RBRACKET        reduce using rule 149 (divide_exp -> modulus_exp .)
    COMMA           reduce using rule 149 (divide_exp -> modulus_exp .)
    COLON           reduce using rule 149 (divide_exp -> modulus_exp .)
    RBRACE          reduce using rule 149 (divide_exp -> modulus_exp .)
    MODULUS         shift and go to state 147


state 79

    (2) program -> function_signature SEMICOLON . program
    (1) program -> .
    (2) program -> . function_signature SEMICOLON program
    (3) program -> . variable_declaration_list SEMICOLON program
    (4) program -> . function program
    (5) program -> . expression program
    (6) program -> . struct_declaration program
    (7) program -> . union_declaration program
    (22) function_signature -> . type_identifier LPAREN signature_param_list RPAREN
    (23) function_signature -> . type_identifier LPAREN RPAREN
    (46) variable_declaration_list -> . type identifier_list
    (47) variable_declaration_list -> . pointer identifier_list
    (21) function -> . function_signature command_block
    (99) expression -> . assign_exp
    (62) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (64) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE SEMICOLON
    (65) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (66) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON
    (67) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (68) union_declaration -> . KEYWORD_UNION LBRACE RBRACE SEMICOLON
    (69) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (44) type_identifier -> . type IDENTIFIER
    (45) type_identifier -> . pointer IDENTIFIER
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    $end            reduce using rule 1 (program -> .)
    KEYWORD_STRUCT  shift and go to state 13
    KEYWORD_UNION   shift and go to state 15
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    function_signature             shift and go to state 2
    program                        shift and go to state 148
    variable_declaration_list      shift and go to state 3
    function                       shift and go to state 4
    expression                     shift and go to state 5
    struct_declaration             shift and go to state 6
    union_declaration              shift and go to state 7
    type_identifier                shift and go to state 8
    type                           shift and go to state 10
    pointer                        shift and go to state 11
    assign_exp                     shift and go to state 12
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 80

    (21) function -> function_signature command_block .

    KEYWORD_STRUCT  reduce using rule 21 (function -> function_signature command_block .)
    KEYWORD_UNION   reduce using rule 21 (function -> function_signature command_block .)
    TYPE_CHAR       reduce using rule 21 (function -> function_signature command_block .)
    TYPE_INT        reduce using rule 21 (function -> function_signature command_block .)
    TYPE_SHORT      reduce using rule 21 (function -> function_signature command_block .)
    TYPE_LONG       reduce using rule 21 (function -> function_signature command_block .)
    TYPE_FLOAT      reduce using rule 21 (function -> function_signature command_block .)
    TYPE_DOUBLE     reduce using rule 21 (function -> function_signature command_block .)
    TYPE_VOID       reduce using rule 21 (function -> function_signature command_block .)
    KEYWORD_STATIC  reduce using rule 21 (function -> function_signature command_block .)
    KEYWORD_UNSIGNED reduce using rule 21 (function -> function_signature command_block .)
    KEYWORD_VOLATILE reduce using rule 21 (function -> function_signature command_block .)
    KEYWORD_EXTERN  reduce using rule 21 (function -> function_signature command_block .)
    KEYWORD_SIGNED  reduce using rule 21 (function -> function_signature command_block .)
    KEYWORD_REGISTER reduce using rule 21 (function -> function_signature command_block .)
    INCREMENT       reduce using rule 21 (function -> function_signature command_block .)
    DECREMENT       reduce using rule 21 (function -> function_signature command_block .)
    BITWISE_AND     reduce using rule 21 (function -> function_signature command_block .)
    TIMES           reduce using rule 21 (function -> function_signature command_block .)
    PLUS            reduce using rule 21 (function -> function_signature command_block .)
    MINUS           reduce using rule 21 (function -> function_signature command_block .)
    BITWISE_COMPLEMENT reduce using rule 21 (function -> function_signature command_block .)
    NOT             reduce using rule 21 (function -> function_signature command_block .)
    LPAREN          reduce using rule 21 (function -> function_signature command_block .)
    KEYWORD_SIZEOF  reduce using rule 21 (function -> function_signature command_block .)
    IDENTIFIER      reduce using rule 21 (function -> function_signature command_block .)
    STRING          reduce using rule 21 (function -> function_signature command_block .)
    FLOAT_NUMBER    reduce using rule 21 (function -> function_signature command_block .)
    CHARACTER       reduce using rule 21 (function -> function_signature command_block .)
    NUMBER          reduce using rule 21 (function -> function_signature command_block .)
    BINARY_NUMBER   reduce using rule 21 (function -> function_signature command_block .)
    HEXADECIMAL_NUMBER reduce using rule 21 (function -> function_signature command_block .)
    OCTAL_NUMBER    reduce using rule 21 (function -> function_signature command_block .)
    $end            reduce using rule 21 (function -> function_signature command_block .)


state 81

    (8) command_block -> LBRACE . RBRACE
    (9) command_block -> LBRACE . command_list RBRACE
    (10) command_list -> . command command_list
    (11) command_list -> . command
    (12) command -> . variable_declaration_list SEMICOLON
    (13) command -> . expression_list SEMICOLON
    (14) command -> . struct_declaration
    (15) command -> . union_declaration
    (16) command -> . SEMICOLON
    (17) command -> . label
    (18) command -> . KEYWORD_GOTO IDENTIFIER SEMICOLON
    (19) command -> . return_stm SEMICOLON
    (46) variable_declaration_list -> . type identifier_list
    (47) variable_declaration_list -> . pointer identifier_list
    (97) expression_list -> . expression
    (98) expression_list -> . expression expression_list
    (62) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (64) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE SEMICOLON
    (65) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (66) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON
    (67) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (68) union_declaration -> . KEYWORD_UNION LBRACE RBRACE SEMICOLON
    (69) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (20) label -> . IDENTIFIER COLON
    (188) return_stm -> . KEYWORD_RETURN
    (189) return_stm -> . KEYWORD_RETURN expression
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (99) expression -> . assign_exp
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    RBRACE          shift and go to state 149
    SEMICOLON       shift and go to state 153
    KEYWORD_GOTO    shift and go to state 158
    KEYWORD_STRUCT  shift and go to state 13
    KEYWORD_UNION   shift and go to state 15
    IDENTIFIER      shift and go to state 159
    KEYWORD_RETURN  shift and go to state 164
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    command_list                   shift and go to state 150
    command                        shift and go to state 151
    variable_declaration_list      shift and go to state 152
    expression_list                shift and go to state 154
    struct_declaration             shift and go to state 155
    union_declaration              shift and go to state 156
    label                          shift and go to state 157
    return_stm                     shift and go to state 160
    type                           shift and go to state 161
    pointer                        shift and go to state 162
    expression                     shift and go to state 163
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18
    assign_exp                     shift and go to state 12
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 82

    (3) program -> variable_declaration_list SEMICOLON . program
    (1) program -> .
    (2) program -> . function_signature SEMICOLON program
    (3) program -> . variable_declaration_list SEMICOLON program
    (4) program -> . function program
    (5) program -> . expression program
    (6) program -> . struct_declaration program
    (7) program -> . union_declaration program
    (22) function_signature -> . type_identifier LPAREN signature_param_list RPAREN
    (23) function_signature -> . type_identifier LPAREN RPAREN
    (46) variable_declaration_list -> . type identifier_list
    (47) variable_declaration_list -> . pointer identifier_list
    (21) function -> . function_signature command_block
    (99) expression -> . assign_exp
    (62) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (64) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE SEMICOLON
    (65) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (66) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON
    (67) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (68) union_declaration -> . KEYWORD_UNION LBRACE RBRACE SEMICOLON
    (69) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (44) type_identifier -> . type IDENTIFIER
    (45) type_identifier -> . pointer IDENTIFIER
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    $end            reduce using rule 1 (program -> .)
    KEYWORD_STRUCT  shift and go to state 13
    KEYWORD_UNION   shift and go to state 15
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    variable_declaration_list      shift and go to state 3
    program                        shift and go to state 165
    function_signature             shift and go to state 2
    function                       shift and go to state 4
    expression                     shift and go to state 5
    struct_declaration             shift and go to state 6
    union_declaration              shift and go to state 7
    type_identifier                shift and go to state 8
    type                           shift and go to state 10
    pointer                        shift and go to state 11
    assign_exp                     shift and go to state 12
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 83

    (4) program -> function program .

    $end            reduce using rule 4 (program -> function program .)


state 84

    (5) program -> expression program .

    $end            reduce using rule 5 (program -> expression program .)


state 85

    (6) program -> struct_declaration program .

    $end            reduce using rule 6 (program -> struct_declaration program .)


state 86

    (7) program -> union_declaration program .

    $end            reduce using rule 7 (program -> union_declaration program .)


state 87

    (22) function_signature -> type_identifier LPAREN . signature_param_list RPAREN
    (23) function_signature -> type_identifier LPAREN . RPAREN
    (24) signature_param_list -> . signature_param COMMA signature_param
    (25) signature_param_list -> . signature_param
    (26) signature_param -> . type
    (27) signature_param -> . pointer
    (28) signature_param -> . type multiple_bracket_signature
    (29) signature_param -> . pointer multiple_bracket_signature
    (30) signature_param -> . type_identifier
    (31) signature_param -> . type_identifier multiple_bracket_signature
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (44) type_identifier -> . type IDENTIFIER
    (45) type_identifier -> . pointer IDENTIFIER
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER

    RPAREN          shift and go to state 168
    KEYWORD_STRUCT  shift and go to state 91
    KEYWORD_UNION   shift and go to state 92
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33

    type_identifier                shift and go to state 166
    signature_param_list           shift and go to state 167
    signature_param                shift and go to state 169
    type                           shift and go to state 170
    pointer                        shift and go to state 171
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18

state 88

    (161) cast_exp -> LPAREN type . RPAREN
    (58) pointer -> type . multiple_times
    (91) multiple_times -> . TIMES multiple_times
    (92) multiple_times -> . TIMES

    RPAREN          shift and go to state 172
    TIMES           shift and go to state 96

    multiple_times                 shift and go to state 95

state 89

    (162) cast_exp -> LPAREN pointer . RPAREN

    RPAREN          shift and go to state 173


state 90

    (190) parentesis_exp -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 174


state 91

    (82) user_types -> KEYWORD_STRUCT . IDENTIFIER

    IDENTIFIER      shift and go to state 175


state 92

    (83) user_types -> KEYWORD_UNION . IDENTIFIER

    IDENTIFIER      shift and go to state 176


state 93

    (46) variable_declaration_list -> type identifier_list .

    SEMICOLON       reduce using rule 46 (variable_declaration_list -> type identifier_list .)


state 94

    (44) type_identifier -> type IDENTIFIER .
    (48) identifier_list -> IDENTIFIER .
    (49) identifier_list -> IDENTIFIER . COMMA identifier_list
    (50) identifier_list -> IDENTIFIER . multiple_bracket_signature
    (51) identifier_list -> IDENTIFIER . multiple_bracket_signature COMMA identifier_list
    (52) identifier_list -> IDENTIFIER . ASSIGN expression
    (53) identifier_list -> IDENTIFIER . ASSIGN expression COMMA identifier_list
    (54) identifier_list -> IDENTIFIER . multiple_bracket_signature ASSIGN value_list
    (55) identifier_list -> IDENTIFIER . multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (56) identifier_list -> IDENTIFIER . ASSIGN value_list
    (57) identifier_list -> IDENTIFIER . ASSIGN value_list COMMA identifier_list
    (32) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_signature
    (33) multiple_bracket_signature -> . LBRACKET RBRACKET
    (34) multiple_bracket_signature -> . bracket_with_bounds multiple_bracket_signature
    (35) multiple_bracket_signature -> . bracket_with_bounds
    (36) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    LPAREN          reduce using rule 44 (type_identifier -> type IDENTIFIER .)
    SEMICOLON       reduce using rule 48 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 177
    ASSIGN          shift and go to state 179
    LBRACKET        shift and go to state 180

    multiple_bracket_signature     shift and go to state 178
    bracket_with_bounds            shift and go to state 181

state 95

    (58) pointer -> type multiple_times .

    IDENTIFIER      reduce using rule 58 (pointer -> type multiple_times .)
    RPAREN          reduce using rule 58 (pointer -> type multiple_times .)
    ASSIGN          reduce using rule 58 (pointer -> type multiple_times .)
    TIMES_ASSIGN    reduce using rule 58 (pointer -> type multiple_times .)
    DIVIDE_ASSIGN   reduce using rule 58 (pointer -> type multiple_times .)
    MODULUS_ASSIGN  reduce using rule 58 (pointer -> type multiple_times .)
    PLUS_ASSIGN     reduce using rule 58 (pointer -> type multiple_times .)
    MINUS_ASSIGN    reduce using rule 58 (pointer -> type multiple_times .)
    SHIFT_LEFT_ASSIGN reduce using rule 58 (pointer -> type multiple_times .)
    SHIFT_RIGHT_ASSIGN reduce using rule 58 (pointer -> type multiple_times .)
    BITWISE_AND_ASSIGN reduce using rule 58 (pointer -> type multiple_times .)
    BITWISE_XOR_ASSIGN reduce using rule 58 (pointer -> type multiple_times .)
    BITWISE_OR_ASSIGN reduce using rule 58 (pointer -> type multiple_times .)
    MODULUS         reduce using rule 58 (pointer -> type multiple_times .)
    DIVIDE          reduce using rule 58 (pointer -> type multiple_times .)
    TIMES           reduce using rule 58 (pointer -> type multiple_times .)
    MINUS           reduce using rule 58 (pointer -> type multiple_times .)
    PLUS            reduce using rule 58 (pointer -> type multiple_times .)
    BITWISE_SHIFT_RIGHT reduce using rule 58 (pointer -> type multiple_times .)
    BITWISE_SHIFT_LEFT reduce using rule 58 (pointer -> type multiple_times .)
    LESS_EQUALS     reduce using rule 58 (pointer -> type multiple_times .)
    LESS_THEN       reduce using rule 58 (pointer -> type multiple_times .)
    GREATER_EQUALS  reduce using rule 58 (pointer -> type multiple_times .)
    GREATER_THEN    reduce using rule 58 (pointer -> type multiple_times .)
    NOT_EQUALS      reduce using rule 58 (pointer -> type multiple_times .)
    EQUALS_THEN     reduce using rule 58 (pointer -> type multiple_times .)
    BITWISE_AND     reduce using rule 58 (pointer -> type multiple_times .)
    BITWISE_XOR     reduce using rule 58 (pointer -> type multiple_times .)
    BITWISE_OR      reduce using rule 58 (pointer -> type multiple_times .)
    LOGICAL_AND     reduce using rule 58 (pointer -> type multiple_times .)
    LOGICAL_OR      reduce using rule 58 (pointer -> type multiple_times .)
    QUESTION_MARK   reduce using rule 58 (pointer -> type multiple_times .)
    KEYWORD_STRUCT  reduce using rule 58 (pointer -> type multiple_times .)
    KEYWORD_UNION   reduce using rule 58 (pointer -> type multiple_times .)
    TYPE_CHAR       reduce using rule 58 (pointer -> type multiple_times .)
    TYPE_INT        reduce using rule 58 (pointer -> type multiple_times .)
    TYPE_SHORT      reduce using rule 58 (pointer -> type multiple_times .)
    TYPE_LONG       reduce using rule 58 (pointer -> type multiple_times .)
    TYPE_FLOAT      reduce using rule 58 (pointer -> type multiple_times .)
    TYPE_DOUBLE     reduce using rule 58 (pointer -> type multiple_times .)
    TYPE_VOID       reduce using rule 58 (pointer -> type multiple_times .)
    KEYWORD_STATIC  reduce using rule 58 (pointer -> type multiple_times .)
    KEYWORD_UNSIGNED reduce using rule 58 (pointer -> type multiple_times .)
    KEYWORD_VOLATILE reduce using rule 58 (pointer -> type multiple_times .)
    KEYWORD_EXTERN  reduce using rule 58 (pointer -> type multiple_times .)
    KEYWORD_SIGNED  reduce using rule 58 (pointer -> type multiple_times .)
    KEYWORD_REGISTER reduce using rule 58 (pointer -> type multiple_times .)
    INCREMENT       reduce using rule 58 (pointer -> type multiple_times .)
    DECREMENT       reduce using rule 58 (pointer -> type multiple_times .)
    BITWISE_COMPLEMENT reduce using rule 58 (pointer -> type multiple_times .)
    NOT             reduce using rule 58 (pointer -> type multiple_times .)
    LPAREN          reduce using rule 58 (pointer -> type multiple_times .)
    KEYWORD_SIZEOF  reduce using rule 58 (pointer -> type multiple_times .)
    STRING          reduce using rule 58 (pointer -> type multiple_times .)
    FLOAT_NUMBER    reduce using rule 58 (pointer -> type multiple_times .)
    CHARACTER       reduce using rule 58 (pointer -> type multiple_times .)
    NUMBER          reduce using rule 58 (pointer -> type multiple_times .)
    BINARY_NUMBER   reduce using rule 58 (pointer -> type multiple_times .)
    HEXADECIMAL_NUMBER reduce using rule 58 (pointer -> type multiple_times .)
    OCTAL_NUMBER    reduce using rule 58 (pointer -> type multiple_times .)
    $end            reduce using rule 58 (pointer -> type multiple_times .)
    SEMICOLON       reduce using rule 58 (pointer -> type multiple_times .)
    RBRACKET        reduce using rule 58 (pointer -> type multiple_times .)
    COMMA           reduce using rule 58 (pointer -> type multiple_times .)
    COLON           reduce using rule 58 (pointer -> type multiple_times .)
    RBRACE          reduce using rule 58 (pointer -> type multiple_times .)
    LBRACKET        reduce using rule 58 (pointer -> type multiple_times .)


state 96

    (91) multiple_times -> TIMES . multiple_times
    (92) multiple_times -> TIMES .
    (91) multiple_times -> . TIMES multiple_times
    (92) multiple_times -> . TIMES

  ! shift/reduce conflict for TIMES resolved as shift
    IDENTIFIER      reduce using rule 92 (multiple_times -> TIMES .)
    RPAREN          reduce using rule 92 (multiple_times -> TIMES .)
    ASSIGN          reduce using rule 92 (multiple_times -> TIMES .)
    TIMES_ASSIGN    reduce using rule 92 (multiple_times -> TIMES .)
    DIVIDE_ASSIGN   reduce using rule 92 (multiple_times -> TIMES .)
    MODULUS_ASSIGN  reduce using rule 92 (multiple_times -> TIMES .)
    PLUS_ASSIGN     reduce using rule 92 (multiple_times -> TIMES .)
    MINUS_ASSIGN    reduce using rule 92 (multiple_times -> TIMES .)
    SHIFT_LEFT_ASSIGN reduce using rule 92 (multiple_times -> TIMES .)
    SHIFT_RIGHT_ASSIGN reduce using rule 92 (multiple_times -> TIMES .)
    BITWISE_AND_ASSIGN reduce using rule 92 (multiple_times -> TIMES .)
    BITWISE_XOR_ASSIGN reduce using rule 92 (multiple_times -> TIMES .)
    BITWISE_OR_ASSIGN reduce using rule 92 (multiple_times -> TIMES .)
    MODULUS         reduce using rule 92 (multiple_times -> TIMES .)
    DIVIDE          reduce using rule 92 (multiple_times -> TIMES .)
    MINUS           reduce using rule 92 (multiple_times -> TIMES .)
    PLUS            reduce using rule 92 (multiple_times -> TIMES .)
    BITWISE_SHIFT_RIGHT reduce using rule 92 (multiple_times -> TIMES .)
    BITWISE_SHIFT_LEFT reduce using rule 92 (multiple_times -> TIMES .)
    LESS_EQUALS     reduce using rule 92 (multiple_times -> TIMES .)
    LESS_THEN       reduce using rule 92 (multiple_times -> TIMES .)
    GREATER_EQUALS  reduce using rule 92 (multiple_times -> TIMES .)
    GREATER_THEN    reduce using rule 92 (multiple_times -> TIMES .)
    NOT_EQUALS      reduce using rule 92 (multiple_times -> TIMES .)
    EQUALS_THEN     reduce using rule 92 (multiple_times -> TIMES .)
    BITWISE_AND     reduce using rule 92 (multiple_times -> TIMES .)
    BITWISE_XOR     reduce using rule 92 (multiple_times -> TIMES .)
    BITWISE_OR      reduce using rule 92 (multiple_times -> TIMES .)
    LOGICAL_AND     reduce using rule 92 (multiple_times -> TIMES .)
    LOGICAL_OR      reduce using rule 92 (multiple_times -> TIMES .)
    QUESTION_MARK   reduce using rule 92 (multiple_times -> TIMES .)
    KEYWORD_STRUCT  reduce using rule 92 (multiple_times -> TIMES .)
    KEYWORD_UNION   reduce using rule 92 (multiple_times -> TIMES .)
    TYPE_CHAR       reduce using rule 92 (multiple_times -> TIMES .)
    TYPE_INT        reduce using rule 92 (multiple_times -> TIMES .)
    TYPE_SHORT      reduce using rule 92 (multiple_times -> TIMES .)
    TYPE_LONG       reduce using rule 92 (multiple_times -> TIMES .)
    TYPE_FLOAT      reduce using rule 92 (multiple_times -> TIMES .)
    TYPE_DOUBLE     reduce using rule 92 (multiple_times -> TIMES .)
    TYPE_VOID       reduce using rule 92 (multiple_times -> TIMES .)
    KEYWORD_STATIC  reduce using rule 92 (multiple_times -> TIMES .)
    KEYWORD_UNSIGNED reduce using rule 92 (multiple_times -> TIMES .)
    KEYWORD_VOLATILE reduce using rule 92 (multiple_times -> TIMES .)
    KEYWORD_EXTERN  reduce using rule 92 (multiple_times -> TIMES .)
    KEYWORD_SIGNED  reduce using rule 92 (multiple_times -> TIMES .)
    KEYWORD_REGISTER reduce using rule 92 (multiple_times -> TIMES .)
    INCREMENT       reduce using rule 92 (multiple_times -> TIMES .)
    DECREMENT       reduce using rule 92 (multiple_times -> TIMES .)
    BITWISE_COMPLEMENT reduce using rule 92 (multiple_times -> TIMES .)
    NOT             reduce using rule 92 (multiple_times -> TIMES .)
    LPAREN          reduce using rule 92 (multiple_times -> TIMES .)
    KEYWORD_SIZEOF  reduce using rule 92 (multiple_times -> TIMES .)
    STRING          reduce using rule 92 (multiple_times -> TIMES .)
    FLOAT_NUMBER    reduce using rule 92 (multiple_times -> TIMES .)
    CHARACTER       reduce using rule 92 (multiple_times -> TIMES .)
    NUMBER          reduce using rule 92 (multiple_times -> TIMES .)
    BINARY_NUMBER   reduce using rule 92 (multiple_times -> TIMES .)
    HEXADECIMAL_NUMBER reduce using rule 92 (multiple_times -> TIMES .)
    OCTAL_NUMBER    reduce using rule 92 (multiple_times -> TIMES .)
    $end            reduce using rule 92 (multiple_times -> TIMES .)
    SEMICOLON       reduce using rule 92 (multiple_times -> TIMES .)
    RBRACKET        reduce using rule 92 (multiple_times -> TIMES .)
    COMMA           reduce using rule 92 (multiple_times -> TIMES .)
    COLON           reduce using rule 92 (multiple_times -> TIMES .)
    RBRACE          reduce using rule 92 (multiple_times -> TIMES .)
    LBRACKET        reduce using rule 92 (multiple_times -> TIMES .)
    TIMES           shift and go to state 96

  ! TIMES           [ reduce using rule 92 (multiple_times -> TIMES .) ]

    multiple_times                 shift and go to state 182

state 97

    (47) variable_declaration_list -> pointer identifier_list .

    SEMICOLON       reduce using rule 47 (variable_declaration_list -> pointer identifier_list .)


state 98

    (45) type_identifier -> pointer IDENTIFIER .
    (48) identifier_list -> IDENTIFIER .
    (49) identifier_list -> IDENTIFIER . COMMA identifier_list
    (50) identifier_list -> IDENTIFIER . multiple_bracket_signature
    (51) identifier_list -> IDENTIFIER . multiple_bracket_signature COMMA identifier_list
    (52) identifier_list -> IDENTIFIER . ASSIGN expression
    (53) identifier_list -> IDENTIFIER . ASSIGN expression COMMA identifier_list
    (54) identifier_list -> IDENTIFIER . multiple_bracket_signature ASSIGN value_list
    (55) identifier_list -> IDENTIFIER . multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (56) identifier_list -> IDENTIFIER . ASSIGN value_list
    (57) identifier_list -> IDENTIFIER . ASSIGN value_list COMMA identifier_list
    (32) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_signature
    (33) multiple_bracket_signature -> . LBRACKET RBRACKET
    (34) multiple_bracket_signature -> . bracket_with_bounds multiple_bracket_signature
    (35) multiple_bracket_signature -> . bracket_with_bounds
    (36) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    LPAREN          reduce using rule 45 (type_identifier -> pointer IDENTIFIER .)
    SEMICOLON       reduce using rule 48 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 177
    ASSIGN          shift and go to state 179
    LBRACKET        shift and go to state 180

    multiple_bracket_signature     shift and go to state 178
    bracket_with_bounds            shift and go to state 181

state 99

    (62) struct_declaration -> KEYWORD_STRUCT IDENTIFIER . LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> KEYWORD_STRUCT IDENTIFIER . LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (82) user_types -> KEYWORD_STRUCT IDENTIFIER .

    LBRACE          shift and go to state 183
    IDENTIFIER      reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TIMES           reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)


state 100

    (64) struct_declaration -> KEYWORD_STRUCT LBRACE . RBRACE SEMICOLON
    (65) struct_declaration -> KEYWORD_STRUCT LBRACE . struct_or_union_member_list RBRACE SEMICOLON
    (70) struct_or_union_member_list -> . variable_declaration_list SEMICOLON
    (71) struct_or_union_member_list -> . variable_declaration_list SEMICOLON struct_or_union_member_list
    (72) struct_or_union_member_list -> . struct_declaration
    (73) struct_or_union_member_list -> . struct_declaration SEMICOLON struct_or_union_member_list
    (74) struct_or_union_member_list -> . union_declaration
    (75) struct_or_union_member_list -> . union_declaration SEMICOLON struct_or_union_member_list
    (46) variable_declaration_list -> . type identifier_list
    (47) variable_declaration_list -> . pointer identifier_list
    (62) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (64) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE SEMICOLON
    (65) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (66) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON
    (67) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (68) union_declaration -> . KEYWORD_UNION LBRACE RBRACE SEMICOLON
    (69) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER

    RBRACE          shift and go to state 184
    KEYWORD_STRUCT  shift and go to state 13
    KEYWORD_UNION   shift and go to state 15
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33

    struct_or_union_member_list    shift and go to state 185
    variable_declaration_list      shift and go to state 186
    struct_declaration             shift and go to state 187
    union_declaration              shift and go to state 188
    type                           shift and go to state 161
    pointer                        shift and go to state 162
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18

state 101

    (66) union_declaration -> KEYWORD_UNION IDENTIFIER . LBRACE RBRACE SEMICOLON
    (67) union_declaration -> KEYWORD_UNION IDENTIFIER . LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (83) user_types -> KEYWORD_UNION IDENTIFIER .

    LBRACE          shift and go to state 189
    IDENTIFIER      reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TIMES           reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)


state 102

    (68) union_declaration -> KEYWORD_UNION LBRACE . RBRACE SEMICOLON
    (69) union_declaration -> KEYWORD_UNION LBRACE . struct_or_union_member_list RBRACE SEMICOLON
    (70) struct_or_union_member_list -> . variable_declaration_list SEMICOLON
    (71) struct_or_union_member_list -> . variable_declaration_list SEMICOLON struct_or_union_member_list
    (72) struct_or_union_member_list -> . struct_declaration
    (73) struct_or_union_member_list -> . struct_declaration SEMICOLON struct_or_union_member_list
    (74) struct_or_union_member_list -> . union_declaration
    (75) struct_or_union_member_list -> . union_declaration SEMICOLON struct_or_union_member_list
    (46) variable_declaration_list -> . type identifier_list
    (47) variable_declaration_list -> . pointer identifier_list
    (62) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (64) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE SEMICOLON
    (65) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (66) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON
    (67) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (68) union_declaration -> . KEYWORD_UNION LBRACE RBRACE SEMICOLON
    (69) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER

    RBRACE          shift and go to state 190
    KEYWORD_STRUCT  shift and go to state 13
    KEYWORD_UNION   shift and go to state 15
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33

    struct_or_union_member_list    shift and go to state 191
    variable_declaration_list      shift and go to state 186
    struct_declaration             shift and go to state 187
    union_declaration              shift and go to state 188
    type                           shift and go to state 161
    pointer                        shift and go to state 162
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18

state 103

    (61) type -> type_modifier type .

    IDENTIFIER      reduce using rule 61 (type -> type_modifier type .)
    TIMES           reduce using rule 61 (type -> type_modifier type .)
    RPAREN          reduce using rule 61 (type -> type_modifier type .)
    ASSIGN          reduce using rule 61 (type -> type_modifier type .)
    TIMES_ASSIGN    reduce using rule 61 (type -> type_modifier type .)
    DIVIDE_ASSIGN   reduce using rule 61 (type -> type_modifier type .)
    MODULUS_ASSIGN  reduce using rule 61 (type -> type_modifier type .)
    PLUS_ASSIGN     reduce using rule 61 (type -> type_modifier type .)
    MINUS_ASSIGN    reduce using rule 61 (type -> type_modifier type .)
    SHIFT_LEFT_ASSIGN reduce using rule 61 (type -> type_modifier type .)
    SHIFT_RIGHT_ASSIGN reduce using rule 61 (type -> type_modifier type .)
    BITWISE_AND_ASSIGN reduce using rule 61 (type -> type_modifier type .)
    BITWISE_XOR_ASSIGN reduce using rule 61 (type -> type_modifier type .)
    BITWISE_OR_ASSIGN reduce using rule 61 (type -> type_modifier type .)
    MODULUS         reduce using rule 61 (type -> type_modifier type .)
    DIVIDE          reduce using rule 61 (type -> type_modifier type .)
    MINUS           reduce using rule 61 (type -> type_modifier type .)
    PLUS            reduce using rule 61 (type -> type_modifier type .)
    BITWISE_SHIFT_RIGHT reduce using rule 61 (type -> type_modifier type .)
    BITWISE_SHIFT_LEFT reduce using rule 61 (type -> type_modifier type .)
    LESS_EQUALS     reduce using rule 61 (type -> type_modifier type .)
    LESS_THEN       reduce using rule 61 (type -> type_modifier type .)
    GREATER_EQUALS  reduce using rule 61 (type -> type_modifier type .)
    GREATER_THEN    reduce using rule 61 (type -> type_modifier type .)
    NOT_EQUALS      reduce using rule 61 (type -> type_modifier type .)
    EQUALS_THEN     reduce using rule 61 (type -> type_modifier type .)
    BITWISE_AND     reduce using rule 61 (type -> type_modifier type .)
    BITWISE_XOR     reduce using rule 61 (type -> type_modifier type .)
    BITWISE_OR      reduce using rule 61 (type -> type_modifier type .)
    LOGICAL_AND     reduce using rule 61 (type -> type_modifier type .)
    LOGICAL_OR      reduce using rule 61 (type -> type_modifier type .)
    QUESTION_MARK   reduce using rule 61 (type -> type_modifier type .)
    KEYWORD_STRUCT  reduce using rule 61 (type -> type_modifier type .)
    KEYWORD_UNION   reduce using rule 61 (type -> type_modifier type .)
    TYPE_CHAR       reduce using rule 61 (type -> type_modifier type .)
    TYPE_INT        reduce using rule 61 (type -> type_modifier type .)
    TYPE_SHORT      reduce using rule 61 (type -> type_modifier type .)
    TYPE_LONG       reduce using rule 61 (type -> type_modifier type .)
    TYPE_FLOAT      reduce using rule 61 (type -> type_modifier type .)
    TYPE_DOUBLE     reduce using rule 61 (type -> type_modifier type .)
    TYPE_VOID       reduce using rule 61 (type -> type_modifier type .)
    KEYWORD_STATIC  reduce using rule 61 (type -> type_modifier type .)
    KEYWORD_UNSIGNED reduce using rule 61 (type -> type_modifier type .)
    KEYWORD_VOLATILE reduce using rule 61 (type -> type_modifier type .)
    KEYWORD_EXTERN  reduce using rule 61 (type -> type_modifier type .)
    KEYWORD_SIGNED  reduce using rule 61 (type -> type_modifier type .)
    KEYWORD_REGISTER reduce using rule 61 (type -> type_modifier type .)
    INCREMENT       reduce using rule 61 (type -> type_modifier type .)
    DECREMENT       reduce using rule 61 (type -> type_modifier type .)
    BITWISE_COMPLEMENT reduce using rule 61 (type -> type_modifier type .)
    NOT             reduce using rule 61 (type -> type_modifier type .)
    LPAREN          reduce using rule 61 (type -> type_modifier type .)
    KEYWORD_SIZEOF  reduce using rule 61 (type -> type_modifier type .)
    STRING          reduce using rule 61 (type -> type_modifier type .)
    FLOAT_NUMBER    reduce using rule 61 (type -> type_modifier type .)
    CHARACTER       reduce using rule 61 (type -> type_modifier type .)
    NUMBER          reduce using rule 61 (type -> type_modifier type .)
    BINARY_NUMBER   reduce using rule 61 (type -> type_modifier type .)
    HEXADECIMAL_NUMBER reduce using rule 61 (type -> type_modifier type .)
    OCTAL_NUMBER    reduce using rule 61 (type -> type_modifier type .)
    $end            reduce using rule 61 (type -> type_modifier type .)
    SEMICOLON       reduce using rule 61 (type -> type_modifier type .)
    RBRACKET        reduce using rule 61 (type -> type_modifier type .)
    COMMA           reduce using rule 61 (type -> type_modifier type .)
    COLON           reduce using rule 61 (type -> type_modifier type .)
    RBRACE          reduce using rule 61 (type -> type_modifier type .)
    LBRACKET        reduce using rule 61 (type -> type_modifier type .)


state 104

    (111) assign_exp -> unary_exp assign_operator . assign_exp
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    unary_exp                      shift and go to state 19
    assign_exp                     shift and go to state 192
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 105

    (100) assign_operator -> ASSIGN .

    INCREMENT       reduce using rule 100 (assign_operator -> ASSIGN .)
    DECREMENT       reduce using rule 100 (assign_operator -> ASSIGN .)
    BITWISE_AND     reduce using rule 100 (assign_operator -> ASSIGN .)
    TIMES           reduce using rule 100 (assign_operator -> ASSIGN .)
    PLUS            reduce using rule 100 (assign_operator -> ASSIGN .)
    MINUS           reduce using rule 100 (assign_operator -> ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 100 (assign_operator -> ASSIGN .)
    NOT             reduce using rule 100 (assign_operator -> ASSIGN .)
    LPAREN          reduce using rule 100 (assign_operator -> ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 100 (assign_operator -> ASSIGN .)
    IDENTIFIER      reduce using rule 100 (assign_operator -> ASSIGN .)
    STRING          reduce using rule 100 (assign_operator -> ASSIGN .)
    FLOAT_NUMBER    reduce using rule 100 (assign_operator -> ASSIGN .)
    CHARACTER       reduce using rule 100 (assign_operator -> ASSIGN .)
    NUMBER          reduce using rule 100 (assign_operator -> ASSIGN .)
    BINARY_NUMBER   reduce using rule 100 (assign_operator -> ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 100 (assign_operator -> ASSIGN .)
    OCTAL_NUMBER    reduce using rule 100 (assign_operator -> ASSIGN .)


state 106

    (101) assign_operator -> TIMES_ASSIGN .

    INCREMENT       reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)
    DECREMENT       reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)
    BITWISE_AND     reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)
    TIMES           reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)
    PLUS            reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)
    MINUS           reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)
    NOT             reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)
    LPAREN          reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)
    IDENTIFIER      reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)
    STRING          reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)
    CHARACTER       reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)
    NUMBER          reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)
    BINARY_NUMBER   reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 101 (assign_operator -> TIMES_ASSIGN .)


state 107

    (102) assign_operator -> DIVIDE_ASSIGN .

    INCREMENT       reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)
    DECREMENT       reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)
    BITWISE_AND     reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)
    TIMES           reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)
    NOT             reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)
    IDENTIFIER      reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)
    STRING          reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)
    CHARACTER       reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER          reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)
    BINARY_NUMBER   reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 102 (assign_operator -> DIVIDE_ASSIGN .)


state 108

    (103) assign_operator -> MODULUS_ASSIGN .

    INCREMENT       reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)
    DECREMENT       reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)
    BITWISE_AND     reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)
    TIMES           reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)
    PLUS            reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)
    MINUS           reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)
    NOT             reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)
    LPAREN          reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)
    IDENTIFIER      reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)
    STRING          reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)
    CHARACTER       reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)
    NUMBER          reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)
    BINARY_NUMBER   reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 103 (assign_operator -> MODULUS_ASSIGN .)


state 109

    (104) assign_operator -> PLUS_ASSIGN .

    INCREMENT       reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)
    DECREMENT       reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)
    BITWISE_AND     reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)
    TIMES           reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)
    PLUS            reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)
    NOT             reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)
    IDENTIFIER      reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)
    STRING          reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)
    CHARACTER       reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)
    NUMBER          reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)
    BINARY_NUMBER   reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 104 (assign_operator -> PLUS_ASSIGN .)


state 110

    (105) assign_operator -> MINUS_ASSIGN .

    INCREMENT       reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)
    DECREMENT       reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)
    BITWISE_AND     reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)
    TIMES           reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)
    PLUS            reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)
    MINUS           reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)
    NOT             reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)
    LPAREN          reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)
    IDENTIFIER      reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)
    STRING          reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)
    CHARACTER       reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)
    NUMBER          reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)
    BINARY_NUMBER   reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 105 (assign_operator -> MINUS_ASSIGN .)


state 111

    (106) assign_operator -> SHIFT_LEFT_ASSIGN .

    INCREMENT       reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    DECREMENT       reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    BITWISE_AND     reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    TIMES           reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    PLUS            reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    MINUS           reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    NOT             reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    LPAREN          reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    STRING          reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    CHARACTER       reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    NUMBER          reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    BINARY_NUMBER   reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 106 (assign_operator -> SHIFT_LEFT_ASSIGN .)


state 112

    (107) assign_operator -> SHIFT_RIGHT_ASSIGN .

    INCREMENT       reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    DECREMENT       reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    BITWISE_AND     reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    TIMES           reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    PLUS            reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    MINUS           reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    NOT             reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    LPAREN          reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    STRING          reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    CHARACTER       reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    NUMBER          reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    BINARY_NUMBER   reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 107 (assign_operator -> SHIFT_RIGHT_ASSIGN .)


state 113

    (108) assign_operator -> BITWISE_AND_ASSIGN .

    INCREMENT       reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)
    DECREMENT       reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)
    BITWISE_AND     reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)
    TIMES           reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)
    PLUS            reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)
    MINUS           reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)
    NOT             reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)
    LPAREN          reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)
    IDENTIFIER      reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)
    STRING          reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)
    CHARACTER       reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)
    NUMBER          reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)
    BINARY_NUMBER   reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 108 (assign_operator -> BITWISE_AND_ASSIGN .)


state 114

    (109) assign_operator -> BITWISE_XOR_ASSIGN .

    INCREMENT       reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)
    DECREMENT       reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)
    BITWISE_AND     reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)
    TIMES           reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)
    PLUS            reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)
    MINUS           reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)
    NOT             reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)
    LPAREN          reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)
    STRING          reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)
    CHARACTER       reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)
    NUMBER          reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)
    BINARY_NUMBER   reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 109 (assign_operator -> BITWISE_XOR_ASSIGN .)


state 115

    (110) assign_operator -> BITWISE_OR_ASSIGN .

    INCREMENT       reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)
    DECREMENT       reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)
    BITWISE_AND     reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)
    TIMES           reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)
    PLUS            reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)
    MINUS           reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)
    NOT             reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)
    LPAREN          reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)
    IDENTIFIER      reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)
    STRING          reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)
    CHARACTER       reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)
    NUMBER          reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)
    BINARY_NUMBER   reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 110 (assign_operator -> BITWISE_OR_ASSIGN .)


state 116

    (169) postfix_exp -> postfix_exp LBRACKET . expression RBRACKET
    (99) expression -> . assign_exp
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    postfix_exp                    shift and go to state 34
    expression                     shift and go to state 193
    assign_exp                     shift and go to state 12
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 117

    (170) postfix_exp -> postfix_exp LPAREN . RPAREN
    (171) postfix_exp -> postfix_exp LPAREN . function_call_parameters RPAREN
    (177) function_call_parameters -> . expression
    (178) function_call_parameters -> . expression COMMA function_call_parameters
    (99) expression -> . assign_exp
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    RPAREN          shift and go to state 194
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    postfix_exp                    shift and go to state 34
    function_call_parameters       shift and go to state 195
    expression                     shift and go to state 196
    assign_exp                     shift and go to state 12
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 118

    (172) postfix_exp -> postfix_exp DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 197


state 119

    (173) postfix_exp -> postfix_exp ARROW . IDENTIFIER

    IDENTIFIER      shift and go to state 198


state 120

    (174) postfix_exp -> postfix_exp INCREMENT .

    LBRACKET        reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    LPAREN          reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    DOT             reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    ARROW           reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    INCREMENT       reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    DECREMENT       reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    ASSIGN          reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    TIMES_ASSIGN    reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    DIVIDE_ASSIGN   reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    MODULUS_ASSIGN  reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    PLUS_ASSIGN     reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    MINUS_ASSIGN    reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    SHIFT_LEFT_ASSIGN reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    SHIFT_RIGHT_ASSIGN reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_AND_ASSIGN reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_XOR_ASSIGN reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_OR_ASSIGN reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    MODULUS         reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    DIVIDE          reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    TIMES           reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    MINUS           reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    PLUS            reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_SHIFT_RIGHT reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_SHIFT_LEFT reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    LESS_EQUALS     reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    LESS_THEN       reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    GREATER_EQUALS  reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    GREATER_THEN    reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    NOT_EQUALS      reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    EQUALS_THEN     reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_AND     reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_XOR     reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_OR      reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    LOGICAL_AND     reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    LOGICAL_OR      reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    QUESTION_MARK   reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_STRUCT  reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_UNION   reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    TYPE_CHAR       reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    TYPE_INT        reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    TYPE_SHORT      reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    TYPE_LONG       reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    TYPE_FLOAT      reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    TYPE_DOUBLE     reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    TYPE_VOID       reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_STATIC  reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_UNSIGNED reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_VOLATILE reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_EXTERN  reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_SIGNED  reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_REGISTER reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_COMPLEMENT reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    NOT             reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_SIZEOF  reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    IDENTIFIER      reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    STRING          reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    FLOAT_NUMBER    reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    CHARACTER       reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    NUMBER          reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    BINARY_NUMBER   reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    HEXADECIMAL_NUMBER reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    OCTAL_NUMBER    reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    $end            reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    RPAREN          reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    SEMICOLON       reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    RBRACKET        reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    COMMA           reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    COLON           reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)
    RBRACE          reduce using rule 174 (postfix_exp -> postfix_exp INCREMENT .)


state 121

    (175) postfix_exp -> postfix_exp DECREMENT .

    LBRACKET        reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    LPAREN          reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    DOT             reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    ARROW           reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    INCREMENT       reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    DECREMENT       reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    ASSIGN          reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    TIMES_ASSIGN    reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    DIVIDE_ASSIGN   reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    MODULUS_ASSIGN  reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    PLUS_ASSIGN     reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    MINUS_ASSIGN    reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    SHIFT_LEFT_ASSIGN reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    SHIFT_RIGHT_ASSIGN reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_AND_ASSIGN reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_XOR_ASSIGN reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_OR_ASSIGN reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    MODULUS         reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    DIVIDE          reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    TIMES           reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    MINUS           reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    PLUS            reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_SHIFT_RIGHT reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_SHIFT_LEFT reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    LESS_EQUALS     reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    LESS_THEN       reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    GREATER_EQUALS  reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    GREATER_THEN    reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    NOT_EQUALS      reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    EQUALS_THEN     reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_AND     reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_XOR     reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_OR      reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    LOGICAL_AND     reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    LOGICAL_OR      reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    QUESTION_MARK   reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_STRUCT  reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_UNION   reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    TYPE_CHAR       reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    TYPE_INT        reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    TYPE_SHORT      reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    TYPE_LONG       reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    TYPE_FLOAT      reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    TYPE_DOUBLE     reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    TYPE_VOID       reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_STATIC  reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_UNSIGNED reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_VOLATILE reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_EXTERN  reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_SIGNED  reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_REGISTER reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_COMPLEMENT reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    NOT             reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_SIZEOF  reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    IDENTIFIER      reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    STRING          reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    FLOAT_NUMBER    reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    CHARACTER       reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    NUMBER          reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    BINARY_NUMBER   reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    HEXADECIMAL_NUMBER reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    OCTAL_NUMBER    reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    $end            reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    RPAREN          reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    SEMICOLON       reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    RBRACKET        reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    COMMA           reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    COLON           reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)
    RBRACE          reduce using rule 175 (postfix_exp -> postfix_exp DECREMENT .)


state 122

    (153) unary_exp -> INCREMENT unary_exp .

    ASSIGN          reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    TIMES_ASSIGN    reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    DIVIDE_ASSIGN   reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    MODULUS_ASSIGN  reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    PLUS_ASSIGN     reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    MINUS_ASSIGN    reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    BITWISE_AND_ASSIGN reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    BITWISE_OR_ASSIGN reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    MODULUS         reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    DIVIDE          reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    TIMES           reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    MINUS           reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    PLUS            reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    LESS_EQUALS     reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    LESS_THEN       reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    GREATER_EQUALS  reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    GREATER_THEN    reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    NOT_EQUALS      reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    EQUALS_THEN     reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    BITWISE_AND     reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    BITWISE_XOR     reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    BITWISE_OR      reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    LOGICAL_AND     reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    LOGICAL_OR      reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    QUESTION_MARK   reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    KEYWORD_STRUCT  reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    KEYWORD_UNION   reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    TYPE_CHAR       reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    TYPE_INT        reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    TYPE_SHORT      reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    TYPE_LONG       reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    TYPE_FLOAT      reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    TYPE_DOUBLE     reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    TYPE_VOID       reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    KEYWORD_STATIC  reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    KEYWORD_UNSIGNED reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    KEYWORD_VOLATILE reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    KEYWORD_EXTERN  reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    KEYWORD_SIGNED  reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    KEYWORD_REGISTER reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    INCREMENT       reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    DECREMENT       reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    BITWISE_COMPLEMENT reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    NOT             reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    LPAREN          reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    KEYWORD_SIZEOF  reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    IDENTIFIER      reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    STRING          reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    FLOAT_NUMBER    reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    CHARACTER       reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    NUMBER          reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    BINARY_NUMBER   reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    OCTAL_NUMBER    reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    $end            reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    RPAREN          reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    SEMICOLON       reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    RBRACKET        reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    COMMA           reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    COLON           reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)
    RBRACE          reduce using rule 153 (unary_exp -> INCREMENT unary_exp .)


state 123

    (154) unary_exp -> DECREMENT unary_exp .

    ASSIGN          reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    TIMES_ASSIGN    reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    DIVIDE_ASSIGN   reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    MODULUS_ASSIGN  reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    PLUS_ASSIGN     reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    MINUS_ASSIGN    reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    BITWISE_AND_ASSIGN reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    BITWISE_OR_ASSIGN reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    MODULUS         reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    DIVIDE          reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    TIMES           reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    MINUS           reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    PLUS            reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    LESS_EQUALS     reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    LESS_THEN       reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    GREATER_EQUALS  reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    GREATER_THEN    reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    NOT_EQUALS      reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    EQUALS_THEN     reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    BITWISE_AND     reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    BITWISE_XOR     reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    BITWISE_OR      reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    LOGICAL_AND     reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    LOGICAL_OR      reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    QUESTION_MARK   reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    KEYWORD_STRUCT  reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    KEYWORD_UNION   reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    TYPE_CHAR       reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    TYPE_INT        reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    TYPE_SHORT      reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    TYPE_LONG       reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    TYPE_FLOAT      reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    TYPE_DOUBLE     reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    TYPE_VOID       reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    KEYWORD_STATIC  reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    KEYWORD_UNSIGNED reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    KEYWORD_VOLATILE reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    KEYWORD_EXTERN  reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    KEYWORD_SIGNED  reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    KEYWORD_REGISTER reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    INCREMENT       reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    DECREMENT       reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    BITWISE_COMPLEMENT reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    NOT             reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    LPAREN          reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    KEYWORD_SIZEOF  reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    IDENTIFIER      reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    STRING          reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    FLOAT_NUMBER    reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    CHARACTER       reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    NUMBER          reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    BINARY_NUMBER   reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    OCTAL_NUMBER    reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    $end            reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    RPAREN          reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    SEMICOLON       reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    RBRACKET        reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    COMMA           reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    COLON           reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)
    RBRACE          reduce using rule 154 (unary_exp -> DECREMENT unary_exp .)


state 124

    (155) unary_exp -> unary_operator unary_exp .

    ASSIGN          reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    TIMES_ASSIGN    reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    DIVIDE_ASSIGN   reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    MODULUS_ASSIGN  reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    PLUS_ASSIGN     reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    MINUS_ASSIGN    reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    BITWISE_AND_ASSIGN reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    BITWISE_OR_ASSIGN reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    MODULUS         reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    DIVIDE          reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    TIMES           reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    MINUS           reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    PLUS            reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    LESS_EQUALS     reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    LESS_THEN       reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    GREATER_EQUALS  reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    GREATER_THEN    reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    NOT_EQUALS      reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    EQUALS_THEN     reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    BITWISE_AND     reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    BITWISE_XOR     reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    BITWISE_OR      reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    LOGICAL_AND     reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    LOGICAL_OR      reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    QUESTION_MARK   reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    KEYWORD_STRUCT  reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    KEYWORD_UNION   reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    TYPE_CHAR       reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    TYPE_INT        reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    TYPE_SHORT      reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    TYPE_LONG       reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    TYPE_FLOAT      reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    TYPE_DOUBLE     reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    TYPE_VOID       reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    KEYWORD_STATIC  reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    KEYWORD_UNSIGNED reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    KEYWORD_VOLATILE reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    KEYWORD_EXTERN  reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    KEYWORD_SIGNED  reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    KEYWORD_REGISTER reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    INCREMENT       reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    DECREMENT       reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    BITWISE_COMPLEMENT reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    NOT             reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    LPAREN          reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    KEYWORD_SIZEOF  reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    IDENTIFIER      reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    STRING          reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    FLOAT_NUMBER    reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    CHARACTER       reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    NUMBER          reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    BINARY_NUMBER   reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    OCTAL_NUMBER    reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    $end            reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    RPAREN          reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    SEMICOLON       reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    RBRACKET        reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    COMMA           reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    COLON           reduce using rule 155 (unary_exp -> unary_operator unary_exp .)
    RBRACE          reduce using rule 155 (unary_exp -> unary_operator unary_exp .)


state 125

    (156) unary_exp -> cast_exp unary_exp .

    ASSIGN          reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    TIMES_ASSIGN    reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    DIVIDE_ASSIGN   reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    MODULUS_ASSIGN  reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    PLUS_ASSIGN     reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    MINUS_ASSIGN    reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    BITWISE_AND_ASSIGN reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    BITWISE_OR_ASSIGN reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    MODULUS         reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    DIVIDE          reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    TIMES           reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    MINUS           reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    PLUS            reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    LESS_EQUALS     reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    LESS_THEN       reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    GREATER_EQUALS  reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    GREATER_THEN    reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    NOT_EQUALS      reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    EQUALS_THEN     reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    BITWISE_AND     reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    BITWISE_XOR     reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    BITWISE_OR      reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    LOGICAL_AND     reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    LOGICAL_OR      reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    QUESTION_MARK   reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    KEYWORD_STRUCT  reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    KEYWORD_UNION   reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    TYPE_CHAR       reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    TYPE_INT        reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    TYPE_SHORT      reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    TYPE_LONG       reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    TYPE_FLOAT      reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    TYPE_DOUBLE     reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    TYPE_VOID       reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    KEYWORD_STATIC  reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    KEYWORD_UNSIGNED reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    KEYWORD_VOLATILE reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    KEYWORD_EXTERN  reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    KEYWORD_SIGNED  reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    KEYWORD_REGISTER reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    INCREMENT       reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    DECREMENT       reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    BITWISE_COMPLEMENT reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    NOT             reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    LPAREN          reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    KEYWORD_SIZEOF  reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    IDENTIFIER      reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    STRING          reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    FLOAT_NUMBER    reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    CHARACTER       reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    NUMBER          reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    BINARY_NUMBER   reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    OCTAL_NUMBER    reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    $end            reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    RPAREN          reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    SEMICOLON       reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    RBRACKET        reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    COMMA           reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    COLON           reduce using rule 156 (unary_exp -> cast_exp unary_exp .)
    RBRACE          reduce using rule 156 (unary_exp -> cast_exp unary_exp .)


state 126

    (113) ternary_conditional_exp -> logical_exp QUESTION_MARK . expression COLON ternary_conditional_exp
    (99) expression -> . assign_exp
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    logical_exp                    shift and go to state 40
    expression                     shift and go to state 199
    ternary_conditional_exp        shift and go to state 20
    assign_exp                     shift and go to state 12
    unary_exp                      shift and go to state 19
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 127

    (158) sizeof_exp -> KEYWORD_SIZEOF unary_exp .

    ASSIGN          reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TIMES_ASSIGN    reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    DIVIDE_ASSIGN   reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    MODULUS_ASSIGN  reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    PLUS_ASSIGN     reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    MINUS_ASSIGN    reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_AND_ASSIGN reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_OR_ASSIGN reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    MODULUS         reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    DIVIDE          reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TIMES           reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    MINUS           reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    PLUS            reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    LESS_EQUALS     reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    LESS_THEN       reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    GREATER_EQUALS  reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    GREATER_THEN    reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    NOT_EQUALS      reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    EQUALS_THEN     reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_AND     reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_XOR     reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_OR      reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    LOGICAL_AND     reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    LOGICAL_OR      reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    QUESTION_MARK   reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_STRUCT  reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_UNION   reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TYPE_CHAR       reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TYPE_INT        reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TYPE_SHORT      reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TYPE_LONG       reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TYPE_FLOAT      reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TYPE_DOUBLE     reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TYPE_VOID       reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_STATIC  reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_UNSIGNED reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_VOLATILE reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_EXTERN  reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_SIGNED  reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_REGISTER reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    INCREMENT       reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    DECREMENT       reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_COMPLEMENT reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    NOT             reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    LPAREN          reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_SIZEOF  reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    IDENTIFIER      reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    STRING          reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    FLOAT_NUMBER    reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    CHARACTER       reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    NUMBER          reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BINARY_NUMBER   reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    OCTAL_NUMBER    reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    $end            reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    RPAREN          reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    SEMICOLON       reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    RBRACKET        reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    COMMA           reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    COLON           reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    RBRACE          reduce using rule 158 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)


state 128

    (159) sizeof_exp -> KEYWORD_SIZEOF type .
    (58) pointer -> type . multiple_times
    (91) multiple_times -> . TIMES multiple_times
    (92) multiple_times -> . TIMES

  ! shift/reduce conflict for TIMES resolved as shift
    ASSIGN          reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TIMES_ASSIGN    reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    DIVIDE_ASSIGN   reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    MODULUS_ASSIGN  reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    PLUS_ASSIGN     reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    MINUS_ASSIGN    reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    SHIFT_LEFT_ASSIGN reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    SHIFT_RIGHT_ASSIGN reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_AND_ASSIGN reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_XOR_ASSIGN reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_OR_ASSIGN reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    MODULUS         reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    DIVIDE          reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    MINUS           reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    PLUS            reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_SHIFT_RIGHT reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_SHIFT_LEFT reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    LESS_EQUALS     reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    LESS_THEN       reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    GREATER_EQUALS  reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    GREATER_THEN    reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    NOT_EQUALS      reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    EQUALS_THEN     reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_AND     reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_XOR     reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_OR      reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    LOGICAL_AND     reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    LOGICAL_OR      reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    QUESTION_MARK   reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_STRUCT  reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_UNION   reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TYPE_CHAR       reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TYPE_INT        reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TYPE_SHORT      reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TYPE_LONG       reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TYPE_FLOAT      reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TYPE_DOUBLE     reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TYPE_VOID       reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_STATIC  reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_UNSIGNED reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_VOLATILE reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_EXTERN  reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_SIGNED  reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_REGISTER reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    INCREMENT       reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    DECREMENT       reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_COMPLEMENT reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    NOT             reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    LPAREN          reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_SIZEOF  reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    IDENTIFIER      reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    STRING          reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    FLOAT_NUMBER    reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    CHARACTER       reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    NUMBER          reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BINARY_NUMBER   reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    HEXADECIMAL_NUMBER reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    OCTAL_NUMBER    reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    $end            reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    RPAREN          reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    SEMICOLON       reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    RBRACKET        reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    COMMA           reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    COLON           reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    RBRACE          reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TIMES           shift and go to state 96

  ! TIMES           [ reduce using rule 159 (sizeof_exp -> KEYWORD_SIZEOF type .) ]

    multiple_times                 shift and go to state 95

state 129

    (160) sizeof_exp -> KEYWORD_SIZEOF pointer .

    ASSIGN          reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TIMES_ASSIGN    reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    DIVIDE_ASSIGN   reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    MODULUS_ASSIGN  reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    PLUS_ASSIGN     reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    MINUS_ASSIGN    reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    SHIFT_LEFT_ASSIGN reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    SHIFT_RIGHT_ASSIGN reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_AND_ASSIGN reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_XOR_ASSIGN reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_OR_ASSIGN reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    MODULUS         reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    DIVIDE          reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TIMES           reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    MINUS           reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    PLUS            reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_SHIFT_RIGHT reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_SHIFT_LEFT reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    LESS_EQUALS     reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    LESS_THEN       reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    GREATER_EQUALS  reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    GREATER_THEN    reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    NOT_EQUALS      reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    EQUALS_THEN     reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_AND     reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_XOR     reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_OR      reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    LOGICAL_AND     reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    LOGICAL_OR      reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    QUESTION_MARK   reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_STRUCT  reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_UNION   reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TYPE_CHAR       reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TYPE_INT        reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TYPE_SHORT      reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TYPE_LONG       reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TYPE_FLOAT      reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TYPE_DOUBLE     reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TYPE_VOID       reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_STATIC  reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_UNSIGNED reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_VOLATILE reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_EXTERN  reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_SIGNED  reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_REGISTER reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    INCREMENT       reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    DECREMENT       reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_COMPLEMENT reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    NOT             reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    LPAREN          reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_SIZEOF  reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    IDENTIFIER      reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    STRING          reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    FLOAT_NUMBER    reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    CHARACTER       reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    NUMBER          reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BINARY_NUMBER   reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    HEXADECIMAL_NUMBER reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    OCTAL_NUMBER    reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    $end            reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    RPAREN          reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    SEMICOLON       reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    RBRACKET        reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    COMMA           reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    COLON           reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    RBRACE          reduce using rule 160 (sizeof_exp -> KEYWORD_SIZEOF pointer .)


state 130

    (116) logical_or_exp -> logical_or_exp LOGICAL_OR . logical_and_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    logical_and_exp                shift and go to state 200
    bitwise_or_exp                 shift and go to state 53
    bitwise_xor_exp                shift and go to state 56
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 131

    (118) logical_and_exp -> logical_and_exp LOGICAL_AND . bitwise_or_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    bitwise_or_exp                 shift and go to state 202
    bitwise_xor_exp                shift and go to state 56
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 132

    (120) bitwise_or_exp -> bitwise_or_exp BITWISE_OR . bitwise_xor_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    bitwise_xor_exp                shift and go to state 203
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 133

    (122) bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR . bitwise_and_exp
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    bitwise_and_exp                shift and go to state 204
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 134

    (124) bitwise_and_exp -> bitwise_and_exp BITWISE_AND . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    is_equals_exp                  shift and go to state 205
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 135

    (126) is_equals_exp -> is_equals_exp EQUALS_THEN . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    is_not_equals_exp              shift and go to state 206
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 136

    (128) is_not_equals_exp -> is_not_equals_exp NOT_EQUALS . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    greater_then_exp               shift and go to state 207
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 137

    (130) greater_then_exp -> greater_then_exp GREATER_THEN . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    greater_equals_exp             shift and go to state 208
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 138

    (132) greater_equals_exp -> greater_equals_exp GREATER_EQUALS . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    less_then_exp                  shift and go to state 209
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 139

    (134) less_then_exp -> less_then_exp LESS_THEN . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    less_equals_exp                shift and go to state 210
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 140

    (136) less_equals_exp -> less_equals_exp LESS_EQUALS . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    left_shift_exp                 shift and go to state 211
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 141

    (138) left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    right_shift_exp                shift and go to state 212
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 142

    (140) right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    plus_exp                       shift and go to state 213
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 143

    (142) plus_exp -> plus_exp PLUS . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    minus_exp                      shift and go to state 214
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 144

    (144) minus_exp -> minus_exp MINUS . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    times_exp                      shift and go to state 215
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 145

    (146) times_exp -> times_exp TIMES . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    divide_exp                     shift and go to state 216
    modulus_exp                    shift and go to state 78
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 146

    (148) divide_exp -> divide_exp DIVIDE . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    modulus_exp                    shift and go to state 217
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 147

    (150) modulus_exp -> modulus_exp MODULUS . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    unary_exp                      shift and go to state 218
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 148

    (2) program -> function_signature SEMICOLON program .

    $end            reduce using rule 2 (program -> function_signature SEMICOLON program .)


state 149

    (8) command_block -> LBRACE RBRACE .

    KEYWORD_STRUCT  reduce using rule 8 (command_block -> LBRACE RBRACE .)
    KEYWORD_UNION   reduce using rule 8 (command_block -> LBRACE RBRACE .)
    TYPE_CHAR       reduce using rule 8 (command_block -> LBRACE RBRACE .)
    TYPE_INT        reduce using rule 8 (command_block -> LBRACE RBRACE .)
    TYPE_SHORT      reduce using rule 8 (command_block -> LBRACE RBRACE .)
    TYPE_LONG       reduce using rule 8 (command_block -> LBRACE RBRACE .)
    TYPE_FLOAT      reduce using rule 8 (command_block -> LBRACE RBRACE .)
    TYPE_DOUBLE     reduce using rule 8 (command_block -> LBRACE RBRACE .)
    TYPE_VOID       reduce using rule 8 (command_block -> LBRACE RBRACE .)
    KEYWORD_STATIC  reduce using rule 8 (command_block -> LBRACE RBRACE .)
    KEYWORD_UNSIGNED reduce using rule 8 (command_block -> LBRACE RBRACE .)
    KEYWORD_VOLATILE reduce using rule 8 (command_block -> LBRACE RBRACE .)
    KEYWORD_EXTERN  reduce using rule 8 (command_block -> LBRACE RBRACE .)
    KEYWORD_SIGNED  reduce using rule 8 (command_block -> LBRACE RBRACE .)
    KEYWORD_REGISTER reduce using rule 8 (command_block -> LBRACE RBRACE .)
    INCREMENT       reduce using rule 8 (command_block -> LBRACE RBRACE .)
    DECREMENT       reduce using rule 8 (command_block -> LBRACE RBRACE .)
    BITWISE_AND     reduce using rule 8 (command_block -> LBRACE RBRACE .)
    TIMES           reduce using rule 8 (command_block -> LBRACE RBRACE .)
    PLUS            reduce using rule 8 (command_block -> LBRACE RBRACE .)
    MINUS           reduce using rule 8 (command_block -> LBRACE RBRACE .)
    BITWISE_COMPLEMENT reduce using rule 8 (command_block -> LBRACE RBRACE .)
    NOT             reduce using rule 8 (command_block -> LBRACE RBRACE .)
    LPAREN          reduce using rule 8 (command_block -> LBRACE RBRACE .)
    KEYWORD_SIZEOF  reduce using rule 8 (command_block -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 8 (command_block -> LBRACE RBRACE .)
    STRING          reduce using rule 8 (command_block -> LBRACE RBRACE .)
    FLOAT_NUMBER    reduce using rule 8 (command_block -> LBRACE RBRACE .)
    CHARACTER       reduce using rule 8 (command_block -> LBRACE RBRACE .)
    NUMBER          reduce using rule 8 (command_block -> LBRACE RBRACE .)
    BINARY_NUMBER   reduce using rule 8 (command_block -> LBRACE RBRACE .)
    HEXADECIMAL_NUMBER reduce using rule 8 (command_block -> LBRACE RBRACE .)
    OCTAL_NUMBER    reduce using rule 8 (command_block -> LBRACE RBRACE .)
    $end            reduce using rule 8 (command_block -> LBRACE RBRACE .)


state 150

    (9) command_block -> LBRACE command_list . RBRACE

    RBRACE          shift and go to state 219


state 151

    (10) command_list -> command . command_list
    (11) command_list -> command .
    (10) command_list -> . command command_list
    (11) command_list -> . command
    (12) command -> . variable_declaration_list SEMICOLON
    (13) command -> . expression_list SEMICOLON
    (14) command -> . struct_declaration
    (15) command -> . union_declaration
    (16) command -> . SEMICOLON
    (17) command -> . label
    (18) command -> . KEYWORD_GOTO IDENTIFIER SEMICOLON
    (19) command -> . return_stm SEMICOLON
    (46) variable_declaration_list -> . type identifier_list
    (47) variable_declaration_list -> . pointer identifier_list
    (97) expression_list -> . expression
    (98) expression_list -> . expression expression_list
    (62) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (64) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE SEMICOLON
    (65) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (66) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON
    (67) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (68) union_declaration -> . KEYWORD_UNION LBRACE RBRACE SEMICOLON
    (69) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (20) label -> . IDENTIFIER COLON
    (188) return_stm -> . KEYWORD_RETURN
    (189) return_stm -> . KEYWORD_RETURN expression
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (99) expression -> . assign_exp
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    RBRACE          reduce using rule 11 (command_list -> command .)
    SEMICOLON       shift and go to state 153
    KEYWORD_GOTO    shift and go to state 158
    KEYWORD_STRUCT  shift and go to state 13
    KEYWORD_UNION   shift and go to state 15
    IDENTIFIER      shift and go to state 159
    KEYWORD_RETURN  shift and go to state 164
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    command                        shift and go to state 151
    command_list                   shift and go to state 220
    variable_declaration_list      shift and go to state 152
    expression_list                shift and go to state 154
    struct_declaration             shift and go to state 155
    union_declaration              shift and go to state 156
    label                          shift and go to state 157
    return_stm                     shift and go to state 160
    type                           shift and go to state 161
    pointer                        shift and go to state 162
    expression                     shift and go to state 163
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18
    assign_exp                     shift and go to state 12
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 152

    (12) command -> variable_declaration_list . SEMICOLON

    SEMICOLON       shift and go to state 221


state 153

    (16) command -> SEMICOLON .

    SEMICOLON       reduce using rule 16 (command -> SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 16 (command -> SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 16 (command -> SEMICOLON .)
    KEYWORD_UNION   reduce using rule 16 (command -> SEMICOLON .)
    IDENTIFIER      reduce using rule 16 (command -> SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 16 (command -> SEMICOLON .)
    TYPE_CHAR       reduce using rule 16 (command -> SEMICOLON .)
    TYPE_INT        reduce using rule 16 (command -> SEMICOLON .)
    TYPE_SHORT      reduce using rule 16 (command -> SEMICOLON .)
    TYPE_LONG       reduce using rule 16 (command -> SEMICOLON .)
    TYPE_FLOAT      reduce using rule 16 (command -> SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 16 (command -> SEMICOLON .)
    TYPE_VOID       reduce using rule 16 (command -> SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 16 (command -> SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 16 (command -> SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 16 (command -> SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 16 (command -> SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 16 (command -> SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 16 (command -> SEMICOLON .)
    INCREMENT       reduce using rule 16 (command -> SEMICOLON .)
    DECREMENT       reduce using rule 16 (command -> SEMICOLON .)
    BITWISE_AND     reduce using rule 16 (command -> SEMICOLON .)
    TIMES           reduce using rule 16 (command -> SEMICOLON .)
    PLUS            reduce using rule 16 (command -> SEMICOLON .)
    MINUS           reduce using rule 16 (command -> SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 16 (command -> SEMICOLON .)
    NOT             reduce using rule 16 (command -> SEMICOLON .)
    LPAREN          reduce using rule 16 (command -> SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 16 (command -> SEMICOLON .)
    STRING          reduce using rule 16 (command -> SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 16 (command -> SEMICOLON .)
    CHARACTER       reduce using rule 16 (command -> SEMICOLON .)
    NUMBER          reduce using rule 16 (command -> SEMICOLON .)
    BINARY_NUMBER   reduce using rule 16 (command -> SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 16 (command -> SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 16 (command -> SEMICOLON .)
    RBRACE          reduce using rule 16 (command -> SEMICOLON .)


state 154

    (13) command -> expression_list . SEMICOLON

    SEMICOLON       shift and go to state 222


state 155

    (14) command -> struct_declaration .

    SEMICOLON       reduce using rule 14 (command -> struct_declaration .)
    KEYWORD_GOTO    reduce using rule 14 (command -> struct_declaration .)
    KEYWORD_STRUCT  reduce using rule 14 (command -> struct_declaration .)
    KEYWORD_UNION   reduce using rule 14 (command -> struct_declaration .)
    IDENTIFIER      reduce using rule 14 (command -> struct_declaration .)
    KEYWORD_RETURN  reduce using rule 14 (command -> struct_declaration .)
    TYPE_CHAR       reduce using rule 14 (command -> struct_declaration .)
    TYPE_INT        reduce using rule 14 (command -> struct_declaration .)
    TYPE_SHORT      reduce using rule 14 (command -> struct_declaration .)
    TYPE_LONG       reduce using rule 14 (command -> struct_declaration .)
    TYPE_FLOAT      reduce using rule 14 (command -> struct_declaration .)
    TYPE_DOUBLE     reduce using rule 14 (command -> struct_declaration .)
    TYPE_VOID       reduce using rule 14 (command -> struct_declaration .)
    KEYWORD_STATIC  reduce using rule 14 (command -> struct_declaration .)
    KEYWORD_UNSIGNED reduce using rule 14 (command -> struct_declaration .)
    KEYWORD_VOLATILE reduce using rule 14 (command -> struct_declaration .)
    KEYWORD_EXTERN  reduce using rule 14 (command -> struct_declaration .)
    KEYWORD_SIGNED  reduce using rule 14 (command -> struct_declaration .)
    KEYWORD_REGISTER reduce using rule 14 (command -> struct_declaration .)
    INCREMENT       reduce using rule 14 (command -> struct_declaration .)
    DECREMENT       reduce using rule 14 (command -> struct_declaration .)
    BITWISE_AND     reduce using rule 14 (command -> struct_declaration .)
    TIMES           reduce using rule 14 (command -> struct_declaration .)
    PLUS            reduce using rule 14 (command -> struct_declaration .)
    MINUS           reduce using rule 14 (command -> struct_declaration .)
    BITWISE_COMPLEMENT reduce using rule 14 (command -> struct_declaration .)
    NOT             reduce using rule 14 (command -> struct_declaration .)
    LPAREN          reduce using rule 14 (command -> struct_declaration .)
    KEYWORD_SIZEOF  reduce using rule 14 (command -> struct_declaration .)
    STRING          reduce using rule 14 (command -> struct_declaration .)
    FLOAT_NUMBER    reduce using rule 14 (command -> struct_declaration .)
    CHARACTER       reduce using rule 14 (command -> struct_declaration .)
    NUMBER          reduce using rule 14 (command -> struct_declaration .)
    BINARY_NUMBER   reduce using rule 14 (command -> struct_declaration .)
    HEXADECIMAL_NUMBER reduce using rule 14 (command -> struct_declaration .)
    OCTAL_NUMBER    reduce using rule 14 (command -> struct_declaration .)
    RBRACE          reduce using rule 14 (command -> struct_declaration .)


state 156

    (15) command -> union_declaration .

    SEMICOLON       reduce using rule 15 (command -> union_declaration .)
    KEYWORD_GOTO    reduce using rule 15 (command -> union_declaration .)
    KEYWORD_STRUCT  reduce using rule 15 (command -> union_declaration .)
    KEYWORD_UNION   reduce using rule 15 (command -> union_declaration .)
    IDENTIFIER      reduce using rule 15 (command -> union_declaration .)
    KEYWORD_RETURN  reduce using rule 15 (command -> union_declaration .)
    TYPE_CHAR       reduce using rule 15 (command -> union_declaration .)
    TYPE_INT        reduce using rule 15 (command -> union_declaration .)
    TYPE_SHORT      reduce using rule 15 (command -> union_declaration .)
    TYPE_LONG       reduce using rule 15 (command -> union_declaration .)
    TYPE_FLOAT      reduce using rule 15 (command -> union_declaration .)
    TYPE_DOUBLE     reduce using rule 15 (command -> union_declaration .)
    TYPE_VOID       reduce using rule 15 (command -> union_declaration .)
    KEYWORD_STATIC  reduce using rule 15 (command -> union_declaration .)
    KEYWORD_UNSIGNED reduce using rule 15 (command -> union_declaration .)
    KEYWORD_VOLATILE reduce using rule 15 (command -> union_declaration .)
    KEYWORD_EXTERN  reduce using rule 15 (command -> union_declaration .)
    KEYWORD_SIGNED  reduce using rule 15 (command -> union_declaration .)
    KEYWORD_REGISTER reduce using rule 15 (command -> union_declaration .)
    INCREMENT       reduce using rule 15 (command -> union_declaration .)
    DECREMENT       reduce using rule 15 (command -> union_declaration .)
    BITWISE_AND     reduce using rule 15 (command -> union_declaration .)
    TIMES           reduce using rule 15 (command -> union_declaration .)
    PLUS            reduce using rule 15 (command -> union_declaration .)
    MINUS           reduce using rule 15 (command -> union_declaration .)
    BITWISE_COMPLEMENT reduce using rule 15 (command -> union_declaration .)
    NOT             reduce using rule 15 (command -> union_declaration .)
    LPAREN          reduce using rule 15 (command -> union_declaration .)
    KEYWORD_SIZEOF  reduce using rule 15 (command -> union_declaration .)
    STRING          reduce using rule 15 (command -> union_declaration .)
    FLOAT_NUMBER    reduce using rule 15 (command -> union_declaration .)
    CHARACTER       reduce using rule 15 (command -> union_declaration .)
    NUMBER          reduce using rule 15 (command -> union_declaration .)
    BINARY_NUMBER   reduce using rule 15 (command -> union_declaration .)
    HEXADECIMAL_NUMBER reduce using rule 15 (command -> union_declaration .)
    OCTAL_NUMBER    reduce using rule 15 (command -> union_declaration .)
    RBRACE          reduce using rule 15 (command -> union_declaration .)


state 157

    (17) command -> label .

    SEMICOLON       reduce using rule 17 (command -> label .)
    KEYWORD_GOTO    reduce using rule 17 (command -> label .)
    KEYWORD_STRUCT  reduce using rule 17 (command -> label .)
    KEYWORD_UNION   reduce using rule 17 (command -> label .)
    IDENTIFIER      reduce using rule 17 (command -> label .)
    KEYWORD_RETURN  reduce using rule 17 (command -> label .)
    TYPE_CHAR       reduce using rule 17 (command -> label .)
    TYPE_INT        reduce using rule 17 (command -> label .)
    TYPE_SHORT      reduce using rule 17 (command -> label .)
    TYPE_LONG       reduce using rule 17 (command -> label .)
    TYPE_FLOAT      reduce using rule 17 (command -> label .)
    TYPE_DOUBLE     reduce using rule 17 (command -> label .)
    TYPE_VOID       reduce using rule 17 (command -> label .)
    KEYWORD_STATIC  reduce using rule 17 (command -> label .)
    KEYWORD_UNSIGNED reduce using rule 17 (command -> label .)
    KEYWORD_VOLATILE reduce using rule 17 (command -> label .)
    KEYWORD_EXTERN  reduce using rule 17 (command -> label .)
    KEYWORD_SIGNED  reduce using rule 17 (command -> label .)
    KEYWORD_REGISTER reduce using rule 17 (command -> label .)
    INCREMENT       reduce using rule 17 (command -> label .)
    DECREMENT       reduce using rule 17 (command -> label .)
    BITWISE_AND     reduce using rule 17 (command -> label .)
    TIMES           reduce using rule 17 (command -> label .)
    PLUS            reduce using rule 17 (command -> label .)
    MINUS           reduce using rule 17 (command -> label .)
    BITWISE_COMPLEMENT reduce using rule 17 (command -> label .)
    NOT             reduce using rule 17 (command -> label .)
    LPAREN          reduce using rule 17 (command -> label .)
    KEYWORD_SIZEOF  reduce using rule 17 (command -> label .)
    STRING          reduce using rule 17 (command -> label .)
    FLOAT_NUMBER    reduce using rule 17 (command -> label .)
    CHARACTER       reduce using rule 17 (command -> label .)
    NUMBER          reduce using rule 17 (command -> label .)
    BINARY_NUMBER   reduce using rule 17 (command -> label .)
    HEXADECIMAL_NUMBER reduce using rule 17 (command -> label .)
    OCTAL_NUMBER    reduce using rule 17 (command -> label .)
    RBRACE          reduce using rule 17 (command -> label .)


state 158

    (18) command -> KEYWORD_GOTO . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 223


state 159

    (20) label -> IDENTIFIER . COLON
    (180) identifier_exp -> IDENTIFIER .

    COLON           shift and go to state 224
    LBRACKET        reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    LPAREN          reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    DOT             reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    ARROW           reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    INCREMENT       reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    DECREMENT       reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    ASSIGN          reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    MODULUS_ASSIGN  reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    SHIFT_LEFT_ASSIGN reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_AND_ASSIGN reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_XOR_ASSIGN reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_OR_ASSIGN reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    MODULUS         reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    TIMES           reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    MINUS           reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    PLUS            reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_SHIFT_RIGHT reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_SHIFT_LEFT reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    LESS_THEN       reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    GREATER_THEN    reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    EQUALS_THEN     reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_AND     reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_XOR     reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_OR      reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    QUESTION_MARK   reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BITWISE_COMPLEMENT reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    NOT             reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    KEYWORD_SIZEOF  reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    STRING          reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    FLOAT_NUMBER    reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    CHARACTER       reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    NUMBER          reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    BINARY_NUMBER   reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    HEXADECIMAL_NUMBER reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    OCTAL_NUMBER    reduce using rule 180 (identifier_exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 180 (identifier_exp -> IDENTIFIER .)


state 160

    (19) command -> return_stm . SEMICOLON

    SEMICOLON       shift and go to state 225


state 161

    (46) variable_declaration_list -> type . identifier_list
    (58) pointer -> type . multiple_times
    (48) identifier_list -> . IDENTIFIER
    (49) identifier_list -> . IDENTIFIER COMMA identifier_list
    (50) identifier_list -> . IDENTIFIER multiple_bracket_signature
    (51) identifier_list -> . IDENTIFIER multiple_bracket_signature COMMA identifier_list
    (52) identifier_list -> . IDENTIFIER ASSIGN expression
    (53) identifier_list -> . IDENTIFIER ASSIGN expression COMMA identifier_list
    (54) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list
    (55) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (56) identifier_list -> . IDENTIFIER ASSIGN value_list
    (57) identifier_list -> . IDENTIFIER ASSIGN value_list COMMA identifier_list
    (91) multiple_times -> . TIMES multiple_times
    (92) multiple_times -> . TIMES

    IDENTIFIER      shift and go to state 226
    TIMES           shift and go to state 96

    identifier_list                shift and go to state 93
    multiple_times                 shift and go to state 95

state 162

    (47) variable_declaration_list -> pointer . identifier_list
    (48) identifier_list -> . IDENTIFIER
    (49) identifier_list -> . IDENTIFIER COMMA identifier_list
    (50) identifier_list -> . IDENTIFIER multiple_bracket_signature
    (51) identifier_list -> . IDENTIFIER multiple_bracket_signature COMMA identifier_list
    (52) identifier_list -> . IDENTIFIER ASSIGN expression
    (53) identifier_list -> . IDENTIFIER ASSIGN expression COMMA identifier_list
    (54) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list
    (55) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (56) identifier_list -> . IDENTIFIER ASSIGN value_list
    (57) identifier_list -> . IDENTIFIER ASSIGN value_list COMMA identifier_list

    IDENTIFIER      shift and go to state 226

    identifier_list                shift and go to state 97

state 163

    (97) expression_list -> expression .
    (98) expression_list -> expression . expression_list
    (97) expression_list -> . expression
    (98) expression_list -> . expression expression_list
    (99) expression -> . assign_exp
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    SEMICOLON       reduce using rule 97 (expression_list -> expression .)
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    expression                     shift and go to state 163
    expression_list                shift and go to state 227
    assign_exp                     shift and go to state 12
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 164

    (188) return_stm -> KEYWORD_RETURN .
    (189) return_stm -> KEYWORD_RETURN . expression
    (99) expression -> . assign_exp
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    SEMICOLON       reduce using rule 188 (return_stm -> KEYWORD_RETURN .)
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    expression                     shift and go to state 228
    assign_exp                     shift and go to state 12
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 165

    (3) program -> variable_declaration_list SEMICOLON program .

    $end            reduce using rule 3 (program -> variable_declaration_list SEMICOLON program .)


state 166

    (30) signature_param -> type_identifier .
    (31) signature_param -> type_identifier . multiple_bracket_signature
    (32) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_signature
    (33) multiple_bracket_signature -> . LBRACKET RBRACKET
    (34) multiple_bracket_signature -> . bracket_with_bounds multiple_bracket_signature
    (35) multiple_bracket_signature -> . bracket_with_bounds
    (36) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    COMMA           reduce using rule 30 (signature_param -> type_identifier .)
    RPAREN          reduce using rule 30 (signature_param -> type_identifier .)
    LBRACKET        shift and go to state 180

    multiple_bracket_signature     shift and go to state 229
    bracket_with_bounds            shift and go to state 181

state 167

    (22) function_signature -> type_identifier LPAREN signature_param_list . RPAREN

    RPAREN          shift and go to state 230


state 168

    (23) function_signature -> type_identifier LPAREN RPAREN .

    SEMICOLON       reduce using rule 23 (function_signature -> type_identifier LPAREN RPAREN .)
    LBRACE          reduce using rule 23 (function_signature -> type_identifier LPAREN RPAREN .)


state 169

    (24) signature_param_list -> signature_param . COMMA signature_param
    (25) signature_param_list -> signature_param .

    COMMA           shift and go to state 231
    RPAREN          reduce using rule 25 (signature_param_list -> signature_param .)


state 170

    (26) signature_param -> type .
    (28) signature_param -> type . multiple_bracket_signature
    (58) pointer -> type . multiple_times
    (44) type_identifier -> type . IDENTIFIER
    (32) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_signature
    (33) multiple_bracket_signature -> . LBRACKET RBRACKET
    (34) multiple_bracket_signature -> . bracket_with_bounds multiple_bracket_signature
    (35) multiple_bracket_signature -> . bracket_with_bounds
    (91) multiple_times -> . TIMES multiple_times
    (92) multiple_times -> . TIMES
    (36) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    COMMA           reduce using rule 26 (signature_param -> type .)
    RPAREN          reduce using rule 26 (signature_param -> type .)
    IDENTIFIER      shift and go to state 233
    LBRACKET        shift and go to state 180
    TIMES           shift and go to state 96

    multiple_bracket_signature     shift and go to state 232
    multiple_times                 shift and go to state 95
    bracket_with_bounds            shift and go to state 181

state 171

    (27) signature_param -> pointer .
    (29) signature_param -> pointer . multiple_bracket_signature
    (45) type_identifier -> pointer . IDENTIFIER
    (32) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_signature
    (33) multiple_bracket_signature -> . LBRACKET RBRACKET
    (34) multiple_bracket_signature -> . bracket_with_bounds multiple_bracket_signature
    (35) multiple_bracket_signature -> . bracket_with_bounds
    (36) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    COMMA           reduce using rule 27 (signature_param -> pointer .)
    RPAREN          reduce using rule 27 (signature_param -> pointer .)
    IDENTIFIER      shift and go to state 235
    LBRACKET        shift and go to state 180

    multiple_bracket_signature     shift and go to state 234
    bracket_with_bounds            shift and go to state 181

state 172

    (161) cast_exp -> LPAREN type RPAREN .

    INCREMENT       reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)
    DECREMENT       reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)
    BITWISE_AND     reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)
    TIMES           reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)
    PLUS            reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)
    MINUS           reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)
    BITWISE_COMPLEMENT reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)
    NOT             reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)
    LPAREN          reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)
    KEYWORD_SIZEOF  reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)
    IDENTIFIER      reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)
    STRING          reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)
    FLOAT_NUMBER    reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)
    CHARACTER       reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)
    NUMBER          reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)
    BINARY_NUMBER   reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)
    HEXADECIMAL_NUMBER reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)
    OCTAL_NUMBER    reduce using rule 161 (cast_exp -> LPAREN type RPAREN .)


state 173

    (162) cast_exp -> LPAREN pointer RPAREN .

    INCREMENT       reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)
    DECREMENT       reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)
    BITWISE_AND     reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)
    TIMES           reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)
    PLUS            reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)
    MINUS           reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)
    BITWISE_COMPLEMENT reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)
    NOT             reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)
    LPAREN          reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)
    KEYWORD_SIZEOF  reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)
    IDENTIFIER      reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)
    STRING          reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)
    FLOAT_NUMBER    reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)
    CHARACTER       reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)
    NUMBER          reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)
    BINARY_NUMBER   reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)
    HEXADECIMAL_NUMBER reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)
    OCTAL_NUMBER    reduce using rule 162 (cast_exp -> LPAREN pointer RPAREN .)


state 174

    (190) parentesis_exp -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    DOT             reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    TIMES_ASSIGN    reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    MODULUS_ASSIGN  reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    PLUS_ASSIGN     reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    MINUS_ASSIGN    reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    SHIFT_LEFT_ASSIGN reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    SHIFT_RIGHT_ASSIGN reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_AND_ASSIGN reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_XOR_ASSIGN reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_OR_ASSIGN reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    MODULUS         reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_SHIFT_RIGHT reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_SHIFT_LEFT reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    LESS_EQUALS     reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    LESS_THEN       reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    GREATER_EQUALS  reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    GREATER_THEN    reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    NOT_EQUALS      reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    EQUALS_THEN     reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_AND     reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_XOR     reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_OR      reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    LOGICAL_AND     reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    LOGICAL_OR      reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    QUESTION_MARK   reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_STRUCT  reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_UNION   reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    TYPE_CHAR       reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    TYPE_INT        reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    TYPE_SHORT      reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    TYPE_LONG       reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    TYPE_FLOAT      reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    TYPE_DOUBLE     reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    TYPE_VOID       reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_STATIC  reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_UNSIGNED reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_VOLATILE reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_EXTERN  reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_SIGNED  reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_REGISTER reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_COMPLEMENT reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    NOT             reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_SIZEOF  reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    STRING          reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    FLOAT_NUMBER    reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    CHARACTER       reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    BINARY_NUMBER   reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    HEXADECIMAL_NUMBER reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    OCTAL_NUMBER    reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    $end            reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    COLON           reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 190 (parentesis_exp -> LPAREN expression RPAREN .)


state 175

    (82) user_types -> KEYWORD_STRUCT IDENTIFIER .

    RPAREN          reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TIMES           reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    IDENTIFIER      reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    ASSIGN          reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    MODULUS_ASSIGN  reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    SHIFT_LEFT_ASSIGN reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_AND_ASSIGN reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_XOR_ASSIGN reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_OR_ASSIGN reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    MODULUS         reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    DIVIDE          reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    MINUS           reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    PLUS            reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_SHIFT_RIGHT reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_SHIFT_LEFT reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    LESS_EQUALS     reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    LESS_THEN       reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    GREATER_THEN    reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    NOT_EQUALS      reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    EQUALS_THEN     reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_AND     reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_XOR     reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_OR      reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    LOGICAL_AND     reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    LOGICAL_OR      reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    QUESTION_MARK   reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_STRUCT  reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_UNION   reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TYPE_CHAR       reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TYPE_INT        reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TYPE_SHORT      reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TYPE_LONG       reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TYPE_FLOAT      reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TYPE_DOUBLE     reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TYPE_VOID       reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_STATIC  reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_UNSIGNED reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_VOLATILE reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_EXTERN  reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_SIGNED  reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_REGISTER reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    INCREMENT       reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    DECREMENT       reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_COMPLEMENT reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    NOT             reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    LPAREN          reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_SIZEOF  reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    STRING          reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    FLOAT_NUMBER    reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    CHARACTER       reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    NUMBER          reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BINARY_NUMBER   reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    HEXADECIMAL_NUMBER reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    OCTAL_NUMBER    reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    $end            reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    SEMICOLON       reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    RBRACKET        reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    COMMA           reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    COLON           reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    RBRACE          reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    LBRACKET        reduce using rule 82 (user_types -> KEYWORD_STRUCT IDENTIFIER .)


state 176

    (83) user_types -> KEYWORD_UNION IDENTIFIER .

    RPAREN          reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TIMES           reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    IDENTIFIER      reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    ASSIGN          reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    MODULUS_ASSIGN  reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    SHIFT_LEFT_ASSIGN reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_AND_ASSIGN reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_XOR_ASSIGN reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_OR_ASSIGN reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    MODULUS         reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    DIVIDE          reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    MINUS           reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    PLUS            reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_SHIFT_RIGHT reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_SHIFT_LEFT reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    LESS_EQUALS     reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    LESS_THEN       reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    GREATER_THEN    reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    NOT_EQUALS      reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    EQUALS_THEN     reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_AND     reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_XOR     reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_OR      reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    LOGICAL_AND     reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    LOGICAL_OR      reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    QUESTION_MARK   reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_STRUCT  reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_UNION   reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TYPE_CHAR       reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TYPE_INT        reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TYPE_SHORT      reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TYPE_LONG       reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TYPE_FLOAT      reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TYPE_DOUBLE     reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TYPE_VOID       reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_STATIC  reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_UNSIGNED reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_VOLATILE reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_EXTERN  reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_SIGNED  reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_REGISTER reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    INCREMENT       reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    DECREMENT       reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_COMPLEMENT reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    NOT             reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    LPAREN          reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_SIZEOF  reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    STRING          reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    FLOAT_NUMBER    reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    CHARACTER       reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    NUMBER          reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BINARY_NUMBER   reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    HEXADECIMAL_NUMBER reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    OCTAL_NUMBER    reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    $end            reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    SEMICOLON       reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    RBRACKET        reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    COMMA           reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    COLON           reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    RBRACE          reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)
    LBRACKET        reduce using rule 83 (user_types -> KEYWORD_UNION IDENTIFIER .)


state 177

    (49) identifier_list -> IDENTIFIER COMMA . identifier_list
    (48) identifier_list -> . IDENTIFIER
    (49) identifier_list -> . IDENTIFIER COMMA identifier_list
    (50) identifier_list -> . IDENTIFIER multiple_bracket_signature
    (51) identifier_list -> . IDENTIFIER multiple_bracket_signature COMMA identifier_list
    (52) identifier_list -> . IDENTIFIER ASSIGN expression
    (53) identifier_list -> . IDENTIFIER ASSIGN expression COMMA identifier_list
    (54) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list
    (55) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (56) identifier_list -> . IDENTIFIER ASSIGN value_list
    (57) identifier_list -> . IDENTIFIER ASSIGN value_list COMMA identifier_list

    IDENTIFIER      shift and go to state 226

    identifier_list                shift and go to state 236

state 178

    (50) identifier_list -> IDENTIFIER multiple_bracket_signature .
    (51) identifier_list -> IDENTIFIER multiple_bracket_signature . COMMA identifier_list
    (54) identifier_list -> IDENTIFIER multiple_bracket_signature . ASSIGN value_list
    (55) identifier_list -> IDENTIFIER multiple_bracket_signature . ASSIGN value_list COMMA identifier_list

    SEMICOLON       reduce using rule 50 (identifier_list -> IDENTIFIER multiple_bracket_signature .)
    COMMA           shift and go to state 237
    ASSIGN          shift and go to state 238


state 179

    (52) identifier_list -> IDENTIFIER ASSIGN . expression
    (53) identifier_list -> IDENTIFIER ASSIGN . expression COMMA identifier_list
    (56) identifier_list -> IDENTIFIER ASSIGN . value_list
    (57) identifier_list -> IDENTIFIER ASSIGN . value_list COMMA identifier_list
    (99) expression -> . assign_exp
    (39) value_list -> . LBRACE value_list_item RBRACE
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    LBRACE          shift and go to state 241
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    expression                     shift and go to state 239
    value_list                     shift and go to state 240
    assign_exp                     shift and go to state 12
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 180

    (32) multiple_bracket_signature -> LBRACKET . RBRACKET multiple_bracket_signature
    (33) multiple_bracket_signature -> LBRACKET . RBRACKET
    (36) bracket_with_bounds -> LBRACKET . number_id RBRACKET
    (37) number_id -> . IDENTIFIER
    (38) number_id -> . integer_number
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER

    RBRACKET        shift and go to state 242
    IDENTIFIER      shift and go to state 244
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    number_id                      shift and go to state 243
    integer_number                 shift and go to state 245

state 181

    (34) multiple_bracket_signature -> bracket_with_bounds . multiple_bracket_signature
    (35) multiple_bracket_signature -> bracket_with_bounds .
    (32) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_signature
    (33) multiple_bracket_signature -> . LBRACKET RBRACKET
    (34) multiple_bracket_signature -> . bracket_with_bounds multiple_bracket_signature
    (35) multiple_bracket_signature -> . bracket_with_bounds
    (36) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    COMMA           reduce using rule 35 (multiple_bracket_signature -> bracket_with_bounds .)
    ASSIGN          reduce using rule 35 (multiple_bracket_signature -> bracket_with_bounds .)
    SEMICOLON       reduce using rule 35 (multiple_bracket_signature -> bracket_with_bounds .)
    RPAREN          reduce using rule 35 (multiple_bracket_signature -> bracket_with_bounds .)
    LBRACKET        shift and go to state 180

    bracket_with_bounds            shift and go to state 181
    multiple_bracket_signature     shift and go to state 246

state 182

    (91) multiple_times -> TIMES multiple_times .

    IDENTIFIER      reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    RPAREN          reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    ASSIGN          reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    TIMES_ASSIGN    reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    DIVIDE_ASSIGN   reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    MODULUS_ASSIGN  reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    PLUS_ASSIGN     reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    MINUS_ASSIGN    reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    SHIFT_LEFT_ASSIGN reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    SHIFT_RIGHT_ASSIGN reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    BITWISE_AND_ASSIGN reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    BITWISE_XOR_ASSIGN reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    BITWISE_OR_ASSIGN reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    MODULUS         reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    DIVIDE          reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    TIMES           reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    MINUS           reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    PLUS            reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    BITWISE_SHIFT_RIGHT reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    BITWISE_SHIFT_LEFT reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    LESS_EQUALS     reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    LESS_THEN       reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    GREATER_EQUALS  reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    GREATER_THEN    reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    NOT_EQUALS      reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    EQUALS_THEN     reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    BITWISE_AND     reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    BITWISE_XOR     reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    BITWISE_OR      reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    LOGICAL_AND     reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    LOGICAL_OR      reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    QUESTION_MARK   reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    KEYWORD_STRUCT  reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    KEYWORD_UNION   reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    TYPE_CHAR       reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    TYPE_INT        reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    TYPE_SHORT      reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    TYPE_LONG       reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    TYPE_FLOAT      reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    TYPE_DOUBLE     reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    TYPE_VOID       reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    KEYWORD_STATIC  reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    KEYWORD_UNSIGNED reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    KEYWORD_VOLATILE reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    KEYWORD_EXTERN  reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    KEYWORD_SIGNED  reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    KEYWORD_REGISTER reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    INCREMENT       reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    DECREMENT       reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    BITWISE_COMPLEMENT reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    NOT             reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    LPAREN          reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    KEYWORD_SIZEOF  reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    STRING          reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    FLOAT_NUMBER    reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    CHARACTER       reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    NUMBER          reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    BINARY_NUMBER   reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    HEXADECIMAL_NUMBER reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    OCTAL_NUMBER    reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    $end            reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    SEMICOLON       reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    RBRACKET        reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    COMMA           reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    COLON           reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    RBRACE          reduce using rule 91 (multiple_times -> TIMES multiple_times .)
    LBRACKET        reduce using rule 91 (multiple_times -> TIMES multiple_times .)


state 183

    (62) struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE . RBRACE SEMICOLON
    (63) struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE . struct_or_union_member_list RBRACE SEMICOLON
    (70) struct_or_union_member_list -> . variable_declaration_list SEMICOLON
    (71) struct_or_union_member_list -> . variable_declaration_list SEMICOLON struct_or_union_member_list
    (72) struct_or_union_member_list -> . struct_declaration
    (73) struct_or_union_member_list -> . struct_declaration SEMICOLON struct_or_union_member_list
    (74) struct_or_union_member_list -> . union_declaration
    (75) struct_or_union_member_list -> . union_declaration SEMICOLON struct_or_union_member_list
    (46) variable_declaration_list -> . type identifier_list
    (47) variable_declaration_list -> . pointer identifier_list
    (62) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (64) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE SEMICOLON
    (65) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (66) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON
    (67) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (68) union_declaration -> . KEYWORD_UNION LBRACE RBRACE SEMICOLON
    (69) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER

    RBRACE          shift and go to state 247
    KEYWORD_STRUCT  shift and go to state 13
    KEYWORD_UNION   shift and go to state 15
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33

    struct_or_union_member_list    shift and go to state 248
    variable_declaration_list      shift and go to state 186
    struct_declaration             shift and go to state 187
    union_declaration              shift and go to state 188
    type                           shift and go to state 161
    pointer                        shift and go to state 162
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18

state 184

    (64) struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 249


state 185

    (65) struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list . RBRACE SEMICOLON

    RBRACE          shift and go to state 250


state 186

    (70) struct_or_union_member_list -> variable_declaration_list . SEMICOLON
    (71) struct_or_union_member_list -> variable_declaration_list . SEMICOLON struct_or_union_member_list

    SEMICOLON       shift and go to state 251


state 187

    (72) struct_or_union_member_list -> struct_declaration .
    (73) struct_or_union_member_list -> struct_declaration . SEMICOLON struct_or_union_member_list

    RBRACE          reduce using rule 72 (struct_or_union_member_list -> struct_declaration .)
    SEMICOLON       shift and go to state 252


state 188

    (74) struct_or_union_member_list -> union_declaration .
    (75) struct_or_union_member_list -> union_declaration . SEMICOLON struct_or_union_member_list

    RBRACE          reduce using rule 74 (struct_or_union_member_list -> union_declaration .)
    SEMICOLON       shift and go to state 253


state 189

    (66) union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE . RBRACE SEMICOLON
    (67) union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE . struct_or_union_member_list RBRACE SEMICOLON
    (70) struct_or_union_member_list -> . variable_declaration_list SEMICOLON
    (71) struct_or_union_member_list -> . variable_declaration_list SEMICOLON struct_or_union_member_list
    (72) struct_or_union_member_list -> . struct_declaration
    (73) struct_or_union_member_list -> . struct_declaration SEMICOLON struct_or_union_member_list
    (74) struct_or_union_member_list -> . union_declaration
    (75) struct_or_union_member_list -> . union_declaration SEMICOLON struct_or_union_member_list
    (46) variable_declaration_list -> . type identifier_list
    (47) variable_declaration_list -> . pointer identifier_list
    (62) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (64) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE SEMICOLON
    (65) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (66) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON
    (67) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (68) union_declaration -> . KEYWORD_UNION LBRACE RBRACE SEMICOLON
    (69) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER

    RBRACE          shift and go to state 254
    KEYWORD_STRUCT  shift and go to state 13
    KEYWORD_UNION   shift and go to state 15
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33

    struct_or_union_member_list    shift and go to state 255
    variable_declaration_list      shift and go to state 186
    struct_declaration             shift and go to state 187
    union_declaration              shift and go to state 188
    type                           shift and go to state 161
    pointer                        shift and go to state 162
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18

state 190

    (68) union_declaration -> KEYWORD_UNION LBRACE RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 256


state 191

    (69) union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list . RBRACE SEMICOLON

    RBRACE          shift and go to state 257


state 192

    (111) assign_exp -> unary_exp assign_operator assign_exp .

    KEYWORD_STRUCT  reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    KEYWORD_UNION   reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    TYPE_CHAR       reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    TYPE_INT        reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    TYPE_SHORT      reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    TYPE_LONG       reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    TYPE_FLOAT      reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    TYPE_DOUBLE     reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    TYPE_VOID       reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    KEYWORD_STATIC  reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    KEYWORD_UNSIGNED reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    KEYWORD_VOLATILE reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    KEYWORD_EXTERN  reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    KEYWORD_SIGNED  reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    KEYWORD_REGISTER reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    INCREMENT       reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    DECREMENT       reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    BITWISE_AND     reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    TIMES           reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    PLUS            reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    MINUS           reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    BITWISE_COMPLEMENT reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    NOT             reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    LPAREN          reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    KEYWORD_SIZEOF  reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    IDENTIFIER      reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    STRING          reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    FLOAT_NUMBER    reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    CHARACTER       reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    NUMBER          reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    BINARY_NUMBER   reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    HEXADECIMAL_NUMBER reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    OCTAL_NUMBER    reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    $end            reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    RPAREN          reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    SEMICOLON       reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    RBRACKET        reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    COMMA           reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    COLON           reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)
    RBRACE          reduce using rule 111 (assign_exp -> unary_exp assign_operator assign_exp .)


state 193

    (169) postfix_exp -> postfix_exp LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 258


state 194

    (170) postfix_exp -> postfix_exp LPAREN RPAREN .

    LBRACKET        reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    LPAREN          reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    DOT             reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    ARROW           reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    INCREMENT       reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    DECREMENT       reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    ASSIGN          reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TIMES_ASSIGN    reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    MODULUS_ASSIGN  reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    PLUS_ASSIGN     reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    MINUS_ASSIGN    reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    SHIFT_LEFT_ASSIGN reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    SHIFT_RIGHT_ASSIGN reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_AND_ASSIGN reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_XOR_ASSIGN reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_OR_ASSIGN reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    MODULUS         reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    DIVIDE          reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TIMES           reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    MINUS           reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    PLUS            reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_SHIFT_RIGHT reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_SHIFT_LEFT reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    LESS_EQUALS     reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    LESS_THEN       reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    GREATER_EQUALS  reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    GREATER_THEN    reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    NOT_EQUALS      reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    EQUALS_THEN     reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_AND     reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_XOR     reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_OR      reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    LOGICAL_AND     reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    LOGICAL_OR      reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    QUESTION_MARK   reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_STRUCT  reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_UNION   reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TYPE_CHAR       reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TYPE_INT        reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TYPE_SHORT      reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TYPE_LONG       reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TYPE_FLOAT      reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TYPE_DOUBLE     reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TYPE_VOID       reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_STATIC  reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_UNSIGNED reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_VOLATILE reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_EXTERN  reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_SIGNED  reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_REGISTER reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_COMPLEMENT reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    NOT             reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_SIZEOF  reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    STRING          reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    FLOAT_NUMBER    reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    CHARACTER       reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    NUMBER          reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BINARY_NUMBER   reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    HEXADECIMAL_NUMBER reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    OCTAL_NUMBER    reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    $end            reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    RPAREN          reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    SEMICOLON       reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    RBRACKET        reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    COMMA           reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    COLON           reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    RBRACE          reduce using rule 170 (postfix_exp -> postfix_exp LPAREN RPAREN .)


state 195

    (171) postfix_exp -> postfix_exp LPAREN function_call_parameters . RPAREN

    RPAREN          shift and go to state 259


state 196

    (177) function_call_parameters -> expression .
    (178) function_call_parameters -> expression . COMMA function_call_parameters

    RPAREN          reduce using rule 177 (function_call_parameters -> expression .)
    COMMA           shift and go to state 260


state 197

    (172) postfix_exp -> postfix_exp DOT IDENTIFIER .

    LBRACKET        reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    LPAREN          reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    DOT             reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    ARROW           reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    INCREMENT       reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    DECREMENT       reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    ASSIGN          reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    MODULUS_ASSIGN  reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    SHIFT_LEFT_ASSIGN reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_AND_ASSIGN reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_XOR_ASSIGN reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_OR_ASSIGN reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    MODULUS         reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    DIVIDE          reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TIMES           reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    MINUS           reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    PLUS            reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_SHIFT_RIGHT reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_SHIFT_LEFT reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    LESS_EQUALS     reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    LESS_THEN       reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    GREATER_THEN    reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    NOT_EQUALS      reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    EQUALS_THEN     reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_AND     reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_XOR     reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_OR      reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    LOGICAL_AND     reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    LOGICAL_OR      reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    QUESTION_MARK   reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_STRUCT  reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_UNION   reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TYPE_CHAR       reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TYPE_INT        reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TYPE_SHORT      reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TYPE_LONG       reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TYPE_FLOAT      reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TYPE_DOUBLE     reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TYPE_VOID       reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_STATIC  reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_UNSIGNED reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_VOLATILE reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_EXTERN  reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_SIGNED  reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_REGISTER reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_COMPLEMENT reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    NOT             reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_SIZEOF  reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    STRING          reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    FLOAT_NUMBER    reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    CHARACTER       reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    NUMBER          reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BINARY_NUMBER   reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    HEXADECIMAL_NUMBER reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    OCTAL_NUMBER    reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    $end            reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    RPAREN          reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    RBRACKET        reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    COMMA           reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    COLON           reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    RBRACE          reduce using rule 172 (postfix_exp -> postfix_exp DOT IDENTIFIER .)


state 198

    (173) postfix_exp -> postfix_exp ARROW IDENTIFIER .

    LBRACKET        reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    LPAREN          reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    DOT             reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    ARROW           reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    INCREMENT       reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    DECREMENT       reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    ASSIGN          reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    MODULUS_ASSIGN  reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    SHIFT_LEFT_ASSIGN reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_AND_ASSIGN reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_XOR_ASSIGN reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_OR_ASSIGN reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    MODULUS         reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    DIVIDE          reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TIMES           reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    MINUS           reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    PLUS            reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_SHIFT_RIGHT reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_SHIFT_LEFT reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    LESS_EQUALS     reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    LESS_THEN       reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    GREATER_THEN    reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    NOT_EQUALS      reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    EQUALS_THEN     reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_AND     reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_XOR     reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_OR      reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    LOGICAL_AND     reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    LOGICAL_OR      reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    QUESTION_MARK   reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_STRUCT  reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_UNION   reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TYPE_CHAR       reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TYPE_INT        reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TYPE_SHORT      reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TYPE_LONG       reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TYPE_FLOAT      reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TYPE_DOUBLE     reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TYPE_VOID       reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_STATIC  reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_UNSIGNED reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_VOLATILE reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_EXTERN  reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_SIGNED  reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_REGISTER reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_COMPLEMENT reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    NOT             reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_SIZEOF  reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    IDENTIFIER      reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    STRING          reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    FLOAT_NUMBER    reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    CHARACTER       reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    NUMBER          reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BINARY_NUMBER   reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    HEXADECIMAL_NUMBER reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    OCTAL_NUMBER    reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    $end            reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    RPAREN          reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    SEMICOLON       reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    RBRACKET        reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    COMMA           reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    COLON           reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    RBRACE          reduce using rule 173 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)


state 199

    (113) ternary_conditional_exp -> logical_exp QUESTION_MARK expression . COLON ternary_conditional_exp

    COLON           shift and go to state 261


state 200

    (116) logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .
    (118) logical_and_exp -> logical_and_exp . LOGICAL_AND bitwise_or_exp

    LOGICAL_OR      reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    QUESTION_MARK   reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_STRUCT  reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_UNION   reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    TYPE_CHAR       reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    TYPE_INT        reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    TYPE_SHORT      reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    TYPE_LONG       reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    TYPE_FLOAT      reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    TYPE_DOUBLE     reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    TYPE_VOID       reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_STATIC  reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_UNSIGNED reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_VOLATILE reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_EXTERN  reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_SIGNED  reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_REGISTER reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    INCREMENT       reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    DECREMENT       reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    BITWISE_AND     reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    TIMES           reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    PLUS            reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    MINUS           reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    BITWISE_COMPLEMENT reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    NOT             reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    LPAREN          reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_SIZEOF  reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    IDENTIFIER      reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    STRING          reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    FLOAT_NUMBER    reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    CHARACTER       reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    NUMBER          reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    BINARY_NUMBER   reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    HEXADECIMAL_NUMBER reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    OCTAL_NUMBER    reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    $end            reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    RPAREN          reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    SEMICOLON       reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    RBRACKET        reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    COMMA           reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    COLON           reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    RBRACE          reduce using rule 116 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    LOGICAL_AND     shift and go to state 131


state 201

    (151) modulus_exp -> unary_exp .

    MODULUS         reduce using rule 151 (modulus_exp -> unary_exp .)
    DIVIDE          reduce using rule 151 (modulus_exp -> unary_exp .)
    TIMES           reduce using rule 151 (modulus_exp -> unary_exp .)
    MINUS           reduce using rule 151 (modulus_exp -> unary_exp .)
    PLUS            reduce using rule 151 (modulus_exp -> unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 151 (modulus_exp -> unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 151 (modulus_exp -> unary_exp .)
    LESS_EQUALS     reduce using rule 151 (modulus_exp -> unary_exp .)
    LESS_THEN       reduce using rule 151 (modulus_exp -> unary_exp .)
    GREATER_EQUALS  reduce using rule 151 (modulus_exp -> unary_exp .)
    GREATER_THEN    reduce using rule 151 (modulus_exp -> unary_exp .)
    NOT_EQUALS      reduce using rule 151 (modulus_exp -> unary_exp .)
    EQUALS_THEN     reduce using rule 151 (modulus_exp -> unary_exp .)
    BITWISE_AND     reduce using rule 151 (modulus_exp -> unary_exp .)
    BITWISE_XOR     reduce using rule 151 (modulus_exp -> unary_exp .)
    BITWISE_OR      reduce using rule 151 (modulus_exp -> unary_exp .)
    LOGICAL_AND     reduce using rule 151 (modulus_exp -> unary_exp .)
    LOGICAL_OR      reduce using rule 151 (modulus_exp -> unary_exp .)
    QUESTION_MARK   reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_STRUCT  reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_UNION   reduce using rule 151 (modulus_exp -> unary_exp .)
    TYPE_CHAR       reduce using rule 151 (modulus_exp -> unary_exp .)
    TYPE_INT        reduce using rule 151 (modulus_exp -> unary_exp .)
    TYPE_SHORT      reduce using rule 151 (modulus_exp -> unary_exp .)
    TYPE_LONG       reduce using rule 151 (modulus_exp -> unary_exp .)
    TYPE_FLOAT      reduce using rule 151 (modulus_exp -> unary_exp .)
    TYPE_DOUBLE     reduce using rule 151 (modulus_exp -> unary_exp .)
    TYPE_VOID       reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_STATIC  reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_UNSIGNED reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_VOLATILE reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_EXTERN  reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_SIGNED  reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_REGISTER reduce using rule 151 (modulus_exp -> unary_exp .)
    INCREMENT       reduce using rule 151 (modulus_exp -> unary_exp .)
    DECREMENT       reduce using rule 151 (modulus_exp -> unary_exp .)
    BITWISE_COMPLEMENT reduce using rule 151 (modulus_exp -> unary_exp .)
    NOT             reduce using rule 151 (modulus_exp -> unary_exp .)
    LPAREN          reduce using rule 151 (modulus_exp -> unary_exp .)
    KEYWORD_SIZEOF  reduce using rule 151 (modulus_exp -> unary_exp .)
    IDENTIFIER      reduce using rule 151 (modulus_exp -> unary_exp .)
    STRING          reduce using rule 151 (modulus_exp -> unary_exp .)
    FLOAT_NUMBER    reduce using rule 151 (modulus_exp -> unary_exp .)
    CHARACTER       reduce using rule 151 (modulus_exp -> unary_exp .)
    NUMBER          reduce using rule 151 (modulus_exp -> unary_exp .)
    BINARY_NUMBER   reduce using rule 151 (modulus_exp -> unary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 151 (modulus_exp -> unary_exp .)
    OCTAL_NUMBER    reduce using rule 151 (modulus_exp -> unary_exp .)
    $end            reduce using rule 151 (modulus_exp -> unary_exp .)
    RPAREN          reduce using rule 151 (modulus_exp -> unary_exp .)
    SEMICOLON       reduce using rule 151 (modulus_exp -> unary_exp .)
    RBRACKET        reduce using rule 151 (modulus_exp -> unary_exp .)
    COMMA           reduce using rule 151 (modulus_exp -> unary_exp .)
    COLON           reduce using rule 151 (modulus_exp -> unary_exp .)
    RBRACE          reduce using rule 151 (modulus_exp -> unary_exp .)


state 202

    (118) logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .
    (120) bitwise_or_exp -> bitwise_or_exp . BITWISE_OR bitwise_xor_exp

    LOGICAL_AND     reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    LOGICAL_OR      reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    QUESTION_MARK   reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_STRUCT  reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_UNION   reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    TYPE_CHAR       reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    TYPE_INT        reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    TYPE_SHORT      reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    TYPE_LONG       reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    TYPE_FLOAT      reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    TYPE_DOUBLE     reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    TYPE_VOID       reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_STATIC  reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_UNSIGNED reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_VOLATILE reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_EXTERN  reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_SIGNED  reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_REGISTER reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    INCREMENT       reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    DECREMENT       reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    BITWISE_AND     reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    TIMES           reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    PLUS            reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    MINUS           reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    BITWISE_COMPLEMENT reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    NOT             reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    LPAREN          reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_SIZEOF  reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    IDENTIFIER      reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    STRING          reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    FLOAT_NUMBER    reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    CHARACTER       reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    NUMBER          reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    BINARY_NUMBER   reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    HEXADECIMAL_NUMBER reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    OCTAL_NUMBER    reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    $end            reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    RPAREN          reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    SEMICOLON       reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    RBRACKET        reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    COMMA           reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    COLON           reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    RBRACE          reduce using rule 118 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    BITWISE_OR      shift and go to state 132


state 203

    (120) bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .
    (122) bitwise_xor_exp -> bitwise_xor_exp . BITWISE_XOR bitwise_and_exp

    BITWISE_OR      reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    LOGICAL_AND     reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    LOGICAL_OR      reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    QUESTION_MARK   reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_STRUCT  reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_UNION   reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    TYPE_CHAR       reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    TYPE_INT        reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    TYPE_SHORT      reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    TYPE_LONG       reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    TYPE_FLOAT      reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    TYPE_DOUBLE     reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    TYPE_VOID       reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_STATIC  reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_UNSIGNED reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_VOLATILE reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_EXTERN  reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_SIGNED  reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_REGISTER reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    INCREMENT       reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    DECREMENT       reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    BITWISE_AND     reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    TIMES           reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    PLUS            reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    MINUS           reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    BITWISE_COMPLEMENT reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    NOT             reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    LPAREN          reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_SIZEOF  reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    IDENTIFIER      reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    STRING          reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    FLOAT_NUMBER    reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    CHARACTER       reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    NUMBER          reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    BINARY_NUMBER   reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    HEXADECIMAL_NUMBER reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    OCTAL_NUMBER    reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    $end            reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    RPAREN          reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    SEMICOLON       reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    RBRACKET        reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    COMMA           reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    COLON           reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    RBRACE          reduce using rule 120 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    BITWISE_XOR     shift and go to state 133


state 204

    (122) bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .
    (124) bitwise_and_exp -> bitwise_and_exp . BITWISE_AND is_equals_exp

  ! shift/reduce conflict for BITWISE_AND resolved as shift
    BITWISE_XOR     reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    BITWISE_OR      reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    LOGICAL_AND     reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    LOGICAL_OR      reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    QUESTION_MARK   reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_STRUCT  reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_UNION   reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    TYPE_CHAR       reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    TYPE_INT        reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    TYPE_SHORT      reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    TYPE_LONG       reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    TYPE_FLOAT      reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    TYPE_DOUBLE     reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    TYPE_VOID       reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_STATIC  reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_UNSIGNED reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_VOLATILE reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_EXTERN  reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_SIGNED  reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_REGISTER reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    INCREMENT       reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    DECREMENT       reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    TIMES           reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    PLUS            reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    MINUS           reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    BITWISE_COMPLEMENT reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    NOT             reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    LPAREN          reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_SIZEOF  reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    IDENTIFIER      reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    STRING          reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    FLOAT_NUMBER    reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    CHARACTER       reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    NUMBER          reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    BINARY_NUMBER   reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    HEXADECIMAL_NUMBER reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    OCTAL_NUMBER    reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    $end            reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    RPAREN          reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    SEMICOLON       reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    RBRACKET        reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    COMMA           reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    COLON           reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    RBRACE          reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    BITWISE_AND     shift and go to state 134

  ! BITWISE_AND     [ reduce using rule 122 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .) ]


state 205

    (124) bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .
    (126) is_equals_exp -> is_equals_exp . EQUALS_THEN is_not_equals_exp

    BITWISE_AND     reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    BITWISE_XOR     reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    BITWISE_OR      reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    LOGICAL_AND     reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    LOGICAL_OR      reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    QUESTION_MARK   reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_STRUCT  reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_UNION   reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    TYPE_CHAR       reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    TYPE_INT        reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    TYPE_SHORT      reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    TYPE_LONG       reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    TYPE_FLOAT      reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    TYPE_DOUBLE     reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    TYPE_VOID       reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_STATIC  reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_UNSIGNED reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_VOLATILE reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_EXTERN  reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_SIGNED  reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_REGISTER reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    INCREMENT       reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    DECREMENT       reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    TIMES           reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    PLUS            reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    MINUS           reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    BITWISE_COMPLEMENT reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    NOT             reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    LPAREN          reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_SIZEOF  reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    IDENTIFIER      reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    STRING          reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    FLOAT_NUMBER    reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    CHARACTER       reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    NUMBER          reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    BINARY_NUMBER   reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    HEXADECIMAL_NUMBER reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    OCTAL_NUMBER    reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    $end            reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    RPAREN          reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    SEMICOLON       reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    RBRACKET        reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    COMMA           reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    COLON           reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    RBRACE          reduce using rule 124 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    EQUALS_THEN     shift and go to state 135


state 206

    (126) is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .
    (128) is_not_equals_exp -> is_not_equals_exp . NOT_EQUALS greater_then_exp

    EQUALS_THEN     reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    BITWISE_AND     reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    BITWISE_XOR     reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    BITWISE_OR      reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    LOGICAL_AND     reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    LOGICAL_OR      reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    QUESTION_MARK   reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_STRUCT  reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_UNION   reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    TYPE_CHAR       reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    TYPE_INT        reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    TYPE_SHORT      reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    TYPE_LONG       reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    TYPE_FLOAT      reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    TYPE_DOUBLE     reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    TYPE_VOID       reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_STATIC  reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_UNSIGNED reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_VOLATILE reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_EXTERN  reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_SIGNED  reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_REGISTER reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    INCREMENT       reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    DECREMENT       reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    TIMES           reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    PLUS            reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    MINUS           reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    BITWISE_COMPLEMENT reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    NOT             reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    LPAREN          reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_SIZEOF  reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    IDENTIFIER      reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    STRING          reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    FLOAT_NUMBER    reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    CHARACTER       reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    NUMBER          reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    BINARY_NUMBER   reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    HEXADECIMAL_NUMBER reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    OCTAL_NUMBER    reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    $end            reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    RPAREN          reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    SEMICOLON       reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    RBRACKET        reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    COMMA           reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    COLON           reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    RBRACE          reduce using rule 126 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    NOT_EQUALS      shift and go to state 136


state 207

    (128) is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .
    (130) greater_then_exp -> greater_then_exp . GREATER_THEN greater_equals_exp

    NOT_EQUALS      reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    EQUALS_THEN     reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    BITWISE_AND     reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    BITWISE_XOR     reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    BITWISE_OR      reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    LOGICAL_AND     reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    LOGICAL_OR      reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    QUESTION_MARK   reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_STRUCT  reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_UNION   reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    TYPE_CHAR       reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    TYPE_INT        reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    TYPE_SHORT      reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    TYPE_LONG       reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    TYPE_FLOAT      reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    TYPE_DOUBLE     reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    TYPE_VOID       reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_STATIC  reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_UNSIGNED reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_VOLATILE reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_EXTERN  reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_SIGNED  reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_REGISTER reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    INCREMENT       reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    DECREMENT       reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    TIMES           reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    PLUS            reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    MINUS           reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    BITWISE_COMPLEMENT reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    NOT             reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    LPAREN          reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_SIZEOF  reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    IDENTIFIER      reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    STRING          reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    FLOAT_NUMBER    reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    CHARACTER       reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    NUMBER          reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    BINARY_NUMBER   reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    HEXADECIMAL_NUMBER reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    OCTAL_NUMBER    reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    $end            reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    RPAREN          reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    SEMICOLON       reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    RBRACKET        reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    COMMA           reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    COLON           reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    RBRACE          reduce using rule 128 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    GREATER_THEN    shift and go to state 137


state 208

    (130) greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .
    (132) greater_equals_exp -> greater_equals_exp . GREATER_EQUALS less_then_exp

    GREATER_THEN    reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    NOT_EQUALS      reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    EQUALS_THEN     reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    BITWISE_AND     reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    BITWISE_XOR     reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    BITWISE_OR      reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    LOGICAL_AND     reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    LOGICAL_OR      reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    QUESTION_MARK   reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_STRUCT  reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_UNION   reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    TYPE_CHAR       reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    TYPE_INT        reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    TYPE_SHORT      reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    TYPE_LONG       reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    TYPE_FLOAT      reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    TYPE_DOUBLE     reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    TYPE_VOID       reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_STATIC  reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_UNSIGNED reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_VOLATILE reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_EXTERN  reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_SIGNED  reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_REGISTER reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    INCREMENT       reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    DECREMENT       reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    TIMES           reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    PLUS            reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    MINUS           reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    BITWISE_COMPLEMENT reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    NOT             reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    LPAREN          reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_SIZEOF  reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    IDENTIFIER      reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    STRING          reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    FLOAT_NUMBER    reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    CHARACTER       reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    NUMBER          reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    BINARY_NUMBER   reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    HEXADECIMAL_NUMBER reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    OCTAL_NUMBER    reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    $end            reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    RPAREN          reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    SEMICOLON       reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    RBRACKET        reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    COMMA           reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    COLON           reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    RBRACE          reduce using rule 130 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    GREATER_EQUALS  shift and go to state 138


state 209

    (132) greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .
    (134) less_then_exp -> less_then_exp . LESS_THEN less_equals_exp

    GREATER_EQUALS  reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    GREATER_THEN    reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    NOT_EQUALS      reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    EQUALS_THEN     reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    BITWISE_AND     reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    BITWISE_XOR     reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    BITWISE_OR      reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    LOGICAL_AND     reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    LOGICAL_OR      reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    QUESTION_MARK   reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_STRUCT  reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_UNION   reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    TYPE_CHAR       reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    TYPE_INT        reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    TYPE_SHORT      reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    TYPE_LONG       reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    TYPE_FLOAT      reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    TYPE_DOUBLE     reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    TYPE_VOID       reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_STATIC  reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_UNSIGNED reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_VOLATILE reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_EXTERN  reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_SIGNED  reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_REGISTER reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    INCREMENT       reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    DECREMENT       reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    TIMES           reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    PLUS            reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    MINUS           reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    BITWISE_COMPLEMENT reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    NOT             reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    LPAREN          reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_SIZEOF  reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    IDENTIFIER      reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    STRING          reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    FLOAT_NUMBER    reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    CHARACTER       reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    NUMBER          reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    BINARY_NUMBER   reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    HEXADECIMAL_NUMBER reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    OCTAL_NUMBER    reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    $end            reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    RPAREN          reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    SEMICOLON       reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    RBRACKET        reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    COMMA           reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    COLON           reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    RBRACE          reduce using rule 132 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    LESS_THEN       shift and go to state 139


state 210

    (134) less_then_exp -> less_then_exp LESS_THEN less_equals_exp .
    (136) less_equals_exp -> less_equals_exp . LESS_EQUALS left_shift_exp

    LESS_THEN       reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    GREATER_EQUALS  reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    GREATER_THEN    reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    NOT_EQUALS      reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    EQUALS_THEN     reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    BITWISE_AND     reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    BITWISE_XOR     reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    BITWISE_OR      reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    LOGICAL_AND     reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    LOGICAL_OR      reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    QUESTION_MARK   reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_STRUCT  reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_UNION   reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    TYPE_CHAR       reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    TYPE_INT        reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    TYPE_SHORT      reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    TYPE_LONG       reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    TYPE_FLOAT      reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    TYPE_DOUBLE     reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    TYPE_VOID       reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_STATIC  reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_UNSIGNED reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_VOLATILE reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_EXTERN  reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_SIGNED  reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_REGISTER reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    INCREMENT       reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    DECREMENT       reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    TIMES           reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    PLUS            reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    MINUS           reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    BITWISE_COMPLEMENT reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    NOT             reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    LPAREN          reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_SIZEOF  reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    IDENTIFIER      reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    STRING          reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    FLOAT_NUMBER    reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    CHARACTER       reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    NUMBER          reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    BINARY_NUMBER   reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    HEXADECIMAL_NUMBER reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    OCTAL_NUMBER    reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    $end            reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    RPAREN          reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    SEMICOLON       reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    RBRACKET        reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    COMMA           reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    COLON           reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    RBRACE          reduce using rule 134 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    LESS_EQUALS     shift and go to state 140


state 211

    (136) less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .
    (138) left_shift_exp -> left_shift_exp . BITWISE_SHIFT_LEFT right_shift_exp

    LESS_EQUALS     reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    LESS_THEN       reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    GREATER_EQUALS  reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    GREATER_THEN    reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    NOT_EQUALS      reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    EQUALS_THEN     reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    BITWISE_AND     reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    BITWISE_XOR     reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    BITWISE_OR      reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    LOGICAL_AND     reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    LOGICAL_OR      reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    QUESTION_MARK   reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_STRUCT  reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_UNION   reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    TYPE_CHAR       reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    TYPE_INT        reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    TYPE_SHORT      reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    TYPE_LONG       reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    TYPE_FLOAT      reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    TYPE_DOUBLE     reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    TYPE_VOID       reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_STATIC  reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_UNSIGNED reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_VOLATILE reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_EXTERN  reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_SIGNED  reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_REGISTER reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    INCREMENT       reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    DECREMENT       reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    TIMES           reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    PLUS            reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    MINUS           reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    BITWISE_COMPLEMENT reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    NOT             reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    LPAREN          reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_SIZEOF  reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    IDENTIFIER      reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    STRING          reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    FLOAT_NUMBER    reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    CHARACTER       reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    NUMBER          reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    BINARY_NUMBER   reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    HEXADECIMAL_NUMBER reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    OCTAL_NUMBER    reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    $end            reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    RPAREN          reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    SEMICOLON       reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    RBRACKET        reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    COMMA           reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    COLON           reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    RBRACE          reduce using rule 136 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    BITWISE_SHIFT_LEFT shift and go to state 141


state 212

    (138) left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .
    (140) right_shift_exp -> right_shift_exp . BITWISE_SHIFT_RIGHT plus_exp

    BITWISE_SHIFT_LEFT reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    LESS_EQUALS     reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    LESS_THEN       reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    GREATER_EQUALS  reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    GREATER_THEN    reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    NOT_EQUALS      reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    EQUALS_THEN     reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    BITWISE_AND     reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    BITWISE_XOR     reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    BITWISE_OR      reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    LOGICAL_AND     reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    LOGICAL_OR      reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    QUESTION_MARK   reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_STRUCT  reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_UNION   reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    TYPE_CHAR       reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    TYPE_INT        reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    TYPE_SHORT      reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    TYPE_LONG       reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    TYPE_FLOAT      reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    TYPE_DOUBLE     reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    TYPE_VOID       reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_STATIC  reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_UNSIGNED reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_VOLATILE reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_EXTERN  reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_SIGNED  reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_REGISTER reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    INCREMENT       reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    DECREMENT       reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    TIMES           reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    PLUS            reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    MINUS           reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    BITWISE_COMPLEMENT reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    NOT             reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    LPAREN          reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_SIZEOF  reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    IDENTIFIER      reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    STRING          reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    FLOAT_NUMBER    reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    CHARACTER       reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    NUMBER          reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    BINARY_NUMBER   reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    HEXADECIMAL_NUMBER reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    OCTAL_NUMBER    reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    $end            reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    RPAREN          reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    SEMICOLON       reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    RBRACKET        reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    COMMA           reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    COLON           reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    RBRACE          reduce using rule 138 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    BITWISE_SHIFT_RIGHT shift and go to state 142


state 213

    (140) right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .
    (142) plus_exp -> plus_exp . PLUS minus_exp

  ! shift/reduce conflict for PLUS resolved as shift
    BITWISE_SHIFT_RIGHT reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    LESS_EQUALS     reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    LESS_THEN       reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    GREATER_EQUALS  reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    GREATER_THEN    reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    NOT_EQUALS      reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    EQUALS_THEN     reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    BITWISE_AND     reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    BITWISE_XOR     reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    BITWISE_OR      reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    LOGICAL_AND     reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    LOGICAL_OR      reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    QUESTION_MARK   reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_STRUCT  reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_UNION   reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    TYPE_CHAR       reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    TYPE_INT        reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    TYPE_SHORT      reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    TYPE_LONG       reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    TYPE_FLOAT      reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    TYPE_DOUBLE     reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    TYPE_VOID       reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_STATIC  reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_UNSIGNED reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_VOLATILE reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_EXTERN  reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_SIGNED  reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_REGISTER reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    INCREMENT       reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    DECREMENT       reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    TIMES           reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    MINUS           reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    BITWISE_COMPLEMENT reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    NOT             reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    LPAREN          reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_SIZEOF  reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    IDENTIFIER      reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    STRING          reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    FLOAT_NUMBER    reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    CHARACTER       reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    NUMBER          reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    BINARY_NUMBER   reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    HEXADECIMAL_NUMBER reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    OCTAL_NUMBER    reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    $end            reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    RPAREN          reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    SEMICOLON       reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    RBRACKET        reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    COMMA           reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    COLON           reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    RBRACE          reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    PLUS            shift and go to state 143

  ! PLUS            [ reduce using rule 140 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .) ]


state 214

    (142) plus_exp -> plus_exp PLUS minus_exp .
    (144) minus_exp -> minus_exp . MINUS times_exp

  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    LESS_EQUALS     reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    LESS_THEN       reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    GREATER_EQUALS  reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    GREATER_THEN    reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    NOT_EQUALS      reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    EQUALS_THEN     reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    BITWISE_AND     reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    BITWISE_XOR     reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    BITWISE_OR      reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    LOGICAL_AND     reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    LOGICAL_OR      reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    QUESTION_MARK   reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_STRUCT  reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_UNION   reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    TYPE_CHAR       reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    TYPE_INT        reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    TYPE_SHORT      reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    TYPE_LONG       reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    TYPE_FLOAT      reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    TYPE_DOUBLE     reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    TYPE_VOID       reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_STATIC  reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_UNSIGNED reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_VOLATILE reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_EXTERN  reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_SIGNED  reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_REGISTER reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    INCREMENT       reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    DECREMENT       reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    TIMES           reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    BITWISE_COMPLEMENT reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    NOT             reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    LPAREN          reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_SIZEOF  reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    IDENTIFIER      reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    STRING          reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    FLOAT_NUMBER    reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    CHARACTER       reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    NUMBER          reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    BINARY_NUMBER   reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    HEXADECIMAL_NUMBER reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    OCTAL_NUMBER    reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    $end            reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    RPAREN          reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    SEMICOLON       reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    RBRACKET        reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    COMMA           reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    COLON           reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    RBRACE          reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .)
    MINUS           shift and go to state 144

  ! MINUS           [ reduce using rule 142 (plus_exp -> plus_exp PLUS minus_exp .) ]


state 215

    (144) minus_exp -> minus_exp MINUS times_exp .
    (146) times_exp -> times_exp . TIMES divide_exp

  ! shift/reduce conflict for TIMES resolved as shift
    MINUS           reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    PLUS            reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    LESS_EQUALS     reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    LESS_THEN       reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    GREATER_EQUALS  reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    GREATER_THEN    reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    NOT_EQUALS      reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    EQUALS_THEN     reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    BITWISE_AND     reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    BITWISE_XOR     reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    BITWISE_OR      reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    LOGICAL_AND     reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    LOGICAL_OR      reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    QUESTION_MARK   reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_STRUCT  reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_UNION   reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    TYPE_CHAR       reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    TYPE_INT        reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    TYPE_SHORT      reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    TYPE_LONG       reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    TYPE_FLOAT      reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    TYPE_DOUBLE     reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    TYPE_VOID       reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_STATIC  reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_UNSIGNED reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_VOLATILE reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_EXTERN  reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_SIGNED  reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_REGISTER reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    INCREMENT       reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    DECREMENT       reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    BITWISE_COMPLEMENT reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    NOT             reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    LPAREN          reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_SIZEOF  reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    IDENTIFIER      reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    STRING          reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    FLOAT_NUMBER    reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    CHARACTER       reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    NUMBER          reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    BINARY_NUMBER   reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    HEXADECIMAL_NUMBER reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    OCTAL_NUMBER    reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    $end            reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    RPAREN          reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    SEMICOLON       reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    RBRACKET        reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    COMMA           reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    COLON           reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    RBRACE          reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .)
    TIMES           shift and go to state 145

  ! TIMES           [ reduce using rule 144 (minus_exp -> minus_exp MINUS times_exp .) ]


state 216

    (146) times_exp -> times_exp TIMES divide_exp .
    (148) divide_exp -> divide_exp . DIVIDE modulus_exp

    TIMES           reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    MINUS           reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    PLUS            reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    LESS_EQUALS     reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    LESS_THEN       reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    GREATER_EQUALS  reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    GREATER_THEN    reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    NOT_EQUALS      reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    EQUALS_THEN     reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    BITWISE_AND     reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    BITWISE_XOR     reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    BITWISE_OR      reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    LOGICAL_AND     reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    LOGICAL_OR      reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    QUESTION_MARK   reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_STRUCT  reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_UNION   reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    TYPE_CHAR       reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    TYPE_INT        reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    TYPE_SHORT      reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    TYPE_LONG       reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    TYPE_FLOAT      reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    TYPE_DOUBLE     reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    TYPE_VOID       reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_STATIC  reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_UNSIGNED reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_VOLATILE reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_EXTERN  reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_SIGNED  reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_REGISTER reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    INCREMENT       reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    DECREMENT       reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    BITWISE_COMPLEMENT reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    NOT             reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    LPAREN          reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_SIZEOF  reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    IDENTIFIER      reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    STRING          reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    FLOAT_NUMBER    reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    CHARACTER       reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    NUMBER          reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    BINARY_NUMBER   reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    HEXADECIMAL_NUMBER reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    OCTAL_NUMBER    reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    $end            reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    RPAREN          reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    SEMICOLON       reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    RBRACKET        reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    COMMA           reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    COLON           reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    RBRACE          reduce using rule 146 (times_exp -> times_exp TIMES divide_exp .)
    DIVIDE          shift and go to state 146


state 217

    (148) divide_exp -> divide_exp DIVIDE modulus_exp .
    (150) modulus_exp -> modulus_exp . MODULUS unary_exp

    DIVIDE          reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    TIMES           reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    MINUS           reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    PLUS            reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    LESS_EQUALS     reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    LESS_THEN       reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    GREATER_EQUALS  reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    GREATER_THEN    reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    NOT_EQUALS      reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    EQUALS_THEN     reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BITWISE_AND     reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BITWISE_XOR     reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BITWISE_OR      reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    LOGICAL_AND     reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    LOGICAL_OR      reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    QUESTION_MARK   reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_STRUCT  reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_UNION   reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    TYPE_CHAR       reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    TYPE_INT        reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    TYPE_SHORT      reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    TYPE_LONG       reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    TYPE_FLOAT      reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    TYPE_DOUBLE     reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    TYPE_VOID       reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_STATIC  reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_UNSIGNED reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_VOLATILE reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_EXTERN  reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_SIGNED  reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_REGISTER reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    INCREMENT       reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    DECREMENT       reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BITWISE_COMPLEMENT reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    NOT             reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    LPAREN          reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_SIZEOF  reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    IDENTIFIER      reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    STRING          reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    FLOAT_NUMBER    reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    CHARACTER       reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    NUMBER          reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BINARY_NUMBER   reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    HEXADECIMAL_NUMBER reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    OCTAL_NUMBER    reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    $end            reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    RPAREN          reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    SEMICOLON       reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    RBRACKET        reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    COMMA           reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    COLON           reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    RBRACE          reduce using rule 148 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    MODULUS         shift and go to state 147


state 218

    (150) modulus_exp -> modulus_exp MODULUS unary_exp .

    MODULUS         reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    DIVIDE          reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    TIMES           reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    MINUS           reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    PLUS            reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    LESS_EQUALS     reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    LESS_THEN       reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    GREATER_EQUALS  reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    GREATER_THEN    reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    NOT_EQUALS      reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    EQUALS_THEN     reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BITWISE_AND     reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BITWISE_XOR     reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BITWISE_OR      reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    LOGICAL_AND     reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    LOGICAL_OR      reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    QUESTION_MARK   reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_STRUCT  reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_UNION   reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    TYPE_CHAR       reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    TYPE_INT        reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    TYPE_SHORT      reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    TYPE_LONG       reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    TYPE_FLOAT      reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    TYPE_DOUBLE     reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    TYPE_VOID       reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_STATIC  reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_UNSIGNED reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_VOLATILE reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_EXTERN  reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_SIGNED  reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_REGISTER reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    INCREMENT       reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    DECREMENT       reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BITWISE_COMPLEMENT reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    NOT             reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    LPAREN          reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_SIZEOF  reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    IDENTIFIER      reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    STRING          reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    FLOAT_NUMBER    reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    CHARACTER       reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    NUMBER          reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BINARY_NUMBER   reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    OCTAL_NUMBER    reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    $end            reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    RPAREN          reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    SEMICOLON       reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    RBRACKET        reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    COMMA           reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    COLON           reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    RBRACE          reduce using rule 150 (modulus_exp -> modulus_exp MODULUS unary_exp .)


state 219

    (9) command_block -> LBRACE command_list RBRACE .

    KEYWORD_STRUCT  reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    KEYWORD_UNION   reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    TYPE_CHAR       reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    TYPE_INT        reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    TYPE_SHORT      reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    TYPE_LONG       reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    TYPE_FLOAT      reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    TYPE_DOUBLE     reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    TYPE_VOID       reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    KEYWORD_STATIC  reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    KEYWORD_UNSIGNED reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    KEYWORD_VOLATILE reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    KEYWORD_EXTERN  reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    KEYWORD_SIGNED  reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    KEYWORD_REGISTER reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    INCREMENT       reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    DECREMENT       reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    BITWISE_AND     reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    TIMES           reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    PLUS            reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    MINUS           reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    BITWISE_COMPLEMENT reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    NOT             reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    LPAREN          reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    KEYWORD_SIZEOF  reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    IDENTIFIER      reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    STRING          reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    FLOAT_NUMBER    reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    CHARACTER       reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    NUMBER          reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    BINARY_NUMBER   reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    HEXADECIMAL_NUMBER reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    OCTAL_NUMBER    reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)
    $end            reduce using rule 9 (command_block -> LBRACE command_list RBRACE .)


state 220

    (10) command_list -> command command_list .

    RBRACE          reduce using rule 10 (command_list -> command command_list .)


state 221

    (12) command -> variable_declaration_list SEMICOLON .

    SEMICOLON       reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    KEYWORD_UNION   reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    IDENTIFIER      reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    TYPE_CHAR       reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    TYPE_INT        reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    TYPE_SHORT      reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    TYPE_LONG       reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    TYPE_FLOAT      reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    TYPE_VOID       reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    INCREMENT       reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    DECREMENT       reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    BITWISE_AND     reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    TIMES           reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    PLUS            reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    MINUS           reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    NOT             reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    LPAREN          reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    STRING          reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    CHARACTER       reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    NUMBER          reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    BINARY_NUMBER   reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)
    RBRACE          reduce using rule 12 (command -> variable_declaration_list SEMICOLON .)


state 222

    (13) command -> expression_list SEMICOLON .

    SEMICOLON       reduce using rule 13 (command -> expression_list SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 13 (command -> expression_list SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 13 (command -> expression_list SEMICOLON .)
    KEYWORD_UNION   reduce using rule 13 (command -> expression_list SEMICOLON .)
    IDENTIFIER      reduce using rule 13 (command -> expression_list SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 13 (command -> expression_list SEMICOLON .)
    TYPE_CHAR       reduce using rule 13 (command -> expression_list SEMICOLON .)
    TYPE_INT        reduce using rule 13 (command -> expression_list SEMICOLON .)
    TYPE_SHORT      reduce using rule 13 (command -> expression_list SEMICOLON .)
    TYPE_LONG       reduce using rule 13 (command -> expression_list SEMICOLON .)
    TYPE_FLOAT      reduce using rule 13 (command -> expression_list SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 13 (command -> expression_list SEMICOLON .)
    TYPE_VOID       reduce using rule 13 (command -> expression_list SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 13 (command -> expression_list SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 13 (command -> expression_list SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 13 (command -> expression_list SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 13 (command -> expression_list SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 13 (command -> expression_list SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 13 (command -> expression_list SEMICOLON .)
    INCREMENT       reduce using rule 13 (command -> expression_list SEMICOLON .)
    DECREMENT       reduce using rule 13 (command -> expression_list SEMICOLON .)
    BITWISE_AND     reduce using rule 13 (command -> expression_list SEMICOLON .)
    TIMES           reduce using rule 13 (command -> expression_list SEMICOLON .)
    PLUS            reduce using rule 13 (command -> expression_list SEMICOLON .)
    MINUS           reduce using rule 13 (command -> expression_list SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 13 (command -> expression_list SEMICOLON .)
    NOT             reduce using rule 13 (command -> expression_list SEMICOLON .)
    LPAREN          reduce using rule 13 (command -> expression_list SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 13 (command -> expression_list SEMICOLON .)
    STRING          reduce using rule 13 (command -> expression_list SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 13 (command -> expression_list SEMICOLON .)
    CHARACTER       reduce using rule 13 (command -> expression_list SEMICOLON .)
    NUMBER          reduce using rule 13 (command -> expression_list SEMICOLON .)
    BINARY_NUMBER   reduce using rule 13 (command -> expression_list SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 13 (command -> expression_list SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 13 (command -> expression_list SEMICOLON .)
    RBRACE          reduce using rule 13 (command -> expression_list SEMICOLON .)


state 223

    (18) command -> KEYWORD_GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 262


state 224

    (20) label -> IDENTIFIER COLON .

    SEMICOLON       reduce using rule 20 (label -> IDENTIFIER COLON .)
    KEYWORD_GOTO    reduce using rule 20 (label -> IDENTIFIER COLON .)
    KEYWORD_STRUCT  reduce using rule 20 (label -> IDENTIFIER COLON .)
    KEYWORD_UNION   reduce using rule 20 (label -> IDENTIFIER COLON .)
    IDENTIFIER      reduce using rule 20 (label -> IDENTIFIER COLON .)
    KEYWORD_RETURN  reduce using rule 20 (label -> IDENTIFIER COLON .)
    TYPE_CHAR       reduce using rule 20 (label -> IDENTIFIER COLON .)
    TYPE_INT        reduce using rule 20 (label -> IDENTIFIER COLON .)
    TYPE_SHORT      reduce using rule 20 (label -> IDENTIFIER COLON .)
    TYPE_LONG       reduce using rule 20 (label -> IDENTIFIER COLON .)
    TYPE_FLOAT      reduce using rule 20 (label -> IDENTIFIER COLON .)
    TYPE_DOUBLE     reduce using rule 20 (label -> IDENTIFIER COLON .)
    TYPE_VOID       reduce using rule 20 (label -> IDENTIFIER COLON .)
    KEYWORD_STATIC  reduce using rule 20 (label -> IDENTIFIER COLON .)
    KEYWORD_UNSIGNED reduce using rule 20 (label -> IDENTIFIER COLON .)
    KEYWORD_VOLATILE reduce using rule 20 (label -> IDENTIFIER COLON .)
    KEYWORD_EXTERN  reduce using rule 20 (label -> IDENTIFIER COLON .)
    KEYWORD_SIGNED  reduce using rule 20 (label -> IDENTIFIER COLON .)
    KEYWORD_REGISTER reduce using rule 20 (label -> IDENTIFIER COLON .)
    INCREMENT       reduce using rule 20 (label -> IDENTIFIER COLON .)
    DECREMENT       reduce using rule 20 (label -> IDENTIFIER COLON .)
    BITWISE_AND     reduce using rule 20 (label -> IDENTIFIER COLON .)
    TIMES           reduce using rule 20 (label -> IDENTIFIER COLON .)
    PLUS            reduce using rule 20 (label -> IDENTIFIER COLON .)
    MINUS           reduce using rule 20 (label -> IDENTIFIER COLON .)
    BITWISE_COMPLEMENT reduce using rule 20 (label -> IDENTIFIER COLON .)
    NOT             reduce using rule 20 (label -> IDENTIFIER COLON .)
    LPAREN          reduce using rule 20 (label -> IDENTIFIER COLON .)
    KEYWORD_SIZEOF  reduce using rule 20 (label -> IDENTIFIER COLON .)
    STRING          reduce using rule 20 (label -> IDENTIFIER COLON .)
    FLOAT_NUMBER    reduce using rule 20 (label -> IDENTIFIER COLON .)
    CHARACTER       reduce using rule 20 (label -> IDENTIFIER COLON .)
    NUMBER          reduce using rule 20 (label -> IDENTIFIER COLON .)
    BINARY_NUMBER   reduce using rule 20 (label -> IDENTIFIER COLON .)
    HEXADECIMAL_NUMBER reduce using rule 20 (label -> IDENTIFIER COLON .)
    OCTAL_NUMBER    reduce using rule 20 (label -> IDENTIFIER COLON .)
    RBRACE          reduce using rule 20 (label -> IDENTIFIER COLON .)


state 225

    (19) command -> return_stm SEMICOLON .

    SEMICOLON       reduce using rule 19 (command -> return_stm SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 19 (command -> return_stm SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 19 (command -> return_stm SEMICOLON .)
    KEYWORD_UNION   reduce using rule 19 (command -> return_stm SEMICOLON .)
    IDENTIFIER      reduce using rule 19 (command -> return_stm SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 19 (command -> return_stm SEMICOLON .)
    TYPE_CHAR       reduce using rule 19 (command -> return_stm SEMICOLON .)
    TYPE_INT        reduce using rule 19 (command -> return_stm SEMICOLON .)
    TYPE_SHORT      reduce using rule 19 (command -> return_stm SEMICOLON .)
    TYPE_LONG       reduce using rule 19 (command -> return_stm SEMICOLON .)
    TYPE_FLOAT      reduce using rule 19 (command -> return_stm SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 19 (command -> return_stm SEMICOLON .)
    TYPE_VOID       reduce using rule 19 (command -> return_stm SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 19 (command -> return_stm SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 19 (command -> return_stm SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 19 (command -> return_stm SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 19 (command -> return_stm SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 19 (command -> return_stm SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 19 (command -> return_stm SEMICOLON .)
    INCREMENT       reduce using rule 19 (command -> return_stm SEMICOLON .)
    DECREMENT       reduce using rule 19 (command -> return_stm SEMICOLON .)
    BITWISE_AND     reduce using rule 19 (command -> return_stm SEMICOLON .)
    TIMES           reduce using rule 19 (command -> return_stm SEMICOLON .)
    PLUS            reduce using rule 19 (command -> return_stm SEMICOLON .)
    MINUS           reduce using rule 19 (command -> return_stm SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 19 (command -> return_stm SEMICOLON .)
    NOT             reduce using rule 19 (command -> return_stm SEMICOLON .)
    LPAREN          reduce using rule 19 (command -> return_stm SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 19 (command -> return_stm SEMICOLON .)
    STRING          reduce using rule 19 (command -> return_stm SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 19 (command -> return_stm SEMICOLON .)
    CHARACTER       reduce using rule 19 (command -> return_stm SEMICOLON .)
    NUMBER          reduce using rule 19 (command -> return_stm SEMICOLON .)
    BINARY_NUMBER   reduce using rule 19 (command -> return_stm SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 19 (command -> return_stm SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 19 (command -> return_stm SEMICOLON .)
    RBRACE          reduce using rule 19 (command -> return_stm SEMICOLON .)


state 226

    (48) identifier_list -> IDENTIFIER .
    (49) identifier_list -> IDENTIFIER . COMMA identifier_list
    (50) identifier_list -> IDENTIFIER . multiple_bracket_signature
    (51) identifier_list -> IDENTIFIER . multiple_bracket_signature COMMA identifier_list
    (52) identifier_list -> IDENTIFIER . ASSIGN expression
    (53) identifier_list -> IDENTIFIER . ASSIGN expression COMMA identifier_list
    (54) identifier_list -> IDENTIFIER . multiple_bracket_signature ASSIGN value_list
    (55) identifier_list -> IDENTIFIER . multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (56) identifier_list -> IDENTIFIER . ASSIGN value_list
    (57) identifier_list -> IDENTIFIER . ASSIGN value_list COMMA identifier_list
    (32) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_signature
    (33) multiple_bracket_signature -> . LBRACKET RBRACKET
    (34) multiple_bracket_signature -> . bracket_with_bounds multiple_bracket_signature
    (35) multiple_bracket_signature -> . bracket_with_bounds
    (36) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    SEMICOLON       reduce using rule 48 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 177
    ASSIGN          shift and go to state 179
    LBRACKET        shift and go to state 180

    multiple_bracket_signature     shift and go to state 178
    bracket_with_bounds            shift and go to state 181

state 227

    (98) expression_list -> expression expression_list .

    SEMICOLON       reduce using rule 98 (expression_list -> expression expression_list .)


state 228

    (189) return_stm -> KEYWORD_RETURN expression .

    SEMICOLON       reduce using rule 189 (return_stm -> KEYWORD_RETURN expression .)


state 229

    (31) signature_param -> type_identifier multiple_bracket_signature .

    COMMA           reduce using rule 31 (signature_param -> type_identifier multiple_bracket_signature .)
    RPAREN          reduce using rule 31 (signature_param -> type_identifier multiple_bracket_signature .)


state 230

    (22) function_signature -> type_identifier LPAREN signature_param_list RPAREN .

    SEMICOLON       reduce using rule 22 (function_signature -> type_identifier LPAREN signature_param_list RPAREN .)
    LBRACE          reduce using rule 22 (function_signature -> type_identifier LPAREN signature_param_list RPAREN .)


state 231

    (24) signature_param_list -> signature_param COMMA . signature_param
    (26) signature_param -> . type
    (27) signature_param -> . pointer
    (28) signature_param -> . type multiple_bracket_signature
    (29) signature_param -> . pointer multiple_bracket_signature
    (30) signature_param -> . type_identifier
    (31) signature_param -> . type_identifier multiple_bracket_signature
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (44) type_identifier -> . type IDENTIFIER
    (45) type_identifier -> . pointer IDENTIFIER
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER

    KEYWORD_STRUCT  shift and go to state 91
    KEYWORD_UNION   shift and go to state 92
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33

    signature_param                shift and go to state 263
    type                           shift and go to state 170
    pointer                        shift and go to state 171
    type_identifier                shift and go to state 166
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18

state 232

    (28) signature_param -> type multiple_bracket_signature .

    COMMA           reduce using rule 28 (signature_param -> type multiple_bracket_signature .)
    RPAREN          reduce using rule 28 (signature_param -> type multiple_bracket_signature .)


state 233

    (44) type_identifier -> type IDENTIFIER .

    LBRACKET        reduce using rule 44 (type_identifier -> type IDENTIFIER .)
    COMMA           reduce using rule 44 (type_identifier -> type IDENTIFIER .)
    RPAREN          reduce using rule 44 (type_identifier -> type IDENTIFIER .)


state 234

    (29) signature_param -> pointer multiple_bracket_signature .

    COMMA           reduce using rule 29 (signature_param -> pointer multiple_bracket_signature .)
    RPAREN          reduce using rule 29 (signature_param -> pointer multiple_bracket_signature .)


state 235

    (45) type_identifier -> pointer IDENTIFIER .

    LBRACKET        reduce using rule 45 (type_identifier -> pointer IDENTIFIER .)
    COMMA           reduce using rule 45 (type_identifier -> pointer IDENTIFIER .)
    RPAREN          reduce using rule 45 (type_identifier -> pointer IDENTIFIER .)


state 236

    (49) identifier_list -> IDENTIFIER COMMA identifier_list .

    SEMICOLON       reduce using rule 49 (identifier_list -> IDENTIFIER COMMA identifier_list .)


state 237

    (51) identifier_list -> IDENTIFIER multiple_bracket_signature COMMA . identifier_list
    (48) identifier_list -> . IDENTIFIER
    (49) identifier_list -> . IDENTIFIER COMMA identifier_list
    (50) identifier_list -> . IDENTIFIER multiple_bracket_signature
    (51) identifier_list -> . IDENTIFIER multiple_bracket_signature COMMA identifier_list
    (52) identifier_list -> . IDENTIFIER ASSIGN expression
    (53) identifier_list -> . IDENTIFIER ASSIGN expression COMMA identifier_list
    (54) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list
    (55) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (56) identifier_list -> . IDENTIFIER ASSIGN value_list
    (57) identifier_list -> . IDENTIFIER ASSIGN value_list COMMA identifier_list

    IDENTIFIER      shift and go to state 226

    identifier_list                shift and go to state 264

state 238

    (54) identifier_list -> IDENTIFIER multiple_bracket_signature ASSIGN . value_list
    (55) identifier_list -> IDENTIFIER multiple_bracket_signature ASSIGN . value_list COMMA identifier_list
    (39) value_list -> . LBRACE value_list_item RBRACE

    LBRACE          shift and go to state 241

    value_list                     shift and go to state 265

state 239

    (52) identifier_list -> IDENTIFIER ASSIGN expression .
    (53) identifier_list -> IDENTIFIER ASSIGN expression . COMMA identifier_list

    SEMICOLON       reduce using rule 52 (identifier_list -> IDENTIFIER ASSIGN expression .)
    COMMA           shift and go to state 266


state 240

    (56) identifier_list -> IDENTIFIER ASSIGN value_list .
    (57) identifier_list -> IDENTIFIER ASSIGN value_list . COMMA identifier_list

    SEMICOLON       reduce using rule 56 (identifier_list -> IDENTIFIER ASSIGN value_list .)
    COMMA           shift and go to state 267


state 241

    (39) value_list -> LBRACE . value_list_item RBRACE
    (40) value_list_item -> . expression
    (41) value_list_item -> . expression COMMA value_list_item
    (42) value_list_item -> . value_list
    (43) value_list_item -> . value_list COMMA value_list_item
    (99) expression -> . assign_exp
    (39) value_list -> . LBRACE value_list_item RBRACE
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    LBRACE          shift and go to state 241
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    value_list_item                shift and go to state 268
    expression                     shift and go to state 269
    value_list                     shift and go to state 270
    assign_exp                     shift and go to state 12
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 242

    (32) multiple_bracket_signature -> LBRACKET RBRACKET . multiple_bracket_signature
    (33) multiple_bracket_signature -> LBRACKET RBRACKET .
    (32) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_signature
    (33) multiple_bracket_signature -> . LBRACKET RBRACKET
    (34) multiple_bracket_signature -> . bracket_with_bounds multiple_bracket_signature
    (35) multiple_bracket_signature -> . bracket_with_bounds
    (36) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    COMMA           reduce using rule 33 (multiple_bracket_signature -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 33 (multiple_bracket_signature -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 33 (multiple_bracket_signature -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 33 (multiple_bracket_signature -> LBRACKET RBRACKET .)
    LBRACKET        shift and go to state 180

    multiple_bracket_signature     shift and go to state 271
    bracket_with_bounds            shift and go to state 181

state 243

    (36) bracket_with_bounds -> LBRACKET number_id . RBRACKET

    RBRACKET        shift and go to state 272


state 244

    (37) number_id -> IDENTIFIER .

    RBRACKET        reduce using rule 37 (number_id -> IDENTIFIER .)


state 245

    (38) number_id -> integer_number .

    RBRACKET        reduce using rule 38 (number_id -> integer_number .)


state 246

    (34) multiple_bracket_signature -> bracket_with_bounds multiple_bracket_signature .

    COMMA           reduce using rule 34 (multiple_bracket_signature -> bracket_with_bounds multiple_bracket_signature .)
    ASSIGN          reduce using rule 34 (multiple_bracket_signature -> bracket_with_bounds multiple_bracket_signature .)
    SEMICOLON       reduce using rule 34 (multiple_bracket_signature -> bracket_with_bounds multiple_bracket_signature .)
    RPAREN          reduce using rule 34 (multiple_bracket_signature -> bracket_with_bounds multiple_bracket_signature .)


state 247

    (62) struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 273


state 248

    (63) struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list . RBRACE SEMICOLON

    RBRACE          shift and go to state 274


state 249

    (64) struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .

    KEYWORD_STRUCT  reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    KEYWORD_UNION   reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    TYPE_CHAR       reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    TYPE_INT        reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    TYPE_SHORT      reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    TYPE_LONG       reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    TYPE_FLOAT      reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    TYPE_VOID       reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    INCREMENT       reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    DECREMENT       reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    BITWISE_AND     reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    TIMES           reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    PLUS            reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    MINUS           reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    NOT             reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    LPAREN          reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    STRING          reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    CHARACTER       reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    NUMBER          reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    BINARY_NUMBER   reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    $end            reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    SEMICOLON       reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)
    RBRACE          reduce using rule 64 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE SEMICOLON .)


state 250

    (65) struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 275


state 251

    (70) struct_or_union_member_list -> variable_declaration_list SEMICOLON .
    (71) struct_or_union_member_list -> variable_declaration_list SEMICOLON . struct_or_union_member_list
    (70) struct_or_union_member_list -> . variable_declaration_list SEMICOLON
    (71) struct_or_union_member_list -> . variable_declaration_list SEMICOLON struct_or_union_member_list
    (72) struct_or_union_member_list -> . struct_declaration
    (73) struct_or_union_member_list -> . struct_declaration SEMICOLON struct_or_union_member_list
    (74) struct_or_union_member_list -> . union_declaration
    (75) struct_or_union_member_list -> . union_declaration SEMICOLON struct_or_union_member_list
    (46) variable_declaration_list -> . type identifier_list
    (47) variable_declaration_list -> . pointer identifier_list
    (62) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (64) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE SEMICOLON
    (65) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (66) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON
    (67) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (68) union_declaration -> . KEYWORD_UNION LBRACE RBRACE SEMICOLON
    (69) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER

    RBRACE          reduce using rule 70 (struct_or_union_member_list -> variable_declaration_list SEMICOLON .)
    KEYWORD_STRUCT  shift and go to state 13
    KEYWORD_UNION   shift and go to state 15
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33

    variable_declaration_list      shift and go to state 186
    struct_or_union_member_list    shift and go to state 276
    struct_declaration             shift and go to state 187
    union_declaration              shift and go to state 188
    type                           shift and go to state 161
    pointer                        shift and go to state 162
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18

state 252

    (73) struct_or_union_member_list -> struct_declaration SEMICOLON . struct_or_union_member_list
    (70) struct_or_union_member_list -> . variable_declaration_list SEMICOLON
    (71) struct_or_union_member_list -> . variable_declaration_list SEMICOLON struct_or_union_member_list
    (72) struct_or_union_member_list -> . struct_declaration
    (73) struct_or_union_member_list -> . struct_declaration SEMICOLON struct_or_union_member_list
    (74) struct_or_union_member_list -> . union_declaration
    (75) struct_or_union_member_list -> . union_declaration SEMICOLON struct_or_union_member_list
    (46) variable_declaration_list -> . type identifier_list
    (47) variable_declaration_list -> . pointer identifier_list
    (62) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (64) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE SEMICOLON
    (65) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (66) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON
    (67) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (68) union_declaration -> . KEYWORD_UNION LBRACE RBRACE SEMICOLON
    (69) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER

    KEYWORD_STRUCT  shift and go to state 13
    KEYWORD_UNION   shift and go to state 15
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33

    struct_declaration             shift and go to state 187
    struct_or_union_member_list    shift and go to state 277
    variable_declaration_list      shift and go to state 186
    union_declaration              shift and go to state 188
    type                           shift and go to state 161
    pointer                        shift and go to state 162
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18

state 253

    (75) struct_or_union_member_list -> union_declaration SEMICOLON . struct_or_union_member_list
    (70) struct_or_union_member_list -> . variable_declaration_list SEMICOLON
    (71) struct_or_union_member_list -> . variable_declaration_list SEMICOLON struct_or_union_member_list
    (72) struct_or_union_member_list -> . struct_declaration
    (73) struct_or_union_member_list -> . struct_declaration SEMICOLON struct_or_union_member_list
    (74) struct_or_union_member_list -> . union_declaration
    (75) struct_or_union_member_list -> . union_declaration SEMICOLON struct_or_union_member_list
    (46) variable_declaration_list -> . type identifier_list
    (47) variable_declaration_list -> . pointer identifier_list
    (62) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON
    (63) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (64) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE SEMICOLON
    (65) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (66) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON
    (67) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (68) union_declaration -> . KEYWORD_UNION LBRACE RBRACE SEMICOLON
    (69) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON
    (59) type -> . user_types
    (60) type -> . primitive_types
    (61) type -> . type_modifier type
    (58) pointer -> . type multiple_times
    (82) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (83) user_types -> . KEYWORD_UNION IDENTIFIER
    (84) primitive_types -> . TYPE_CHAR
    (85) primitive_types -> . TYPE_INT
    (86) primitive_types -> . TYPE_SHORT
    (87) primitive_types -> . TYPE_LONG
    (88) primitive_types -> . TYPE_FLOAT
    (89) primitive_types -> . TYPE_DOUBLE
    (90) primitive_types -> . TYPE_VOID
    (76) type_modifier -> . KEYWORD_STATIC
    (77) type_modifier -> . KEYWORD_UNSIGNED
    (78) type_modifier -> . KEYWORD_VOLATILE
    (79) type_modifier -> . KEYWORD_EXTERN
    (80) type_modifier -> . KEYWORD_SIGNED
    (81) type_modifier -> . KEYWORD_REGISTER

    KEYWORD_STRUCT  shift and go to state 13
    KEYWORD_UNION   shift and go to state 15
    TYPE_CHAR       shift and go to state 21
    TYPE_INT        shift and go to state 22
    TYPE_SHORT      shift and go to state 23
    TYPE_LONG       shift and go to state 24
    TYPE_FLOAT      shift and go to state 25
    TYPE_DOUBLE     shift and go to state 26
    TYPE_VOID       shift and go to state 27
    KEYWORD_STATIC  shift and go to state 28
    KEYWORD_UNSIGNED shift and go to state 29
    KEYWORD_VOLATILE shift and go to state 30
    KEYWORD_EXTERN  shift and go to state 31
    KEYWORD_SIGNED  shift and go to state 32
    KEYWORD_REGISTER shift and go to state 33

    union_declaration              shift and go to state 188
    struct_or_union_member_list    shift and go to state 278
    variable_declaration_list      shift and go to state 186
    struct_declaration             shift and go to state 187
    type                           shift and go to state 161
    pointer                        shift and go to state 162
    user_types                     shift and go to state 16
    primitive_types                shift and go to state 17
    type_modifier                  shift and go to state 18

state 254

    (66) union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 279


state 255

    (67) union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list . RBRACE SEMICOLON

    RBRACE          shift and go to state 280


state 256

    (68) union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .

    KEYWORD_STRUCT  reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    KEYWORD_UNION   reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    TYPE_CHAR       reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    TYPE_INT        reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    TYPE_SHORT      reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    TYPE_LONG       reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    TYPE_FLOAT      reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    TYPE_VOID       reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    INCREMENT       reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    DECREMENT       reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    BITWISE_AND     reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    TIMES           reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    PLUS            reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    MINUS           reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    NOT             reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    LPAREN          reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    STRING          reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    CHARACTER       reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    NUMBER          reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    BINARY_NUMBER   reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    $end            reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    SEMICOLON       reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)
    RBRACE          reduce using rule 68 (union_declaration -> KEYWORD_UNION LBRACE RBRACE SEMICOLON .)


state 257

    (69) union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 281


state 258

    (169) postfix_exp -> postfix_exp LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    DOT             reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    INCREMENT       reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    DECREMENT       reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TIMES_ASSIGN    reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    MODULUS_ASSIGN  reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    SHIFT_LEFT_ASSIGN reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    SHIFT_RIGHT_ASSIGN reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_AND_ASSIGN reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_XOR_ASSIGN reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_OR_ASSIGN reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    MODULUS         reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_SHIFT_RIGHT reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_SHIFT_LEFT reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    LESS_EQUALS     reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    LESS_THEN       reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    GREATER_EQUALS  reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    GREATER_THEN    reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    NOT_EQUALS      reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    EQUALS_THEN     reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_AND     reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_XOR     reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_OR      reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    LOGICAL_AND     reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    LOGICAL_OR      reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    QUESTION_MARK   reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_STRUCT  reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_UNION   reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TYPE_CHAR       reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TYPE_INT        reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TYPE_SHORT      reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TYPE_LONG       reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TYPE_FLOAT      reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TYPE_DOUBLE     reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TYPE_VOID       reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_STATIC  reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_UNSIGNED reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_VOLATILE reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_EXTERN  reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_SIGNED  reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_REGISTER reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_COMPLEMENT reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    NOT             reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_SIZEOF  reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    IDENTIFIER      reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    STRING          reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    FLOAT_NUMBER    reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    CHARACTER       reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BINARY_NUMBER   reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    HEXADECIMAL_NUMBER reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    OCTAL_NUMBER    reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    $end            reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    COLON           reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 169 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)


state 259

    (171) postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .

    LBRACKET        reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    LPAREN          reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    DOT             reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    ARROW           reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    INCREMENT       reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    DECREMENT       reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    ASSIGN          reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TIMES_ASSIGN    reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    MODULUS_ASSIGN  reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    PLUS_ASSIGN     reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    MINUS_ASSIGN    reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    SHIFT_LEFT_ASSIGN reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    SHIFT_RIGHT_ASSIGN reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_AND_ASSIGN reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_XOR_ASSIGN reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_OR_ASSIGN reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    MODULUS         reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    DIVIDE          reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TIMES           reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    MINUS           reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    PLUS            reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_SHIFT_RIGHT reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_SHIFT_LEFT reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    LESS_EQUALS     reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    LESS_THEN       reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    GREATER_EQUALS  reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    GREATER_THEN    reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    NOT_EQUALS      reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    EQUALS_THEN     reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_AND     reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_XOR     reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_OR      reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    LOGICAL_AND     reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    LOGICAL_OR      reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    QUESTION_MARK   reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_STRUCT  reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_UNION   reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TYPE_CHAR       reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TYPE_INT        reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TYPE_SHORT      reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TYPE_LONG       reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TYPE_FLOAT      reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TYPE_DOUBLE     reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TYPE_VOID       reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_STATIC  reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_UNSIGNED reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_VOLATILE reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_EXTERN  reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_SIGNED  reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_REGISTER reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_COMPLEMENT reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    NOT             reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_SIZEOF  reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    IDENTIFIER      reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    STRING          reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    FLOAT_NUMBER    reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    CHARACTER       reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    NUMBER          reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BINARY_NUMBER   reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    HEXADECIMAL_NUMBER reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    OCTAL_NUMBER    reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    $end            reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    RPAREN          reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    SEMICOLON       reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    RBRACKET        reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    COMMA           reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    COLON           reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    RBRACE          reduce using rule 171 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)


state 260

    (178) function_call_parameters -> expression COMMA . function_call_parameters
    (177) function_call_parameters -> . expression
    (178) function_call_parameters -> . expression COMMA function_call_parameters
    (99) expression -> . assign_exp
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    expression                     shift and go to state 196
    function_call_parameters       shift and go to state 282
    assign_exp                     shift and go to state 12
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 261

    (113) ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON . ternary_conditional_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (115) logical_exp -> . logical_or_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (179) primary_exp -> . identifier_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    logical_exp                    shift and go to state 40
    ternary_conditional_exp        shift and go to state 283
    logical_or_exp                 shift and go to state 49
    logical_and_exp                shift and go to state 51
    bitwise_or_exp                 shift and go to state 53
    bitwise_xor_exp                shift and go to state 56
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78
    unary_exp                      shift and go to state 201
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 262

    (18) command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .

    SEMICOLON       reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_UNION   reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    TYPE_CHAR       reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    TYPE_INT        reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    TYPE_SHORT      reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    TYPE_LONG       reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    TYPE_FLOAT      reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    TYPE_VOID       reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    INCREMENT       reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    DECREMENT       reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    BITWISE_AND     reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    TIMES           reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    NOT             reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    CHARACTER       reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    BINARY_NUMBER   reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 18 (command -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)


state 263

    (24) signature_param_list -> signature_param COMMA signature_param .

    RPAREN          reduce using rule 24 (signature_param_list -> signature_param COMMA signature_param .)


state 264

    (51) identifier_list -> IDENTIFIER multiple_bracket_signature COMMA identifier_list .

    SEMICOLON       reduce using rule 51 (identifier_list -> IDENTIFIER multiple_bracket_signature COMMA identifier_list .)


state 265

    (54) identifier_list -> IDENTIFIER multiple_bracket_signature ASSIGN value_list .
    (55) identifier_list -> IDENTIFIER multiple_bracket_signature ASSIGN value_list . COMMA identifier_list

    SEMICOLON       reduce using rule 54 (identifier_list -> IDENTIFIER multiple_bracket_signature ASSIGN value_list .)
    COMMA           shift and go to state 284


state 266

    (53) identifier_list -> IDENTIFIER ASSIGN expression COMMA . identifier_list
    (48) identifier_list -> . IDENTIFIER
    (49) identifier_list -> . IDENTIFIER COMMA identifier_list
    (50) identifier_list -> . IDENTIFIER multiple_bracket_signature
    (51) identifier_list -> . IDENTIFIER multiple_bracket_signature COMMA identifier_list
    (52) identifier_list -> . IDENTIFIER ASSIGN expression
    (53) identifier_list -> . IDENTIFIER ASSIGN expression COMMA identifier_list
    (54) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list
    (55) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (56) identifier_list -> . IDENTIFIER ASSIGN value_list
    (57) identifier_list -> . IDENTIFIER ASSIGN value_list COMMA identifier_list

    IDENTIFIER      shift and go to state 226

    identifier_list                shift and go to state 285

state 267

    (57) identifier_list -> IDENTIFIER ASSIGN value_list COMMA . identifier_list
    (48) identifier_list -> . IDENTIFIER
    (49) identifier_list -> . IDENTIFIER COMMA identifier_list
    (50) identifier_list -> . IDENTIFIER multiple_bracket_signature
    (51) identifier_list -> . IDENTIFIER multiple_bracket_signature COMMA identifier_list
    (52) identifier_list -> . IDENTIFIER ASSIGN expression
    (53) identifier_list -> . IDENTIFIER ASSIGN expression COMMA identifier_list
    (54) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list
    (55) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (56) identifier_list -> . IDENTIFIER ASSIGN value_list
    (57) identifier_list -> . IDENTIFIER ASSIGN value_list COMMA identifier_list

    IDENTIFIER      shift and go to state 226

    identifier_list                shift and go to state 286

state 268

    (39) value_list -> LBRACE value_list_item . RBRACE

    RBRACE          shift and go to state 287


state 269

    (40) value_list_item -> expression .
    (41) value_list_item -> expression . COMMA value_list_item

    RBRACE          reduce using rule 40 (value_list_item -> expression .)
    COMMA           shift and go to state 288


state 270

    (42) value_list_item -> value_list .
    (43) value_list_item -> value_list . COMMA value_list_item

    RBRACE          reduce using rule 42 (value_list_item -> value_list .)
    COMMA           shift and go to state 289


state 271

    (32) multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_signature .

    COMMA           reduce using rule 32 (multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_signature .)
    ASSIGN          reduce using rule 32 (multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_signature .)
    SEMICOLON       reduce using rule 32 (multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_signature .)
    RPAREN          reduce using rule 32 (multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_signature .)


state 272

    (36) bracket_with_bounds -> LBRACKET number_id RBRACKET .

    LBRACKET        reduce using rule 36 (bracket_with_bounds -> LBRACKET number_id RBRACKET .)
    COMMA           reduce using rule 36 (bracket_with_bounds -> LBRACKET number_id RBRACKET .)
    ASSIGN          reduce using rule 36 (bracket_with_bounds -> LBRACKET number_id RBRACKET .)
    SEMICOLON       reduce using rule 36 (bracket_with_bounds -> LBRACKET number_id RBRACKET .)
    RPAREN          reduce using rule 36 (bracket_with_bounds -> LBRACKET number_id RBRACKET .)


state 273

    (62) struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .

    KEYWORD_STRUCT  reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_UNION   reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    TYPE_CHAR       reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    TYPE_INT        reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    TYPE_SHORT      reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    TYPE_LONG       reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    TYPE_FLOAT      reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    TYPE_VOID       reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    INCREMENT       reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    DECREMENT       reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    BITWISE_AND     reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    TIMES           reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    PLUS            reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    MINUS           reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    NOT             reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    LPAREN          reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    STRING          reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    CHARACTER       reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    NUMBER          reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    BINARY_NUMBER   reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    $end            reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    SEMICOLON       reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)
    RBRACE          reduce using rule 62 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE SEMICOLON .)


state 274

    (63) struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 290


state 275

    (65) struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .

    KEYWORD_STRUCT  reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_UNION   reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_CHAR       reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_INT        reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_SHORT      reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_LONG       reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_FLOAT      reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_VOID       reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    INCREMENT       reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    DECREMENT       reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    BITWISE_AND     reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TIMES           reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    PLUS            reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    MINUS           reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    NOT             reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    LPAREN          reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    STRING          reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    CHARACTER       reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    NUMBER          reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    BINARY_NUMBER   reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    $end            reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    SEMICOLON       reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    RBRACE          reduce using rule 65 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE SEMICOLON .)


state 276

    (71) struct_or_union_member_list -> variable_declaration_list SEMICOLON struct_or_union_member_list .

    RBRACE          reduce using rule 71 (struct_or_union_member_list -> variable_declaration_list SEMICOLON struct_or_union_member_list .)


state 277

    (73) struct_or_union_member_list -> struct_declaration SEMICOLON struct_or_union_member_list .

    RBRACE          reduce using rule 73 (struct_or_union_member_list -> struct_declaration SEMICOLON struct_or_union_member_list .)


state 278

    (75) struct_or_union_member_list -> union_declaration SEMICOLON struct_or_union_member_list .

    RBRACE          reduce using rule 75 (struct_or_union_member_list -> union_declaration SEMICOLON struct_or_union_member_list .)


state 279

    (66) union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .

    KEYWORD_STRUCT  reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_UNION   reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    TYPE_CHAR       reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    TYPE_INT        reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    TYPE_SHORT      reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    TYPE_LONG       reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    TYPE_FLOAT      reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    TYPE_VOID       reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    INCREMENT       reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    DECREMENT       reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    BITWISE_AND     reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    TIMES           reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    PLUS            reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    MINUS           reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    NOT             reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    LPAREN          reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    STRING          reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    CHARACTER       reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    NUMBER          reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    BINARY_NUMBER   reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    $end            reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    SEMICOLON       reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)
    RBRACE          reduce using rule 66 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE SEMICOLON .)


state 280

    (67) union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 291


state 281

    (69) union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .

    KEYWORD_STRUCT  reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_UNION   reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_CHAR       reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_INT        reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_SHORT      reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_LONG       reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_FLOAT      reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_VOID       reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    INCREMENT       reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    DECREMENT       reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    BITWISE_AND     reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TIMES           reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    PLUS            reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    MINUS           reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    NOT             reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    LPAREN          reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    STRING          reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    CHARACTER       reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    NUMBER          reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    BINARY_NUMBER   reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    $end            reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    SEMICOLON       reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    RBRACE          reduce using rule 69 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE SEMICOLON .)


state 282

    (178) function_call_parameters -> expression COMMA function_call_parameters .

    RPAREN          reduce using rule 178 (function_call_parameters -> expression COMMA function_call_parameters .)


state 283

    (113) ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .

    KEYWORD_STRUCT  reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    KEYWORD_UNION   reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    TYPE_CHAR       reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    TYPE_INT        reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    TYPE_SHORT      reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    TYPE_LONG       reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    TYPE_FLOAT      reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    TYPE_DOUBLE     reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    TYPE_VOID       reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    KEYWORD_STATIC  reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    KEYWORD_UNSIGNED reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    KEYWORD_VOLATILE reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    KEYWORD_EXTERN  reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    KEYWORD_SIGNED  reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    KEYWORD_REGISTER reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    INCREMENT       reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    DECREMENT       reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    BITWISE_AND     reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    TIMES           reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    PLUS            reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    MINUS           reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    BITWISE_COMPLEMENT reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    NOT             reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    LPAREN          reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    KEYWORD_SIZEOF  reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    IDENTIFIER      reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    STRING          reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    FLOAT_NUMBER    reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    CHARACTER       reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    NUMBER          reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    BINARY_NUMBER   reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    HEXADECIMAL_NUMBER reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    OCTAL_NUMBER    reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    $end            reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    RPAREN          reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    SEMICOLON       reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    RBRACKET        reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    COMMA           reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    COLON           reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    RBRACE          reduce using rule 113 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)


state 284

    (55) identifier_list -> IDENTIFIER multiple_bracket_signature ASSIGN value_list COMMA . identifier_list
    (48) identifier_list -> . IDENTIFIER
    (49) identifier_list -> . IDENTIFIER COMMA identifier_list
    (50) identifier_list -> . IDENTIFIER multiple_bracket_signature
    (51) identifier_list -> . IDENTIFIER multiple_bracket_signature COMMA identifier_list
    (52) identifier_list -> . IDENTIFIER ASSIGN expression
    (53) identifier_list -> . IDENTIFIER ASSIGN expression COMMA identifier_list
    (54) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list
    (55) identifier_list -> . IDENTIFIER multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (56) identifier_list -> . IDENTIFIER ASSIGN value_list
    (57) identifier_list -> . IDENTIFIER ASSIGN value_list COMMA identifier_list

    IDENTIFIER      shift and go to state 226

    identifier_list                shift and go to state 292

state 285

    (53) identifier_list -> IDENTIFIER ASSIGN expression COMMA identifier_list .

    SEMICOLON       reduce using rule 53 (identifier_list -> IDENTIFIER ASSIGN expression COMMA identifier_list .)


state 286

    (57) identifier_list -> IDENTIFIER ASSIGN value_list COMMA identifier_list .

    SEMICOLON       reduce using rule 57 (identifier_list -> IDENTIFIER ASSIGN value_list COMMA identifier_list .)


state 287

    (39) value_list -> LBRACE value_list_item RBRACE .

    COMMA           reduce using rule 39 (value_list -> LBRACE value_list_item RBRACE .)
    SEMICOLON       reduce using rule 39 (value_list -> LBRACE value_list_item RBRACE .)
    RBRACE          reduce using rule 39 (value_list -> LBRACE value_list_item RBRACE .)


state 288

    (41) value_list_item -> expression COMMA . value_list_item
    (40) value_list_item -> . expression
    (41) value_list_item -> . expression COMMA value_list_item
    (42) value_list_item -> . value_list
    (43) value_list_item -> . value_list COMMA value_list_item
    (99) expression -> . assign_exp
    (39) value_list -> . LBRACE value_list_item RBRACE
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    LBRACE          shift and go to state 241
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    expression                     shift and go to state 269
    value_list_item                shift and go to state 293
    value_list                     shift and go to state 270
    assign_exp                     shift and go to state 12
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 289

    (43) value_list_item -> value_list COMMA . value_list_item
    (40) value_list_item -> . expression
    (41) value_list_item -> . expression COMMA value_list_item
    (42) value_list_item -> . value_list
    (43) value_list_item -> . value_list COMMA value_list_item
    (99) expression -> . assign_exp
    (39) value_list -> . LBRACE value_list_item RBRACE
    (111) assign_exp -> . unary_exp assign_operator assign_exp
    (112) assign_exp -> . ternary_conditional_exp
    (152) unary_exp -> . postfix_exp
    (153) unary_exp -> . INCREMENT unary_exp
    (154) unary_exp -> . DECREMENT unary_exp
    (155) unary_exp -> . unary_operator unary_exp
    (156) unary_exp -> . cast_exp unary_exp
    (157) unary_exp -> . sizeof_exp
    (113) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (114) ternary_conditional_exp -> . logical_exp
    (169) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (170) postfix_exp -> . postfix_exp LPAREN RPAREN
    (171) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (172) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (173) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (174) postfix_exp -> . postfix_exp INCREMENT
    (175) postfix_exp -> . postfix_exp DECREMENT
    (176) postfix_exp -> . primary_exp
    (163) unary_operator -> . BITWISE_AND
    (164) unary_operator -> . TIMES
    (165) unary_operator -> . PLUS
    (166) unary_operator -> . MINUS
    (167) unary_operator -> . BITWISE_COMPLEMENT
    (168) unary_operator -> . NOT
    (161) cast_exp -> . LPAREN type RPAREN
    (162) cast_exp -> . LPAREN pointer RPAREN
    (158) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (159) sizeof_exp -> . KEYWORD_SIZEOF type
    (160) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (115) logical_exp -> . logical_or_exp
    (179) primary_exp -> . identifier_exp
    (116) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (117) logical_or_exp -> . logical_and_exp
    (180) identifier_exp -> . IDENTIFIER
    (181) identifier_exp -> . string_exp
    (118) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (119) logical_and_exp -> . bitwise_or_exp
    (182) string_exp -> . STRING
    (183) string_exp -> . number_exp
    (120) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (121) bitwise_or_exp -> . bitwise_xor_exp
    (184) number_exp -> . integer_number
    (185) number_exp -> . FLOAT_NUMBER
    (186) number_exp -> . CHARACTER
    (187) number_exp -> . parentesis_exp
    (122) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (123) bitwise_xor_exp -> . bitwise_and_exp
    (93) integer_number -> . NUMBER
    (94) integer_number -> . BINARY_NUMBER
    (95) integer_number -> . HEXADECIMAL_NUMBER
    (96) integer_number -> . OCTAL_NUMBER
    (190) parentesis_exp -> . LPAREN expression RPAREN
    (124) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (125) bitwise_and_exp -> . is_equals_exp
    (126) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (127) is_equals_exp -> . is_not_equals_exp
    (128) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (129) is_not_equals_exp -> . greater_then_exp
    (130) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (131) greater_then_exp -> . greater_equals_exp
    (132) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (133) greater_equals_exp -> . less_then_exp
    (134) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (135) less_then_exp -> . less_equals_exp
    (136) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (137) less_equals_exp -> . left_shift_exp
    (138) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (139) left_shift_exp -> . right_shift_exp
    (140) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (141) right_shift_exp -> . plus_exp
    (142) plus_exp -> . plus_exp PLUS minus_exp
    (143) plus_exp -> . minus_exp
    (144) minus_exp -> . minus_exp MINUS times_exp
    (145) minus_exp -> . times_exp
    (146) times_exp -> . times_exp TIMES divide_exp
    (147) times_exp -> . divide_exp
    (148) divide_exp -> . divide_exp DIVIDE modulus_exp
    (149) divide_exp -> . modulus_exp
    (150) modulus_exp -> . modulus_exp MODULUS unary_exp
    (151) modulus_exp -> . unary_exp

    LBRACE          shift and go to state 241
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 9
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 14
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    value_list                     shift and go to state 270
    value_list_item                shift and go to state 294
    expression                     shift and go to state 269
    assign_exp                     shift and go to state 12
    unary_exp                      shift and go to state 19
    ternary_conditional_exp        shift and go to state 20
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_exp                    shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_or_exp                 shift and go to state 49
    identifier_exp                 shift and go to state 50
    logical_and_exp                shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_or_exp                 shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_xor_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    bitwise_and_exp                shift and go to state 61
    is_equals_exp                  shift and go to state 66
    is_not_equals_exp              shift and go to state 67
    greater_then_exp               shift and go to state 68
    greater_equals_exp             shift and go to state 69
    less_then_exp                  shift and go to state 70
    less_equals_exp                shift and go to state 71
    left_shift_exp                 shift and go to state 72
    right_shift_exp                shift and go to state 73
    plus_exp                       shift and go to state 74
    minus_exp                      shift and go to state 75
    times_exp                      shift and go to state 76
    divide_exp                     shift and go to state 77
    modulus_exp                    shift and go to state 78

state 290

    (63) struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .

    KEYWORD_STRUCT  reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_UNION   reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_CHAR       reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_INT        reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_SHORT      reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_LONG       reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_FLOAT      reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_VOID       reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    INCREMENT       reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    DECREMENT       reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    BITWISE_AND     reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TIMES           reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    PLUS            reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    MINUS           reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    NOT             reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    LPAREN          reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    STRING          reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    CHARACTER       reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    NUMBER          reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    BINARY_NUMBER   reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    $end            reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    SEMICOLON       reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    RBRACE          reduce using rule 63 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)


state 291

    (67) union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .

    KEYWORD_STRUCT  reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_UNION   reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_CHAR       reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_INT        reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_SHORT      reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_LONG       reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_FLOAT      reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TYPE_VOID       reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    INCREMENT       reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    DECREMENT       reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    BITWISE_AND     reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    TIMES           reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    PLUS            reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    MINUS           reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    NOT             reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    LPAREN          reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    STRING          reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    CHARACTER       reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    NUMBER          reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    BINARY_NUMBER   reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    $end            reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    SEMICOLON       reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)
    RBRACE          reduce using rule 67 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE SEMICOLON .)


state 292

    (55) identifier_list -> IDENTIFIER multiple_bracket_signature ASSIGN value_list COMMA identifier_list .

    SEMICOLON       reduce using rule 55 (identifier_list -> IDENTIFIER multiple_bracket_signature ASSIGN value_list COMMA identifier_list .)


state 293

    (41) value_list_item -> expression COMMA value_list_item .

    RBRACE          reduce using rule 41 (value_list_item -> expression COMMA value_list_item .)


state 294

    (43) value_list_item -> value_list COMMA value_list_item .

    RBRACE          reduce using rule 43 (value_list_item -> value_list COMMA value_list_item .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 34 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 34 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 34 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 61 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 75 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 76 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 96 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 128 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 204 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 213 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 214 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 215 resolved as shift
