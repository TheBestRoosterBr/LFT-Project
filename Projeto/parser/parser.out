Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    KEYWORD_BREAK
    KEYWORD_CASE
    KEYWORD_CONST
    KEYWORD_CONTINUE
    KEYWORD_DEFAULT
    KEYWORD_DO
    KEYWORD_ELSE
    KEYWORD_ENUM
    KEYWORD_FOR
    KEYWORD_GOTO
    KEYWORD_IF
    KEYWORD_RETURN
    KEYWORD_SWITCH
    KEYWORD_TYPEDEF
    KEYWORD_WHILE
    MULTILINE_COMMENT
    PRE_PROCESSOR

Grammar

Rule 0     S' -> program
Rule 1     program -> <empty>
Rule 2     program -> function_signature SEMICOLON program
Rule 3     program -> variable_declaration SEMICOLON program
Rule 4     program -> function program
Rule 5     program -> expression program
Rule 6     command_block -> LBRACE RBRACE
Rule 7     command_block -> LBRACE command_list RBRACE
Rule 8     command_list -> command command_list
Rule 9     command_list -> command
Rule 10    command -> variable_declaration SEMICOLON
Rule 11    command -> variable_declaration ASSIGN expression SEMICOLON
Rule 12    command -> expression SEMICOLON
Rule 13    command -> SEMICOLON
Rule 14    function -> function_signature command_block
Rule 15    function_signature -> type IDENTIFIER LPAREN signature_param_list RPAREN
Rule 16    function_signature -> pointer IDENTIFIER LPAREN signature_param_list RPAREN
Rule 17    function_signature -> type IDENTIFIER LPAREN RPAREN
Rule 18    function_signature -> pointer IDENTIFIER LPAREN RPAREN
Rule 19    signature_param_list -> signature_param COMMA signature_param
Rule 20    signature_param_list -> signature_param
Rule 21    signature_param -> type
Rule 22    signature_param -> pointer
Rule 23    signature_param -> type multiple_bracket_signature
Rule 24    signature_param -> pointer multiple_bracket_signature
Rule 25    signature_param -> variable_declaration
Rule 26    signature_param -> variable_declaration multiple_bracket_signature
Rule 27    multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_with_bounds
Rule 28    multiple_bracket_signature -> multiple_bracket_with_bounds
Rule 29    multiple_bracket_with_bounds -> bracket_with_bounds multiple_bracket_with_bounds
Rule 30    multiple_bracket_with_bounds -> bracket_with_bounds
Rule 31    bracket_with_bounds -> LBRACKET number_id RBRACKET
Rule 32    number_id -> IDENTIFIER
Rule 33    number_id -> integer_number
Rule 34    variable_declaration -> type IDENTIFIER
Rule 35    variable_declaration -> pointer IDENTIFIER
Rule 36    pointer -> type multiple_times
Rule 37    type -> user_types
Rule 38    type -> primitive_types
Rule 39    type -> type_modifier type
Rule 40    type_modifier -> KEYWORD_STATIC
Rule 41    type_modifier -> KEYWORD_UNSIGNED
Rule 42    type_modifier -> KEYWORD_VOLATILE
Rule 43    type_modifier -> KEYWORD_EXTERN
Rule 44    type_modifier -> KEYWORD_SIGNED
Rule 45    type_modifier -> KEYWORD_REGISTER
Rule 46    type_modifier -> KEYWORD_AUTO
Rule 47    user_types -> KEYWORD_STRUCT IDENTIFIER
Rule 48    user_types -> KEYWORD_UNION IDENTIFIER
Rule 49    primitive_types -> TYPE_CHAR
Rule 50    primitive_types -> TYPE_INT
Rule 51    primitive_types -> TYPE_SHORT
Rule 52    primitive_types -> TYPE_LONG
Rule 53    primitive_types -> TYPE_FLOAT
Rule 54    primitive_types -> TYPE_DOUBLE
Rule 55    primitive_types -> TYPE_VOID
Rule 56    multiple_times -> TIMES multiple_times
Rule 57    multiple_times -> TIMES
Rule 58    integer_number -> NUMBER
Rule 59    integer_number -> BINARY_NUMBER
Rule 60    integer_number -> HEXADECIMAL_NUMBER
Rule 61    integer_number -> OCTAL_NUMBER
Rule 62    expression -> assign_exp
Rule 63    assign_operator -> ASSIGN
Rule 64    assign_operator -> TIMES_ASSIGN
Rule 65    assign_operator -> DIVIDE_ASSIGN
Rule 66    assign_operator -> MODULUS_ASSIGN
Rule 67    assign_operator -> PLUS_ASSIGN
Rule 68    assign_operator -> MINUS_ASSIGN
Rule 69    assign_operator -> SHIFT_LEFT_ASSIGN
Rule 70    assign_operator -> SHIFT_RIGHT_ASSIGN
Rule 71    assign_operator -> BITWISE_AND_ASSIGN
Rule 72    assign_operator -> BITWISE_XOR_ASSIGN
Rule 73    assign_operator -> BITWISE_OR_ASSIGN
Rule 74    assign_exp -> unary_exp assign_operator assign_exp
Rule 75    assign_exp -> ternary_conditional_exp
Rule 76    ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
Rule 77    ternary_conditional_exp -> logical_exp
Rule 78    logical_exp -> logical_or_exp
Rule 79    logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp
Rule 80    logical_or_exp -> logical_and_exp
Rule 81    logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp
Rule 82    logical_and_exp -> bitwise_or_exp
Rule 83    bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp
Rule 84    bitwise_or_exp -> bitwise_xor_exp
Rule 85    bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp
Rule 86    bitwise_xor_exp -> bitwise_and_exp
Rule 87    bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp
Rule 88    bitwise_and_exp -> is_equals_exp
Rule 89    is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp
Rule 90    is_equals_exp -> is_not_equals_exp
Rule 91    is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp
Rule 92    is_not_equals_exp -> greater_then_exp
Rule 93    greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp
Rule 94    greater_then_exp -> greater_equals_exp
Rule 95    greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp
Rule 96    greater_equals_exp -> less_then_exp
Rule 97    less_then_exp -> less_then_exp LESS_THEN less_equals_exp
Rule 98    less_then_exp -> less_equals_exp
Rule 99    less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp
Rule 100   less_equals_exp -> left_shift_exp
Rule 101   left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
Rule 102   left_shift_exp -> right_shift_exp
Rule 103   right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
Rule 104   right_shift_exp -> plus_exp
Rule 105   plus_exp -> plus_exp PLUS minus_exp
Rule 106   plus_exp -> minus_exp
Rule 107   minus_exp -> minus_exp MINUS times_exp
Rule 108   minus_exp -> times_exp
Rule 109   times_exp -> times_exp TIMES divide_exp
Rule 110   times_exp -> divide_exp
Rule 111   divide_exp -> divide_exp DIVIDE modulus_exp
Rule 112   divide_exp -> modulus_exp
Rule 113   modulus_exp -> modulus_exp MODULUS unary_exp
Rule 114   modulus_exp -> unary_exp
Rule 115   unary_operator -> BITWISE_AND
Rule 116   unary_operator -> TIMES
Rule 117   unary_operator -> PLUS
Rule 118   unary_operator -> MINUS
Rule 119   unary_operator -> BITWISE_COMPLEMENT
Rule 120   unary_operator -> NOT
Rule 121   unary_exp -> prefix_exp
Rule 122   prefix_exp -> postfix_exp
Rule 123   prefix_exp -> INCREMENT unary_exp
Rule 124   prefix_exp -> DECREMENT unary_exp
Rule 125   prefix_exp -> unary_operator unary_exp
Rule 126   prefix_exp -> cast_exp unary_exp
Rule 127   prefix_exp -> sizeof_exp
Rule 128   sizeof_exp -> KEYWORD_SIZEOF unary_exp
Rule 129   sizeof_exp -> KEYWORD_SIZEOF type
Rule 130   sizeof_exp -> KEYWORD_SIZEOF pointer
Rule 131   cast_exp -> LPAREN type RPAREN
Rule 132   cast_exp -> LPAREN pointer RPAREN
Rule 133   postfix_exp -> postfix_exp LBRACKET expression RBRACKET
Rule 134   postfix_exp -> postfix_exp LPAREN RPAREN
Rule 135   postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN
Rule 136   postfix_exp -> postfix_exp DOT IDENTIFIER
Rule 137   postfix_exp -> postfix_exp ARROW IDENTIFIER
Rule 138   postfix_exp -> postfix_exp INCREMENT
Rule 139   postfix_exp -> postfix_exp DECREMENT
Rule 140   postfix_exp -> primary_exp
Rule 141   function_call_parameters -> expression
Rule 142   function_call_parameters -> expression COMMA function_call_parameters
Rule 143   primary_exp -> identifier_exp
Rule 144   identifier_exp -> IDENTIFIER
Rule 145   identifier_exp -> string_exp
Rule 146   string_exp -> STRING
Rule 147   string_exp -> number_exp
Rule 148   number_exp -> integer_number
Rule 149   number_exp -> FLOAT_NUMBER
Rule 150   number_exp -> CHARACTER
Rule 151   number_exp -> parentesis_exp
Rule 152   parentesis_exp -> LPAREN expression RPAREN

Terminals, with rules where they appear

ARROW                : 137
ASSIGN               : 11 63
BINARY_NUMBER        : 59
BITWISE_AND          : 87 115
BITWISE_AND_ASSIGN   : 71
BITWISE_COMPLEMENT   : 119
BITWISE_OR           : 83
BITWISE_OR_ASSIGN    : 73
BITWISE_SHIFT_LEFT   : 101
BITWISE_SHIFT_RIGHT  : 103
BITWISE_XOR          : 85
BITWISE_XOR_ASSIGN   : 72
CHARACTER            : 150
COLON                : 76
COMMA                : 19 142
COMMENT              : 
DECREMENT            : 124 139
DIVIDE               : 111
DIVIDE_ASSIGN        : 65
DOT                  : 136
EQUALS_THEN          : 89
FLOAT_NUMBER         : 149
GREATER_EQUALS       : 95
GREATER_THEN         : 93
HEXADECIMAL_NUMBER   : 60
IDENTIFIER           : 15 16 17 18 32 34 35 47 48 136 137 144
INCREMENT            : 123 138
KEYWORD_AUTO         : 46
KEYWORD_BREAK        : 
KEYWORD_CASE         : 
KEYWORD_CONST        : 
KEYWORD_CONTINUE     : 
KEYWORD_DEFAULT      : 
KEYWORD_DO           : 
KEYWORD_ELSE         : 
KEYWORD_ENUM         : 
KEYWORD_EXTERN       : 43
KEYWORD_FOR          : 
KEYWORD_GOTO         : 
KEYWORD_IF           : 
KEYWORD_REGISTER     : 45
KEYWORD_RETURN       : 
KEYWORD_SIGNED       : 44
KEYWORD_SIZEOF       : 128 129 130
KEYWORD_STATIC       : 40
KEYWORD_STRUCT       : 47
KEYWORD_SWITCH       : 
KEYWORD_TYPEDEF      : 
KEYWORD_UNION        : 48
KEYWORD_UNSIGNED     : 41
KEYWORD_VOLATILE     : 42
KEYWORD_WHILE        : 
LBRACE               : 6 7
LBRACKET             : 27 31 133
LESS_EQUALS          : 99
LESS_THEN            : 97
LOGICAL_AND          : 81
LOGICAL_OR           : 79
LPAREN               : 15 16 17 18 131 132 134 135 152
MINUS                : 107 118
MINUS_ASSIGN         : 68
MODULUS              : 113
MODULUS_ASSIGN       : 66
MULTILINE_COMMENT    : 
NOT                  : 120
NOT_EQUALS           : 91
NUMBER               : 58
OCTAL_NUMBER         : 61
PLUS                 : 105 117
PLUS_ASSIGN          : 67
PRE_PROCESSOR        : 
QUESTION_MARK        : 76
RBRACE               : 6 7
RBRACKET             : 27 31 133
RPAREN               : 15 16 17 18 131 132 134 135 152
SEMICOLON            : 2 3 10 11 12 13
SHIFT_LEFT_ASSIGN    : 69
SHIFT_RIGHT_ASSIGN   : 70
STRING               : 146
TIMES                : 56 57 109 116
TIMES_ASSIGN         : 64
TYPE_CHAR            : 49
TYPE_DOUBLE          : 54
TYPE_FLOAT           : 53
TYPE_INT             : 50
TYPE_LONG            : 52
TYPE_SHORT           : 51
TYPE_VOID            : 55
error                : 

Nonterminals, with rules where they appear

assign_exp           : 62 74
assign_operator      : 74
bitwise_and_exp      : 85 86 87
bitwise_or_exp       : 81 82 83
bitwise_xor_exp      : 83 84 85
bracket_with_bounds  : 29 30
cast_exp             : 126
command              : 8 9
command_block        : 14
command_list         : 7 8
divide_exp           : 109 110 111
expression           : 5 11 12 76 133 141 142 152
function             : 4
function_call_parameters : 135 142
function_signature   : 2 14
greater_equals_exp   : 93 94 95
greater_then_exp     : 91 92 93
identifier_exp       : 143
integer_number       : 33 148
is_equals_exp        : 87 88 89
is_not_equals_exp    : 89 90 91
left_shift_exp       : 99 100 101
less_equals_exp      : 97 98 99
less_then_exp        : 95 96 97
logical_and_exp      : 79 80 81
logical_exp          : 76 77
logical_or_exp       : 78 79
minus_exp            : 105 106 107
modulus_exp          : 111 112 113
multiple_bracket_signature : 23 24 26
multiple_bracket_with_bounds : 27 28 29
multiple_times       : 36 56
number_exp           : 147
number_id            : 31
parentesis_exp       : 151
plus_exp             : 103 104 105
pointer              : 16 18 22 24 35 130 132
postfix_exp          : 122 133 134 135 136 137 138 139
prefix_exp           : 121
primary_exp          : 140
primitive_types      : 38
program              : 2 3 4 5 0
right_shift_exp      : 101 102 103
signature_param      : 19 19 20
signature_param_list : 15 16
sizeof_exp           : 127
string_exp           : 145
ternary_conditional_exp : 75 76
times_exp            : 107 108 109
type                 : 15 17 21 23 34 36 39 129 131
type_modifier        : 39
unary_exp            : 74 113 114 123 124 125 126 128
unary_operator       : 125
user_types           : 37
variable_declaration : 3 10 11 25 26

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> .
    (2) program -> . function_signature SEMICOLON program
    (3) program -> . variable_declaration SEMICOLON program
    (4) program -> . function program
    (5) program -> . expression program
    (15) function_signature -> . type IDENTIFIER LPAREN signature_param_list RPAREN
    (16) function_signature -> . pointer IDENTIFIER LPAREN signature_param_list RPAREN
    (17) function_signature -> . type IDENTIFIER LPAREN RPAREN
    (18) function_signature -> . pointer IDENTIFIER LPAREN RPAREN
    (34) variable_declaration -> . type IDENTIFIER
    (35) variable_declaration -> . pointer IDENTIFIER
    (14) function -> . function_signature command_block
    (62) expression -> . assign_exp
    (37) type -> . user_types
    (38) type -> . primitive_types
    (39) type -> . type_modifier type
    (36) pointer -> . type multiple_times
    (74) assign_exp -> . unary_exp assign_operator assign_exp
    (75) assign_exp -> . ternary_conditional_exp
    (47) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (48) user_types -> . KEYWORD_UNION IDENTIFIER
    (49) primitive_types -> . TYPE_CHAR
    (50) primitive_types -> . TYPE_INT
    (51) primitive_types -> . TYPE_SHORT
    (52) primitive_types -> . TYPE_LONG
    (53) primitive_types -> . TYPE_FLOAT
    (54) primitive_types -> . TYPE_DOUBLE
    (55) primitive_types -> . TYPE_VOID
    (40) type_modifier -> . KEYWORD_STATIC
    (41) type_modifier -> . KEYWORD_UNSIGNED
    (42) type_modifier -> . KEYWORD_VOLATILE
    (43) type_modifier -> . KEYWORD_EXTERN
    (44) type_modifier -> . KEYWORD_SIGNED
    (45) type_modifier -> . KEYWORD_REGISTER
    (46) type_modifier -> . KEYWORD_AUTO
    (121) unary_exp -> . prefix_exp
    (76) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (77) ternary_conditional_exp -> . logical_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (78) logical_exp -> . logical_or_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (79) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (80) logical_or_exp -> . logical_and_exp
    (143) primary_exp -> . identifier_exp
    (81) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (82) logical_and_exp -> . bitwise_or_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (83) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (84) bitwise_or_exp -> . bitwise_xor_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp

    $end            reduce using rule 1 (program -> .)
    KEYWORD_STRUCT  shift and go to state 16
    KEYWORD_UNION   shift and go to state 17
    TYPE_CHAR       shift and go to state 18
    TYPE_INT        shift and go to state 19
    TYPE_SHORT      shift and go to state 20
    TYPE_LONG       shift and go to state 21
    TYPE_FLOAT      shift and go to state 22
    TYPE_DOUBLE     shift and go to state 23
    TYPE_VOID       shift and go to state 24
    KEYWORD_STATIC  shift and go to state 25
    KEYWORD_UNSIGNED shift and go to state 26
    KEYWORD_VOLATILE shift and go to state 27
    KEYWORD_EXTERN  shift and go to state 28
    KEYWORD_SIGNED  shift and go to state 29
    KEYWORD_REGISTER shift and go to state 30
    KEYWORD_AUTO    shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    program                        shift and go to state 1
    function_signature             shift and go to state 2
    variable_declaration           shift and go to state 3
    function                       shift and go to state 4
    expression                     shift and go to state 5
    type                           shift and go to state 6
    pointer                        shift and go to state 9
    assign_exp                     shift and go to state 10
    user_types                     shift and go to state 11
    primitive_types                shift and go to state 12
    type_modifier                  shift and go to state 13
    unary_exp                      shift and go to state 14
    ternary_conditional_exp        shift and go to state 15
    prefix_exp                     shift and go to state 32
    logical_exp                    shift and go to state 33
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_or_exp                 shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_and_exp                shift and go to state 49
    identifier_exp                 shift and go to state 50
    bitwise_or_exp                 shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_xor_exp                shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_and_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77

state 1

    (0) S' -> program .



state 2

    (2) program -> function_signature . SEMICOLON program
    (14) function -> function_signature . command_block
    (6) command_block -> . LBRACE RBRACE
    (7) command_block -> . LBRACE command_list RBRACE

    SEMICOLON       shift and go to state 78
    LBRACE          shift and go to state 80

    command_block                  shift and go to state 79

state 3

    (3) program -> variable_declaration . SEMICOLON program

    SEMICOLON       shift and go to state 81


state 4

    (4) program -> function . program
    (1) program -> .
    (2) program -> . function_signature SEMICOLON program
    (3) program -> . variable_declaration SEMICOLON program
    (4) program -> . function program
    (5) program -> . expression program
    (15) function_signature -> . type IDENTIFIER LPAREN signature_param_list RPAREN
    (16) function_signature -> . pointer IDENTIFIER LPAREN signature_param_list RPAREN
    (17) function_signature -> . type IDENTIFIER LPAREN RPAREN
    (18) function_signature -> . pointer IDENTIFIER LPAREN RPAREN
    (34) variable_declaration -> . type IDENTIFIER
    (35) variable_declaration -> . pointer IDENTIFIER
    (14) function -> . function_signature command_block
    (62) expression -> . assign_exp
    (37) type -> . user_types
    (38) type -> . primitive_types
    (39) type -> . type_modifier type
    (36) pointer -> . type multiple_times
    (74) assign_exp -> . unary_exp assign_operator assign_exp
    (75) assign_exp -> . ternary_conditional_exp
    (47) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (48) user_types -> . KEYWORD_UNION IDENTIFIER
    (49) primitive_types -> . TYPE_CHAR
    (50) primitive_types -> . TYPE_INT
    (51) primitive_types -> . TYPE_SHORT
    (52) primitive_types -> . TYPE_LONG
    (53) primitive_types -> . TYPE_FLOAT
    (54) primitive_types -> . TYPE_DOUBLE
    (55) primitive_types -> . TYPE_VOID
    (40) type_modifier -> . KEYWORD_STATIC
    (41) type_modifier -> . KEYWORD_UNSIGNED
    (42) type_modifier -> . KEYWORD_VOLATILE
    (43) type_modifier -> . KEYWORD_EXTERN
    (44) type_modifier -> . KEYWORD_SIGNED
    (45) type_modifier -> . KEYWORD_REGISTER
    (46) type_modifier -> . KEYWORD_AUTO
    (121) unary_exp -> . prefix_exp
    (76) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (77) ternary_conditional_exp -> . logical_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (78) logical_exp -> . logical_or_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (79) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (80) logical_or_exp -> . logical_and_exp
    (143) primary_exp -> . identifier_exp
    (81) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (82) logical_and_exp -> . bitwise_or_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (83) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (84) bitwise_or_exp -> . bitwise_xor_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp

    $end            reduce using rule 1 (program -> .)
    KEYWORD_STRUCT  shift and go to state 16
    KEYWORD_UNION   shift and go to state 17
    TYPE_CHAR       shift and go to state 18
    TYPE_INT        shift and go to state 19
    TYPE_SHORT      shift and go to state 20
    TYPE_LONG       shift and go to state 21
    TYPE_FLOAT      shift and go to state 22
    TYPE_DOUBLE     shift and go to state 23
    TYPE_VOID       shift and go to state 24
    KEYWORD_STATIC  shift and go to state 25
    KEYWORD_UNSIGNED shift and go to state 26
    KEYWORD_VOLATILE shift and go to state 27
    KEYWORD_EXTERN  shift and go to state 28
    KEYWORD_SIGNED  shift and go to state 29
    KEYWORD_REGISTER shift and go to state 30
    KEYWORD_AUTO    shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    function                       shift and go to state 4
    program                        shift and go to state 82
    function_signature             shift and go to state 2
    variable_declaration           shift and go to state 3
    expression                     shift and go to state 5
    type                           shift and go to state 6
    pointer                        shift and go to state 9
    assign_exp                     shift and go to state 10
    user_types                     shift and go to state 11
    primitive_types                shift and go to state 12
    type_modifier                  shift and go to state 13
    unary_exp                      shift and go to state 14
    ternary_conditional_exp        shift and go to state 15
    prefix_exp                     shift and go to state 32
    logical_exp                    shift and go to state 33
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_or_exp                 shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_and_exp                shift and go to state 49
    identifier_exp                 shift and go to state 50
    bitwise_or_exp                 shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_xor_exp                shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_and_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77

state 5

    (5) program -> expression . program
    (1) program -> .
    (2) program -> . function_signature SEMICOLON program
    (3) program -> . variable_declaration SEMICOLON program
    (4) program -> . function program
    (5) program -> . expression program
    (15) function_signature -> . type IDENTIFIER LPAREN signature_param_list RPAREN
    (16) function_signature -> . pointer IDENTIFIER LPAREN signature_param_list RPAREN
    (17) function_signature -> . type IDENTIFIER LPAREN RPAREN
    (18) function_signature -> . pointer IDENTIFIER LPAREN RPAREN
    (34) variable_declaration -> . type IDENTIFIER
    (35) variable_declaration -> . pointer IDENTIFIER
    (14) function -> . function_signature command_block
    (62) expression -> . assign_exp
    (37) type -> . user_types
    (38) type -> . primitive_types
    (39) type -> . type_modifier type
    (36) pointer -> . type multiple_times
    (74) assign_exp -> . unary_exp assign_operator assign_exp
    (75) assign_exp -> . ternary_conditional_exp
    (47) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (48) user_types -> . KEYWORD_UNION IDENTIFIER
    (49) primitive_types -> . TYPE_CHAR
    (50) primitive_types -> . TYPE_INT
    (51) primitive_types -> . TYPE_SHORT
    (52) primitive_types -> . TYPE_LONG
    (53) primitive_types -> . TYPE_FLOAT
    (54) primitive_types -> . TYPE_DOUBLE
    (55) primitive_types -> . TYPE_VOID
    (40) type_modifier -> . KEYWORD_STATIC
    (41) type_modifier -> . KEYWORD_UNSIGNED
    (42) type_modifier -> . KEYWORD_VOLATILE
    (43) type_modifier -> . KEYWORD_EXTERN
    (44) type_modifier -> . KEYWORD_SIGNED
    (45) type_modifier -> . KEYWORD_REGISTER
    (46) type_modifier -> . KEYWORD_AUTO
    (121) unary_exp -> . prefix_exp
    (76) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (77) ternary_conditional_exp -> . logical_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (78) logical_exp -> . logical_or_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (79) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (80) logical_or_exp -> . logical_and_exp
    (143) primary_exp -> . identifier_exp
    (81) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (82) logical_and_exp -> . bitwise_or_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (83) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (84) bitwise_or_exp -> . bitwise_xor_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp

    $end            reduce using rule 1 (program -> .)
    KEYWORD_STRUCT  shift and go to state 16
    KEYWORD_UNION   shift and go to state 17
    TYPE_CHAR       shift and go to state 18
    TYPE_INT        shift and go to state 19
    TYPE_SHORT      shift and go to state 20
    TYPE_LONG       shift and go to state 21
    TYPE_FLOAT      shift and go to state 22
    TYPE_DOUBLE     shift and go to state 23
    TYPE_VOID       shift and go to state 24
    KEYWORD_STATIC  shift and go to state 25
    KEYWORD_UNSIGNED shift and go to state 26
    KEYWORD_VOLATILE shift and go to state 27
    KEYWORD_EXTERN  shift and go to state 28
    KEYWORD_SIGNED  shift and go to state 29
    KEYWORD_REGISTER shift and go to state 30
    KEYWORD_AUTO    shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    expression                     shift and go to state 5
    program                        shift and go to state 83
    function_signature             shift and go to state 2
    variable_declaration           shift and go to state 3
    function                       shift and go to state 4
    type                           shift and go to state 6
    pointer                        shift and go to state 9
    assign_exp                     shift and go to state 10
    user_types                     shift and go to state 11
    primitive_types                shift and go to state 12
    type_modifier                  shift and go to state 13
    unary_exp                      shift and go to state 14
    ternary_conditional_exp        shift and go to state 15
    prefix_exp                     shift and go to state 32
    logical_exp                    shift and go to state 33
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_or_exp                 shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_and_exp                shift and go to state 49
    identifier_exp                 shift and go to state 50
    bitwise_or_exp                 shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_xor_exp                shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_and_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77

state 6

    (15) function_signature -> type . IDENTIFIER LPAREN signature_param_list RPAREN
    (17) function_signature -> type . IDENTIFIER LPAREN RPAREN
    (34) variable_declaration -> type . IDENTIFIER
    (36) pointer -> type . multiple_times
    (56) multiple_times -> . TIMES multiple_times
    (57) multiple_times -> . TIMES

    IDENTIFIER      shift and go to state 84
    TIMES           shift and go to state 86

    multiple_times                 shift and go to state 85

state 7

    (144) identifier_exp -> IDENTIFIER .

    LBRACKET        reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    LPAREN          reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    DOT             reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    ARROW           reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    INCREMENT       reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    DECREMENT       reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    ASSIGN          reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    MODULUS_ASSIGN  reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    SHIFT_LEFT_ASSIGN reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    BITWISE_AND_ASSIGN reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    BITWISE_XOR_ASSIGN reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    BITWISE_OR_ASSIGN reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    MODULUS         reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    TIMES           reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    MINUS           reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    PLUS            reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    BITWISE_SHIFT_RIGHT reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    BITWISE_SHIFT_LEFT reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    LESS_THEN       reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    GREATER_THEN    reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    EQUALS_THEN     reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    BITWISE_AND     reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    BITWISE_XOR     reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    BITWISE_OR      reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    QUESTION_MARK   reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    KEYWORD_STRUCT  reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    KEYWORD_UNION   reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    TYPE_CHAR       reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    TYPE_INT        reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    TYPE_SHORT      reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    TYPE_LONG       reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    TYPE_FLOAT      reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    TYPE_DOUBLE     reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    TYPE_VOID       reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    KEYWORD_STATIC  reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    KEYWORD_UNSIGNED reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    KEYWORD_VOLATILE reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    KEYWORD_EXTERN  reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    KEYWORD_SIGNED  reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    KEYWORD_REGISTER reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    KEYWORD_AUTO    reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    BITWISE_COMPLEMENT reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    NOT             reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    KEYWORD_SIZEOF  reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    STRING          reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    FLOAT_NUMBER    reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    CHARACTER       reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    NUMBER          reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    BINARY_NUMBER   reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    HEXADECIMAL_NUMBER reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    OCTAL_NUMBER    reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    $end            reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    RPAREN          reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    COLON           reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    RBRACKET        reduce using rule 144 (identifier_exp -> IDENTIFIER .)
    COMMA           reduce using rule 144 (identifier_exp -> IDENTIFIER .)


state 8

    (131) cast_exp -> LPAREN . type RPAREN
    (132) cast_exp -> LPAREN . pointer RPAREN
    (152) parentesis_exp -> LPAREN . expression RPAREN
    (37) type -> . user_types
    (38) type -> . primitive_types
    (39) type -> . type_modifier type
    (36) pointer -> . type multiple_times
    (62) expression -> . assign_exp
    (47) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (48) user_types -> . KEYWORD_UNION IDENTIFIER
    (49) primitive_types -> . TYPE_CHAR
    (50) primitive_types -> . TYPE_INT
    (51) primitive_types -> . TYPE_SHORT
    (52) primitive_types -> . TYPE_LONG
    (53) primitive_types -> . TYPE_FLOAT
    (54) primitive_types -> . TYPE_DOUBLE
    (55) primitive_types -> . TYPE_VOID
    (40) type_modifier -> . KEYWORD_STATIC
    (41) type_modifier -> . KEYWORD_UNSIGNED
    (42) type_modifier -> . KEYWORD_VOLATILE
    (43) type_modifier -> . KEYWORD_EXTERN
    (44) type_modifier -> . KEYWORD_SIGNED
    (45) type_modifier -> . KEYWORD_REGISTER
    (46) type_modifier -> . KEYWORD_AUTO
    (74) assign_exp -> . unary_exp assign_operator assign_exp
    (75) assign_exp -> . ternary_conditional_exp
    (121) unary_exp -> . prefix_exp
    (76) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (77) ternary_conditional_exp -> . logical_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (78) logical_exp -> . logical_or_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (79) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (80) logical_or_exp -> . logical_and_exp
    (143) primary_exp -> . identifier_exp
    (81) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (82) logical_and_exp -> . bitwise_or_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (83) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (84) bitwise_or_exp -> . bitwise_xor_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp

    KEYWORD_STRUCT  shift and go to state 16
    KEYWORD_UNION   shift and go to state 17
    TYPE_CHAR       shift and go to state 18
    TYPE_INT        shift and go to state 19
    TYPE_SHORT      shift and go to state 20
    TYPE_LONG       shift and go to state 21
    TYPE_FLOAT      shift and go to state 22
    TYPE_DOUBLE     shift and go to state 23
    TYPE_VOID       shift and go to state 24
    KEYWORD_STATIC  shift and go to state 25
    KEYWORD_UNSIGNED shift and go to state 26
    KEYWORD_VOLATILE shift and go to state 27
    KEYWORD_EXTERN  shift and go to state 28
    KEYWORD_SIGNED  shift and go to state 29
    KEYWORD_REGISTER shift and go to state 30
    KEYWORD_AUTO    shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    type                           shift and go to state 87
    pointer                        shift and go to state 88
    expression                     shift and go to state 89
    user_types                     shift and go to state 11
    primitive_types                shift and go to state 12
    type_modifier                  shift and go to state 13
    assign_exp                     shift and go to state 10
    unary_exp                      shift and go to state 14
    ternary_conditional_exp        shift and go to state 15
    prefix_exp                     shift and go to state 32
    logical_exp                    shift and go to state 33
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_or_exp                 shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_and_exp                shift and go to state 49
    identifier_exp                 shift and go to state 50
    bitwise_or_exp                 shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_xor_exp                shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_and_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77

state 9

    (16) function_signature -> pointer . IDENTIFIER LPAREN signature_param_list RPAREN
    (18) function_signature -> pointer . IDENTIFIER LPAREN RPAREN
    (35) variable_declaration -> pointer . IDENTIFIER

    IDENTIFIER      shift and go to state 90


state 10

    (62) expression -> assign_exp .

    KEYWORD_STRUCT  reduce using rule 62 (expression -> assign_exp .)
    KEYWORD_UNION   reduce using rule 62 (expression -> assign_exp .)
    TYPE_CHAR       reduce using rule 62 (expression -> assign_exp .)
    TYPE_INT        reduce using rule 62 (expression -> assign_exp .)
    TYPE_SHORT      reduce using rule 62 (expression -> assign_exp .)
    TYPE_LONG       reduce using rule 62 (expression -> assign_exp .)
    TYPE_FLOAT      reduce using rule 62 (expression -> assign_exp .)
    TYPE_DOUBLE     reduce using rule 62 (expression -> assign_exp .)
    TYPE_VOID       reduce using rule 62 (expression -> assign_exp .)
    KEYWORD_STATIC  reduce using rule 62 (expression -> assign_exp .)
    KEYWORD_UNSIGNED reduce using rule 62 (expression -> assign_exp .)
    KEYWORD_VOLATILE reduce using rule 62 (expression -> assign_exp .)
    KEYWORD_EXTERN  reduce using rule 62 (expression -> assign_exp .)
    KEYWORD_SIGNED  reduce using rule 62 (expression -> assign_exp .)
    KEYWORD_REGISTER reduce using rule 62 (expression -> assign_exp .)
    KEYWORD_AUTO    reduce using rule 62 (expression -> assign_exp .)
    INCREMENT       reduce using rule 62 (expression -> assign_exp .)
    DECREMENT       reduce using rule 62 (expression -> assign_exp .)
    BITWISE_AND     reduce using rule 62 (expression -> assign_exp .)
    TIMES           reduce using rule 62 (expression -> assign_exp .)
    PLUS            reduce using rule 62 (expression -> assign_exp .)
    MINUS           reduce using rule 62 (expression -> assign_exp .)
    BITWISE_COMPLEMENT reduce using rule 62 (expression -> assign_exp .)
    NOT             reduce using rule 62 (expression -> assign_exp .)
    LPAREN          reduce using rule 62 (expression -> assign_exp .)
    KEYWORD_SIZEOF  reduce using rule 62 (expression -> assign_exp .)
    IDENTIFIER      reduce using rule 62 (expression -> assign_exp .)
    STRING          reduce using rule 62 (expression -> assign_exp .)
    FLOAT_NUMBER    reduce using rule 62 (expression -> assign_exp .)
    CHARACTER       reduce using rule 62 (expression -> assign_exp .)
    NUMBER          reduce using rule 62 (expression -> assign_exp .)
    BINARY_NUMBER   reduce using rule 62 (expression -> assign_exp .)
    HEXADECIMAL_NUMBER reduce using rule 62 (expression -> assign_exp .)
    OCTAL_NUMBER    reduce using rule 62 (expression -> assign_exp .)
    $end            reduce using rule 62 (expression -> assign_exp .)
    RPAREN          reduce using rule 62 (expression -> assign_exp .)
    SEMICOLON       reduce using rule 62 (expression -> assign_exp .)
    COLON           reduce using rule 62 (expression -> assign_exp .)
    RBRACKET        reduce using rule 62 (expression -> assign_exp .)
    COMMA           reduce using rule 62 (expression -> assign_exp .)


state 11

    (37) type -> user_types .

    IDENTIFIER      reduce using rule 37 (type -> user_types .)
    TIMES           reduce using rule 37 (type -> user_types .)
    RPAREN          reduce using rule 37 (type -> user_types .)
    ASSIGN          reduce using rule 37 (type -> user_types .)
    TIMES_ASSIGN    reduce using rule 37 (type -> user_types .)
    DIVIDE_ASSIGN   reduce using rule 37 (type -> user_types .)
    MODULUS_ASSIGN  reduce using rule 37 (type -> user_types .)
    PLUS_ASSIGN     reduce using rule 37 (type -> user_types .)
    MINUS_ASSIGN    reduce using rule 37 (type -> user_types .)
    SHIFT_LEFT_ASSIGN reduce using rule 37 (type -> user_types .)
    SHIFT_RIGHT_ASSIGN reduce using rule 37 (type -> user_types .)
    BITWISE_AND_ASSIGN reduce using rule 37 (type -> user_types .)
    BITWISE_XOR_ASSIGN reduce using rule 37 (type -> user_types .)
    BITWISE_OR_ASSIGN reduce using rule 37 (type -> user_types .)
    MODULUS         reduce using rule 37 (type -> user_types .)
    DIVIDE          reduce using rule 37 (type -> user_types .)
    MINUS           reduce using rule 37 (type -> user_types .)
    PLUS            reduce using rule 37 (type -> user_types .)
    BITWISE_SHIFT_RIGHT reduce using rule 37 (type -> user_types .)
    BITWISE_SHIFT_LEFT reduce using rule 37 (type -> user_types .)
    LESS_EQUALS     reduce using rule 37 (type -> user_types .)
    LESS_THEN       reduce using rule 37 (type -> user_types .)
    GREATER_EQUALS  reduce using rule 37 (type -> user_types .)
    GREATER_THEN    reduce using rule 37 (type -> user_types .)
    NOT_EQUALS      reduce using rule 37 (type -> user_types .)
    EQUALS_THEN     reduce using rule 37 (type -> user_types .)
    BITWISE_AND     reduce using rule 37 (type -> user_types .)
    BITWISE_XOR     reduce using rule 37 (type -> user_types .)
    BITWISE_OR      reduce using rule 37 (type -> user_types .)
    LOGICAL_AND     reduce using rule 37 (type -> user_types .)
    LOGICAL_OR      reduce using rule 37 (type -> user_types .)
    QUESTION_MARK   reduce using rule 37 (type -> user_types .)
    KEYWORD_STRUCT  reduce using rule 37 (type -> user_types .)
    KEYWORD_UNION   reduce using rule 37 (type -> user_types .)
    TYPE_CHAR       reduce using rule 37 (type -> user_types .)
    TYPE_INT        reduce using rule 37 (type -> user_types .)
    TYPE_SHORT      reduce using rule 37 (type -> user_types .)
    TYPE_LONG       reduce using rule 37 (type -> user_types .)
    TYPE_FLOAT      reduce using rule 37 (type -> user_types .)
    TYPE_DOUBLE     reduce using rule 37 (type -> user_types .)
    TYPE_VOID       reduce using rule 37 (type -> user_types .)
    KEYWORD_STATIC  reduce using rule 37 (type -> user_types .)
    KEYWORD_UNSIGNED reduce using rule 37 (type -> user_types .)
    KEYWORD_VOLATILE reduce using rule 37 (type -> user_types .)
    KEYWORD_EXTERN  reduce using rule 37 (type -> user_types .)
    KEYWORD_SIGNED  reduce using rule 37 (type -> user_types .)
    KEYWORD_REGISTER reduce using rule 37 (type -> user_types .)
    KEYWORD_AUTO    reduce using rule 37 (type -> user_types .)
    INCREMENT       reduce using rule 37 (type -> user_types .)
    DECREMENT       reduce using rule 37 (type -> user_types .)
    BITWISE_COMPLEMENT reduce using rule 37 (type -> user_types .)
    NOT             reduce using rule 37 (type -> user_types .)
    LPAREN          reduce using rule 37 (type -> user_types .)
    KEYWORD_SIZEOF  reduce using rule 37 (type -> user_types .)
    STRING          reduce using rule 37 (type -> user_types .)
    FLOAT_NUMBER    reduce using rule 37 (type -> user_types .)
    CHARACTER       reduce using rule 37 (type -> user_types .)
    NUMBER          reduce using rule 37 (type -> user_types .)
    BINARY_NUMBER   reduce using rule 37 (type -> user_types .)
    HEXADECIMAL_NUMBER reduce using rule 37 (type -> user_types .)
    OCTAL_NUMBER    reduce using rule 37 (type -> user_types .)
    $end            reduce using rule 37 (type -> user_types .)
    SEMICOLON       reduce using rule 37 (type -> user_types .)
    COLON           reduce using rule 37 (type -> user_types .)
    RBRACKET        reduce using rule 37 (type -> user_types .)
    COMMA           reduce using rule 37 (type -> user_types .)
    LBRACKET        reduce using rule 37 (type -> user_types .)


state 12

    (38) type -> primitive_types .

    IDENTIFIER      reduce using rule 38 (type -> primitive_types .)
    TIMES           reduce using rule 38 (type -> primitive_types .)
    RPAREN          reduce using rule 38 (type -> primitive_types .)
    ASSIGN          reduce using rule 38 (type -> primitive_types .)
    TIMES_ASSIGN    reduce using rule 38 (type -> primitive_types .)
    DIVIDE_ASSIGN   reduce using rule 38 (type -> primitive_types .)
    MODULUS_ASSIGN  reduce using rule 38 (type -> primitive_types .)
    PLUS_ASSIGN     reduce using rule 38 (type -> primitive_types .)
    MINUS_ASSIGN    reduce using rule 38 (type -> primitive_types .)
    SHIFT_LEFT_ASSIGN reduce using rule 38 (type -> primitive_types .)
    SHIFT_RIGHT_ASSIGN reduce using rule 38 (type -> primitive_types .)
    BITWISE_AND_ASSIGN reduce using rule 38 (type -> primitive_types .)
    BITWISE_XOR_ASSIGN reduce using rule 38 (type -> primitive_types .)
    BITWISE_OR_ASSIGN reduce using rule 38 (type -> primitive_types .)
    MODULUS         reduce using rule 38 (type -> primitive_types .)
    DIVIDE          reduce using rule 38 (type -> primitive_types .)
    MINUS           reduce using rule 38 (type -> primitive_types .)
    PLUS            reduce using rule 38 (type -> primitive_types .)
    BITWISE_SHIFT_RIGHT reduce using rule 38 (type -> primitive_types .)
    BITWISE_SHIFT_LEFT reduce using rule 38 (type -> primitive_types .)
    LESS_EQUALS     reduce using rule 38 (type -> primitive_types .)
    LESS_THEN       reduce using rule 38 (type -> primitive_types .)
    GREATER_EQUALS  reduce using rule 38 (type -> primitive_types .)
    GREATER_THEN    reduce using rule 38 (type -> primitive_types .)
    NOT_EQUALS      reduce using rule 38 (type -> primitive_types .)
    EQUALS_THEN     reduce using rule 38 (type -> primitive_types .)
    BITWISE_AND     reduce using rule 38 (type -> primitive_types .)
    BITWISE_XOR     reduce using rule 38 (type -> primitive_types .)
    BITWISE_OR      reduce using rule 38 (type -> primitive_types .)
    LOGICAL_AND     reduce using rule 38 (type -> primitive_types .)
    LOGICAL_OR      reduce using rule 38 (type -> primitive_types .)
    QUESTION_MARK   reduce using rule 38 (type -> primitive_types .)
    KEYWORD_STRUCT  reduce using rule 38 (type -> primitive_types .)
    KEYWORD_UNION   reduce using rule 38 (type -> primitive_types .)
    TYPE_CHAR       reduce using rule 38 (type -> primitive_types .)
    TYPE_INT        reduce using rule 38 (type -> primitive_types .)
    TYPE_SHORT      reduce using rule 38 (type -> primitive_types .)
    TYPE_LONG       reduce using rule 38 (type -> primitive_types .)
    TYPE_FLOAT      reduce using rule 38 (type -> primitive_types .)
    TYPE_DOUBLE     reduce using rule 38 (type -> primitive_types .)
    TYPE_VOID       reduce using rule 38 (type -> primitive_types .)
    KEYWORD_STATIC  reduce using rule 38 (type -> primitive_types .)
    KEYWORD_UNSIGNED reduce using rule 38 (type -> primitive_types .)
    KEYWORD_VOLATILE reduce using rule 38 (type -> primitive_types .)
    KEYWORD_EXTERN  reduce using rule 38 (type -> primitive_types .)
    KEYWORD_SIGNED  reduce using rule 38 (type -> primitive_types .)
    KEYWORD_REGISTER reduce using rule 38 (type -> primitive_types .)
    KEYWORD_AUTO    reduce using rule 38 (type -> primitive_types .)
    INCREMENT       reduce using rule 38 (type -> primitive_types .)
    DECREMENT       reduce using rule 38 (type -> primitive_types .)
    BITWISE_COMPLEMENT reduce using rule 38 (type -> primitive_types .)
    NOT             reduce using rule 38 (type -> primitive_types .)
    LPAREN          reduce using rule 38 (type -> primitive_types .)
    KEYWORD_SIZEOF  reduce using rule 38 (type -> primitive_types .)
    STRING          reduce using rule 38 (type -> primitive_types .)
    FLOAT_NUMBER    reduce using rule 38 (type -> primitive_types .)
    CHARACTER       reduce using rule 38 (type -> primitive_types .)
    NUMBER          reduce using rule 38 (type -> primitive_types .)
    BINARY_NUMBER   reduce using rule 38 (type -> primitive_types .)
    HEXADECIMAL_NUMBER reduce using rule 38 (type -> primitive_types .)
    OCTAL_NUMBER    reduce using rule 38 (type -> primitive_types .)
    $end            reduce using rule 38 (type -> primitive_types .)
    SEMICOLON       reduce using rule 38 (type -> primitive_types .)
    COLON           reduce using rule 38 (type -> primitive_types .)
    RBRACKET        reduce using rule 38 (type -> primitive_types .)
    COMMA           reduce using rule 38 (type -> primitive_types .)
    LBRACKET        reduce using rule 38 (type -> primitive_types .)


state 13

    (39) type -> type_modifier . type
    (37) type -> . user_types
    (38) type -> . primitive_types
    (39) type -> . type_modifier type
    (47) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (48) user_types -> . KEYWORD_UNION IDENTIFIER
    (49) primitive_types -> . TYPE_CHAR
    (50) primitive_types -> . TYPE_INT
    (51) primitive_types -> . TYPE_SHORT
    (52) primitive_types -> . TYPE_LONG
    (53) primitive_types -> . TYPE_FLOAT
    (54) primitive_types -> . TYPE_DOUBLE
    (55) primitive_types -> . TYPE_VOID
    (40) type_modifier -> . KEYWORD_STATIC
    (41) type_modifier -> . KEYWORD_UNSIGNED
    (42) type_modifier -> . KEYWORD_VOLATILE
    (43) type_modifier -> . KEYWORD_EXTERN
    (44) type_modifier -> . KEYWORD_SIGNED
    (45) type_modifier -> . KEYWORD_REGISTER
    (46) type_modifier -> . KEYWORD_AUTO

    KEYWORD_STRUCT  shift and go to state 16
    KEYWORD_UNION   shift and go to state 17
    TYPE_CHAR       shift and go to state 18
    TYPE_INT        shift and go to state 19
    TYPE_SHORT      shift and go to state 20
    TYPE_LONG       shift and go to state 21
    TYPE_FLOAT      shift and go to state 22
    TYPE_DOUBLE     shift and go to state 23
    TYPE_VOID       shift and go to state 24
    KEYWORD_STATIC  shift and go to state 25
    KEYWORD_UNSIGNED shift and go to state 26
    KEYWORD_VOLATILE shift and go to state 27
    KEYWORD_EXTERN  shift and go to state 28
    KEYWORD_SIGNED  shift and go to state 29
    KEYWORD_REGISTER shift and go to state 30
    KEYWORD_AUTO    shift and go to state 31

    type_modifier                  shift and go to state 13
    type                           shift and go to state 91
    user_types                     shift and go to state 11
    primitive_types                shift and go to state 12

state 14

    (74) assign_exp -> unary_exp . assign_operator assign_exp
    (114) modulus_exp -> unary_exp .
    (63) assign_operator -> . ASSIGN
    (64) assign_operator -> . TIMES_ASSIGN
    (65) assign_operator -> . DIVIDE_ASSIGN
    (66) assign_operator -> . MODULUS_ASSIGN
    (67) assign_operator -> . PLUS_ASSIGN
    (68) assign_operator -> . MINUS_ASSIGN
    (69) assign_operator -> . SHIFT_LEFT_ASSIGN
    (70) assign_operator -> . SHIFT_RIGHT_ASSIGN
    (71) assign_operator -> . BITWISE_AND_ASSIGN
    (72) assign_operator -> . BITWISE_XOR_ASSIGN
    (73) assign_operator -> . BITWISE_OR_ASSIGN

    MODULUS         reduce using rule 114 (modulus_exp -> unary_exp .)
    DIVIDE          reduce using rule 114 (modulus_exp -> unary_exp .)
    TIMES           reduce using rule 114 (modulus_exp -> unary_exp .)
    MINUS           reduce using rule 114 (modulus_exp -> unary_exp .)
    PLUS            reduce using rule 114 (modulus_exp -> unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 114 (modulus_exp -> unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 114 (modulus_exp -> unary_exp .)
    LESS_EQUALS     reduce using rule 114 (modulus_exp -> unary_exp .)
    LESS_THEN       reduce using rule 114 (modulus_exp -> unary_exp .)
    GREATER_EQUALS  reduce using rule 114 (modulus_exp -> unary_exp .)
    GREATER_THEN    reduce using rule 114 (modulus_exp -> unary_exp .)
    NOT_EQUALS      reduce using rule 114 (modulus_exp -> unary_exp .)
    EQUALS_THEN     reduce using rule 114 (modulus_exp -> unary_exp .)
    BITWISE_AND     reduce using rule 114 (modulus_exp -> unary_exp .)
    BITWISE_XOR     reduce using rule 114 (modulus_exp -> unary_exp .)
    BITWISE_OR      reduce using rule 114 (modulus_exp -> unary_exp .)
    LOGICAL_AND     reduce using rule 114 (modulus_exp -> unary_exp .)
    LOGICAL_OR      reduce using rule 114 (modulus_exp -> unary_exp .)
    QUESTION_MARK   reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_STRUCT  reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_UNION   reduce using rule 114 (modulus_exp -> unary_exp .)
    TYPE_CHAR       reduce using rule 114 (modulus_exp -> unary_exp .)
    TYPE_INT        reduce using rule 114 (modulus_exp -> unary_exp .)
    TYPE_SHORT      reduce using rule 114 (modulus_exp -> unary_exp .)
    TYPE_LONG       reduce using rule 114 (modulus_exp -> unary_exp .)
    TYPE_FLOAT      reduce using rule 114 (modulus_exp -> unary_exp .)
    TYPE_DOUBLE     reduce using rule 114 (modulus_exp -> unary_exp .)
    TYPE_VOID       reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_STATIC  reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_UNSIGNED reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_VOLATILE reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_EXTERN  reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_SIGNED  reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_REGISTER reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_AUTO    reduce using rule 114 (modulus_exp -> unary_exp .)
    INCREMENT       reduce using rule 114 (modulus_exp -> unary_exp .)
    DECREMENT       reduce using rule 114 (modulus_exp -> unary_exp .)
    BITWISE_COMPLEMENT reduce using rule 114 (modulus_exp -> unary_exp .)
    NOT             reduce using rule 114 (modulus_exp -> unary_exp .)
    LPAREN          reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_SIZEOF  reduce using rule 114 (modulus_exp -> unary_exp .)
    IDENTIFIER      reduce using rule 114 (modulus_exp -> unary_exp .)
    STRING          reduce using rule 114 (modulus_exp -> unary_exp .)
    FLOAT_NUMBER    reduce using rule 114 (modulus_exp -> unary_exp .)
    CHARACTER       reduce using rule 114 (modulus_exp -> unary_exp .)
    NUMBER          reduce using rule 114 (modulus_exp -> unary_exp .)
    BINARY_NUMBER   reduce using rule 114 (modulus_exp -> unary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 114 (modulus_exp -> unary_exp .)
    OCTAL_NUMBER    reduce using rule 114 (modulus_exp -> unary_exp .)
    $end            reduce using rule 114 (modulus_exp -> unary_exp .)
    RPAREN          reduce using rule 114 (modulus_exp -> unary_exp .)
    SEMICOLON       reduce using rule 114 (modulus_exp -> unary_exp .)
    COLON           reduce using rule 114 (modulus_exp -> unary_exp .)
    RBRACKET        reduce using rule 114 (modulus_exp -> unary_exp .)
    COMMA           reduce using rule 114 (modulus_exp -> unary_exp .)
    ASSIGN          shift and go to state 93
    TIMES_ASSIGN    shift and go to state 94
    DIVIDE_ASSIGN   shift and go to state 95
    MODULUS_ASSIGN  shift and go to state 96
    PLUS_ASSIGN     shift and go to state 97
    MINUS_ASSIGN    shift and go to state 98
    SHIFT_LEFT_ASSIGN shift and go to state 99
    SHIFT_RIGHT_ASSIGN shift and go to state 100
    BITWISE_AND_ASSIGN shift and go to state 101
    BITWISE_XOR_ASSIGN shift and go to state 102
    BITWISE_OR_ASSIGN shift and go to state 103

    assign_operator                shift and go to state 92

state 15

    (75) assign_exp -> ternary_conditional_exp .

    KEYWORD_STRUCT  reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    KEYWORD_UNION   reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    TYPE_CHAR       reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    TYPE_INT        reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    TYPE_SHORT      reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    TYPE_LONG       reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    TYPE_FLOAT      reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    TYPE_DOUBLE     reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    TYPE_VOID       reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    KEYWORD_STATIC  reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    KEYWORD_UNSIGNED reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    KEYWORD_VOLATILE reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    KEYWORD_EXTERN  reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    KEYWORD_SIGNED  reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    KEYWORD_REGISTER reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    KEYWORD_AUTO    reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    INCREMENT       reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    DECREMENT       reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    BITWISE_AND     reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    TIMES           reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    PLUS            reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    MINUS           reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    BITWISE_COMPLEMENT reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    NOT             reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    LPAREN          reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    KEYWORD_SIZEOF  reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    IDENTIFIER      reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    STRING          reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    FLOAT_NUMBER    reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    CHARACTER       reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    NUMBER          reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    BINARY_NUMBER   reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    HEXADECIMAL_NUMBER reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    OCTAL_NUMBER    reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    $end            reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    RPAREN          reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    SEMICOLON       reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    COLON           reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    RBRACKET        reduce using rule 75 (assign_exp -> ternary_conditional_exp .)
    COMMA           reduce using rule 75 (assign_exp -> ternary_conditional_exp .)


state 16

    (47) user_types -> KEYWORD_STRUCT . IDENTIFIER

    IDENTIFIER      shift and go to state 104


state 17

    (48) user_types -> KEYWORD_UNION . IDENTIFIER

    IDENTIFIER      shift and go to state 105


state 18

    (49) primitive_types -> TYPE_CHAR .

    IDENTIFIER      reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    TIMES           reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    RPAREN          reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    ASSIGN          reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    TIMES_ASSIGN    reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    DIVIDE_ASSIGN   reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    MODULUS_ASSIGN  reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    PLUS_ASSIGN     reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    MINUS_ASSIGN    reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    SHIFT_LEFT_ASSIGN reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    SHIFT_RIGHT_ASSIGN reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    BITWISE_AND_ASSIGN reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    BITWISE_XOR_ASSIGN reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    BITWISE_OR_ASSIGN reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    MODULUS         reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    DIVIDE          reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    MINUS           reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    PLUS            reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    BITWISE_SHIFT_RIGHT reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    BITWISE_SHIFT_LEFT reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    LESS_EQUALS     reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    LESS_THEN       reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    GREATER_EQUALS  reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    GREATER_THEN    reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    NOT_EQUALS      reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    EQUALS_THEN     reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    BITWISE_AND     reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    BITWISE_XOR     reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    BITWISE_OR      reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    LOGICAL_AND     reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    LOGICAL_OR      reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    QUESTION_MARK   reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    KEYWORD_STRUCT  reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    KEYWORD_UNION   reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    TYPE_CHAR       reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    TYPE_INT        reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    TYPE_SHORT      reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    TYPE_LONG       reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    TYPE_FLOAT      reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    TYPE_DOUBLE     reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    TYPE_VOID       reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    KEYWORD_STATIC  reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    KEYWORD_UNSIGNED reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    KEYWORD_VOLATILE reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    KEYWORD_EXTERN  reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    KEYWORD_SIGNED  reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    KEYWORD_REGISTER reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    KEYWORD_AUTO    reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    INCREMENT       reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    DECREMENT       reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    BITWISE_COMPLEMENT reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    NOT             reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    LPAREN          reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    KEYWORD_SIZEOF  reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    STRING          reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    FLOAT_NUMBER    reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    CHARACTER       reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    NUMBER          reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    BINARY_NUMBER   reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    HEXADECIMAL_NUMBER reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    OCTAL_NUMBER    reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    $end            reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    SEMICOLON       reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    COLON           reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    RBRACKET        reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    COMMA           reduce using rule 49 (primitive_types -> TYPE_CHAR .)
    LBRACKET        reduce using rule 49 (primitive_types -> TYPE_CHAR .)


state 19

    (50) primitive_types -> TYPE_INT .

    IDENTIFIER      reduce using rule 50 (primitive_types -> TYPE_INT .)
    TIMES           reduce using rule 50 (primitive_types -> TYPE_INT .)
    RPAREN          reduce using rule 50 (primitive_types -> TYPE_INT .)
    ASSIGN          reduce using rule 50 (primitive_types -> TYPE_INT .)
    TIMES_ASSIGN    reduce using rule 50 (primitive_types -> TYPE_INT .)
    DIVIDE_ASSIGN   reduce using rule 50 (primitive_types -> TYPE_INT .)
    MODULUS_ASSIGN  reduce using rule 50 (primitive_types -> TYPE_INT .)
    PLUS_ASSIGN     reduce using rule 50 (primitive_types -> TYPE_INT .)
    MINUS_ASSIGN    reduce using rule 50 (primitive_types -> TYPE_INT .)
    SHIFT_LEFT_ASSIGN reduce using rule 50 (primitive_types -> TYPE_INT .)
    SHIFT_RIGHT_ASSIGN reduce using rule 50 (primitive_types -> TYPE_INT .)
    BITWISE_AND_ASSIGN reduce using rule 50 (primitive_types -> TYPE_INT .)
    BITWISE_XOR_ASSIGN reduce using rule 50 (primitive_types -> TYPE_INT .)
    BITWISE_OR_ASSIGN reduce using rule 50 (primitive_types -> TYPE_INT .)
    MODULUS         reduce using rule 50 (primitive_types -> TYPE_INT .)
    DIVIDE          reduce using rule 50 (primitive_types -> TYPE_INT .)
    MINUS           reduce using rule 50 (primitive_types -> TYPE_INT .)
    PLUS            reduce using rule 50 (primitive_types -> TYPE_INT .)
    BITWISE_SHIFT_RIGHT reduce using rule 50 (primitive_types -> TYPE_INT .)
    BITWISE_SHIFT_LEFT reduce using rule 50 (primitive_types -> TYPE_INT .)
    LESS_EQUALS     reduce using rule 50 (primitive_types -> TYPE_INT .)
    LESS_THEN       reduce using rule 50 (primitive_types -> TYPE_INT .)
    GREATER_EQUALS  reduce using rule 50 (primitive_types -> TYPE_INT .)
    GREATER_THEN    reduce using rule 50 (primitive_types -> TYPE_INT .)
    NOT_EQUALS      reduce using rule 50 (primitive_types -> TYPE_INT .)
    EQUALS_THEN     reduce using rule 50 (primitive_types -> TYPE_INT .)
    BITWISE_AND     reduce using rule 50 (primitive_types -> TYPE_INT .)
    BITWISE_XOR     reduce using rule 50 (primitive_types -> TYPE_INT .)
    BITWISE_OR      reduce using rule 50 (primitive_types -> TYPE_INT .)
    LOGICAL_AND     reduce using rule 50 (primitive_types -> TYPE_INT .)
    LOGICAL_OR      reduce using rule 50 (primitive_types -> TYPE_INT .)
    QUESTION_MARK   reduce using rule 50 (primitive_types -> TYPE_INT .)
    KEYWORD_STRUCT  reduce using rule 50 (primitive_types -> TYPE_INT .)
    KEYWORD_UNION   reduce using rule 50 (primitive_types -> TYPE_INT .)
    TYPE_CHAR       reduce using rule 50 (primitive_types -> TYPE_INT .)
    TYPE_INT        reduce using rule 50 (primitive_types -> TYPE_INT .)
    TYPE_SHORT      reduce using rule 50 (primitive_types -> TYPE_INT .)
    TYPE_LONG       reduce using rule 50 (primitive_types -> TYPE_INT .)
    TYPE_FLOAT      reduce using rule 50 (primitive_types -> TYPE_INT .)
    TYPE_DOUBLE     reduce using rule 50 (primitive_types -> TYPE_INT .)
    TYPE_VOID       reduce using rule 50 (primitive_types -> TYPE_INT .)
    KEYWORD_STATIC  reduce using rule 50 (primitive_types -> TYPE_INT .)
    KEYWORD_UNSIGNED reduce using rule 50 (primitive_types -> TYPE_INT .)
    KEYWORD_VOLATILE reduce using rule 50 (primitive_types -> TYPE_INT .)
    KEYWORD_EXTERN  reduce using rule 50 (primitive_types -> TYPE_INT .)
    KEYWORD_SIGNED  reduce using rule 50 (primitive_types -> TYPE_INT .)
    KEYWORD_REGISTER reduce using rule 50 (primitive_types -> TYPE_INT .)
    KEYWORD_AUTO    reduce using rule 50 (primitive_types -> TYPE_INT .)
    INCREMENT       reduce using rule 50 (primitive_types -> TYPE_INT .)
    DECREMENT       reduce using rule 50 (primitive_types -> TYPE_INT .)
    BITWISE_COMPLEMENT reduce using rule 50 (primitive_types -> TYPE_INT .)
    NOT             reduce using rule 50 (primitive_types -> TYPE_INT .)
    LPAREN          reduce using rule 50 (primitive_types -> TYPE_INT .)
    KEYWORD_SIZEOF  reduce using rule 50 (primitive_types -> TYPE_INT .)
    STRING          reduce using rule 50 (primitive_types -> TYPE_INT .)
    FLOAT_NUMBER    reduce using rule 50 (primitive_types -> TYPE_INT .)
    CHARACTER       reduce using rule 50 (primitive_types -> TYPE_INT .)
    NUMBER          reduce using rule 50 (primitive_types -> TYPE_INT .)
    BINARY_NUMBER   reduce using rule 50 (primitive_types -> TYPE_INT .)
    HEXADECIMAL_NUMBER reduce using rule 50 (primitive_types -> TYPE_INT .)
    OCTAL_NUMBER    reduce using rule 50 (primitive_types -> TYPE_INT .)
    $end            reduce using rule 50 (primitive_types -> TYPE_INT .)
    SEMICOLON       reduce using rule 50 (primitive_types -> TYPE_INT .)
    COLON           reduce using rule 50 (primitive_types -> TYPE_INT .)
    RBRACKET        reduce using rule 50 (primitive_types -> TYPE_INT .)
    COMMA           reduce using rule 50 (primitive_types -> TYPE_INT .)
    LBRACKET        reduce using rule 50 (primitive_types -> TYPE_INT .)


state 20

    (51) primitive_types -> TYPE_SHORT .

    IDENTIFIER      reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    TIMES           reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    RPAREN          reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    ASSIGN          reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    TIMES_ASSIGN    reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    DIVIDE_ASSIGN   reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    MODULUS_ASSIGN  reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    PLUS_ASSIGN     reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    MINUS_ASSIGN    reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    SHIFT_LEFT_ASSIGN reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    SHIFT_RIGHT_ASSIGN reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    BITWISE_AND_ASSIGN reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    BITWISE_XOR_ASSIGN reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    BITWISE_OR_ASSIGN reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    MODULUS         reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    DIVIDE          reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    MINUS           reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    PLUS            reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    BITWISE_SHIFT_RIGHT reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    BITWISE_SHIFT_LEFT reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    LESS_EQUALS     reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    LESS_THEN       reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    GREATER_EQUALS  reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    GREATER_THEN    reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    NOT_EQUALS      reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    EQUALS_THEN     reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    BITWISE_AND     reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    BITWISE_XOR     reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    BITWISE_OR      reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    LOGICAL_AND     reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    LOGICAL_OR      reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    QUESTION_MARK   reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    KEYWORD_STRUCT  reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    KEYWORD_UNION   reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    TYPE_CHAR       reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    TYPE_INT        reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    TYPE_SHORT      reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    TYPE_LONG       reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    TYPE_FLOAT      reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    TYPE_DOUBLE     reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    TYPE_VOID       reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    KEYWORD_STATIC  reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    KEYWORD_UNSIGNED reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    KEYWORD_VOLATILE reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    KEYWORD_EXTERN  reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    KEYWORD_SIGNED  reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    KEYWORD_REGISTER reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    KEYWORD_AUTO    reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    INCREMENT       reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    DECREMENT       reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    BITWISE_COMPLEMENT reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    NOT             reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    LPAREN          reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    KEYWORD_SIZEOF  reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    STRING          reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    FLOAT_NUMBER    reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    CHARACTER       reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    NUMBER          reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    BINARY_NUMBER   reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    HEXADECIMAL_NUMBER reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    OCTAL_NUMBER    reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    $end            reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    SEMICOLON       reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    COLON           reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    RBRACKET        reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    COMMA           reduce using rule 51 (primitive_types -> TYPE_SHORT .)
    LBRACKET        reduce using rule 51 (primitive_types -> TYPE_SHORT .)


state 21

    (52) primitive_types -> TYPE_LONG .

    IDENTIFIER      reduce using rule 52 (primitive_types -> TYPE_LONG .)
    TIMES           reduce using rule 52 (primitive_types -> TYPE_LONG .)
    RPAREN          reduce using rule 52 (primitive_types -> TYPE_LONG .)
    ASSIGN          reduce using rule 52 (primitive_types -> TYPE_LONG .)
    TIMES_ASSIGN    reduce using rule 52 (primitive_types -> TYPE_LONG .)
    DIVIDE_ASSIGN   reduce using rule 52 (primitive_types -> TYPE_LONG .)
    MODULUS_ASSIGN  reduce using rule 52 (primitive_types -> TYPE_LONG .)
    PLUS_ASSIGN     reduce using rule 52 (primitive_types -> TYPE_LONG .)
    MINUS_ASSIGN    reduce using rule 52 (primitive_types -> TYPE_LONG .)
    SHIFT_LEFT_ASSIGN reduce using rule 52 (primitive_types -> TYPE_LONG .)
    SHIFT_RIGHT_ASSIGN reduce using rule 52 (primitive_types -> TYPE_LONG .)
    BITWISE_AND_ASSIGN reduce using rule 52 (primitive_types -> TYPE_LONG .)
    BITWISE_XOR_ASSIGN reduce using rule 52 (primitive_types -> TYPE_LONG .)
    BITWISE_OR_ASSIGN reduce using rule 52 (primitive_types -> TYPE_LONG .)
    MODULUS         reduce using rule 52 (primitive_types -> TYPE_LONG .)
    DIVIDE          reduce using rule 52 (primitive_types -> TYPE_LONG .)
    MINUS           reduce using rule 52 (primitive_types -> TYPE_LONG .)
    PLUS            reduce using rule 52 (primitive_types -> TYPE_LONG .)
    BITWISE_SHIFT_RIGHT reduce using rule 52 (primitive_types -> TYPE_LONG .)
    BITWISE_SHIFT_LEFT reduce using rule 52 (primitive_types -> TYPE_LONG .)
    LESS_EQUALS     reduce using rule 52 (primitive_types -> TYPE_LONG .)
    LESS_THEN       reduce using rule 52 (primitive_types -> TYPE_LONG .)
    GREATER_EQUALS  reduce using rule 52 (primitive_types -> TYPE_LONG .)
    GREATER_THEN    reduce using rule 52 (primitive_types -> TYPE_LONG .)
    NOT_EQUALS      reduce using rule 52 (primitive_types -> TYPE_LONG .)
    EQUALS_THEN     reduce using rule 52 (primitive_types -> TYPE_LONG .)
    BITWISE_AND     reduce using rule 52 (primitive_types -> TYPE_LONG .)
    BITWISE_XOR     reduce using rule 52 (primitive_types -> TYPE_LONG .)
    BITWISE_OR      reduce using rule 52 (primitive_types -> TYPE_LONG .)
    LOGICAL_AND     reduce using rule 52 (primitive_types -> TYPE_LONG .)
    LOGICAL_OR      reduce using rule 52 (primitive_types -> TYPE_LONG .)
    QUESTION_MARK   reduce using rule 52 (primitive_types -> TYPE_LONG .)
    KEYWORD_STRUCT  reduce using rule 52 (primitive_types -> TYPE_LONG .)
    KEYWORD_UNION   reduce using rule 52 (primitive_types -> TYPE_LONG .)
    TYPE_CHAR       reduce using rule 52 (primitive_types -> TYPE_LONG .)
    TYPE_INT        reduce using rule 52 (primitive_types -> TYPE_LONG .)
    TYPE_SHORT      reduce using rule 52 (primitive_types -> TYPE_LONG .)
    TYPE_LONG       reduce using rule 52 (primitive_types -> TYPE_LONG .)
    TYPE_FLOAT      reduce using rule 52 (primitive_types -> TYPE_LONG .)
    TYPE_DOUBLE     reduce using rule 52 (primitive_types -> TYPE_LONG .)
    TYPE_VOID       reduce using rule 52 (primitive_types -> TYPE_LONG .)
    KEYWORD_STATIC  reduce using rule 52 (primitive_types -> TYPE_LONG .)
    KEYWORD_UNSIGNED reduce using rule 52 (primitive_types -> TYPE_LONG .)
    KEYWORD_VOLATILE reduce using rule 52 (primitive_types -> TYPE_LONG .)
    KEYWORD_EXTERN  reduce using rule 52 (primitive_types -> TYPE_LONG .)
    KEYWORD_SIGNED  reduce using rule 52 (primitive_types -> TYPE_LONG .)
    KEYWORD_REGISTER reduce using rule 52 (primitive_types -> TYPE_LONG .)
    KEYWORD_AUTO    reduce using rule 52 (primitive_types -> TYPE_LONG .)
    INCREMENT       reduce using rule 52 (primitive_types -> TYPE_LONG .)
    DECREMENT       reduce using rule 52 (primitive_types -> TYPE_LONG .)
    BITWISE_COMPLEMENT reduce using rule 52 (primitive_types -> TYPE_LONG .)
    NOT             reduce using rule 52 (primitive_types -> TYPE_LONG .)
    LPAREN          reduce using rule 52 (primitive_types -> TYPE_LONG .)
    KEYWORD_SIZEOF  reduce using rule 52 (primitive_types -> TYPE_LONG .)
    STRING          reduce using rule 52 (primitive_types -> TYPE_LONG .)
    FLOAT_NUMBER    reduce using rule 52 (primitive_types -> TYPE_LONG .)
    CHARACTER       reduce using rule 52 (primitive_types -> TYPE_LONG .)
    NUMBER          reduce using rule 52 (primitive_types -> TYPE_LONG .)
    BINARY_NUMBER   reduce using rule 52 (primitive_types -> TYPE_LONG .)
    HEXADECIMAL_NUMBER reduce using rule 52 (primitive_types -> TYPE_LONG .)
    OCTAL_NUMBER    reduce using rule 52 (primitive_types -> TYPE_LONG .)
    $end            reduce using rule 52 (primitive_types -> TYPE_LONG .)
    SEMICOLON       reduce using rule 52 (primitive_types -> TYPE_LONG .)
    COLON           reduce using rule 52 (primitive_types -> TYPE_LONG .)
    RBRACKET        reduce using rule 52 (primitive_types -> TYPE_LONG .)
    COMMA           reduce using rule 52 (primitive_types -> TYPE_LONG .)
    LBRACKET        reduce using rule 52 (primitive_types -> TYPE_LONG .)


state 22

    (53) primitive_types -> TYPE_FLOAT .

    IDENTIFIER      reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    TIMES           reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    RPAREN          reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    ASSIGN          reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    TIMES_ASSIGN    reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    DIVIDE_ASSIGN   reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    MODULUS_ASSIGN  reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    PLUS_ASSIGN     reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    MINUS_ASSIGN    reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    SHIFT_LEFT_ASSIGN reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    SHIFT_RIGHT_ASSIGN reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    BITWISE_AND_ASSIGN reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    BITWISE_XOR_ASSIGN reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    BITWISE_OR_ASSIGN reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    MODULUS         reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    DIVIDE          reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    MINUS           reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    PLUS            reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    BITWISE_SHIFT_RIGHT reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    BITWISE_SHIFT_LEFT reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    LESS_EQUALS     reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    LESS_THEN       reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    GREATER_EQUALS  reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    GREATER_THEN    reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    NOT_EQUALS      reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    EQUALS_THEN     reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    BITWISE_AND     reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    BITWISE_XOR     reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    BITWISE_OR      reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    LOGICAL_AND     reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    LOGICAL_OR      reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    QUESTION_MARK   reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_STRUCT  reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_UNION   reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    TYPE_CHAR       reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    TYPE_INT        reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    TYPE_SHORT      reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    TYPE_LONG       reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    TYPE_FLOAT      reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    TYPE_DOUBLE     reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    TYPE_VOID       reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_STATIC  reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_UNSIGNED reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_VOLATILE reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_EXTERN  reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_SIGNED  reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_REGISTER reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_AUTO    reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    INCREMENT       reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    DECREMENT       reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    BITWISE_COMPLEMENT reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    NOT             reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    LPAREN          reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    KEYWORD_SIZEOF  reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    STRING          reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    FLOAT_NUMBER    reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    CHARACTER       reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    NUMBER          reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    BINARY_NUMBER   reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    HEXADECIMAL_NUMBER reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    OCTAL_NUMBER    reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    $end            reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    SEMICOLON       reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    COLON           reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    RBRACKET        reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    COMMA           reduce using rule 53 (primitive_types -> TYPE_FLOAT .)
    LBRACKET        reduce using rule 53 (primitive_types -> TYPE_FLOAT .)


state 23

    (54) primitive_types -> TYPE_DOUBLE .

    IDENTIFIER      reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    TIMES           reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    RPAREN          reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    ASSIGN          reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    TIMES_ASSIGN    reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    DIVIDE_ASSIGN   reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    MODULUS_ASSIGN  reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    PLUS_ASSIGN     reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    MINUS_ASSIGN    reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    SHIFT_LEFT_ASSIGN reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    SHIFT_RIGHT_ASSIGN reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_AND_ASSIGN reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_XOR_ASSIGN reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_OR_ASSIGN reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    MODULUS         reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    DIVIDE          reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    MINUS           reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    PLUS            reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_SHIFT_RIGHT reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_SHIFT_LEFT reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    LESS_EQUALS     reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    LESS_THEN       reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    GREATER_EQUALS  reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    GREATER_THEN    reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    NOT_EQUALS      reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    EQUALS_THEN     reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_AND     reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_XOR     reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_OR      reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    LOGICAL_AND     reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    LOGICAL_OR      reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    QUESTION_MARK   reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_STRUCT  reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_UNION   reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    TYPE_CHAR       reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    TYPE_INT        reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    TYPE_SHORT      reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    TYPE_LONG       reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    TYPE_FLOAT      reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    TYPE_DOUBLE     reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    TYPE_VOID       reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_STATIC  reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_UNSIGNED reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_VOLATILE reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_EXTERN  reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_SIGNED  reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_REGISTER reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_AUTO    reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    INCREMENT       reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    DECREMENT       reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    BITWISE_COMPLEMENT reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    NOT             reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    LPAREN          reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    KEYWORD_SIZEOF  reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    STRING          reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    FLOAT_NUMBER    reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    CHARACTER       reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    NUMBER          reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    BINARY_NUMBER   reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    HEXADECIMAL_NUMBER reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    OCTAL_NUMBER    reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    $end            reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    SEMICOLON       reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    COLON           reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    RBRACKET        reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    COMMA           reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)
    LBRACKET        reduce using rule 54 (primitive_types -> TYPE_DOUBLE .)


state 24

    (55) primitive_types -> TYPE_VOID .

    IDENTIFIER      reduce using rule 55 (primitive_types -> TYPE_VOID .)
    TIMES           reduce using rule 55 (primitive_types -> TYPE_VOID .)
    RPAREN          reduce using rule 55 (primitive_types -> TYPE_VOID .)
    ASSIGN          reduce using rule 55 (primitive_types -> TYPE_VOID .)
    TIMES_ASSIGN    reduce using rule 55 (primitive_types -> TYPE_VOID .)
    DIVIDE_ASSIGN   reduce using rule 55 (primitive_types -> TYPE_VOID .)
    MODULUS_ASSIGN  reduce using rule 55 (primitive_types -> TYPE_VOID .)
    PLUS_ASSIGN     reduce using rule 55 (primitive_types -> TYPE_VOID .)
    MINUS_ASSIGN    reduce using rule 55 (primitive_types -> TYPE_VOID .)
    SHIFT_LEFT_ASSIGN reduce using rule 55 (primitive_types -> TYPE_VOID .)
    SHIFT_RIGHT_ASSIGN reduce using rule 55 (primitive_types -> TYPE_VOID .)
    BITWISE_AND_ASSIGN reduce using rule 55 (primitive_types -> TYPE_VOID .)
    BITWISE_XOR_ASSIGN reduce using rule 55 (primitive_types -> TYPE_VOID .)
    BITWISE_OR_ASSIGN reduce using rule 55 (primitive_types -> TYPE_VOID .)
    MODULUS         reduce using rule 55 (primitive_types -> TYPE_VOID .)
    DIVIDE          reduce using rule 55 (primitive_types -> TYPE_VOID .)
    MINUS           reduce using rule 55 (primitive_types -> TYPE_VOID .)
    PLUS            reduce using rule 55 (primitive_types -> TYPE_VOID .)
    BITWISE_SHIFT_RIGHT reduce using rule 55 (primitive_types -> TYPE_VOID .)
    BITWISE_SHIFT_LEFT reduce using rule 55 (primitive_types -> TYPE_VOID .)
    LESS_EQUALS     reduce using rule 55 (primitive_types -> TYPE_VOID .)
    LESS_THEN       reduce using rule 55 (primitive_types -> TYPE_VOID .)
    GREATER_EQUALS  reduce using rule 55 (primitive_types -> TYPE_VOID .)
    GREATER_THEN    reduce using rule 55 (primitive_types -> TYPE_VOID .)
    NOT_EQUALS      reduce using rule 55 (primitive_types -> TYPE_VOID .)
    EQUALS_THEN     reduce using rule 55 (primitive_types -> TYPE_VOID .)
    BITWISE_AND     reduce using rule 55 (primitive_types -> TYPE_VOID .)
    BITWISE_XOR     reduce using rule 55 (primitive_types -> TYPE_VOID .)
    BITWISE_OR      reduce using rule 55 (primitive_types -> TYPE_VOID .)
    LOGICAL_AND     reduce using rule 55 (primitive_types -> TYPE_VOID .)
    LOGICAL_OR      reduce using rule 55 (primitive_types -> TYPE_VOID .)
    QUESTION_MARK   reduce using rule 55 (primitive_types -> TYPE_VOID .)
    KEYWORD_STRUCT  reduce using rule 55 (primitive_types -> TYPE_VOID .)
    KEYWORD_UNION   reduce using rule 55 (primitive_types -> TYPE_VOID .)
    TYPE_CHAR       reduce using rule 55 (primitive_types -> TYPE_VOID .)
    TYPE_INT        reduce using rule 55 (primitive_types -> TYPE_VOID .)
    TYPE_SHORT      reduce using rule 55 (primitive_types -> TYPE_VOID .)
    TYPE_LONG       reduce using rule 55 (primitive_types -> TYPE_VOID .)
    TYPE_FLOAT      reduce using rule 55 (primitive_types -> TYPE_VOID .)
    TYPE_DOUBLE     reduce using rule 55 (primitive_types -> TYPE_VOID .)
    TYPE_VOID       reduce using rule 55 (primitive_types -> TYPE_VOID .)
    KEYWORD_STATIC  reduce using rule 55 (primitive_types -> TYPE_VOID .)
    KEYWORD_UNSIGNED reduce using rule 55 (primitive_types -> TYPE_VOID .)
    KEYWORD_VOLATILE reduce using rule 55 (primitive_types -> TYPE_VOID .)
    KEYWORD_EXTERN  reduce using rule 55 (primitive_types -> TYPE_VOID .)
    KEYWORD_SIGNED  reduce using rule 55 (primitive_types -> TYPE_VOID .)
    KEYWORD_REGISTER reduce using rule 55 (primitive_types -> TYPE_VOID .)
    KEYWORD_AUTO    reduce using rule 55 (primitive_types -> TYPE_VOID .)
    INCREMENT       reduce using rule 55 (primitive_types -> TYPE_VOID .)
    DECREMENT       reduce using rule 55 (primitive_types -> TYPE_VOID .)
    BITWISE_COMPLEMENT reduce using rule 55 (primitive_types -> TYPE_VOID .)
    NOT             reduce using rule 55 (primitive_types -> TYPE_VOID .)
    LPAREN          reduce using rule 55 (primitive_types -> TYPE_VOID .)
    KEYWORD_SIZEOF  reduce using rule 55 (primitive_types -> TYPE_VOID .)
    STRING          reduce using rule 55 (primitive_types -> TYPE_VOID .)
    FLOAT_NUMBER    reduce using rule 55 (primitive_types -> TYPE_VOID .)
    CHARACTER       reduce using rule 55 (primitive_types -> TYPE_VOID .)
    NUMBER          reduce using rule 55 (primitive_types -> TYPE_VOID .)
    BINARY_NUMBER   reduce using rule 55 (primitive_types -> TYPE_VOID .)
    HEXADECIMAL_NUMBER reduce using rule 55 (primitive_types -> TYPE_VOID .)
    OCTAL_NUMBER    reduce using rule 55 (primitive_types -> TYPE_VOID .)
    $end            reduce using rule 55 (primitive_types -> TYPE_VOID .)
    SEMICOLON       reduce using rule 55 (primitive_types -> TYPE_VOID .)
    COLON           reduce using rule 55 (primitive_types -> TYPE_VOID .)
    RBRACKET        reduce using rule 55 (primitive_types -> TYPE_VOID .)
    COMMA           reduce using rule 55 (primitive_types -> TYPE_VOID .)
    LBRACKET        reduce using rule 55 (primitive_types -> TYPE_VOID .)


state 25

    (40) type_modifier -> KEYWORD_STATIC .

    KEYWORD_STRUCT  reduce using rule 40 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_UNION   reduce using rule 40 (type_modifier -> KEYWORD_STATIC .)
    TYPE_CHAR       reduce using rule 40 (type_modifier -> KEYWORD_STATIC .)
    TYPE_INT        reduce using rule 40 (type_modifier -> KEYWORD_STATIC .)
    TYPE_SHORT      reduce using rule 40 (type_modifier -> KEYWORD_STATIC .)
    TYPE_LONG       reduce using rule 40 (type_modifier -> KEYWORD_STATIC .)
    TYPE_FLOAT      reduce using rule 40 (type_modifier -> KEYWORD_STATIC .)
    TYPE_DOUBLE     reduce using rule 40 (type_modifier -> KEYWORD_STATIC .)
    TYPE_VOID       reduce using rule 40 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_STATIC  reduce using rule 40 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_UNSIGNED reduce using rule 40 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_VOLATILE reduce using rule 40 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_EXTERN  reduce using rule 40 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_SIGNED  reduce using rule 40 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_REGISTER reduce using rule 40 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_AUTO    reduce using rule 40 (type_modifier -> KEYWORD_STATIC .)


state 26

    (41) type_modifier -> KEYWORD_UNSIGNED .

    KEYWORD_STRUCT  reduce using rule 41 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_UNION   reduce using rule 41 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_CHAR       reduce using rule 41 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_INT        reduce using rule 41 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_SHORT      reduce using rule 41 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_LONG       reduce using rule 41 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_FLOAT      reduce using rule 41 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_DOUBLE     reduce using rule 41 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_VOID       reduce using rule 41 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_STATIC  reduce using rule 41 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_UNSIGNED reduce using rule 41 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_VOLATILE reduce using rule 41 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_EXTERN  reduce using rule 41 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_SIGNED  reduce using rule 41 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_REGISTER reduce using rule 41 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_AUTO    reduce using rule 41 (type_modifier -> KEYWORD_UNSIGNED .)


state 27

    (42) type_modifier -> KEYWORD_VOLATILE .

    KEYWORD_STRUCT  reduce using rule 42 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_UNION   reduce using rule 42 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_CHAR       reduce using rule 42 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_INT        reduce using rule 42 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_SHORT      reduce using rule 42 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_LONG       reduce using rule 42 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_FLOAT      reduce using rule 42 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_DOUBLE     reduce using rule 42 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_VOID       reduce using rule 42 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_STATIC  reduce using rule 42 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_UNSIGNED reduce using rule 42 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_VOLATILE reduce using rule 42 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_EXTERN  reduce using rule 42 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_SIGNED  reduce using rule 42 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_REGISTER reduce using rule 42 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_AUTO    reduce using rule 42 (type_modifier -> KEYWORD_VOLATILE .)


state 28

    (43) type_modifier -> KEYWORD_EXTERN .

    KEYWORD_STRUCT  reduce using rule 43 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_UNION   reduce using rule 43 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_CHAR       reduce using rule 43 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_INT        reduce using rule 43 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_SHORT      reduce using rule 43 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_LONG       reduce using rule 43 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_FLOAT      reduce using rule 43 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_DOUBLE     reduce using rule 43 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_VOID       reduce using rule 43 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_STATIC  reduce using rule 43 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_UNSIGNED reduce using rule 43 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_VOLATILE reduce using rule 43 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_EXTERN  reduce using rule 43 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_SIGNED  reduce using rule 43 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_REGISTER reduce using rule 43 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_AUTO    reduce using rule 43 (type_modifier -> KEYWORD_EXTERN .)


state 29

    (44) type_modifier -> KEYWORD_SIGNED .

    KEYWORD_STRUCT  reduce using rule 44 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_UNION   reduce using rule 44 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_CHAR       reduce using rule 44 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_INT        reduce using rule 44 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_SHORT      reduce using rule 44 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_LONG       reduce using rule 44 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_FLOAT      reduce using rule 44 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_DOUBLE     reduce using rule 44 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_VOID       reduce using rule 44 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_STATIC  reduce using rule 44 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_UNSIGNED reduce using rule 44 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_VOLATILE reduce using rule 44 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_EXTERN  reduce using rule 44 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_SIGNED  reduce using rule 44 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_REGISTER reduce using rule 44 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_AUTO    reduce using rule 44 (type_modifier -> KEYWORD_SIGNED .)


state 30

    (45) type_modifier -> KEYWORD_REGISTER .

    KEYWORD_STRUCT  reduce using rule 45 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_UNION   reduce using rule 45 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_CHAR       reduce using rule 45 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_INT        reduce using rule 45 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_SHORT      reduce using rule 45 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_LONG       reduce using rule 45 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_FLOAT      reduce using rule 45 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_DOUBLE     reduce using rule 45 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_VOID       reduce using rule 45 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_STATIC  reduce using rule 45 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_UNSIGNED reduce using rule 45 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_VOLATILE reduce using rule 45 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_EXTERN  reduce using rule 45 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_SIGNED  reduce using rule 45 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_REGISTER reduce using rule 45 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_AUTO    reduce using rule 45 (type_modifier -> KEYWORD_REGISTER .)


state 31

    (46) type_modifier -> KEYWORD_AUTO .

    KEYWORD_STRUCT  reduce using rule 46 (type_modifier -> KEYWORD_AUTO .)
    KEYWORD_UNION   reduce using rule 46 (type_modifier -> KEYWORD_AUTO .)
    TYPE_CHAR       reduce using rule 46 (type_modifier -> KEYWORD_AUTO .)
    TYPE_INT        reduce using rule 46 (type_modifier -> KEYWORD_AUTO .)
    TYPE_SHORT      reduce using rule 46 (type_modifier -> KEYWORD_AUTO .)
    TYPE_LONG       reduce using rule 46 (type_modifier -> KEYWORD_AUTO .)
    TYPE_FLOAT      reduce using rule 46 (type_modifier -> KEYWORD_AUTO .)
    TYPE_DOUBLE     reduce using rule 46 (type_modifier -> KEYWORD_AUTO .)
    TYPE_VOID       reduce using rule 46 (type_modifier -> KEYWORD_AUTO .)
    KEYWORD_STATIC  reduce using rule 46 (type_modifier -> KEYWORD_AUTO .)
    KEYWORD_UNSIGNED reduce using rule 46 (type_modifier -> KEYWORD_AUTO .)
    KEYWORD_VOLATILE reduce using rule 46 (type_modifier -> KEYWORD_AUTO .)
    KEYWORD_EXTERN  reduce using rule 46 (type_modifier -> KEYWORD_AUTO .)
    KEYWORD_SIGNED  reduce using rule 46 (type_modifier -> KEYWORD_AUTO .)
    KEYWORD_REGISTER reduce using rule 46 (type_modifier -> KEYWORD_AUTO .)
    KEYWORD_AUTO    reduce using rule 46 (type_modifier -> KEYWORD_AUTO .)


state 32

    (121) unary_exp -> prefix_exp .

    ASSIGN          reduce using rule 121 (unary_exp -> prefix_exp .)
    TIMES_ASSIGN    reduce using rule 121 (unary_exp -> prefix_exp .)
    DIVIDE_ASSIGN   reduce using rule 121 (unary_exp -> prefix_exp .)
    MODULUS_ASSIGN  reduce using rule 121 (unary_exp -> prefix_exp .)
    PLUS_ASSIGN     reduce using rule 121 (unary_exp -> prefix_exp .)
    MINUS_ASSIGN    reduce using rule 121 (unary_exp -> prefix_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 121 (unary_exp -> prefix_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 121 (unary_exp -> prefix_exp .)
    BITWISE_AND_ASSIGN reduce using rule 121 (unary_exp -> prefix_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 121 (unary_exp -> prefix_exp .)
    BITWISE_OR_ASSIGN reduce using rule 121 (unary_exp -> prefix_exp .)
    MODULUS         reduce using rule 121 (unary_exp -> prefix_exp .)
    DIVIDE          reduce using rule 121 (unary_exp -> prefix_exp .)
    TIMES           reduce using rule 121 (unary_exp -> prefix_exp .)
    MINUS           reduce using rule 121 (unary_exp -> prefix_exp .)
    PLUS            reduce using rule 121 (unary_exp -> prefix_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 121 (unary_exp -> prefix_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 121 (unary_exp -> prefix_exp .)
    LESS_EQUALS     reduce using rule 121 (unary_exp -> prefix_exp .)
    LESS_THEN       reduce using rule 121 (unary_exp -> prefix_exp .)
    GREATER_EQUALS  reduce using rule 121 (unary_exp -> prefix_exp .)
    GREATER_THEN    reduce using rule 121 (unary_exp -> prefix_exp .)
    NOT_EQUALS      reduce using rule 121 (unary_exp -> prefix_exp .)
    EQUALS_THEN     reduce using rule 121 (unary_exp -> prefix_exp .)
    BITWISE_AND     reduce using rule 121 (unary_exp -> prefix_exp .)
    BITWISE_XOR     reduce using rule 121 (unary_exp -> prefix_exp .)
    BITWISE_OR      reduce using rule 121 (unary_exp -> prefix_exp .)
    LOGICAL_AND     reduce using rule 121 (unary_exp -> prefix_exp .)
    LOGICAL_OR      reduce using rule 121 (unary_exp -> prefix_exp .)
    QUESTION_MARK   reduce using rule 121 (unary_exp -> prefix_exp .)
    KEYWORD_STRUCT  reduce using rule 121 (unary_exp -> prefix_exp .)
    KEYWORD_UNION   reduce using rule 121 (unary_exp -> prefix_exp .)
    TYPE_CHAR       reduce using rule 121 (unary_exp -> prefix_exp .)
    TYPE_INT        reduce using rule 121 (unary_exp -> prefix_exp .)
    TYPE_SHORT      reduce using rule 121 (unary_exp -> prefix_exp .)
    TYPE_LONG       reduce using rule 121 (unary_exp -> prefix_exp .)
    TYPE_FLOAT      reduce using rule 121 (unary_exp -> prefix_exp .)
    TYPE_DOUBLE     reduce using rule 121 (unary_exp -> prefix_exp .)
    TYPE_VOID       reduce using rule 121 (unary_exp -> prefix_exp .)
    KEYWORD_STATIC  reduce using rule 121 (unary_exp -> prefix_exp .)
    KEYWORD_UNSIGNED reduce using rule 121 (unary_exp -> prefix_exp .)
    KEYWORD_VOLATILE reduce using rule 121 (unary_exp -> prefix_exp .)
    KEYWORD_EXTERN  reduce using rule 121 (unary_exp -> prefix_exp .)
    KEYWORD_SIGNED  reduce using rule 121 (unary_exp -> prefix_exp .)
    KEYWORD_REGISTER reduce using rule 121 (unary_exp -> prefix_exp .)
    KEYWORD_AUTO    reduce using rule 121 (unary_exp -> prefix_exp .)
    INCREMENT       reduce using rule 121 (unary_exp -> prefix_exp .)
    DECREMENT       reduce using rule 121 (unary_exp -> prefix_exp .)
    BITWISE_COMPLEMENT reduce using rule 121 (unary_exp -> prefix_exp .)
    NOT             reduce using rule 121 (unary_exp -> prefix_exp .)
    LPAREN          reduce using rule 121 (unary_exp -> prefix_exp .)
    KEYWORD_SIZEOF  reduce using rule 121 (unary_exp -> prefix_exp .)
    IDENTIFIER      reduce using rule 121 (unary_exp -> prefix_exp .)
    STRING          reduce using rule 121 (unary_exp -> prefix_exp .)
    FLOAT_NUMBER    reduce using rule 121 (unary_exp -> prefix_exp .)
    CHARACTER       reduce using rule 121 (unary_exp -> prefix_exp .)
    NUMBER          reduce using rule 121 (unary_exp -> prefix_exp .)
    BINARY_NUMBER   reduce using rule 121 (unary_exp -> prefix_exp .)
    HEXADECIMAL_NUMBER reduce using rule 121 (unary_exp -> prefix_exp .)
    OCTAL_NUMBER    reduce using rule 121 (unary_exp -> prefix_exp .)
    $end            reduce using rule 121 (unary_exp -> prefix_exp .)
    RPAREN          reduce using rule 121 (unary_exp -> prefix_exp .)
    SEMICOLON       reduce using rule 121 (unary_exp -> prefix_exp .)
    COLON           reduce using rule 121 (unary_exp -> prefix_exp .)
    RBRACKET        reduce using rule 121 (unary_exp -> prefix_exp .)
    COMMA           reduce using rule 121 (unary_exp -> prefix_exp .)


state 33

    (76) ternary_conditional_exp -> logical_exp . QUESTION_MARK expression COLON ternary_conditional_exp
    (77) ternary_conditional_exp -> logical_exp .

    QUESTION_MARK   shift and go to state 106
    KEYWORD_STRUCT  reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    KEYWORD_UNION   reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    TYPE_CHAR       reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    TYPE_INT        reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    TYPE_SHORT      reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    TYPE_LONG       reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    TYPE_FLOAT      reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    TYPE_DOUBLE     reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    TYPE_VOID       reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    KEYWORD_STATIC  reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    KEYWORD_UNSIGNED reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    KEYWORD_VOLATILE reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    KEYWORD_EXTERN  reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    KEYWORD_SIGNED  reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    KEYWORD_REGISTER reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    KEYWORD_AUTO    reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    INCREMENT       reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    DECREMENT       reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    BITWISE_AND     reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    TIMES           reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    PLUS            reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    MINUS           reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    BITWISE_COMPLEMENT reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    NOT             reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    LPAREN          reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    KEYWORD_SIZEOF  reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    IDENTIFIER      reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    STRING          reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    FLOAT_NUMBER    reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    CHARACTER       reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    NUMBER          reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    BINARY_NUMBER   reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    HEXADECIMAL_NUMBER reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    OCTAL_NUMBER    reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    $end            reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    RPAREN          reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    SEMICOLON       reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    COLON           reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    RBRACKET        reduce using rule 77 (ternary_conditional_exp -> logical_exp .)
    COMMA           reduce using rule 77 (ternary_conditional_exp -> logical_exp .)


state 34

    (122) prefix_exp -> postfix_exp .
    (133) postfix_exp -> postfix_exp . LBRACKET expression RBRACKET
    (134) postfix_exp -> postfix_exp . LPAREN RPAREN
    (135) postfix_exp -> postfix_exp . LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> postfix_exp . DOT IDENTIFIER
    (137) postfix_exp -> postfix_exp . ARROW IDENTIFIER
    (138) postfix_exp -> postfix_exp . INCREMENT
    (139) postfix_exp -> postfix_exp . DECREMENT

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    ASSIGN          reduce using rule 122 (prefix_exp -> postfix_exp .)
    TIMES_ASSIGN    reduce using rule 122 (prefix_exp -> postfix_exp .)
    DIVIDE_ASSIGN   reduce using rule 122 (prefix_exp -> postfix_exp .)
    MODULUS_ASSIGN  reduce using rule 122 (prefix_exp -> postfix_exp .)
    PLUS_ASSIGN     reduce using rule 122 (prefix_exp -> postfix_exp .)
    MINUS_ASSIGN    reduce using rule 122 (prefix_exp -> postfix_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 122 (prefix_exp -> postfix_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 122 (prefix_exp -> postfix_exp .)
    BITWISE_AND_ASSIGN reduce using rule 122 (prefix_exp -> postfix_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 122 (prefix_exp -> postfix_exp .)
    BITWISE_OR_ASSIGN reduce using rule 122 (prefix_exp -> postfix_exp .)
    MODULUS         reduce using rule 122 (prefix_exp -> postfix_exp .)
    DIVIDE          reduce using rule 122 (prefix_exp -> postfix_exp .)
    TIMES           reduce using rule 122 (prefix_exp -> postfix_exp .)
    MINUS           reduce using rule 122 (prefix_exp -> postfix_exp .)
    PLUS            reduce using rule 122 (prefix_exp -> postfix_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 122 (prefix_exp -> postfix_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 122 (prefix_exp -> postfix_exp .)
    LESS_EQUALS     reduce using rule 122 (prefix_exp -> postfix_exp .)
    LESS_THEN       reduce using rule 122 (prefix_exp -> postfix_exp .)
    GREATER_EQUALS  reduce using rule 122 (prefix_exp -> postfix_exp .)
    GREATER_THEN    reduce using rule 122 (prefix_exp -> postfix_exp .)
    NOT_EQUALS      reduce using rule 122 (prefix_exp -> postfix_exp .)
    EQUALS_THEN     reduce using rule 122 (prefix_exp -> postfix_exp .)
    BITWISE_AND     reduce using rule 122 (prefix_exp -> postfix_exp .)
    BITWISE_XOR     reduce using rule 122 (prefix_exp -> postfix_exp .)
    BITWISE_OR      reduce using rule 122 (prefix_exp -> postfix_exp .)
    LOGICAL_AND     reduce using rule 122 (prefix_exp -> postfix_exp .)
    LOGICAL_OR      reduce using rule 122 (prefix_exp -> postfix_exp .)
    QUESTION_MARK   reduce using rule 122 (prefix_exp -> postfix_exp .)
    KEYWORD_STRUCT  reduce using rule 122 (prefix_exp -> postfix_exp .)
    KEYWORD_UNION   reduce using rule 122 (prefix_exp -> postfix_exp .)
    TYPE_CHAR       reduce using rule 122 (prefix_exp -> postfix_exp .)
    TYPE_INT        reduce using rule 122 (prefix_exp -> postfix_exp .)
    TYPE_SHORT      reduce using rule 122 (prefix_exp -> postfix_exp .)
    TYPE_LONG       reduce using rule 122 (prefix_exp -> postfix_exp .)
    TYPE_FLOAT      reduce using rule 122 (prefix_exp -> postfix_exp .)
    TYPE_DOUBLE     reduce using rule 122 (prefix_exp -> postfix_exp .)
    TYPE_VOID       reduce using rule 122 (prefix_exp -> postfix_exp .)
    KEYWORD_STATIC  reduce using rule 122 (prefix_exp -> postfix_exp .)
    KEYWORD_UNSIGNED reduce using rule 122 (prefix_exp -> postfix_exp .)
    KEYWORD_VOLATILE reduce using rule 122 (prefix_exp -> postfix_exp .)
    KEYWORD_EXTERN  reduce using rule 122 (prefix_exp -> postfix_exp .)
    KEYWORD_SIGNED  reduce using rule 122 (prefix_exp -> postfix_exp .)
    KEYWORD_REGISTER reduce using rule 122 (prefix_exp -> postfix_exp .)
    KEYWORD_AUTO    reduce using rule 122 (prefix_exp -> postfix_exp .)
    BITWISE_COMPLEMENT reduce using rule 122 (prefix_exp -> postfix_exp .)
    NOT             reduce using rule 122 (prefix_exp -> postfix_exp .)
    KEYWORD_SIZEOF  reduce using rule 122 (prefix_exp -> postfix_exp .)
    IDENTIFIER      reduce using rule 122 (prefix_exp -> postfix_exp .)
    STRING          reduce using rule 122 (prefix_exp -> postfix_exp .)
    FLOAT_NUMBER    reduce using rule 122 (prefix_exp -> postfix_exp .)
    CHARACTER       reduce using rule 122 (prefix_exp -> postfix_exp .)
    NUMBER          reduce using rule 122 (prefix_exp -> postfix_exp .)
    BINARY_NUMBER   reduce using rule 122 (prefix_exp -> postfix_exp .)
    HEXADECIMAL_NUMBER reduce using rule 122 (prefix_exp -> postfix_exp .)
    OCTAL_NUMBER    reduce using rule 122 (prefix_exp -> postfix_exp .)
    $end            reduce using rule 122 (prefix_exp -> postfix_exp .)
    RPAREN          reduce using rule 122 (prefix_exp -> postfix_exp .)
    SEMICOLON       reduce using rule 122 (prefix_exp -> postfix_exp .)
    COLON           reduce using rule 122 (prefix_exp -> postfix_exp .)
    RBRACKET        reduce using rule 122 (prefix_exp -> postfix_exp .)
    COMMA           reduce using rule 122 (prefix_exp -> postfix_exp .)
    LBRACKET        shift and go to state 107
    LPAREN          shift and go to state 108
    DOT             shift and go to state 109
    ARROW           shift and go to state 110
    INCREMENT       shift and go to state 111
    DECREMENT       shift and go to state 112

  ! INCREMENT       [ reduce using rule 122 (prefix_exp -> postfix_exp .) ]
  ! DECREMENT       [ reduce using rule 122 (prefix_exp -> postfix_exp .) ]
  ! LPAREN          [ reduce using rule 122 (prefix_exp -> postfix_exp .) ]


state 35

    (123) prefix_exp -> INCREMENT . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    unary_exp                      shift and go to state 113
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 36

    (124) prefix_exp -> DECREMENT . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    unary_exp                      shift and go to state 114
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 37

    (125) prefix_exp -> unary_operator . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    unary_operator                 shift and go to state 37
    unary_exp                      shift and go to state 115
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 38

    (126) prefix_exp -> cast_exp . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    cast_exp                       shift and go to state 38
    unary_exp                      shift and go to state 116
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 39

    (127) prefix_exp -> sizeof_exp .

    ASSIGN          reduce using rule 127 (prefix_exp -> sizeof_exp .)
    TIMES_ASSIGN    reduce using rule 127 (prefix_exp -> sizeof_exp .)
    DIVIDE_ASSIGN   reduce using rule 127 (prefix_exp -> sizeof_exp .)
    MODULUS_ASSIGN  reduce using rule 127 (prefix_exp -> sizeof_exp .)
    PLUS_ASSIGN     reduce using rule 127 (prefix_exp -> sizeof_exp .)
    MINUS_ASSIGN    reduce using rule 127 (prefix_exp -> sizeof_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 127 (prefix_exp -> sizeof_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 127 (prefix_exp -> sizeof_exp .)
    BITWISE_AND_ASSIGN reduce using rule 127 (prefix_exp -> sizeof_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 127 (prefix_exp -> sizeof_exp .)
    BITWISE_OR_ASSIGN reduce using rule 127 (prefix_exp -> sizeof_exp .)
    MODULUS         reduce using rule 127 (prefix_exp -> sizeof_exp .)
    DIVIDE          reduce using rule 127 (prefix_exp -> sizeof_exp .)
    TIMES           reduce using rule 127 (prefix_exp -> sizeof_exp .)
    MINUS           reduce using rule 127 (prefix_exp -> sizeof_exp .)
    PLUS            reduce using rule 127 (prefix_exp -> sizeof_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 127 (prefix_exp -> sizeof_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 127 (prefix_exp -> sizeof_exp .)
    LESS_EQUALS     reduce using rule 127 (prefix_exp -> sizeof_exp .)
    LESS_THEN       reduce using rule 127 (prefix_exp -> sizeof_exp .)
    GREATER_EQUALS  reduce using rule 127 (prefix_exp -> sizeof_exp .)
    GREATER_THEN    reduce using rule 127 (prefix_exp -> sizeof_exp .)
    NOT_EQUALS      reduce using rule 127 (prefix_exp -> sizeof_exp .)
    EQUALS_THEN     reduce using rule 127 (prefix_exp -> sizeof_exp .)
    BITWISE_AND     reduce using rule 127 (prefix_exp -> sizeof_exp .)
    BITWISE_XOR     reduce using rule 127 (prefix_exp -> sizeof_exp .)
    BITWISE_OR      reduce using rule 127 (prefix_exp -> sizeof_exp .)
    LOGICAL_AND     reduce using rule 127 (prefix_exp -> sizeof_exp .)
    LOGICAL_OR      reduce using rule 127 (prefix_exp -> sizeof_exp .)
    QUESTION_MARK   reduce using rule 127 (prefix_exp -> sizeof_exp .)
    KEYWORD_STRUCT  reduce using rule 127 (prefix_exp -> sizeof_exp .)
    KEYWORD_UNION   reduce using rule 127 (prefix_exp -> sizeof_exp .)
    TYPE_CHAR       reduce using rule 127 (prefix_exp -> sizeof_exp .)
    TYPE_INT        reduce using rule 127 (prefix_exp -> sizeof_exp .)
    TYPE_SHORT      reduce using rule 127 (prefix_exp -> sizeof_exp .)
    TYPE_LONG       reduce using rule 127 (prefix_exp -> sizeof_exp .)
    TYPE_FLOAT      reduce using rule 127 (prefix_exp -> sizeof_exp .)
    TYPE_DOUBLE     reduce using rule 127 (prefix_exp -> sizeof_exp .)
    TYPE_VOID       reduce using rule 127 (prefix_exp -> sizeof_exp .)
    KEYWORD_STATIC  reduce using rule 127 (prefix_exp -> sizeof_exp .)
    KEYWORD_UNSIGNED reduce using rule 127 (prefix_exp -> sizeof_exp .)
    KEYWORD_VOLATILE reduce using rule 127 (prefix_exp -> sizeof_exp .)
    KEYWORD_EXTERN  reduce using rule 127 (prefix_exp -> sizeof_exp .)
    KEYWORD_SIGNED  reduce using rule 127 (prefix_exp -> sizeof_exp .)
    KEYWORD_REGISTER reduce using rule 127 (prefix_exp -> sizeof_exp .)
    KEYWORD_AUTO    reduce using rule 127 (prefix_exp -> sizeof_exp .)
    INCREMENT       reduce using rule 127 (prefix_exp -> sizeof_exp .)
    DECREMENT       reduce using rule 127 (prefix_exp -> sizeof_exp .)
    BITWISE_COMPLEMENT reduce using rule 127 (prefix_exp -> sizeof_exp .)
    NOT             reduce using rule 127 (prefix_exp -> sizeof_exp .)
    LPAREN          reduce using rule 127 (prefix_exp -> sizeof_exp .)
    KEYWORD_SIZEOF  reduce using rule 127 (prefix_exp -> sizeof_exp .)
    IDENTIFIER      reduce using rule 127 (prefix_exp -> sizeof_exp .)
    STRING          reduce using rule 127 (prefix_exp -> sizeof_exp .)
    FLOAT_NUMBER    reduce using rule 127 (prefix_exp -> sizeof_exp .)
    CHARACTER       reduce using rule 127 (prefix_exp -> sizeof_exp .)
    NUMBER          reduce using rule 127 (prefix_exp -> sizeof_exp .)
    BINARY_NUMBER   reduce using rule 127 (prefix_exp -> sizeof_exp .)
    HEXADECIMAL_NUMBER reduce using rule 127 (prefix_exp -> sizeof_exp .)
    OCTAL_NUMBER    reduce using rule 127 (prefix_exp -> sizeof_exp .)
    $end            reduce using rule 127 (prefix_exp -> sizeof_exp .)
    RPAREN          reduce using rule 127 (prefix_exp -> sizeof_exp .)
    SEMICOLON       reduce using rule 127 (prefix_exp -> sizeof_exp .)
    COLON           reduce using rule 127 (prefix_exp -> sizeof_exp .)
    RBRACKET        reduce using rule 127 (prefix_exp -> sizeof_exp .)
    COMMA           reduce using rule 127 (prefix_exp -> sizeof_exp .)


state 40

    (78) logical_exp -> logical_or_exp .
    (79) logical_or_exp -> logical_or_exp . LOGICAL_OR logical_and_exp

    QUESTION_MARK   reduce using rule 78 (logical_exp -> logical_or_exp .)
    KEYWORD_STRUCT  reduce using rule 78 (logical_exp -> logical_or_exp .)
    KEYWORD_UNION   reduce using rule 78 (logical_exp -> logical_or_exp .)
    TYPE_CHAR       reduce using rule 78 (logical_exp -> logical_or_exp .)
    TYPE_INT        reduce using rule 78 (logical_exp -> logical_or_exp .)
    TYPE_SHORT      reduce using rule 78 (logical_exp -> logical_or_exp .)
    TYPE_LONG       reduce using rule 78 (logical_exp -> logical_or_exp .)
    TYPE_FLOAT      reduce using rule 78 (logical_exp -> logical_or_exp .)
    TYPE_DOUBLE     reduce using rule 78 (logical_exp -> logical_or_exp .)
    TYPE_VOID       reduce using rule 78 (logical_exp -> logical_or_exp .)
    KEYWORD_STATIC  reduce using rule 78 (logical_exp -> logical_or_exp .)
    KEYWORD_UNSIGNED reduce using rule 78 (logical_exp -> logical_or_exp .)
    KEYWORD_VOLATILE reduce using rule 78 (logical_exp -> logical_or_exp .)
    KEYWORD_EXTERN  reduce using rule 78 (logical_exp -> logical_or_exp .)
    KEYWORD_SIGNED  reduce using rule 78 (logical_exp -> logical_or_exp .)
    KEYWORD_REGISTER reduce using rule 78 (logical_exp -> logical_or_exp .)
    KEYWORD_AUTO    reduce using rule 78 (logical_exp -> logical_or_exp .)
    INCREMENT       reduce using rule 78 (logical_exp -> logical_or_exp .)
    DECREMENT       reduce using rule 78 (logical_exp -> logical_or_exp .)
    BITWISE_AND     reduce using rule 78 (logical_exp -> logical_or_exp .)
    TIMES           reduce using rule 78 (logical_exp -> logical_or_exp .)
    PLUS            reduce using rule 78 (logical_exp -> logical_or_exp .)
    MINUS           reduce using rule 78 (logical_exp -> logical_or_exp .)
    BITWISE_COMPLEMENT reduce using rule 78 (logical_exp -> logical_or_exp .)
    NOT             reduce using rule 78 (logical_exp -> logical_or_exp .)
    LPAREN          reduce using rule 78 (logical_exp -> logical_or_exp .)
    KEYWORD_SIZEOF  reduce using rule 78 (logical_exp -> logical_or_exp .)
    IDENTIFIER      reduce using rule 78 (logical_exp -> logical_or_exp .)
    STRING          reduce using rule 78 (logical_exp -> logical_or_exp .)
    FLOAT_NUMBER    reduce using rule 78 (logical_exp -> logical_or_exp .)
    CHARACTER       reduce using rule 78 (logical_exp -> logical_or_exp .)
    NUMBER          reduce using rule 78 (logical_exp -> logical_or_exp .)
    BINARY_NUMBER   reduce using rule 78 (logical_exp -> logical_or_exp .)
    HEXADECIMAL_NUMBER reduce using rule 78 (logical_exp -> logical_or_exp .)
    OCTAL_NUMBER    reduce using rule 78 (logical_exp -> logical_or_exp .)
    $end            reduce using rule 78 (logical_exp -> logical_or_exp .)
    RPAREN          reduce using rule 78 (logical_exp -> logical_or_exp .)
    SEMICOLON       reduce using rule 78 (logical_exp -> logical_or_exp .)
    COLON           reduce using rule 78 (logical_exp -> logical_or_exp .)
    RBRACKET        reduce using rule 78 (logical_exp -> logical_or_exp .)
    COMMA           reduce using rule 78 (logical_exp -> logical_or_exp .)
    LOGICAL_OR      shift and go to state 117


state 41

    (140) postfix_exp -> primary_exp .

    LBRACKET        reduce using rule 140 (postfix_exp -> primary_exp .)
    LPAREN          reduce using rule 140 (postfix_exp -> primary_exp .)
    DOT             reduce using rule 140 (postfix_exp -> primary_exp .)
    ARROW           reduce using rule 140 (postfix_exp -> primary_exp .)
    INCREMENT       reduce using rule 140 (postfix_exp -> primary_exp .)
    DECREMENT       reduce using rule 140 (postfix_exp -> primary_exp .)
    ASSIGN          reduce using rule 140 (postfix_exp -> primary_exp .)
    TIMES_ASSIGN    reduce using rule 140 (postfix_exp -> primary_exp .)
    DIVIDE_ASSIGN   reduce using rule 140 (postfix_exp -> primary_exp .)
    MODULUS_ASSIGN  reduce using rule 140 (postfix_exp -> primary_exp .)
    PLUS_ASSIGN     reduce using rule 140 (postfix_exp -> primary_exp .)
    MINUS_ASSIGN    reduce using rule 140 (postfix_exp -> primary_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 140 (postfix_exp -> primary_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 140 (postfix_exp -> primary_exp .)
    BITWISE_AND_ASSIGN reduce using rule 140 (postfix_exp -> primary_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 140 (postfix_exp -> primary_exp .)
    BITWISE_OR_ASSIGN reduce using rule 140 (postfix_exp -> primary_exp .)
    MODULUS         reduce using rule 140 (postfix_exp -> primary_exp .)
    DIVIDE          reduce using rule 140 (postfix_exp -> primary_exp .)
    TIMES           reduce using rule 140 (postfix_exp -> primary_exp .)
    MINUS           reduce using rule 140 (postfix_exp -> primary_exp .)
    PLUS            reduce using rule 140 (postfix_exp -> primary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 140 (postfix_exp -> primary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 140 (postfix_exp -> primary_exp .)
    LESS_EQUALS     reduce using rule 140 (postfix_exp -> primary_exp .)
    LESS_THEN       reduce using rule 140 (postfix_exp -> primary_exp .)
    GREATER_EQUALS  reduce using rule 140 (postfix_exp -> primary_exp .)
    GREATER_THEN    reduce using rule 140 (postfix_exp -> primary_exp .)
    NOT_EQUALS      reduce using rule 140 (postfix_exp -> primary_exp .)
    EQUALS_THEN     reduce using rule 140 (postfix_exp -> primary_exp .)
    BITWISE_AND     reduce using rule 140 (postfix_exp -> primary_exp .)
    BITWISE_XOR     reduce using rule 140 (postfix_exp -> primary_exp .)
    BITWISE_OR      reduce using rule 140 (postfix_exp -> primary_exp .)
    LOGICAL_AND     reduce using rule 140 (postfix_exp -> primary_exp .)
    LOGICAL_OR      reduce using rule 140 (postfix_exp -> primary_exp .)
    QUESTION_MARK   reduce using rule 140 (postfix_exp -> primary_exp .)
    KEYWORD_STRUCT  reduce using rule 140 (postfix_exp -> primary_exp .)
    KEYWORD_UNION   reduce using rule 140 (postfix_exp -> primary_exp .)
    TYPE_CHAR       reduce using rule 140 (postfix_exp -> primary_exp .)
    TYPE_INT        reduce using rule 140 (postfix_exp -> primary_exp .)
    TYPE_SHORT      reduce using rule 140 (postfix_exp -> primary_exp .)
    TYPE_LONG       reduce using rule 140 (postfix_exp -> primary_exp .)
    TYPE_FLOAT      reduce using rule 140 (postfix_exp -> primary_exp .)
    TYPE_DOUBLE     reduce using rule 140 (postfix_exp -> primary_exp .)
    TYPE_VOID       reduce using rule 140 (postfix_exp -> primary_exp .)
    KEYWORD_STATIC  reduce using rule 140 (postfix_exp -> primary_exp .)
    KEYWORD_UNSIGNED reduce using rule 140 (postfix_exp -> primary_exp .)
    KEYWORD_VOLATILE reduce using rule 140 (postfix_exp -> primary_exp .)
    KEYWORD_EXTERN  reduce using rule 140 (postfix_exp -> primary_exp .)
    KEYWORD_SIGNED  reduce using rule 140 (postfix_exp -> primary_exp .)
    KEYWORD_REGISTER reduce using rule 140 (postfix_exp -> primary_exp .)
    KEYWORD_AUTO    reduce using rule 140 (postfix_exp -> primary_exp .)
    BITWISE_COMPLEMENT reduce using rule 140 (postfix_exp -> primary_exp .)
    NOT             reduce using rule 140 (postfix_exp -> primary_exp .)
    KEYWORD_SIZEOF  reduce using rule 140 (postfix_exp -> primary_exp .)
    IDENTIFIER      reduce using rule 140 (postfix_exp -> primary_exp .)
    STRING          reduce using rule 140 (postfix_exp -> primary_exp .)
    FLOAT_NUMBER    reduce using rule 140 (postfix_exp -> primary_exp .)
    CHARACTER       reduce using rule 140 (postfix_exp -> primary_exp .)
    NUMBER          reduce using rule 140 (postfix_exp -> primary_exp .)
    BINARY_NUMBER   reduce using rule 140 (postfix_exp -> primary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 140 (postfix_exp -> primary_exp .)
    OCTAL_NUMBER    reduce using rule 140 (postfix_exp -> primary_exp .)
    $end            reduce using rule 140 (postfix_exp -> primary_exp .)
    RPAREN          reduce using rule 140 (postfix_exp -> primary_exp .)
    SEMICOLON       reduce using rule 140 (postfix_exp -> primary_exp .)
    COLON           reduce using rule 140 (postfix_exp -> primary_exp .)
    RBRACKET        reduce using rule 140 (postfix_exp -> primary_exp .)
    COMMA           reduce using rule 140 (postfix_exp -> primary_exp .)


state 42

    (115) unary_operator -> BITWISE_AND .

    INCREMENT       reduce using rule 115 (unary_operator -> BITWISE_AND .)
    DECREMENT       reduce using rule 115 (unary_operator -> BITWISE_AND .)
    BITWISE_AND     reduce using rule 115 (unary_operator -> BITWISE_AND .)
    TIMES           reduce using rule 115 (unary_operator -> BITWISE_AND .)
    PLUS            reduce using rule 115 (unary_operator -> BITWISE_AND .)
    MINUS           reduce using rule 115 (unary_operator -> BITWISE_AND .)
    BITWISE_COMPLEMENT reduce using rule 115 (unary_operator -> BITWISE_AND .)
    NOT             reduce using rule 115 (unary_operator -> BITWISE_AND .)
    LPAREN          reduce using rule 115 (unary_operator -> BITWISE_AND .)
    KEYWORD_SIZEOF  reduce using rule 115 (unary_operator -> BITWISE_AND .)
    IDENTIFIER      reduce using rule 115 (unary_operator -> BITWISE_AND .)
    STRING          reduce using rule 115 (unary_operator -> BITWISE_AND .)
    FLOAT_NUMBER    reduce using rule 115 (unary_operator -> BITWISE_AND .)
    CHARACTER       reduce using rule 115 (unary_operator -> BITWISE_AND .)
    NUMBER          reduce using rule 115 (unary_operator -> BITWISE_AND .)
    BINARY_NUMBER   reduce using rule 115 (unary_operator -> BITWISE_AND .)
    HEXADECIMAL_NUMBER reduce using rule 115 (unary_operator -> BITWISE_AND .)
    OCTAL_NUMBER    reduce using rule 115 (unary_operator -> BITWISE_AND .)


state 43

    (116) unary_operator -> TIMES .

    INCREMENT       reduce using rule 116 (unary_operator -> TIMES .)
    DECREMENT       reduce using rule 116 (unary_operator -> TIMES .)
    BITWISE_AND     reduce using rule 116 (unary_operator -> TIMES .)
    TIMES           reduce using rule 116 (unary_operator -> TIMES .)
    PLUS            reduce using rule 116 (unary_operator -> TIMES .)
    MINUS           reduce using rule 116 (unary_operator -> TIMES .)
    BITWISE_COMPLEMENT reduce using rule 116 (unary_operator -> TIMES .)
    NOT             reduce using rule 116 (unary_operator -> TIMES .)
    LPAREN          reduce using rule 116 (unary_operator -> TIMES .)
    KEYWORD_SIZEOF  reduce using rule 116 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 116 (unary_operator -> TIMES .)
    STRING          reduce using rule 116 (unary_operator -> TIMES .)
    FLOAT_NUMBER    reduce using rule 116 (unary_operator -> TIMES .)
    CHARACTER       reduce using rule 116 (unary_operator -> TIMES .)
    NUMBER          reduce using rule 116 (unary_operator -> TIMES .)
    BINARY_NUMBER   reduce using rule 116 (unary_operator -> TIMES .)
    HEXADECIMAL_NUMBER reduce using rule 116 (unary_operator -> TIMES .)
    OCTAL_NUMBER    reduce using rule 116 (unary_operator -> TIMES .)


state 44

    (117) unary_operator -> PLUS .

    INCREMENT       reduce using rule 117 (unary_operator -> PLUS .)
    DECREMENT       reduce using rule 117 (unary_operator -> PLUS .)
    BITWISE_AND     reduce using rule 117 (unary_operator -> PLUS .)
    TIMES           reduce using rule 117 (unary_operator -> PLUS .)
    PLUS            reduce using rule 117 (unary_operator -> PLUS .)
    MINUS           reduce using rule 117 (unary_operator -> PLUS .)
    BITWISE_COMPLEMENT reduce using rule 117 (unary_operator -> PLUS .)
    NOT             reduce using rule 117 (unary_operator -> PLUS .)
    LPAREN          reduce using rule 117 (unary_operator -> PLUS .)
    KEYWORD_SIZEOF  reduce using rule 117 (unary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 117 (unary_operator -> PLUS .)
    STRING          reduce using rule 117 (unary_operator -> PLUS .)
    FLOAT_NUMBER    reduce using rule 117 (unary_operator -> PLUS .)
    CHARACTER       reduce using rule 117 (unary_operator -> PLUS .)
    NUMBER          reduce using rule 117 (unary_operator -> PLUS .)
    BINARY_NUMBER   reduce using rule 117 (unary_operator -> PLUS .)
    HEXADECIMAL_NUMBER reduce using rule 117 (unary_operator -> PLUS .)
    OCTAL_NUMBER    reduce using rule 117 (unary_operator -> PLUS .)


state 45

    (118) unary_operator -> MINUS .

    INCREMENT       reduce using rule 118 (unary_operator -> MINUS .)
    DECREMENT       reduce using rule 118 (unary_operator -> MINUS .)
    BITWISE_AND     reduce using rule 118 (unary_operator -> MINUS .)
    TIMES           reduce using rule 118 (unary_operator -> MINUS .)
    PLUS            reduce using rule 118 (unary_operator -> MINUS .)
    MINUS           reduce using rule 118 (unary_operator -> MINUS .)
    BITWISE_COMPLEMENT reduce using rule 118 (unary_operator -> MINUS .)
    NOT             reduce using rule 118 (unary_operator -> MINUS .)
    LPAREN          reduce using rule 118 (unary_operator -> MINUS .)
    KEYWORD_SIZEOF  reduce using rule 118 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 118 (unary_operator -> MINUS .)
    STRING          reduce using rule 118 (unary_operator -> MINUS .)
    FLOAT_NUMBER    reduce using rule 118 (unary_operator -> MINUS .)
    CHARACTER       reduce using rule 118 (unary_operator -> MINUS .)
    NUMBER          reduce using rule 118 (unary_operator -> MINUS .)
    BINARY_NUMBER   reduce using rule 118 (unary_operator -> MINUS .)
    HEXADECIMAL_NUMBER reduce using rule 118 (unary_operator -> MINUS .)
    OCTAL_NUMBER    reduce using rule 118 (unary_operator -> MINUS .)


state 46

    (119) unary_operator -> BITWISE_COMPLEMENT .

    INCREMENT       reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)
    DECREMENT       reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)
    BITWISE_AND     reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)
    TIMES           reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)
    PLUS            reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)
    MINUS           reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)
    BITWISE_COMPLEMENT reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)
    NOT             reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)
    LPAREN          reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)
    KEYWORD_SIZEOF  reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)
    IDENTIFIER      reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)
    STRING          reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)
    FLOAT_NUMBER    reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)
    CHARACTER       reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)
    NUMBER          reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)
    BINARY_NUMBER   reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)
    HEXADECIMAL_NUMBER reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)
    OCTAL_NUMBER    reduce using rule 119 (unary_operator -> BITWISE_COMPLEMENT .)


state 47

    (120) unary_operator -> NOT .

    INCREMENT       reduce using rule 120 (unary_operator -> NOT .)
    DECREMENT       reduce using rule 120 (unary_operator -> NOT .)
    BITWISE_AND     reduce using rule 120 (unary_operator -> NOT .)
    TIMES           reduce using rule 120 (unary_operator -> NOT .)
    PLUS            reduce using rule 120 (unary_operator -> NOT .)
    MINUS           reduce using rule 120 (unary_operator -> NOT .)
    BITWISE_COMPLEMENT reduce using rule 120 (unary_operator -> NOT .)
    NOT             reduce using rule 120 (unary_operator -> NOT .)
    LPAREN          reduce using rule 120 (unary_operator -> NOT .)
    KEYWORD_SIZEOF  reduce using rule 120 (unary_operator -> NOT .)
    IDENTIFIER      reduce using rule 120 (unary_operator -> NOT .)
    STRING          reduce using rule 120 (unary_operator -> NOT .)
    FLOAT_NUMBER    reduce using rule 120 (unary_operator -> NOT .)
    CHARACTER       reduce using rule 120 (unary_operator -> NOT .)
    NUMBER          reduce using rule 120 (unary_operator -> NOT .)
    BINARY_NUMBER   reduce using rule 120 (unary_operator -> NOT .)
    HEXADECIMAL_NUMBER reduce using rule 120 (unary_operator -> NOT .)
    OCTAL_NUMBER    reduce using rule 120 (unary_operator -> NOT .)


state 48

    (128) sizeof_exp -> KEYWORD_SIZEOF . unary_exp
    (129) sizeof_exp -> KEYWORD_SIZEOF . type
    (130) sizeof_exp -> KEYWORD_SIZEOF . pointer
    (121) unary_exp -> . prefix_exp
    (37) type -> . user_types
    (38) type -> . primitive_types
    (39) type -> . type_modifier type
    (36) pointer -> . type multiple_times
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (47) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (48) user_types -> . KEYWORD_UNION IDENTIFIER
    (49) primitive_types -> . TYPE_CHAR
    (50) primitive_types -> . TYPE_INT
    (51) primitive_types -> . TYPE_SHORT
    (52) primitive_types -> . TYPE_LONG
    (53) primitive_types -> . TYPE_FLOAT
    (54) primitive_types -> . TYPE_DOUBLE
    (55) primitive_types -> . TYPE_VOID
    (40) type_modifier -> . KEYWORD_STATIC
    (41) type_modifier -> . KEYWORD_UNSIGNED
    (42) type_modifier -> . KEYWORD_VOLATILE
    (43) type_modifier -> . KEYWORD_EXTERN
    (44) type_modifier -> . KEYWORD_SIGNED
    (45) type_modifier -> . KEYWORD_REGISTER
    (46) type_modifier -> . KEYWORD_AUTO
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    KEYWORD_STRUCT  shift and go to state 16
    KEYWORD_UNION   shift and go to state 17
    TYPE_CHAR       shift and go to state 18
    TYPE_INT        shift and go to state 19
    TYPE_SHORT      shift and go to state 20
    TYPE_LONG       shift and go to state 21
    TYPE_FLOAT      shift and go to state 22
    TYPE_DOUBLE     shift and go to state 23
    TYPE_VOID       shift and go to state 24
    KEYWORD_STATIC  shift and go to state 25
    KEYWORD_UNSIGNED shift and go to state 26
    KEYWORD_VOLATILE shift and go to state 27
    KEYWORD_EXTERN  shift and go to state 28
    KEYWORD_SIGNED  shift and go to state 29
    KEYWORD_REGISTER shift and go to state 30
    KEYWORD_AUTO    shift and go to state 31
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    unary_exp                      shift and go to state 118
    type                           shift and go to state 119
    pointer                        shift and go to state 120
    prefix_exp                     shift and go to state 32
    user_types                     shift and go to state 11
    primitive_types                shift and go to state 12
    type_modifier                  shift and go to state 13
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 49

    (80) logical_or_exp -> logical_and_exp .
    (81) logical_and_exp -> logical_and_exp . LOGICAL_AND bitwise_or_exp

    LOGICAL_OR      reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    QUESTION_MARK   reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    KEYWORD_STRUCT  reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    KEYWORD_UNION   reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    TYPE_CHAR       reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    TYPE_INT        reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    TYPE_SHORT      reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    TYPE_LONG       reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    TYPE_FLOAT      reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    TYPE_DOUBLE     reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    TYPE_VOID       reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    KEYWORD_STATIC  reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    KEYWORD_UNSIGNED reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    KEYWORD_VOLATILE reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    KEYWORD_EXTERN  reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    KEYWORD_SIGNED  reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    KEYWORD_REGISTER reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    KEYWORD_AUTO    reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    INCREMENT       reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    DECREMENT       reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    BITWISE_AND     reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    TIMES           reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    PLUS            reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    MINUS           reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    BITWISE_COMPLEMENT reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    NOT             reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    LPAREN          reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    KEYWORD_SIZEOF  reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    IDENTIFIER      reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    STRING          reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    FLOAT_NUMBER    reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    CHARACTER       reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    NUMBER          reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    BINARY_NUMBER   reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    HEXADECIMAL_NUMBER reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    OCTAL_NUMBER    reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    $end            reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    RPAREN          reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    SEMICOLON       reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    COLON           reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    RBRACKET        reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    COMMA           reduce using rule 80 (logical_or_exp -> logical_and_exp .)
    LOGICAL_AND     shift and go to state 121


state 50

    (143) primary_exp -> identifier_exp .

    LBRACKET        reduce using rule 143 (primary_exp -> identifier_exp .)
    LPAREN          reduce using rule 143 (primary_exp -> identifier_exp .)
    DOT             reduce using rule 143 (primary_exp -> identifier_exp .)
    ARROW           reduce using rule 143 (primary_exp -> identifier_exp .)
    INCREMENT       reduce using rule 143 (primary_exp -> identifier_exp .)
    DECREMENT       reduce using rule 143 (primary_exp -> identifier_exp .)
    ASSIGN          reduce using rule 143 (primary_exp -> identifier_exp .)
    TIMES_ASSIGN    reduce using rule 143 (primary_exp -> identifier_exp .)
    DIVIDE_ASSIGN   reduce using rule 143 (primary_exp -> identifier_exp .)
    MODULUS_ASSIGN  reduce using rule 143 (primary_exp -> identifier_exp .)
    PLUS_ASSIGN     reduce using rule 143 (primary_exp -> identifier_exp .)
    MINUS_ASSIGN    reduce using rule 143 (primary_exp -> identifier_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 143 (primary_exp -> identifier_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 143 (primary_exp -> identifier_exp .)
    BITWISE_AND_ASSIGN reduce using rule 143 (primary_exp -> identifier_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 143 (primary_exp -> identifier_exp .)
    BITWISE_OR_ASSIGN reduce using rule 143 (primary_exp -> identifier_exp .)
    MODULUS         reduce using rule 143 (primary_exp -> identifier_exp .)
    DIVIDE          reduce using rule 143 (primary_exp -> identifier_exp .)
    TIMES           reduce using rule 143 (primary_exp -> identifier_exp .)
    MINUS           reduce using rule 143 (primary_exp -> identifier_exp .)
    PLUS            reduce using rule 143 (primary_exp -> identifier_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 143 (primary_exp -> identifier_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 143 (primary_exp -> identifier_exp .)
    LESS_EQUALS     reduce using rule 143 (primary_exp -> identifier_exp .)
    LESS_THEN       reduce using rule 143 (primary_exp -> identifier_exp .)
    GREATER_EQUALS  reduce using rule 143 (primary_exp -> identifier_exp .)
    GREATER_THEN    reduce using rule 143 (primary_exp -> identifier_exp .)
    NOT_EQUALS      reduce using rule 143 (primary_exp -> identifier_exp .)
    EQUALS_THEN     reduce using rule 143 (primary_exp -> identifier_exp .)
    BITWISE_AND     reduce using rule 143 (primary_exp -> identifier_exp .)
    BITWISE_XOR     reduce using rule 143 (primary_exp -> identifier_exp .)
    BITWISE_OR      reduce using rule 143 (primary_exp -> identifier_exp .)
    LOGICAL_AND     reduce using rule 143 (primary_exp -> identifier_exp .)
    LOGICAL_OR      reduce using rule 143 (primary_exp -> identifier_exp .)
    QUESTION_MARK   reduce using rule 143 (primary_exp -> identifier_exp .)
    KEYWORD_STRUCT  reduce using rule 143 (primary_exp -> identifier_exp .)
    KEYWORD_UNION   reduce using rule 143 (primary_exp -> identifier_exp .)
    TYPE_CHAR       reduce using rule 143 (primary_exp -> identifier_exp .)
    TYPE_INT        reduce using rule 143 (primary_exp -> identifier_exp .)
    TYPE_SHORT      reduce using rule 143 (primary_exp -> identifier_exp .)
    TYPE_LONG       reduce using rule 143 (primary_exp -> identifier_exp .)
    TYPE_FLOAT      reduce using rule 143 (primary_exp -> identifier_exp .)
    TYPE_DOUBLE     reduce using rule 143 (primary_exp -> identifier_exp .)
    TYPE_VOID       reduce using rule 143 (primary_exp -> identifier_exp .)
    KEYWORD_STATIC  reduce using rule 143 (primary_exp -> identifier_exp .)
    KEYWORD_UNSIGNED reduce using rule 143 (primary_exp -> identifier_exp .)
    KEYWORD_VOLATILE reduce using rule 143 (primary_exp -> identifier_exp .)
    KEYWORD_EXTERN  reduce using rule 143 (primary_exp -> identifier_exp .)
    KEYWORD_SIGNED  reduce using rule 143 (primary_exp -> identifier_exp .)
    KEYWORD_REGISTER reduce using rule 143 (primary_exp -> identifier_exp .)
    KEYWORD_AUTO    reduce using rule 143 (primary_exp -> identifier_exp .)
    BITWISE_COMPLEMENT reduce using rule 143 (primary_exp -> identifier_exp .)
    NOT             reduce using rule 143 (primary_exp -> identifier_exp .)
    KEYWORD_SIZEOF  reduce using rule 143 (primary_exp -> identifier_exp .)
    IDENTIFIER      reduce using rule 143 (primary_exp -> identifier_exp .)
    STRING          reduce using rule 143 (primary_exp -> identifier_exp .)
    FLOAT_NUMBER    reduce using rule 143 (primary_exp -> identifier_exp .)
    CHARACTER       reduce using rule 143 (primary_exp -> identifier_exp .)
    NUMBER          reduce using rule 143 (primary_exp -> identifier_exp .)
    BINARY_NUMBER   reduce using rule 143 (primary_exp -> identifier_exp .)
    HEXADECIMAL_NUMBER reduce using rule 143 (primary_exp -> identifier_exp .)
    OCTAL_NUMBER    reduce using rule 143 (primary_exp -> identifier_exp .)
    $end            reduce using rule 143 (primary_exp -> identifier_exp .)
    RPAREN          reduce using rule 143 (primary_exp -> identifier_exp .)
    SEMICOLON       reduce using rule 143 (primary_exp -> identifier_exp .)
    COLON           reduce using rule 143 (primary_exp -> identifier_exp .)
    RBRACKET        reduce using rule 143 (primary_exp -> identifier_exp .)
    COMMA           reduce using rule 143 (primary_exp -> identifier_exp .)


state 51

    (82) logical_and_exp -> bitwise_or_exp .
    (83) bitwise_or_exp -> bitwise_or_exp . BITWISE_OR bitwise_xor_exp

    LOGICAL_AND     reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    LOGICAL_OR      reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    QUESTION_MARK   reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_STRUCT  reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_UNION   reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    TYPE_CHAR       reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    TYPE_INT        reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    TYPE_SHORT      reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    TYPE_LONG       reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    TYPE_FLOAT      reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    TYPE_DOUBLE     reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    TYPE_VOID       reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_STATIC  reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_UNSIGNED reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_VOLATILE reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_EXTERN  reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_SIGNED  reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_REGISTER reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_AUTO    reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    INCREMENT       reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    DECREMENT       reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    BITWISE_AND     reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    TIMES           reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    PLUS            reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    MINUS           reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    BITWISE_COMPLEMENT reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    NOT             reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    LPAREN          reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    KEYWORD_SIZEOF  reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    IDENTIFIER      reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    STRING          reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    FLOAT_NUMBER    reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    CHARACTER       reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    NUMBER          reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    BINARY_NUMBER   reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    HEXADECIMAL_NUMBER reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    OCTAL_NUMBER    reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    $end            reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    RPAREN          reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    SEMICOLON       reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    COLON           reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    RBRACKET        reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    COMMA           reduce using rule 82 (logical_and_exp -> bitwise_or_exp .)
    BITWISE_OR      shift and go to state 122


state 52

    (145) identifier_exp -> string_exp .

    LBRACKET        reduce using rule 145 (identifier_exp -> string_exp .)
    LPAREN          reduce using rule 145 (identifier_exp -> string_exp .)
    DOT             reduce using rule 145 (identifier_exp -> string_exp .)
    ARROW           reduce using rule 145 (identifier_exp -> string_exp .)
    INCREMENT       reduce using rule 145 (identifier_exp -> string_exp .)
    DECREMENT       reduce using rule 145 (identifier_exp -> string_exp .)
    ASSIGN          reduce using rule 145 (identifier_exp -> string_exp .)
    TIMES_ASSIGN    reduce using rule 145 (identifier_exp -> string_exp .)
    DIVIDE_ASSIGN   reduce using rule 145 (identifier_exp -> string_exp .)
    MODULUS_ASSIGN  reduce using rule 145 (identifier_exp -> string_exp .)
    PLUS_ASSIGN     reduce using rule 145 (identifier_exp -> string_exp .)
    MINUS_ASSIGN    reduce using rule 145 (identifier_exp -> string_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 145 (identifier_exp -> string_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 145 (identifier_exp -> string_exp .)
    BITWISE_AND_ASSIGN reduce using rule 145 (identifier_exp -> string_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 145 (identifier_exp -> string_exp .)
    BITWISE_OR_ASSIGN reduce using rule 145 (identifier_exp -> string_exp .)
    MODULUS         reduce using rule 145 (identifier_exp -> string_exp .)
    DIVIDE          reduce using rule 145 (identifier_exp -> string_exp .)
    TIMES           reduce using rule 145 (identifier_exp -> string_exp .)
    MINUS           reduce using rule 145 (identifier_exp -> string_exp .)
    PLUS            reduce using rule 145 (identifier_exp -> string_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 145 (identifier_exp -> string_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 145 (identifier_exp -> string_exp .)
    LESS_EQUALS     reduce using rule 145 (identifier_exp -> string_exp .)
    LESS_THEN       reduce using rule 145 (identifier_exp -> string_exp .)
    GREATER_EQUALS  reduce using rule 145 (identifier_exp -> string_exp .)
    GREATER_THEN    reduce using rule 145 (identifier_exp -> string_exp .)
    NOT_EQUALS      reduce using rule 145 (identifier_exp -> string_exp .)
    EQUALS_THEN     reduce using rule 145 (identifier_exp -> string_exp .)
    BITWISE_AND     reduce using rule 145 (identifier_exp -> string_exp .)
    BITWISE_XOR     reduce using rule 145 (identifier_exp -> string_exp .)
    BITWISE_OR      reduce using rule 145 (identifier_exp -> string_exp .)
    LOGICAL_AND     reduce using rule 145 (identifier_exp -> string_exp .)
    LOGICAL_OR      reduce using rule 145 (identifier_exp -> string_exp .)
    QUESTION_MARK   reduce using rule 145 (identifier_exp -> string_exp .)
    KEYWORD_STRUCT  reduce using rule 145 (identifier_exp -> string_exp .)
    KEYWORD_UNION   reduce using rule 145 (identifier_exp -> string_exp .)
    TYPE_CHAR       reduce using rule 145 (identifier_exp -> string_exp .)
    TYPE_INT        reduce using rule 145 (identifier_exp -> string_exp .)
    TYPE_SHORT      reduce using rule 145 (identifier_exp -> string_exp .)
    TYPE_LONG       reduce using rule 145 (identifier_exp -> string_exp .)
    TYPE_FLOAT      reduce using rule 145 (identifier_exp -> string_exp .)
    TYPE_DOUBLE     reduce using rule 145 (identifier_exp -> string_exp .)
    TYPE_VOID       reduce using rule 145 (identifier_exp -> string_exp .)
    KEYWORD_STATIC  reduce using rule 145 (identifier_exp -> string_exp .)
    KEYWORD_UNSIGNED reduce using rule 145 (identifier_exp -> string_exp .)
    KEYWORD_VOLATILE reduce using rule 145 (identifier_exp -> string_exp .)
    KEYWORD_EXTERN  reduce using rule 145 (identifier_exp -> string_exp .)
    KEYWORD_SIGNED  reduce using rule 145 (identifier_exp -> string_exp .)
    KEYWORD_REGISTER reduce using rule 145 (identifier_exp -> string_exp .)
    KEYWORD_AUTO    reduce using rule 145 (identifier_exp -> string_exp .)
    BITWISE_COMPLEMENT reduce using rule 145 (identifier_exp -> string_exp .)
    NOT             reduce using rule 145 (identifier_exp -> string_exp .)
    KEYWORD_SIZEOF  reduce using rule 145 (identifier_exp -> string_exp .)
    IDENTIFIER      reduce using rule 145 (identifier_exp -> string_exp .)
    STRING          reduce using rule 145 (identifier_exp -> string_exp .)
    FLOAT_NUMBER    reduce using rule 145 (identifier_exp -> string_exp .)
    CHARACTER       reduce using rule 145 (identifier_exp -> string_exp .)
    NUMBER          reduce using rule 145 (identifier_exp -> string_exp .)
    BINARY_NUMBER   reduce using rule 145 (identifier_exp -> string_exp .)
    HEXADECIMAL_NUMBER reduce using rule 145 (identifier_exp -> string_exp .)
    OCTAL_NUMBER    reduce using rule 145 (identifier_exp -> string_exp .)
    $end            reduce using rule 145 (identifier_exp -> string_exp .)
    RPAREN          reduce using rule 145 (identifier_exp -> string_exp .)
    SEMICOLON       reduce using rule 145 (identifier_exp -> string_exp .)
    COLON           reduce using rule 145 (identifier_exp -> string_exp .)
    RBRACKET        reduce using rule 145 (identifier_exp -> string_exp .)
    COMMA           reduce using rule 145 (identifier_exp -> string_exp .)


state 53

    (84) bitwise_or_exp -> bitwise_xor_exp .
    (85) bitwise_xor_exp -> bitwise_xor_exp . BITWISE_XOR bitwise_and_exp

    BITWISE_OR      reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    LOGICAL_AND     reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    LOGICAL_OR      reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    QUESTION_MARK   reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_STRUCT  reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_UNION   reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    TYPE_CHAR       reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    TYPE_INT        reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    TYPE_SHORT      reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    TYPE_LONG       reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    TYPE_FLOAT      reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    TYPE_DOUBLE     reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    TYPE_VOID       reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_STATIC  reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_UNSIGNED reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_VOLATILE reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_EXTERN  reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_SIGNED  reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_REGISTER reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_AUTO    reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    INCREMENT       reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    DECREMENT       reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    BITWISE_AND     reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    TIMES           reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    PLUS            reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    MINUS           reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    BITWISE_COMPLEMENT reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    NOT             reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    LPAREN          reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    KEYWORD_SIZEOF  reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    IDENTIFIER      reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    STRING          reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    FLOAT_NUMBER    reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    CHARACTER       reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    NUMBER          reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    BINARY_NUMBER   reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    HEXADECIMAL_NUMBER reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    OCTAL_NUMBER    reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    $end            reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    RPAREN          reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    SEMICOLON       reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    COLON           reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    RBRACKET        reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    COMMA           reduce using rule 84 (bitwise_or_exp -> bitwise_xor_exp .)
    BITWISE_XOR     shift and go to state 123


state 54

    (146) string_exp -> STRING .

    LBRACKET        reduce using rule 146 (string_exp -> STRING .)
    LPAREN          reduce using rule 146 (string_exp -> STRING .)
    DOT             reduce using rule 146 (string_exp -> STRING .)
    ARROW           reduce using rule 146 (string_exp -> STRING .)
    INCREMENT       reduce using rule 146 (string_exp -> STRING .)
    DECREMENT       reduce using rule 146 (string_exp -> STRING .)
    ASSIGN          reduce using rule 146 (string_exp -> STRING .)
    TIMES_ASSIGN    reduce using rule 146 (string_exp -> STRING .)
    DIVIDE_ASSIGN   reduce using rule 146 (string_exp -> STRING .)
    MODULUS_ASSIGN  reduce using rule 146 (string_exp -> STRING .)
    PLUS_ASSIGN     reduce using rule 146 (string_exp -> STRING .)
    MINUS_ASSIGN    reduce using rule 146 (string_exp -> STRING .)
    SHIFT_LEFT_ASSIGN reduce using rule 146 (string_exp -> STRING .)
    SHIFT_RIGHT_ASSIGN reduce using rule 146 (string_exp -> STRING .)
    BITWISE_AND_ASSIGN reduce using rule 146 (string_exp -> STRING .)
    BITWISE_XOR_ASSIGN reduce using rule 146 (string_exp -> STRING .)
    BITWISE_OR_ASSIGN reduce using rule 146 (string_exp -> STRING .)
    MODULUS         reduce using rule 146 (string_exp -> STRING .)
    DIVIDE          reduce using rule 146 (string_exp -> STRING .)
    TIMES           reduce using rule 146 (string_exp -> STRING .)
    MINUS           reduce using rule 146 (string_exp -> STRING .)
    PLUS            reduce using rule 146 (string_exp -> STRING .)
    BITWISE_SHIFT_RIGHT reduce using rule 146 (string_exp -> STRING .)
    BITWISE_SHIFT_LEFT reduce using rule 146 (string_exp -> STRING .)
    LESS_EQUALS     reduce using rule 146 (string_exp -> STRING .)
    LESS_THEN       reduce using rule 146 (string_exp -> STRING .)
    GREATER_EQUALS  reduce using rule 146 (string_exp -> STRING .)
    GREATER_THEN    reduce using rule 146 (string_exp -> STRING .)
    NOT_EQUALS      reduce using rule 146 (string_exp -> STRING .)
    EQUALS_THEN     reduce using rule 146 (string_exp -> STRING .)
    BITWISE_AND     reduce using rule 146 (string_exp -> STRING .)
    BITWISE_XOR     reduce using rule 146 (string_exp -> STRING .)
    BITWISE_OR      reduce using rule 146 (string_exp -> STRING .)
    LOGICAL_AND     reduce using rule 146 (string_exp -> STRING .)
    LOGICAL_OR      reduce using rule 146 (string_exp -> STRING .)
    QUESTION_MARK   reduce using rule 146 (string_exp -> STRING .)
    KEYWORD_STRUCT  reduce using rule 146 (string_exp -> STRING .)
    KEYWORD_UNION   reduce using rule 146 (string_exp -> STRING .)
    TYPE_CHAR       reduce using rule 146 (string_exp -> STRING .)
    TYPE_INT        reduce using rule 146 (string_exp -> STRING .)
    TYPE_SHORT      reduce using rule 146 (string_exp -> STRING .)
    TYPE_LONG       reduce using rule 146 (string_exp -> STRING .)
    TYPE_FLOAT      reduce using rule 146 (string_exp -> STRING .)
    TYPE_DOUBLE     reduce using rule 146 (string_exp -> STRING .)
    TYPE_VOID       reduce using rule 146 (string_exp -> STRING .)
    KEYWORD_STATIC  reduce using rule 146 (string_exp -> STRING .)
    KEYWORD_UNSIGNED reduce using rule 146 (string_exp -> STRING .)
    KEYWORD_VOLATILE reduce using rule 146 (string_exp -> STRING .)
    KEYWORD_EXTERN  reduce using rule 146 (string_exp -> STRING .)
    KEYWORD_SIGNED  reduce using rule 146 (string_exp -> STRING .)
    KEYWORD_REGISTER reduce using rule 146 (string_exp -> STRING .)
    KEYWORD_AUTO    reduce using rule 146 (string_exp -> STRING .)
    BITWISE_COMPLEMENT reduce using rule 146 (string_exp -> STRING .)
    NOT             reduce using rule 146 (string_exp -> STRING .)
    KEYWORD_SIZEOF  reduce using rule 146 (string_exp -> STRING .)
    IDENTIFIER      reduce using rule 146 (string_exp -> STRING .)
    STRING          reduce using rule 146 (string_exp -> STRING .)
    FLOAT_NUMBER    reduce using rule 146 (string_exp -> STRING .)
    CHARACTER       reduce using rule 146 (string_exp -> STRING .)
    NUMBER          reduce using rule 146 (string_exp -> STRING .)
    BINARY_NUMBER   reduce using rule 146 (string_exp -> STRING .)
    HEXADECIMAL_NUMBER reduce using rule 146 (string_exp -> STRING .)
    OCTAL_NUMBER    reduce using rule 146 (string_exp -> STRING .)
    $end            reduce using rule 146 (string_exp -> STRING .)
    RPAREN          reduce using rule 146 (string_exp -> STRING .)
    SEMICOLON       reduce using rule 146 (string_exp -> STRING .)
    COLON           reduce using rule 146 (string_exp -> STRING .)
    RBRACKET        reduce using rule 146 (string_exp -> STRING .)
    COMMA           reduce using rule 146 (string_exp -> STRING .)


state 55

    (147) string_exp -> number_exp .

    LBRACKET        reduce using rule 147 (string_exp -> number_exp .)
    LPAREN          reduce using rule 147 (string_exp -> number_exp .)
    DOT             reduce using rule 147 (string_exp -> number_exp .)
    ARROW           reduce using rule 147 (string_exp -> number_exp .)
    INCREMENT       reduce using rule 147 (string_exp -> number_exp .)
    DECREMENT       reduce using rule 147 (string_exp -> number_exp .)
    ASSIGN          reduce using rule 147 (string_exp -> number_exp .)
    TIMES_ASSIGN    reduce using rule 147 (string_exp -> number_exp .)
    DIVIDE_ASSIGN   reduce using rule 147 (string_exp -> number_exp .)
    MODULUS_ASSIGN  reduce using rule 147 (string_exp -> number_exp .)
    PLUS_ASSIGN     reduce using rule 147 (string_exp -> number_exp .)
    MINUS_ASSIGN    reduce using rule 147 (string_exp -> number_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 147 (string_exp -> number_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 147 (string_exp -> number_exp .)
    BITWISE_AND_ASSIGN reduce using rule 147 (string_exp -> number_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 147 (string_exp -> number_exp .)
    BITWISE_OR_ASSIGN reduce using rule 147 (string_exp -> number_exp .)
    MODULUS         reduce using rule 147 (string_exp -> number_exp .)
    DIVIDE          reduce using rule 147 (string_exp -> number_exp .)
    TIMES           reduce using rule 147 (string_exp -> number_exp .)
    MINUS           reduce using rule 147 (string_exp -> number_exp .)
    PLUS            reduce using rule 147 (string_exp -> number_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 147 (string_exp -> number_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 147 (string_exp -> number_exp .)
    LESS_EQUALS     reduce using rule 147 (string_exp -> number_exp .)
    LESS_THEN       reduce using rule 147 (string_exp -> number_exp .)
    GREATER_EQUALS  reduce using rule 147 (string_exp -> number_exp .)
    GREATER_THEN    reduce using rule 147 (string_exp -> number_exp .)
    NOT_EQUALS      reduce using rule 147 (string_exp -> number_exp .)
    EQUALS_THEN     reduce using rule 147 (string_exp -> number_exp .)
    BITWISE_AND     reduce using rule 147 (string_exp -> number_exp .)
    BITWISE_XOR     reduce using rule 147 (string_exp -> number_exp .)
    BITWISE_OR      reduce using rule 147 (string_exp -> number_exp .)
    LOGICAL_AND     reduce using rule 147 (string_exp -> number_exp .)
    LOGICAL_OR      reduce using rule 147 (string_exp -> number_exp .)
    QUESTION_MARK   reduce using rule 147 (string_exp -> number_exp .)
    KEYWORD_STRUCT  reduce using rule 147 (string_exp -> number_exp .)
    KEYWORD_UNION   reduce using rule 147 (string_exp -> number_exp .)
    TYPE_CHAR       reduce using rule 147 (string_exp -> number_exp .)
    TYPE_INT        reduce using rule 147 (string_exp -> number_exp .)
    TYPE_SHORT      reduce using rule 147 (string_exp -> number_exp .)
    TYPE_LONG       reduce using rule 147 (string_exp -> number_exp .)
    TYPE_FLOAT      reduce using rule 147 (string_exp -> number_exp .)
    TYPE_DOUBLE     reduce using rule 147 (string_exp -> number_exp .)
    TYPE_VOID       reduce using rule 147 (string_exp -> number_exp .)
    KEYWORD_STATIC  reduce using rule 147 (string_exp -> number_exp .)
    KEYWORD_UNSIGNED reduce using rule 147 (string_exp -> number_exp .)
    KEYWORD_VOLATILE reduce using rule 147 (string_exp -> number_exp .)
    KEYWORD_EXTERN  reduce using rule 147 (string_exp -> number_exp .)
    KEYWORD_SIGNED  reduce using rule 147 (string_exp -> number_exp .)
    KEYWORD_REGISTER reduce using rule 147 (string_exp -> number_exp .)
    KEYWORD_AUTO    reduce using rule 147 (string_exp -> number_exp .)
    BITWISE_COMPLEMENT reduce using rule 147 (string_exp -> number_exp .)
    NOT             reduce using rule 147 (string_exp -> number_exp .)
    KEYWORD_SIZEOF  reduce using rule 147 (string_exp -> number_exp .)
    IDENTIFIER      reduce using rule 147 (string_exp -> number_exp .)
    STRING          reduce using rule 147 (string_exp -> number_exp .)
    FLOAT_NUMBER    reduce using rule 147 (string_exp -> number_exp .)
    CHARACTER       reduce using rule 147 (string_exp -> number_exp .)
    NUMBER          reduce using rule 147 (string_exp -> number_exp .)
    BINARY_NUMBER   reduce using rule 147 (string_exp -> number_exp .)
    HEXADECIMAL_NUMBER reduce using rule 147 (string_exp -> number_exp .)
    OCTAL_NUMBER    reduce using rule 147 (string_exp -> number_exp .)
    $end            reduce using rule 147 (string_exp -> number_exp .)
    RPAREN          reduce using rule 147 (string_exp -> number_exp .)
    SEMICOLON       reduce using rule 147 (string_exp -> number_exp .)
    COLON           reduce using rule 147 (string_exp -> number_exp .)
    RBRACKET        reduce using rule 147 (string_exp -> number_exp .)
    COMMA           reduce using rule 147 (string_exp -> number_exp .)


state 56

    (86) bitwise_xor_exp -> bitwise_and_exp .
    (87) bitwise_and_exp -> bitwise_and_exp . BITWISE_AND is_equals_exp

  ! shift/reduce conflict for BITWISE_AND resolved as shift
    BITWISE_XOR     reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    BITWISE_OR      reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    LOGICAL_AND     reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    LOGICAL_OR      reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    QUESTION_MARK   reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_STRUCT  reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_UNION   reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    TYPE_CHAR       reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    TYPE_INT        reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    TYPE_SHORT      reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    TYPE_LONG       reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    TYPE_FLOAT      reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    TYPE_DOUBLE     reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    TYPE_VOID       reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_STATIC  reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_UNSIGNED reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_VOLATILE reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_EXTERN  reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_SIGNED  reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_REGISTER reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_AUTO    reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    INCREMENT       reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    DECREMENT       reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    TIMES           reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    PLUS            reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    MINUS           reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    BITWISE_COMPLEMENT reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    NOT             reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    LPAREN          reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    KEYWORD_SIZEOF  reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    IDENTIFIER      reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    STRING          reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    FLOAT_NUMBER    reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    CHARACTER       reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    NUMBER          reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    BINARY_NUMBER   reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    HEXADECIMAL_NUMBER reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    OCTAL_NUMBER    reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    $end            reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    RPAREN          reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    SEMICOLON       reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    COLON           reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    RBRACKET        reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    COMMA           reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .)
    BITWISE_AND     shift and go to state 124

  ! BITWISE_AND     [ reduce using rule 86 (bitwise_xor_exp -> bitwise_and_exp .) ]


state 57

    (148) number_exp -> integer_number .

    LBRACKET        reduce using rule 148 (number_exp -> integer_number .)
    LPAREN          reduce using rule 148 (number_exp -> integer_number .)
    DOT             reduce using rule 148 (number_exp -> integer_number .)
    ARROW           reduce using rule 148 (number_exp -> integer_number .)
    INCREMENT       reduce using rule 148 (number_exp -> integer_number .)
    DECREMENT       reduce using rule 148 (number_exp -> integer_number .)
    ASSIGN          reduce using rule 148 (number_exp -> integer_number .)
    TIMES_ASSIGN    reduce using rule 148 (number_exp -> integer_number .)
    DIVIDE_ASSIGN   reduce using rule 148 (number_exp -> integer_number .)
    MODULUS_ASSIGN  reduce using rule 148 (number_exp -> integer_number .)
    PLUS_ASSIGN     reduce using rule 148 (number_exp -> integer_number .)
    MINUS_ASSIGN    reduce using rule 148 (number_exp -> integer_number .)
    SHIFT_LEFT_ASSIGN reduce using rule 148 (number_exp -> integer_number .)
    SHIFT_RIGHT_ASSIGN reduce using rule 148 (number_exp -> integer_number .)
    BITWISE_AND_ASSIGN reduce using rule 148 (number_exp -> integer_number .)
    BITWISE_XOR_ASSIGN reduce using rule 148 (number_exp -> integer_number .)
    BITWISE_OR_ASSIGN reduce using rule 148 (number_exp -> integer_number .)
    MODULUS         reduce using rule 148 (number_exp -> integer_number .)
    DIVIDE          reduce using rule 148 (number_exp -> integer_number .)
    TIMES           reduce using rule 148 (number_exp -> integer_number .)
    MINUS           reduce using rule 148 (number_exp -> integer_number .)
    PLUS            reduce using rule 148 (number_exp -> integer_number .)
    BITWISE_SHIFT_RIGHT reduce using rule 148 (number_exp -> integer_number .)
    BITWISE_SHIFT_LEFT reduce using rule 148 (number_exp -> integer_number .)
    LESS_EQUALS     reduce using rule 148 (number_exp -> integer_number .)
    LESS_THEN       reduce using rule 148 (number_exp -> integer_number .)
    GREATER_EQUALS  reduce using rule 148 (number_exp -> integer_number .)
    GREATER_THEN    reduce using rule 148 (number_exp -> integer_number .)
    NOT_EQUALS      reduce using rule 148 (number_exp -> integer_number .)
    EQUALS_THEN     reduce using rule 148 (number_exp -> integer_number .)
    BITWISE_AND     reduce using rule 148 (number_exp -> integer_number .)
    BITWISE_XOR     reduce using rule 148 (number_exp -> integer_number .)
    BITWISE_OR      reduce using rule 148 (number_exp -> integer_number .)
    LOGICAL_AND     reduce using rule 148 (number_exp -> integer_number .)
    LOGICAL_OR      reduce using rule 148 (number_exp -> integer_number .)
    QUESTION_MARK   reduce using rule 148 (number_exp -> integer_number .)
    KEYWORD_STRUCT  reduce using rule 148 (number_exp -> integer_number .)
    KEYWORD_UNION   reduce using rule 148 (number_exp -> integer_number .)
    TYPE_CHAR       reduce using rule 148 (number_exp -> integer_number .)
    TYPE_INT        reduce using rule 148 (number_exp -> integer_number .)
    TYPE_SHORT      reduce using rule 148 (number_exp -> integer_number .)
    TYPE_LONG       reduce using rule 148 (number_exp -> integer_number .)
    TYPE_FLOAT      reduce using rule 148 (number_exp -> integer_number .)
    TYPE_DOUBLE     reduce using rule 148 (number_exp -> integer_number .)
    TYPE_VOID       reduce using rule 148 (number_exp -> integer_number .)
    KEYWORD_STATIC  reduce using rule 148 (number_exp -> integer_number .)
    KEYWORD_UNSIGNED reduce using rule 148 (number_exp -> integer_number .)
    KEYWORD_VOLATILE reduce using rule 148 (number_exp -> integer_number .)
    KEYWORD_EXTERN  reduce using rule 148 (number_exp -> integer_number .)
    KEYWORD_SIGNED  reduce using rule 148 (number_exp -> integer_number .)
    KEYWORD_REGISTER reduce using rule 148 (number_exp -> integer_number .)
    KEYWORD_AUTO    reduce using rule 148 (number_exp -> integer_number .)
    BITWISE_COMPLEMENT reduce using rule 148 (number_exp -> integer_number .)
    NOT             reduce using rule 148 (number_exp -> integer_number .)
    KEYWORD_SIZEOF  reduce using rule 148 (number_exp -> integer_number .)
    IDENTIFIER      reduce using rule 148 (number_exp -> integer_number .)
    STRING          reduce using rule 148 (number_exp -> integer_number .)
    FLOAT_NUMBER    reduce using rule 148 (number_exp -> integer_number .)
    CHARACTER       reduce using rule 148 (number_exp -> integer_number .)
    NUMBER          reduce using rule 148 (number_exp -> integer_number .)
    BINARY_NUMBER   reduce using rule 148 (number_exp -> integer_number .)
    HEXADECIMAL_NUMBER reduce using rule 148 (number_exp -> integer_number .)
    OCTAL_NUMBER    reduce using rule 148 (number_exp -> integer_number .)
    $end            reduce using rule 148 (number_exp -> integer_number .)
    RPAREN          reduce using rule 148 (number_exp -> integer_number .)
    SEMICOLON       reduce using rule 148 (number_exp -> integer_number .)
    COLON           reduce using rule 148 (number_exp -> integer_number .)
    RBRACKET        reduce using rule 148 (number_exp -> integer_number .)
    COMMA           reduce using rule 148 (number_exp -> integer_number .)


state 58

    (149) number_exp -> FLOAT_NUMBER .

    LBRACKET        reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    LPAREN          reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    DOT             reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    ARROW           reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    INCREMENT       reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    DECREMENT       reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    ASSIGN          reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    TIMES_ASSIGN    reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    MODULUS_ASSIGN  reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    PLUS_ASSIGN     reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    MINUS_ASSIGN    reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    SHIFT_LEFT_ASSIGN reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    BITWISE_AND_ASSIGN reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    BITWISE_XOR_ASSIGN reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    BITWISE_OR_ASSIGN reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    MODULUS         reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    TIMES           reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    MINUS           reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    PLUS            reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    BITWISE_SHIFT_RIGHT reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    BITWISE_SHIFT_LEFT reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    LESS_EQUALS     reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    LESS_THEN       reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    GREATER_EQUALS  reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    GREATER_THEN    reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    NOT_EQUALS      reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    EQUALS_THEN     reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    BITWISE_AND     reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    BITWISE_XOR     reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    BITWISE_OR      reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    LOGICAL_AND     reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    LOGICAL_OR      reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    QUESTION_MARK   reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_STRUCT  reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_UNION   reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    TYPE_CHAR       reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    TYPE_INT        reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    TYPE_SHORT      reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    TYPE_LONG       reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    TYPE_FLOAT      reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    TYPE_DOUBLE     reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    TYPE_VOID       reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_STATIC  reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_UNSIGNED reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_VOLATILE reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_EXTERN  reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_SIGNED  reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_REGISTER reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_AUTO    reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    BITWISE_COMPLEMENT reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    NOT             reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    KEYWORD_SIZEOF  reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    IDENTIFIER      reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    STRING          reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    FLOAT_NUMBER    reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    CHARACTER       reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    NUMBER          reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    BINARY_NUMBER   reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    HEXADECIMAL_NUMBER reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    OCTAL_NUMBER    reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    $end            reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    RPAREN          reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    SEMICOLON       reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    COLON           reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    RBRACKET        reduce using rule 149 (number_exp -> FLOAT_NUMBER .)
    COMMA           reduce using rule 149 (number_exp -> FLOAT_NUMBER .)


state 59

    (150) number_exp -> CHARACTER .

    LBRACKET        reduce using rule 150 (number_exp -> CHARACTER .)
    LPAREN          reduce using rule 150 (number_exp -> CHARACTER .)
    DOT             reduce using rule 150 (number_exp -> CHARACTER .)
    ARROW           reduce using rule 150 (number_exp -> CHARACTER .)
    INCREMENT       reduce using rule 150 (number_exp -> CHARACTER .)
    DECREMENT       reduce using rule 150 (number_exp -> CHARACTER .)
    ASSIGN          reduce using rule 150 (number_exp -> CHARACTER .)
    TIMES_ASSIGN    reduce using rule 150 (number_exp -> CHARACTER .)
    DIVIDE_ASSIGN   reduce using rule 150 (number_exp -> CHARACTER .)
    MODULUS_ASSIGN  reduce using rule 150 (number_exp -> CHARACTER .)
    PLUS_ASSIGN     reduce using rule 150 (number_exp -> CHARACTER .)
    MINUS_ASSIGN    reduce using rule 150 (number_exp -> CHARACTER .)
    SHIFT_LEFT_ASSIGN reduce using rule 150 (number_exp -> CHARACTER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 150 (number_exp -> CHARACTER .)
    BITWISE_AND_ASSIGN reduce using rule 150 (number_exp -> CHARACTER .)
    BITWISE_XOR_ASSIGN reduce using rule 150 (number_exp -> CHARACTER .)
    BITWISE_OR_ASSIGN reduce using rule 150 (number_exp -> CHARACTER .)
    MODULUS         reduce using rule 150 (number_exp -> CHARACTER .)
    DIVIDE          reduce using rule 150 (number_exp -> CHARACTER .)
    TIMES           reduce using rule 150 (number_exp -> CHARACTER .)
    MINUS           reduce using rule 150 (number_exp -> CHARACTER .)
    PLUS            reduce using rule 150 (number_exp -> CHARACTER .)
    BITWISE_SHIFT_RIGHT reduce using rule 150 (number_exp -> CHARACTER .)
    BITWISE_SHIFT_LEFT reduce using rule 150 (number_exp -> CHARACTER .)
    LESS_EQUALS     reduce using rule 150 (number_exp -> CHARACTER .)
    LESS_THEN       reduce using rule 150 (number_exp -> CHARACTER .)
    GREATER_EQUALS  reduce using rule 150 (number_exp -> CHARACTER .)
    GREATER_THEN    reduce using rule 150 (number_exp -> CHARACTER .)
    NOT_EQUALS      reduce using rule 150 (number_exp -> CHARACTER .)
    EQUALS_THEN     reduce using rule 150 (number_exp -> CHARACTER .)
    BITWISE_AND     reduce using rule 150 (number_exp -> CHARACTER .)
    BITWISE_XOR     reduce using rule 150 (number_exp -> CHARACTER .)
    BITWISE_OR      reduce using rule 150 (number_exp -> CHARACTER .)
    LOGICAL_AND     reduce using rule 150 (number_exp -> CHARACTER .)
    LOGICAL_OR      reduce using rule 150 (number_exp -> CHARACTER .)
    QUESTION_MARK   reduce using rule 150 (number_exp -> CHARACTER .)
    KEYWORD_STRUCT  reduce using rule 150 (number_exp -> CHARACTER .)
    KEYWORD_UNION   reduce using rule 150 (number_exp -> CHARACTER .)
    TYPE_CHAR       reduce using rule 150 (number_exp -> CHARACTER .)
    TYPE_INT        reduce using rule 150 (number_exp -> CHARACTER .)
    TYPE_SHORT      reduce using rule 150 (number_exp -> CHARACTER .)
    TYPE_LONG       reduce using rule 150 (number_exp -> CHARACTER .)
    TYPE_FLOAT      reduce using rule 150 (number_exp -> CHARACTER .)
    TYPE_DOUBLE     reduce using rule 150 (number_exp -> CHARACTER .)
    TYPE_VOID       reduce using rule 150 (number_exp -> CHARACTER .)
    KEYWORD_STATIC  reduce using rule 150 (number_exp -> CHARACTER .)
    KEYWORD_UNSIGNED reduce using rule 150 (number_exp -> CHARACTER .)
    KEYWORD_VOLATILE reduce using rule 150 (number_exp -> CHARACTER .)
    KEYWORD_EXTERN  reduce using rule 150 (number_exp -> CHARACTER .)
    KEYWORD_SIGNED  reduce using rule 150 (number_exp -> CHARACTER .)
    KEYWORD_REGISTER reduce using rule 150 (number_exp -> CHARACTER .)
    KEYWORD_AUTO    reduce using rule 150 (number_exp -> CHARACTER .)
    BITWISE_COMPLEMENT reduce using rule 150 (number_exp -> CHARACTER .)
    NOT             reduce using rule 150 (number_exp -> CHARACTER .)
    KEYWORD_SIZEOF  reduce using rule 150 (number_exp -> CHARACTER .)
    IDENTIFIER      reduce using rule 150 (number_exp -> CHARACTER .)
    STRING          reduce using rule 150 (number_exp -> CHARACTER .)
    FLOAT_NUMBER    reduce using rule 150 (number_exp -> CHARACTER .)
    CHARACTER       reduce using rule 150 (number_exp -> CHARACTER .)
    NUMBER          reduce using rule 150 (number_exp -> CHARACTER .)
    BINARY_NUMBER   reduce using rule 150 (number_exp -> CHARACTER .)
    HEXADECIMAL_NUMBER reduce using rule 150 (number_exp -> CHARACTER .)
    OCTAL_NUMBER    reduce using rule 150 (number_exp -> CHARACTER .)
    $end            reduce using rule 150 (number_exp -> CHARACTER .)
    RPAREN          reduce using rule 150 (number_exp -> CHARACTER .)
    SEMICOLON       reduce using rule 150 (number_exp -> CHARACTER .)
    COLON           reduce using rule 150 (number_exp -> CHARACTER .)
    RBRACKET        reduce using rule 150 (number_exp -> CHARACTER .)
    COMMA           reduce using rule 150 (number_exp -> CHARACTER .)


state 60

    (151) number_exp -> parentesis_exp .

    LBRACKET        reduce using rule 151 (number_exp -> parentesis_exp .)
    LPAREN          reduce using rule 151 (number_exp -> parentesis_exp .)
    DOT             reduce using rule 151 (number_exp -> parentesis_exp .)
    ARROW           reduce using rule 151 (number_exp -> parentesis_exp .)
    INCREMENT       reduce using rule 151 (number_exp -> parentesis_exp .)
    DECREMENT       reduce using rule 151 (number_exp -> parentesis_exp .)
    ASSIGN          reduce using rule 151 (number_exp -> parentesis_exp .)
    TIMES_ASSIGN    reduce using rule 151 (number_exp -> parentesis_exp .)
    DIVIDE_ASSIGN   reduce using rule 151 (number_exp -> parentesis_exp .)
    MODULUS_ASSIGN  reduce using rule 151 (number_exp -> parentesis_exp .)
    PLUS_ASSIGN     reduce using rule 151 (number_exp -> parentesis_exp .)
    MINUS_ASSIGN    reduce using rule 151 (number_exp -> parentesis_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 151 (number_exp -> parentesis_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 151 (number_exp -> parentesis_exp .)
    BITWISE_AND_ASSIGN reduce using rule 151 (number_exp -> parentesis_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 151 (number_exp -> parentesis_exp .)
    BITWISE_OR_ASSIGN reduce using rule 151 (number_exp -> parentesis_exp .)
    MODULUS         reduce using rule 151 (number_exp -> parentesis_exp .)
    DIVIDE          reduce using rule 151 (number_exp -> parentesis_exp .)
    TIMES           reduce using rule 151 (number_exp -> parentesis_exp .)
    MINUS           reduce using rule 151 (number_exp -> parentesis_exp .)
    PLUS            reduce using rule 151 (number_exp -> parentesis_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 151 (number_exp -> parentesis_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 151 (number_exp -> parentesis_exp .)
    LESS_EQUALS     reduce using rule 151 (number_exp -> parentesis_exp .)
    LESS_THEN       reduce using rule 151 (number_exp -> parentesis_exp .)
    GREATER_EQUALS  reduce using rule 151 (number_exp -> parentesis_exp .)
    GREATER_THEN    reduce using rule 151 (number_exp -> parentesis_exp .)
    NOT_EQUALS      reduce using rule 151 (number_exp -> parentesis_exp .)
    EQUALS_THEN     reduce using rule 151 (number_exp -> parentesis_exp .)
    BITWISE_AND     reduce using rule 151 (number_exp -> parentesis_exp .)
    BITWISE_XOR     reduce using rule 151 (number_exp -> parentesis_exp .)
    BITWISE_OR      reduce using rule 151 (number_exp -> parentesis_exp .)
    LOGICAL_AND     reduce using rule 151 (number_exp -> parentesis_exp .)
    LOGICAL_OR      reduce using rule 151 (number_exp -> parentesis_exp .)
    QUESTION_MARK   reduce using rule 151 (number_exp -> parentesis_exp .)
    KEYWORD_STRUCT  reduce using rule 151 (number_exp -> parentesis_exp .)
    KEYWORD_UNION   reduce using rule 151 (number_exp -> parentesis_exp .)
    TYPE_CHAR       reduce using rule 151 (number_exp -> parentesis_exp .)
    TYPE_INT        reduce using rule 151 (number_exp -> parentesis_exp .)
    TYPE_SHORT      reduce using rule 151 (number_exp -> parentesis_exp .)
    TYPE_LONG       reduce using rule 151 (number_exp -> parentesis_exp .)
    TYPE_FLOAT      reduce using rule 151 (number_exp -> parentesis_exp .)
    TYPE_DOUBLE     reduce using rule 151 (number_exp -> parentesis_exp .)
    TYPE_VOID       reduce using rule 151 (number_exp -> parentesis_exp .)
    KEYWORD_STATIC  reduce using rule 151 (number_exp -> parentesis_exp .)
    KEYWORD_UNSIGNED reduce using rule 151 (number_exp -> parentesis_exp .)
    KEYWORD_VOLATILE reduce using rule 151 (number_exp -> parentesis_exp .)
    KEYWORD_EXTERN  reduce using rule 151 (number_exp -> parentesis_exp .)
    KEYWORD_SIGNED  reduce using rule 151 (number_exp -> parentesis_exp .)
    KEYWORD_REGISTER reduce using rule 151 (number_exp -> parentesis_exp .)
    KEYWORD_AUTO    reduce using rule 151 (number_exp -> parentesis_exp .)
    BITWISE_COMPLEMENT reduce using rule 151 (number_exp -> parentesis_exp .)
    NOT             reduce using rule 151 (number_exp -> parentesis_exp .)
    KEYWORD_SIZEOF  reduce using rule 151 (number_exp -> parentesis_exp .)
    IDENTIFIER      reduce using rule 151 (number_exp -> parentesis_exp .)
    STRING          reduce using rule 151 (number_exp -> parentesis_exp .)
    FLOAT_NUMBER    reduce using rule 151 (number_exp -> parentesis_exp .)
    CHARACTER       reduce using rule 151 (number_exp -> parentesis_exp .)
    NUMBER          reduce using rule 151 (number_exp -> parentesis_exp .)
    BINARY_NUMBER   reduce using rule 151 (number_exp -> parentesis_exp .)
    HEXADECIMAL_NUMBER reduce using rule 151 (number_exp -> parentesis_exp .)
    OCTAL_NUMBER    reduce using rule 151 (number_exp -> parentesis_exp .)
    $end            reduce using rule 151 (number_exp -> parentesis_exp .)
    RPAREN          reduce using rule 151 (number_exp -> parentesis_exp .)
    SEMICOLON       reduce using rule 151 (number_exp -> parentesis_exp .)
    COLON           reduce using rule 151 (number_exp -> parentesis_exp .)
    RBRACKET        reduce using rule 151 (number_exp -> parentesis_exp .)
    COMMA           reduce using rule 151 (number_exp -> parentesis_exp .)


state 61

    (88) bitwise_and_exp -> is_equals_exp .
    (89) is_equals_exp -> is_equals_exp . EQUALS_THEN is_not_equals_exp

    BITWISE_AND     reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    BITWISE_XOR     reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    BITWISE_OR      reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    LOGICAL_AND     reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    LOGICAL_OR      reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    QUESTION_MARK   reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_STRUCT  reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_UNION   reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    TYPE_CHAR       reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    TYPE_INT        reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    TYPE_SHORT      reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    TYPE_LONG       reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    TYPE_FLOAT      reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    TYPE_DOUBLE     reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    TYPE_VOID       reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_STATIC  reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_UNSIGNED reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_VOLATILE reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_EXTERN  reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_SIGNED  reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_REGISTER reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_AUTO    reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    INCREMENT       reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    DECREMENT       reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    TIMES           reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    PLUS            reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    MINUS           reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    BITWISE_COMPLEMENT reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    NOT             reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    LPAREN          reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    KEYWORD_SIZEOF  reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    IDENTIFIER      reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    STRING          reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    FLOAT_NUMBER    reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    CHARACTER       reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    NUMBER          reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    BINARY_NUMBER   reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    HEXADECIMAL_NUMBER reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    OCTAL_NUMBER    reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    $end            reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    RPAREN          reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    SEMICOLON       reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    COLON           reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    RBRACKET        reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    COMMA           reduce using rule 88 (bitwise_and_exp -> is_equals_exp .)
    EQUALS_THEN     shift and go to state 125


state 62

    (58) integer_number -> NUMBER .

    LBRACKET        reduce using rule 58 (integer_number -> NUMBER .)
    LPAREN          reduce using rule 58 (integer_number -> NUMBER .)
    DOT             reduce using rule 58 (integer_number -> NUMBER .)
    ARROW           reduce using rule 58 (integer_number -> NUMBER .)
    INCREMENT       reduce using rule 58 (integer_number -> NUMBER .)
    DECREMENT       reduce using rule 58 (integer_number -> NUMBER .)
    ASSIGN          reduce using rule 58 (integer_number -> NUMBER .)
    TIMES_ASSIGN    reduce using rule 58 (integer_number -> NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 58 (integer_number -> NUMBER .)
    MODULUS_ASSIGN  reduce using rule 58 (integer_number -> NUMBER .)
    PLUS_ASSIGN     reduce using rule 58 (integer_number -> NUMBER .)
    MINUS_ASSIGN    reduce using rule 58 (integer_number -> NUMBER .)
    SHIFT_LEFT_ASSIGN reduce using rule 58 (integer_number -> NUMBER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 58 (integer_number -> NUMBER .)
    BITWISE_AND_ASSIGN reduce using rule 58 (integer_number -> NUMBER .)
    BITWISE_XOR_ASSIGN reduce using rule 58 (integer_number -> NUMBER .)
    BITWISE_OR_ASSIGN reduce using rule 58 (integer_number -> NUMBER .)
    MODULUS         reduce using rule 58 (integer_number -> NUMBER .)
    DIVIDE          reduce using rule 58 (integer_number -> NUMBER .)
    TIMES           reduce using rule 58 (integer_number -> NUMBER .)
    MINUS           reduce using rule 58 (integer_number -> NUMBER .)
    PLUS            reduce using rule 58 (integer_number -> NUMBER .)
    BITWISE_SHIFT_RIGHT reduce using rule 58 (integer_number -> NUMBER .)
    BITWISE_SHIFT_LEFT reduce using rule 58 (integer_number -> NUMBER .)
    LESS_EQUALS     reduce using rule 58 (integer_number -> NUMBER .)
    LESS_THEN       reduce using rule 58 (integer_number -> NUMBER .)
    GREATER_EQUALS  reduce using rule 58 (integer_number -> NUMBER .)
    GREATER_THEN    reduce using rule 58 (integer_number -> NUMBER .)
    NOT_EQUALS      reduce using rule 58 (integer_number -> NUMBER .)
    EQUALS_THEN     reduce using rule 58 (integer_number -> NUMBER .)
    BITWISE_AND     reduce using rule 58 (integer_number -> NUMBER .)
    BITWISE_XOR     reduce using rule 58 (integer_number -> NUMBER .)
    BITWISE_OR      reduce using rule 58 (integer_number -> NUMBER .)
    LOGICAL_AND     reduce using rule 58 (integer_number -> NUMBER .)
    LOGICAL_OR      reduce using rule 58 (integer_number -> NUMBER .)
    QUESTION_MARK   reduce using rule 58 (integer_number -> NUMBER .)
    KEYWORD_STRUCT  reduce using rule 58 (integer_number -> NUMBER .)
    KEYWORD_UNION   reduce using rule 58 (integer_number -> NUMBER .)
    TYPE_CHAR       reduce using rule 58 (integer_number -> NUMBER .)
    TYPE_INT        reduce using rule 58 (integer_number -> NUMBER .)
    TYPE_SHORT      reduce using rule 58 (integer_number -> NUMBER .)
    TYPE_LONG       reduce using rule 58 (integer_number -> NUMBER .)
    TYPE_FLOAT      reduce using rule 58 (integer_number -> NUMBER .)
    TYPE_DOUBLE     reduce using rule 58 (integer_number -> NUMBER .)
    TYPE_VOID       reduce using rule 58 (integer_number -> NUMBER .)
    KEYWORD_STATIC  reduce using rule 58 (integer_number -> NUMBER .)
    KEYWORD_UNSIGNED reduce using rule 58 (integer_number -> NUMBER .)
    KEYWORD_VOLATILE reduce using rule 58 (integer_number -> NUMBER .)
    KEYWORD_EXTERN  reduce using rule 58 (integer_number -> NUMBER .)
    KEYWORD_SIGNED  reduce using rule 58 (integer_number -> NUMBER .)
    KEYWORD_REGISTER reduce using rule 58 (integer_number -> NUMBER .)
    KEYWORD_AUTO    reduce using rule 58 (integer_number -> NUMBER .)
    BITWISE_COMPLEMENT reduce using rule 58 (integer_number -> NUMBER .)
    NOT             reduce using rule 58 (integer_number -> NUMBER .)
    KEYWORD_SIZEOF  reduce using rule 58 (integer_number -> NUMBER .)
    IDENTIFIER      reduce using rule 58 (integer_number -> NUMBER .)
    STRING          reduce using rule 58 (integer_number -> NUMBER .)
    FLOAT_NUMBER    reduce using rule 58 (integer_number -> NUMBER .)
    CHARACTER       reduce using rule 58 (integer_number -> NUMBER .)
    NUMBER          reduce using rule 58 (integer_number -> NUMBER .)
    BINARY_NUMBER   reduce using rule 58 (integer_number -> NUMBER .)
    HEXADECIMAL_NUMBER reduce using rule 58 (integer_number -> NUMBER .)
    OCTAL_NUMBER    reduce using rule 58 (integer_number -> NUMBER .)
    $end            reduce using rule 58 (integer_number -> NUMBER .)
    RPAREN          reduce using rule 58 (integer_number -> NUMBER .)
    SEMICOLON       reduce using rule 58 (integer_number -> NUMBER .)
    COLON           reduce using rule 58 (integer_number -> NUMBER .)
    RBRACKET        reduce using rule 58 (integer_number -> NUMBER .)
    COMMA           reduce using rule 58 (integer_number -> NUMBER .)


state 63

    (59) integer_number -> BINARY_NUMBER .

    LBRACKET        reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    LPAREN          reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    DOT             reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    ARROW           reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    INCREMENT       reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    DECREMENT       reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    ASSIGN          reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    TIMES_ASSIGN    reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    MODULUS_ASSIGN  reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    PLUS_ASSIGN     reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    MINUS_ASSIGN    reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    SHIFT_LEFT_ASSIGN reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    BITWISE_AND_ASSIGN reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    BITWISE_XOR_ASSIGN reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    BITWISE_OR_ASSIGN reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    MODULUS         reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    DIVIDE          reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    TIMES           reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    MINUS           reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    PLUS            reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    BITWISE_SHIFT_RIGHT reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    BITWISE_SHIFT_LEFT reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    LESS_EQUALS     reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    LESS_THEN       reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    GREATER_EQUALS  reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    GREATER_THEN    reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    NOT_EQUALS      reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    EQUALS_THEN     reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    BITWISE_AND     reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    BITWISE_XOR     reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    BITWISE_OR      reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    LOGICAL_AND     reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    LOGICAL_OR      reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    QUESTION_MARK   reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    KEYWORD_STRUCT  reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    KEYWORD_UNION   reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    TYPE_CHAR       reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    TYPE_INT        reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    TYPE_SHORT      reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    TYPE_LONG       reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    TYPE_FLOAT      reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    TYPE_DOUBLE     reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    TYPE_VOID       reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    KEYWORD_STATIC  reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    KEYWORD_UNSIGNED reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    KEYWORD_VOLATILE reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    KEYWORD_EXTERN  reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    KEYWORD_SIGNED  reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    KEYWORD_REGISTER reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    KEYWORD_AUTO    reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    BITWISE_COMPLEMENT reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    NOT             reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    KEYWORD_SIZEOF  reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    IDENTIFIER      reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    STRING          reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    FLOAT_NUMBER    reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    CHARACTER       reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    NUMBER          reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    BINARY_NUMBER   reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    HEXADECIMAL_NUMBER reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    OCTAL_NUMBER    reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    $end            reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    RPAREN          reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    SEMICOLON       reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    COLON           reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    RBRACKET        reduce using rule 59 (integer_number -> BINARY_NUMBER .)
    COMMA           reduce using rule 59 (integer_number -> BINARY_NUMBER .)


state 64

    (60) integer_number -> HEXADECIMAL_NUMBER .

    LBRACKET        reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    LPAREN          reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    DOT             reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    ARROW           reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    INCREMENT       reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    DECREMENT       reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    ASSIGN          reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    TIMES_ASSIGN    reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    MODULUS_ASSIGN  reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    PLUS_ASSIGN     reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    MINUS_ASSIGN    reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    SHIFT_LEFT_ASSIGN reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_AND_ASSIGN reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_XOR_ASSIGN reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_OR_ASSIGN reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    MODULUS         reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    DIVIDE          reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    TIMES           reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    MINUS           reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    PLUS            reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_SHIFT_RIGHT reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_SHIFT_LEFT reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    LESS_EQUALS     reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    LESS_THEN       reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    GREATER_EQUALS  reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    GREATER_THEN    reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    NOT_EQUALS      reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    EQUALS_THEN     reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_AND     reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_XOR     reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_OR      reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    LOGICAL_AND     reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    LOGICAL_OR      reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    QUESTION_MARK   reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_STRUCT  reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_UNION   reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    TYPE_CHAR       reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    TYPE_INT        reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    TYPE_SHORT      reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    TYPE_LONG       reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    TYPE_FLOAT      reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    TYPE_DOUBLE     reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    TYPE_VOID       reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_STATIC  reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_UNSIGNED reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_VOLATILE reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_EXTERN  reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_SIGNED  reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_REGISTER reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_AUTO    reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_COMPLEMENT reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    NOT             reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    KEYWORD_SIZEOF  reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    IDENTIFIER      reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    STRING          reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    FLOAT_NUMBER    reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    CHARACTER       reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    NUMBER          reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    BINARY_NUMBER   reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    HEXADECIMAL_NUMBER reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    OCTAL_NUMBER    reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    $end            reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    RPAREN          reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    SEMICOLON       reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    COLON           reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    RBRACKET        reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)
    COMMA           reduce using rule 60 (integer_number -> HEXADECIMAL_NUMBER .)


state 65

    (61) integer_number -> OCTAL_NUMBER .

    LBRACKET        reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    LPAREN          reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    DOT             reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    ARROW           reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    INCREMENT       reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    DECREMENT       reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    ASSIGN          reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    TIMES_ASSIGN    reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    MODULUS_ASSIGN  reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    PLUS_ASSIGN     reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    MINUS_ASSIGN    reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    SHIFT_LEFT_ASSIGN reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    BITWISE_AND_ASSIGN reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    BITWISE_XOR_ASSIGN reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    BITWISE_OR_ASSIGN reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    MODULUS         reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    DIVIDE          reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    TIMES           reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    MINUS           reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    PLUS            reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    BITWISE_SHIFT_RIGHT reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    BITWISE_SHIFT_LEFT reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    LESS_EQUALS     reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    LESS_THEN       reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    GREATER_EQUALS  reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    GREATER_THEN    reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    NOT_EQUALS      reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    EQUALS_THEN     reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    BITWISE_AND     reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    BITWISE_XOR     reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    BITWISE_OR      reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    LOGICAL_AND     reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    LOGICAL_OR      reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    QUESTION_MARK   reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_STRUCT  reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_UNION   reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    TYPE_CHAR       reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    TYPE_INT        reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    TYPE_SHORT      reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    TYPE_LONG       reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    TYPE_FLOAT      reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    TYPE_DOUBLE     reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    TYPE_VOID       reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_STATIC  reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_UNSIGNED reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_VOLATILE reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_EXTERN  reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_SIGNED  reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_REGISTER reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_AUTO    reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    BITWISE_COMPLEMENT reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    NOT             reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    KEYWORD_SIZEOF  reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    IDENTIFIER      reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    STRING          reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    FLOAT_NUMBER    reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    CHARACTER       reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    NUMBER          reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    BINARY_NUMBER   reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    HEXADECIMAL_NUMBER reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    OCTAL_NUMBER    reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    $end            reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    RPAREN          reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    SEMICOLON       reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    COLON           reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    RBRACKET        reduce using rule 61 (integer_number -> OCTAL_NUMBER .)
    COMMA           reduce using rule 61 (integer_number -> OCTAL_NUMBER .)


state 66

    (90) is_equals_exp -> is_not_equals_exp .
    (91) is_not_equals_exp -> is_not_equals_exp . NOT_EQUALS greater_then_exp

    EQUALS_THEN     reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    BITWISE_AND     reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    BITWISE_XOR     reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    BITWISE_OR      reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    LOGICAL_AND     reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    LOGICAL_OR      reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    QUESTION_MARK   reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_STRUCT  reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_UNION   reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    TYPE_CHAR       reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    TYPE_INT        reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    TYPE_SHORT      reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    TYPE_LONG       reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    TYPE_FLOAT      reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    TYPE_DOUBLE     reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    TYPE_VOID       reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_STATIC  reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_UNSIGNED reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_VOLATILE reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_EXTERN  reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_SIGNED  reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_REGISTER reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_AUTO    reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    INCREMENT       reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    DECREMENT       reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    TIMES           reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    PLUS            reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    MINUS           reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    BITWISE_COMPLEMENT reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    NOT             reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    LPAREN          reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    KEYWORD_SIZEOF  reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    IDENTIFIER      reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    STRING          reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    FLOAT_NUMBER    reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    CHARACTER       reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    NUMBER          reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    BINARY_NUMBER   reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    HEXADECIMAL_NUMBER reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    OCTAL_NUMBER    reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    $end            reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    RPAREN          reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    SEMICOLON       reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    COLON           reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    RBRACKET        reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    COMMA           reduce using rule 90 (is_equals_exp -> is_not_equals_exp .)
    NOT_EQUALS      shift and go to state 126


state 67

    (92) is_not_equals_exp -> greater_then_exp .
    (93) greater_then_exp -> greater_then_exp . GREATER_THEN greater_equals_exp

    NOT_EQUALS      reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    EQUALS_THEN     reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    BITWISE_AND     reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    BITWISE_XOR     reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    BITWISE_OR      reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    LOGICAL_AND     reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    LOGICAL_OR      reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    QUESTION_MARK   reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_STRUCT  reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_UNION   reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    TYPE_CHAR       reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    TYPE_INT        reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    TYPE_SHORT      reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    TYPE_LONG       reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    TYPE_FLOAT      reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    TYPE_DOUBLE     reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    TYPE_VOID       reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_STATIC  reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_UNSIGNED reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_VOLATILE reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_EXTERN  reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_SIGNED  reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_REGISTER reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_AUTO    reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    INCREMENT       reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    DECREMENT       reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    TIMES           reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    PLUS            reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    MINUS           reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    BITWISE_COMPLEMENT reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    NOT             reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    LPAREN          reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    KEYWORD_SIZEOF  reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    IDENTIFIER      reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    STRING          reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    FLOAT_NUMBER    reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    CHARACTER       reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    NUMBER          reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    BINARY_NUMBER   reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    HEXADECIMAL_NUMBER reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    OCTAL_NUMBER    reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    $end            reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    RPAREN          reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    SEMICOLON       reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    COLON           reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    RBRACKET        reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    COMMA           reduce using rule 92 (is_not_equals_exp -> greater_then_exp .)
    GREATER_THEN    shift and go to state 127


state 68

    (94) greater_then_exp -> greater_equals_exp .
    (95) greater_equals_exp -> greater_equals_exp . GREATER_EQUALS less_then_exp

    GREATER_THEN    reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    NOT_EQUALS      reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    EQUALS_THEN     reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    BITWISE_AND     reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    BITWISE_XOR     reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    BITWISE_OR      reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    LOGICAL_AND     reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    LOGICAL_OR      reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    QUESTION_MARK   reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_STRUCT  reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_UNION   reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    TYPE_CHAR       reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    TYPE_INT        reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    TYPE_SHORT      reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    TYPE_LONG       reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    TYPE_FLOAT      reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    TYPE_DOUBLE     reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    TYPE_VOID       reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_STATIC  reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_UNSIGNED reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_VOLATILE reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_EXTERN  reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_SIGNED  reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_REGISTER reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_AUTO    reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    INCREMENT       reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    DECREMENT       reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    TIMES           reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    PLUS            reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    MINUS           reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    BITWISE_COMPLEMENT reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    NOT             reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    LPAREN          reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    KEYWORD_SIZEOF  reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    IDENTIFIER      reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    STRING          reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    FLOAT_NUMBER    reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    CHARACTER       reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    NUMBER          reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    BINARY_NUMBER   reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    HEXADECIMAL_NUMBER reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    OCTAL_NUMBER    reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    $end            reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    RPAREN          reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    SEMICOLON       reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    COLON           reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    RBRACKET        reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    COMMA           reduce using rule 94 (greater_then_exp -> greater_equals_exp .)
    GREATER_EQUALS  shift and go to state 128


state 69

    (96) greater_equals_exp -> less_then_exp .
    (97) less_then_exp -> less_then_exp . LESS_THEN less_equals_exp

    GREATER_EQUALS  reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    GREATER_THEN    reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    NOT_EQUALS      reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    EQUALS_THEN     reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    BITWISE_AND     reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    BITWISE_XOR     reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    BITWISE_OR      reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    LOGICAL_AND     reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    LOGICAL_OR      reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    QUESTION_MARK   reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    KEYWORD_STRUCT  reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    KEYWORD_UNION   reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    TYPE_CHAR       reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    TYPE_INT        reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    TYPE_SHORT      reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    TYPE_LONG       reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    TYPE_FLOAT      reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    TYPE_DOUBLE     reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    TYPE_VOID       reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    KEYWORD_STATIC  reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    KEYWORD_UNSIGNED reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    KEYWORD_VOLATILE reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    KEYWORD_EXTERN  reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    KEYWORD_SIGNED  reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    KEYWORD_REGISTER reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    KEYWORD_AUTO    reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    INCREMENT       reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    DECREMENT       reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    TIMES           reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    PLUS            reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    MINUS           reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    BITWISE_COMPLEMENT reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    NOT             reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    LPAREN          reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    KEYWORD_SIZEOF  reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    IDENTIFIER      reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    STRING          reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    FLOAT_NUMBER    reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    CHARACTER       reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    NUMBER          reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    BINARY_NUMBER   reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    HEXADECIMAL_NUMBER reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    OCTAL_NUMBER    reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    $end            reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    RPAREN          reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    SEMICOLON       reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    COLON           reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    RBRACKET        reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    COMMA           reduce using rule 96 (greater_equals_exp -> less_then_exp .)
    LESS_THEN       shift and go to state 129


state 70

    (98) less_then_exp -> less_equals_exp .
    (99) less_equals_exp -> less_equals_exp . LESS_EQUALS left_shift_exp

    LESS_THEN       reduce using rule 98 (less_then_exp -> less_equals_exp .)
    GREATER_EQUALS  reduce using rule 98 (less_then_exp -> less_equals_exp .)
    GREATER_THEN    reduce using rule 98 (less_then_exp -> less_equals_exp .)
    NOT_EQUALS      reduce using rule 98 (less_then_exp -> less_equals_exp .)
    EQUALS_THEN     reduce using rule 98 (less_then_exp -> less_equals_exp .)
    BITWISE_AND     reduce using rule 98 (less_then_exp -> less_equals_exp .)
    BITWISE_XOR     reduce using rule 98 (less_then_exp -> less_equals_exp .)
    BITWISE_OR      reduce using rule 98 (less_then_exp -> less_equals_exp .)
    LOGICAL_AND     reduce using rule 98 (less_then_exp -> less_equals_exp .)
    LOGICAL_OR      reduce using rule 98 (less_then_exp -> less_equals_exp .)
    QUESTION_MARK   reduce using rule 98 (less_then_exp -> less_equals_exp .)
    KEYWORD_STRUCT  reduce using rule 98 (less_then_exp -> less_equals_exp .)
    KEYWORD_UNION   reduce using rule 98 (less_then_exp -> less_equals_exp .)
    TYPE_CHAR       reduce using rule 98 (less_then_exp -> less_equals_exp .)
    TYPE_INT        reduce using rule 98 (less_then_exp -> less_equals_exp .)
    TYPE_SHORT      reduce using rule 98 (less_then_exp -> less_equals_exp .)
    TYPE_LONG       reduce using rule 98 (less_then_exp -> less_equals_exp .)
    TYPE_FLOAT      reduce using rule 98 (less_then_exp -> less_equals_exp .)
    TYPE_DOUBLE     reduce using rule 98 (less_then_exp -> less_equals_exp .)
    TYPE_VOID       reduce using rule 98 (less_then_exp -> less_equals_exp .)
    KEYWORD_STATIC  reduce using rule 98 (less_then_exp -> less_equals_exp .)
    KEYWORD_UNSIGNED reduce using rule 98 (less_then_exp -> less_equals_exp .)
    KEYWORD_VOLATILE reduce using rule 98 (less_then_exp -> less_equals_exp .)
    KEYWORD_EXTERN  reduce using rule 98 (less_then_exp -> less_equals_exp .)
    KEYWORD_SIGNED  reduce using rule 98 (less_then_exp -> less_equals_exp .)
    KEYWORD_REGISTER reduce using rule 98 (less_then_exp -> less_equals_exp .)
    KEYWORD_AUTO    reduce using rule 98 (less_then_exp -> less_equals_exp .)
    INCREMENT       reduce using rule 98 (less_then_exp -> less_equals_exp .)
    DECREMENT       reduce using rule 98 (less_then_exp -> less_equals_exp .)
    TIMES           reduce using rule 98 (less_then_exp -> less_equals_exp .)
    PLUS            reduce using rule 98 (less_then_exp -> less_equals_exp .)
    MINUS           reduce using rule 98 (less_then_exp -> less_equals_exp .)
    BITWISE_COMPLEMENT reduce using rule 98 (less_then_exp -> less_equals_exp .)
    NOT             reduce using rule 98 (less_then_exp -> less_equals_exp .)
    LPAREN          reduce using rule 98 (less_then_exp -> less_equals_exp .)
    KEYWORD_SIZEOF  reduce using rule 98 (less_then_exp -> less_equals_exp .)
    IDENTIFIER      reduce using rule 98 (less_then_exp -> less_equals_exp .)
    STRING          reduce using rule 98 (less_then_exp -> less_equals_exp .)
    FLOAT_NUMBER    reduce using rule 98 (less_then_exp -> less_equals_exp .)
    CHARACTER       reduce using rule 98 (less_then_exp -> less_equals_exp .)
    NUMBER          reduce using rule 98 (less_then_exp -> less_equals_exp .)
    BINARY_NUMBER   reduce using rule 98 (less_then_exp -> less_equals_exp .)
    HEXADECIMAL_NUMBER reduce using rule 98 (less_then_exp -> less_equals_exp .)
    OCTAL_NUMBER    reduce using rule 98 (less_then_exp -> less_equals_exp .)
    $end            reduce using rule 98 (less_then_exp -> less_equals_exp .)
    RPAREN          reduce using rule 98 (less_then_exp -> less_equals_exp .)
    SEMICOLON       reduce using rule 98 (less_then_exp -> less_equals_exp .)
    COLON           reduce using rule 98 (less_then_exp -> less_equals_exp .)
    RBRACKET        reduce using rule 98 (less_then_exp -> less_equals_exp .)
    COMMA           reduce using rule 98 (less_then_exp -> less_equals_exp .)
    LESS_EQUALS     shift and go to state 130


state 71

    (100) less_equals_exp -> left_shift_exp .
    (101) left_shift_exp -> left_shift_exp . BITWISE_SHIFT_LEFT right_shift_exp

    LESS_EQUALS     reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    LESS_THEN       reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    GREATER_EQUALS  reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    GREATER_THEN    reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    NOT_EQUALS      reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    EQUALS_THEN     reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    BITWISE_AND     reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    BITWISE_XOR     reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    BITWISE_OR      reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    LOGICAL_AND     reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    LOGICAL_OR      reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    QUESTION_MARK   reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    KEYWORD_STRUCT  reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    KEYWORD_UNION   reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    TYPE_CHAR       reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    TYPE_INT        reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    TYPE_SHORT      reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    TYPE_LONG       reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    TYPE_FLOAT      reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    TYPE_DOUBLE     reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    TYPE_VOID       reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    KEYWORD_STATIC  reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    KEYWORD_UNSIGNED reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    KEYWORD_VOLATILE reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    KEYWORD_EXTERN  reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    KEYWORD_SIGNED  reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    KEYWORD_REGISTER reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    KEYWORD_AUTO    reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    INCREMENT       reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    DECREMENT       reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    TIMES           reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    PLUS            reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    MINUS           reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    BITWISE_COMPLEMENT reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    NOT             reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    LPAREN          reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    KEYWORD_SIZEOF  reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    IDENTIFIER      reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    STRING          reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    FLOAT_NUMBER    reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    CHARACTER       reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    NUMBER          reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    BINARY_NUMBER   reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    HEXADECIMAL_NUMBER reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    OCTAL_NUMBER    reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    $end            reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    RPAREN          reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    SEMICOLON       reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    COLON           reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    RBRACKET        reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    COMMA           reduce using rule 100 (less_equals_exp -> left_shift_exp .)
    BITWISE_SHIFT_LEFT shift and go to state 131


state 72

    (102) left_shift_exp -> right_shift_exp .
    (103) right_shift_exp -> right_shift_exp . BITWISE_SHIFT_RIGHT plus_exp

    BITWISE_SHIFT_LEFT reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    LESS_EQUALS     reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    LESS_THEN       reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    GREATER_EQUALS  reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    GREATER_THEN    reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    NOT_EQUALS      reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    EQUALS_THEN     reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    BITWISE_AND     reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    BITWISE_XOR     reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    BITWISE_OR      reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    LOGICAL_AND     reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    LOGICAL_OR      reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    QUESTION_MARK   reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    KEYWORD_STRUCT  reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    KEYWORD_UNION   reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    TYPE_CHAR       reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    TYPE_INT        reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    TYPE_SHORT      reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    TYPE_LONG       reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    TYPE_FLOAT      reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    TYPE_DOUBLE     reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    TYPE_VOID       reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    KEYWORD_STATIC  reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    KEYWORD_UNSIGNED reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    KEYWORD_VOLATILE reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    KEYWORD_EXTERN  reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    KEYWORD_SIGNED  reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    KEYWORD_REGISTER reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    KEYWORD_AUTO    reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    INCREMENT       reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    DECREMENT       reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    TIMES           reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    PLUS            reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    MINUS           reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    BITWISE_COMPLEMENT reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    NOT             reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    LPAREN          reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    KEYWORD_SIZEOF  reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    IDENTIFIER      reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    STRING          reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    FLOAT_NUMBER    reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    CHARACTER       reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    NUMBER          reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    BINARY_NUMBER   reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    HEXADECIMAL_NUMBER reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    OCTAL_NUMBER    reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    $end            reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    RPAREN          reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    SEMICOLON       reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    COLON           reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    RBRACKET        reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    COMMA           reduce using rule 102 (left_shift_exp -> right_shift_exp .)
    BITWISE_SHIFT_RIGHT shift and go to state 132


state 73

    (104) right_shift_exp -> plus_exp .
    (105) plus_exp -> plus_exp . PLUS minus_exp

  ! shift/reduce conflict for PLUS resolved as shift
    BITWISE_SHIFT_RIGHT reduce using rule 104 (right_shift_exp -> plus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 104 (right_shift_exp -> plus_exp .)
    LESS_EQUALS     reduce using rule 104 (right_shift_exp -> plus_exp .)
    LESS_THEN       reduce using rule 104 (right_shift_exp -> plus_exp .)
    GREATER_EQUALS  reduce using rule 104 (right_shift_exp -> plus_exp .)
    GREATER_THEN    reduce using rule 104 (right_shift_exp -> plus_exp .)
    NOT_EQUALS      reduce using rule 104 (right_shift_exp -> plus_exp .)
    EQUALS_THEN     reduce using rule 104 (right_shift_exp -> plus_exp .)
    BITWISE_AND     reduce using rule 104 (right_shift_exp -> plus_exp .)
    BITWISE_XOR     reduce using rule 104 (right_shift_exp -> plus_exp .)
    BITWISE_OR      reduce using rule 104 (right_shift_exp -> plus_exp .)
    LOGICAL_AND     reduce using rule 104 (right_shift_exp -> plus_exp .)
    LOGICAL_OR      reduce using rule 104 (right_shift_exp -> plus_exp .)
    QUESTION_MARK   reduce using rule 104 (right_shift_exp -> plus_exp .)
    KEYWORD_STRUCT  reduce using rule 104 (right_shift_exp -> plus_exp .)
    KEYWORD_UNION   reduce using rule 104 (right_shift_exp -> plus_exp .)
    TYPE_CHAR       reduce using rule 104 (right_shift_exp -> plus_exp .)
    TYPE_INT        reduce using rule 104 (right_shift_exp -> plus_exp .)
    TYPE_SHORT      reduce using rule 104 (right_shift_exp -> plus_exp .)
    TYPE_LONG       reduce using rule 104 (right_shift_exp -> plus_exp .)
    TYPE_FLOAT      reduce using rule 104 (right_shift_exp -> plus_exp .)
    TYPE_DOUBLE     reduce using rule 104 (right_shift_exp -> plus_exp .)
    TYPE_VOID       reduce using rule 104 (right_shift_exp -> plus_exp .)
    KEYWORD_STATIC  reduce using rule 104 (right_shift_exp -> plus_exp .)
    KEYWORD_UNSIGNED reduce using rule 104 (right_shift_exp -> plus_exp .)
    KEYWORD_VOLATILE reduce using rule 104 (right_shift_exp -> plus_exp .)
    KEYWORD_EXTERN  reduce using rule 104 (right_shift_exp -> plus_exp .)
    KEYWORD_SIGNED  reduce using rule 104 (right_shift_exp -> plus_exp .)
    KEYWORD_REGISTER reduce using rule 104 (right_shift_exp -> plus_exp .)
    KEYWORD_AUTO    reduce using rule 104 (right_shift_exp -> plus_exp .)
    INCREMENT       reduce using rule 104 (right_shift_exp -> plus_exp .)
    DECREMENT       reduce using rule 104 (right_shift_exp -> plus_exp .)
    TIMES           reduce using rule 104 (right_shift_exp -> plus_exp .)
    MINUS           reduce using rule 104 (right_shift_exp -> plus_exp .)
    BITWISE_COMPLEMENT reduce using rule 104 (right_shift_exp -> plus_exp .)
    NOT             reduce using rule 104 (right_shift_exp -> plus_exp .)
    LPAREN          reduce using rule 104 (right_shift_exp -> plus_exp .)
    KEYWORD_SIZEOF  reduce using rule 104 (right_shift_exp -> plus_exp .)
    IDENTIFIER      reduce using rule 104 (right_shift_exp -> plus_exp .)
    STRING          reduce using rule 104 (right_shift_exp -> plus_exp .)
    FLOAT_NUMBER    reduce using rule 104 (right_shift_exp -> plus_exp .)
    CHARACTER       reduce using rule 104 (right_shift_exp -> plus_exp .)
    NUMBER          reduce using rule 104 (right_shift_exp -> plus_exp .)
    BINARY_NUMBER   reduce using rule 104 (right_shift_exp -> plus_exp .)
    HEXADECIMAL_NUMBER reduce using rule 104 (right_shift_exp -> plus_exp .)
    OCTAL_NUMBER    reduce using rule 104 (right_shift_exp -> plus_exp .)
    $end            reduce using rule 104 (right_shift_exp -> plus_exp .)
    RPAREN          reduce using rule 104 (right_shift_exp -> plus_exp .)
    SEMICOLON       reduce using rule 104 (right_shift_exp -> plus_exp .)
    COLON           reduce using rule 104 (right_shift_exp -> plus_exp .)
    RBRACKET        reduce using rule 104 (right_shift_exp -> plus_exp .)
    COMMA           reduce using rule 104 (right_shift_exp -> plus_exp .)
    PLUS            shift and go to state 133

  ! PLUS            [ reduce using rule 104 (right_shift_exp -> plus_exp .) ]


state 74

    (106) plus_exp -> minus_exp .
    (107) minus_exp -> minus_exp . MINUS times_exp

  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            reduce using rule 106 (plus_exp -> minus_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 106 (plus_exp -> minus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 106 (plus_exp -> minus_exp .)
    LESS_EQUALS     reduce using rule 106 (plus_exp -> minus_exp .)
    LESS_THEN       reduce using rule 106 (plus_exp -> minus_exp .)
    GREATER_EQUALS  reduce using rule 106 (plus_exp -> minus_exp .)
    GREATER_THEN    reduce using rule 106 (plus_exp -> minus_exp .)
    NOT_EQUALS      reduce using rule 106 (plus_exp -> minus_exp .)
    EQUALS_THEN     reduce using rule 106 (plus_exp -> minus_exp .)
    BITWISE_AND     reduce using rule 106 (plus_exp -> minus_exp .)
    BITWISE_XOR     reduce using rule 106 (plus_exp -> minus_exp .)
    BITWISE_OR      reduce using rule 106 (plus_exp -> minus_exp .)
    LOGICAL_AND     reduce using rule 106 (plus_exp -> minus_exp .)
    LOGICAL_OR      reduce using rule 106 (plus_exp -> minus_exp .)
    QUESTION_MARK   reduce using rule 106 (plus_exp -> minus_exp .)
    KEYWORD_STRUCT  reduce using rule 106 (plus_exp -> minus_exp .)
    KEYWORD_UNION   reduce using rule 106 (plus_exp -> minus_exp .)
    TYPE_CHAR       reduce using rule 106 (plus_exp -> minus_exp .)
    TYPE_INT        reduce using rule 106 (plus_exp -> minus_exp .)
    TYPE_SHORT      reduce using rule 106 (plus_exp -> minus_exp .)
    TYPE_LONG       reduce using rule 106 (plus_exp -> minus_exp .)
    TYPE_FLOAT      reduce using rule 106 (plus_exp -> minus_exp .)
    TYPE_DOUBLE     reduce using rule 106 (plus_exp -> minus_exp .)
    TYPE_VOID       reduce using rule 106 (plus_exp -> minus_exp .)
    KEYWORD_STATIC  reduce using rule 106 (plus_exp -> minus_exp .)
    KEYWORD_UNSIGNED reduce using rule 106 (plus_exp -> minus_exp .)
    KEYWORD_VOLATILE reduce using rule 106 (plus_exp -> minus_exp .)
    KEYWORD_EXTERN  reduce using rule 106 (plus_exp -> minus_exp .)
    KEYWORD_SIGNED  reduce using rule 106 (plus_exp -> minus_exp .)
    KEYWORD_REGISTER reduce using rule 106 (plus_exp -> minus_exp .)
    KEYWORD_AUTO    reduce using rule 106 (plus_exp -> minus_exp .)
    INCREMENT       reduce using rule 106 (plus_exp -> minus_exp .)
    DECREMENT       reduce using rule 106 (plus_exp -> minus_exp .)
    TIMES           reduce using rule 106 (plus_exp -> minus_exp .)
    BITWISE_COMPLEMENT reduce using rule 106 (plus_exp -> minus_exp .)
    NOT             reduce using rule 106 (plus_exp -> minus_exp .)
    LPAREN          reduce using rule 106 (plus_exp -> minus_exp .)
    KEYWORD_SIZEOF  reduce using rule 106 (plus_exp -> minus_exp .)
    IDENTIFIER      reduce using rule 106 (plus_exp -> minus_exp .)
    STRING          reduce using rule 106 (plus_exp -> minus_exp .)
    FLOAT_NUMBER    reduce using rule 106 (plus_exp -> minus_exp .)
    CHARACTER       reduce using rule 106 (plus_exp -> minus_exp .)
    NUMBER          reduce using rule 106 (plus_exp -> minus_exp .)
    BINARY_NUMBER   reduce using rule 106 (plus_exp -> minus_exp .)
    HEXADECIMAL_NUMBER reduce using rule 106 (plus_exp -> minus_exp .)
    OCTAL_NUMBER    reduce using rule 106 (plus_exp -> minus_exp .)
    $end            reduce using rule 106 (plus_exp -> minus_exp .)
    RPAREN          reduce using rule 106 (plus_exp -> minus_exp .)
    SEMICOLON       reduce using rule 106 (plus_exp -> minus_exp .)
    COLON           reduce using rule 106 (plus_exp -> minus_exp .)
    RBRACKET        reduce using rule 106 (plus_exp -> minus_exp .)
    COMMA           reduce using rule 106 (plus_exp -> minus_exp .)
    MINUS           shift and go to state 134

  ! MINUS           [ reduce using rule 106 (plus_exp -> minus_exp .) ]


state 75

    (108) minus_exp -> times_exp .
    (109) times_exp -> times_exp . TIMES divide_exp

  ! shift/reduce conflict for TIMES resolved as shift
    MINUS           reduce using rule 108 (minus_exp -> times_exp .)
    PLUS            reduce using rule 108 (minus_exp -> times_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 108 (minus_exp -> times_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 108 (minus_exp -> times_exp .)
    LESS_EQUALS     reduce using rule 108 (minus_exp -> times_exp .)
    LESS_THEN       reduce using rule 108 (minus_exp -> times_exp .)
    GREATER_EQUALS  reduce using rule 108 (minus_exp -> times_exp .)
    GREATER_THEN    reduce using rule 108 (minus_exp -> times_exp .)
    NOT_EQUALS      reduce using rule 108 (minus_exp -> times_exp .)
    EQUALS_THEN     reduce using rule 108 (minus_exp -> times_exp .)
    BITWISE_AND     reduce using rule 108 (minus_exp -> times_exp .)
    BITWISE_XOR     reduce using rule 108 (minus_exp -> times_exp .)
    BITWISE_OR      reduce using rule 108 (minus_exp -> times_exp .)
    LOGICAL_AND     reduce using rule 108 (minus_exp -> times_exp .)
    LOGICAL_OR      reduce using rule 108 (minus_exp -> times_exp .)
    QUESTION_MARK   reduce using rule 108 (minus_exp -> times_exp .)
    KEYWORD_STRUCT  reduce using rule 108 (minus_exp -> times_exp .)
    KEYWORD_UNION   reduce using rule 108 (minus_exp -> times_exp .)
    TYPE_CHAR       reduce using rule 108 (minus_exp -> times_exp .)
    TYPE_INT        reduce using rule 108 (minus_exp -> times_exp .)
    TYPE_SHORT      reduce using rule 108 (minus_exp -> times_exp .)
    TYPE_LONG       reduce using rule 108 (minus_exp -> times_exp .)
    TYPE_FLOAT      reduce using rule 108 (minus_exp -> times_exp .)
    TYPE_DOUBLE     reduce using rule 108 (minus_exp -> times_exp .)
    TYPE_VOID       reduce using rule 108 (minus_exp -> times_exp .)
    KEYWORD_STATIC  reduce using rule 108 (minus_exp -> times_exp .)
    KEYWORD_UNSIGNED reduce using rule 108 (minus_exp -> times_exp .)
    KEYWORD_VOLATILE reduce using rule 108 (minus_exp -> times_exp .)
    KEYWORD_EXTERN  reduce using rule 108 (minus_exp -> times_exp .)
    KEYWORD_SIGNED  reduce using rule 108 (minus_exp -> times_exp .)
    KEYWORD_REGISTER reduce using rule 108 (minus_exp -> times_exp .)
    KEYWORD_AUTO    reduce using rule 108 (minus_exp -> times_exp .)
    INCREMENT       reduce using rule 108 (minus_exp -> times_exp .)
    DECREMENT       reduce using rule 108 (minus_exp -> times_exp .)
    BITWISE_COMPLEMENT reduce using rule 108 (minus_exp -> times_exp .)
    NOT             reduce using rule 108 (minus_exp -> times_exp .)
    LPAREN          reduce using rule 108 (minus_exp -> times_exp .)
    KEYWORD_SIZEOF  reduce using rule 108 (minus_exp -> times_exp .)
    IDENTIFIER      reduce using rule 108 (minus_exp -> times_exp .)
    STRING          reduce using rule 108 (minus_exp -> times_exp .)
    FLOAT_NUMBER    reduce using rule 108 (minus_exp -> times_exp .)
    CHARACTER       reduce using rule 108 (minus_exp -> times_exp .)
    NUMBER          reduce using rule 108 (minus_exp -> times_exp .)
    BINARY_NUMBER   reduce using rule 108 (minus_exp -> times_exp .)
    HEXADECIMAL_NUMBER reduce using rule 108 (minus_exp -> times_exp .)
    OCTAL_NUMBER    reduce using rule 108 (minus_exp -> times_exp .)
    $end            reduce using rule 108 (minus_exp -> times_exp .)
    RPAREN          reduce using rule 108 (minus_exp -> times_exp .)
    SEMICOLON       reduce using rule 108 (minus_exp -> times_exp .)
    COLON           reduce using rule 108 (minus_exp -> times_exp .)
    RBRACKET        reduce using rule 108 (minus_exp -> times_exp .)
    COMMA           reduce using rule 108 (minus_exp -> times_exp .)
    TIMES           shift and go to state 135

  ! TIMES           [ reduce using rule 108 (minus_exp -> times_exp .) ]


state 76

    (110) times_exp -> divide_exp .
    (111) divide_exp -> divide_exp . DIVIDE modulus_exp

    TIMES           reduce using rule 110 (times_exp -> divide_exp .)
    MINUS           reduce using rule 110 (times_exp -> divide_exp .)
    PLUS            reduce using rule 110 (times_exp -> divide_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 110 (times_exp -> divide_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 110 (times_exp -> divide_exp .)
    LESS_EQUALS     reduce using rule 110 (times_exp -> divide_exp .)
    LESS_THEN       reduce using rule 110 (times_exp -> divide_exp .)
    GREATER_EQUALS  reduce using rule 110 (times_exp -> divide_exp .)
    GREATER_THEN    reduce using rule 110 (times_exp -> divide_exp .)
    NOT_EQUALS      reduce using rule 110 (times_exp -> divide_exp .)
    EQUALS_THEN     reduce using rule 110 (times_exp -> divide_exp .)
    BITWISE_AND     reduce using rule 110 (times_exp -> divide_exp .)
    BITWISE_XOR     reduce using rule 110 (times_exp -> divide_exp .)
    BITWISE_OR      reduce using rule 110 (times_exp -> divide_exp .)
    LOGICAL_AND     reduce using rule 110 (times_exp -> divide_exp .)
    LOGICAL_OR      reduce using rule 110 (times_exp -> divide_exp .)
    QUESTION_MARK   reduce using rule 110 (times_exp -> divide_exp .)
    KEYWORD_STRUCT  reduce using rule 110 (times_exp -> divide_exp .)
    KEYWORD_UNION   reduce using rule 110 (times_exp -> divide_exp .)
    TYPE_CHAR       reduce using rule 110 (times_exp -> divide_exp .)
    TYPE_INT        reduce using rule 110 (times_exp -> divide_exp .)
    TYPE_SHORT      reduce using rule 110 (times_exp -> divide_exp .)
    TYPE_LONG       reduce using rule 110 (times_exp -> divide_exp .)
    TYPE_FLOAT      reduce using rule 110 (times_exp -> divide_exp .)
    TYPE_DOUBLE     reduce using rule 110 (times_exp -> divide_exp .)
    TYPE_VOID       reduce using rule 110 (times_exp -> divide_exp .)
    KEYWORD_STATIC  reduce using rule 110 (times_exp -> divide_exp .)
    KEYWORD_UNSIGNED reduce using rule 110 (times_exp -> divide_exp .)
    KEYWORD_VOLATILE reduce using rule 110 (times_exp -> divide_exp .)
    KEYWORD_EXTERN  reduce using rule 110 (times_exp -> divide_exp .)
    KEYWORD_SIGNED  reduce using rule 110 (times_exp -> divide_exp .)
    KEYWORD_REGISTER reduce using rule 110 (times_exp -> divide_exp .)
    KEYWORD_AUTO    reduce using rule 110 (times_exp -> divide_exp .)
    INCREMENT       reduce using rule 110 (times_exp -> divide_exp .)
    DECREMENT       reduce using rule 110 (times_exp -> divide_exp .)
    BITWISE_COMPLEMENT reduce using rule 110 (times_exp -> divide_exp .)
    NOT             reduce using rule 110 (times_exp -> divide_exp .)
    LPAREN          reduce using rule 110 (times_exp -> divide_exp .)
    KEYWORD_SIZEOF  reduce using rule 110 (times_exp -> divide_exp .)
    IDENTIFIER      reduce using rule 110 (times_exp -> divide_exp .)
    STRING          reduce using rule 110 (times_exp -> divide_exp .)
    FLOAT_NUMBER    reduce using rule 110 (times_exp -> divide_exp .)
    CHARACTER       reduce using rule 110 (times_exp -> divide_exp .)
    NUMBER          reduce using rule 110 (times_exp -> divide_exp .)
    BINARY_NUMBER   reduce using rule 110 (times_exp -> divide_exp .)
    HEXADECIMAL_NUMBER reduce using rule 110 (times_exp -> divide_exp .)
    OCTAL_NUMBER    reduce using rule 110 (times_exp -> divide_exp .)
    $end            reduce using rule 110 (times_exp -> divide_exp .)
    RPAREN          reduce using rule 110 (times_exp -> divide_exp .)
    SEMICOLON       reduce using rule 110 (times_exp -> divide_exp .)
    COLON           reduce using rule 110 (times_exp -> divide_exp .)
    RBRACKET        reduce using rule 110 (times_exp -> divide_exp .)
    COMMA           reduce using rule 110 (times_exp -> divide_exp .)
    DIVIDE          shift and go to state 136


state 77

    (112) divide_exp -> modulus_exp .
    (113) modulus_exp -> modulus_exp . MODULUS unary_exp

    DIVIDE          reduce using rule 112 (divide_exp -> modulus_exp .)
    TIMES           reduce using rule 112 (divide_exp -> modulus_exp .)
    MINUS           reduce using rule 112 (divide_exp -> modulus_exp .)
    PLUS            reduce using rule 112 (divide_exp -> modulus_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 112 (divide_exp -> modulus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 112 (divide_exp -> modulus_exp .)
    LESS_EQUALS     reduce using rule 112 (divide_exp -> modulus_exp .)
    LESS_THEN       reduce using rule 112 (divide_exp -> modulus_exp .)
    GREATER_EQUALS  reduce using rule 112 (divide_exp -> modulus_exp .)
    GREATER_THEN    reduce using rule 112 (divide_exp -> modulus_exp .)
    NOT_EQUALS      reduce using rule 112 (divide_exp -> modulus_exp .)
    EQUALS_THEN     reduce using rule 112 (divide_exp -> modulus_exp .)
    BITWISE_AND     reduce using rule 112 (divide_exp -> modulus_exp .)
    BITWISE_XOR     reduce using rule 112 (divide_exp -> modulus_exp .)
    BITWISE_OR      reduce using rule 112 (divide_exp -> modulus_exp .)
    LOGICAL_AND     reduce using rule 112 (divide_exp -> modulus_exp .)
    LOGICAL_OR      reduce using rule 112 (divide_exp -> modulus_exp .)
    QUESTION_MARK   reduce using rule 112 (divide_exp -> modulus_exp .)
    KEYWORD_STRUCT  reduce using rule 112 (divide_exp -> modulus_exp .)
    KEYWORD_UNION   reduce using rule 112 (divide_exp -> modulus_exp .)
    TYPE_CHAR       reduce using rule 112 (divide_exp -> modulus_exp .)
    TYPE_INT        reduce using rule 112 (divide_exp -> modulus_exp .)
    TYPE_SHORT      reduce using rule 112 (divide_exp -> modulus_exp .)
    TYPE_LONG       reduce using rule 112 (divide_exp -> modulus_exp .)
    TYPE_FLOAT      reduce using rule 112 (divide_exp -> modulus_exp .)
    TYPE_DOUBLE     reduce using rule 112 (divide_exp -> modulus_exp .)
    TYPE_VOID       reduce using rule 112 (divide_exp -> modulus_exp .)
    KEYWORD_STATIC  reduce using rule 112 (divide_exp -> modulus_exp .)
    KEYWORD_UNSIGNED reduce using rule 112 (divide_exp -> modulus_exp .)
    KEYWORD_VOLATILE reduce using rule 112 (divide_exp -> modulus_exp .)
    KEYWORD_EXTERN  reduce using rule 112 (divide_exp -> modulus_exp .)
    KEYWORD_SIGNED  reduce using rule 112 (divide_exp -> modulus_exp .)
    KEYWORD_REGISTER reduce using rule 112 (divide_exp -> modulus_exp .)
    KEYWORD_AUTO    reduce using rule 112 (divide_exp -> modulus_exp .)
    INCREMENT       reduce using rule 112 (divide_exp -> modulus_exp .)
    DECREMENT       reduce using rule 112 (divide_exp -> modulus_exp .)
    BITWISE_COMPLEMENT reduce using rule 112 (divide_exp -> modulus_exp .)
    NOT             reduce using rule 112 (divide_exp -> modulus_exp .)
    LPAREN          reduce using rule 112 (divide_exp -> modulus_exp .)
    KEYWORD_SIZEOF  reduce using rule 112 (divide_exp -> modulus_exp .)
    IDENTIFIER      reduce using rule 112 (divide_exp -> modulus_exp .)
    STRING          reduce using rule 112 (divide_exp -> modulus_exp .)
    FLOAT_NUMBER    reduce using rule 112 (divide_exp -> modulus_exp .)
    CHARACTER       reduce using rule 112 (divide_exp -> modulus_exp .)
    NUMBER          reduce using rule 112 (divide_exp -> modulus_exp .)
    BINARY_NUMBER   reduce using rule 112 (divide_exp -> modulus_exp .)
    HEXADECIMAL_NUMBER reduce using rule 112 (divide_exp -> modulus_exp .)
    OCTAL_NUMBER    reduce using rule 112 (divide_exp -> modulus_exp .)
    $end            reduce using rule 112 (divide_exp -> modulus_exp .)
    RPAREN          reduce using rule 112 (divide_exp -> modulus_exp .)
    SEMICOLON       reduce using rule 112 (divide_exp -> modulus_exp .)
    COLON           reduce using rule 112 (divide_exp -> modulus_exp .)
    RBRACKET        reduce using rule 112 (divide_exp -> modulus_exp .)
    COMMA           reduce using rule 112 (divide_exp -> modulus_exp .)
    MODULUS         shift and go to state 137


state 78

    (2) program -> function_signature SEMICOLON . program
    (1) program -> .
    (2) program -> . function_signature SEMICOLON program
    (3) program -> . variable_declaration SEMICOLON program
    (4) program -> . function program
    (5) program -> . expression program
    (15) function_signature -> . type IDENTIFIER LPAREN signature_param_list RPAREN
    (16) function_signature -> . pointer IDENTIFIER LPAREN signature_param_list RPAREN
    (17) function_signature -> . type IDENTIFIER LPAREN RPAREN
    (18) function_signature -> . pointer IDENTIFIER LPAREN RPAREN
    (34) variable_declaration -> . type IDENTIFIER
    (35) variable_declaration -> . pointer IDENTIFIER
    (14) function -> . function_signature command_block
    (62) expression -> . assign_exp
    (37) type -> . user_types
    (38) type -> . primitive_types
    (39) type -> . type_modifier type
    (36) pointer -> . type multiple_times
    (74) assign_exp -> . unary_exp assign_operator assign_exp
    (75) assign_exp -> . ternary_conditional_exp
    (47) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (48) user_types -> . KEYWORD_UNION IDENTIFIER
    (49) primitive_types -> . TYPE_CHAR
    (50) primitive_types -> . TYPE_INT
    (51) primitive_types -> . TYPE_SHORT
    (52) primitive_types -> . TYPE_LONG
    (53) primitive_types -> . TYPE_FLOAT
    (54) primitive_types -> . TYPE_DOUBLE
    (55) primitive_types -> . TYPE_VOID
    (40) type_modifier -> . KEYWORD_STATIC
    (41) type_modifier -> . KEYWORD_UNSIGNED
    (42) type_modifier -> . KEYWORD_VOLATILE
    (43) type_modifier -> . KEYWORD_EXTERN
    (44) type_modifier -> . KEYWORD_SIGNED
    (45) type_modifier -> . KEYWORD_REGISTER
    (46) type_modifier -> . KEYWORD_AUTO
    (121) unary_exp -> . prefix_exp
    (76) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (77) ternary_conditional_exp -> . logical_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (78) logical_exp -> . logical_or_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (79) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (80) logical_or_exp -> . logical_and_exp
    (143) primary_exp -> . identifier_exp
    (81) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (82) logical_and_exp -> . bitwise_or_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (83) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (84) bitwise_or_exp -> . bitwise_xor_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp

    $end            reduce using rule 1 (program -> .)
    KEYWORD_STRUCT  shift and go to state 16
    KEYWORD_UNION   shift and go to state 17
    TYPE_CHAR       shift and go to state 18
    TYPE_INT        shift and go to state 19
    TYPE_SHORT      shift and go to state 20
    TYPE_LONG       shift and go to state 21
    TYPE_FLOAT      shift and go to state 22
    TYPE_DOUBLE     shift and go to state 23
    TYPE_VOID       shift and go to state 24
    KEYWORD_STATIC  shift and go to state 25
    KEYWORD_UNSIGNED shift and go to state 26
    KEYWORD_VOLATILE shift and go to state 27
    KEYWORD_EXTERN  shift and go to state 28
    KEYWORD_SIGNED  shift and go to state 29
    KEYWORD_REGISTER shift and go to state 30
    KEYWORD_AUTO    shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    function_signature             shift and go to state 2
    program                        shift and go to state 138
    variable_declaration           shift and go to state 3
    function                       shift and go to state 4
    expression                     shift and go to state 5
    type                           shift and go to state 6
    pointer                        shift and go to state 9
    assign_exp                     shift and go to state 10
    user_types                     shift and go to state 11
    primitive_types                shift and go to state 12
    type_modifier                  shift and go to state 13
    unary_exp                      shift and go to state 14
    ternary_conditional_exp        shift and go to state 15
    prefix_exp                     shift and go to state 32
    logical_exp                    shift and go to state 33
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_or_exp                 shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_and_exp                shift and go to state 49
    identifier_exp                 shift and go to state 50
    bitwise_or_exp                 shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_xor_exp                shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_and_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77

state 79

    (14) function -> function_signature command_block .

    KEYWORD_STRUCT  reduce using rule 14 (function -> function_signature command_block .)
    KEYWORD_UNION   reduce using rule 14 (function -> function_signature command_block .)
    TYPE_CHAR       reduce using rule 14 (function -> function_signature command_block .)
    TYPE_INT        reduce using rule 14 (function -> function_signature command_block .)
    TYPE_SHORT      reduce using rule 14 (function -> function_signature command_block .)
    TYPE_LONG       reduce using rule 14 (function -> function_signature command_block .)
    TYPE_FLOAT      reduce using rule 14 (function -> function_signature command_block .)
    TYPE_DOUBLE     reduce using rule 14 (function -> function_signature command_block .)
    TYPE_VOID       reduce using rule 14 (function -> function_signature command_block .)
    KEYWORD_STATIC  reduce using rule 14 (function -> function_signature command_block .)
    KEYWORD_UNSIGNED reduce using rule 14 (function -> function_signature command_block .)
    KEYWORD_VOLATILE reduce using rule 14 (function -> function_signature command_block .)
    KEYWORD_EXTERN  reduce using rule 14 (function -> function_signature command_block .)
    KEYWORD_SIGNED  reduce using rule 14 (function -> function_signature command_block .)
    KEYWORD_REGISTER reduce using rule 14 (function -> function_signature command_block .)
    KEYWORD_AUTO    reduce using rule 14 (function -> function_signature command_block .)
    INCREMENT       reduce using rule 14 (function -> function_signature command_block .)
    DECREMENT       reduce using rule 14 (function -> function_signature command_block .)
    BITWISE_AND     reduce using rule 14 (function -> function_signature command_block .)
    TIMES           reduce using rule 14 (function -> function_signature command_block .)
    PLUS            reduce using rule 14 (function -> function_signature command_block .)
    MINUS           reduce using rule 14 (function -> function_signature command_block .)
    BITWISE_COMPLEMENT reduce using rule 14 (function -> function_signature command_block .)
    NOT             reduce using rule 14 (function -> function_signature command_block .)
    LPAREN          reduce using rule 14 (function -> function_signature command_block .)
    KEYWORD_SIZEOF  reduce using rule 14 (function -> function_signature command_block .)
    IDENTIFIER      reduce using rule 14 (function -> function_signature command_block .)
    STRING          reduce using rule 14 (function -> function_signature command_block .)
    FLOAT_NUMBER    reduce using rule 14 (function -> function_signature command_block .)
    CHARACTER       reduce using rule 14 (function -> function_signature command_block .)
    NUMBER          reduce using rule 14 (function -> function_signature command_block .)
    BINARY_NUMBER   reduce using rule 14 (function -> function_signature command_block .)
    HEXADECIMAL_NUMBER reduce using rule 14 (function -> function_signature command_block .)
    OCTAL_NUMBER    reduce using rule 14 (function -> function_signature command_block .)
    $end            reduce using rule 14 (function -> function_signature command_block .)


state 80

    (6) command_block -> LBRACE . RBRACE
    (7) command_block -> LBRACE . command_list RBRACE
    (8) command_list -> . command command_list
    (9) command_list -> . command
    (10) command -> . variable_declaration SEMICOLON
    (11) command -> . variable_declaration ASSIGN expression SEMICOLON
    (12) command -> . expression SEMICOLON
    (13) command -> . SEMICOLON
    (34) variable_declaration -> . type IDENTIFIER
    (35) variable_declaration -> . pointer IDENTIFIER
    (62) expression -> . assign_exp
    (37) type -> . user_types
    (38) type -> . primitive_types
    (39) type -> . type_modifier type
    (36) pointer -> . type multiple_times
    (74) assign_exp -> . unary_exp assign_operator assign_exp
    (75) assign_exp -> . ternary_conditional_exp
    (47) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (48) user_types -> . KEYWORD_UNION IDENTIFIER
    (49) primitive_types -> . TYPE_CHAR
    (50) primitive_types -> . TYPE_INT
    (51) primitive_types -> . TYPE_SHORT
    (52) primitive_types -> . TYPE_LONG
    (53) primitive_types -> . TYPE_FLOAT
    (54) primitive_types -> . TYPE_DOUBLE
    (55) primitive_types -> . TYPE_VOID
    (40) type_modifier -> . KEYWORD_STATIC
    (41) type_modifier -> . KEYWORD_UNSIGNED
    (42) type_modifier -> . KEYWORD_VOLATILE
    (43) type_modifier -> . KEYWORD_EXTERN
    (44) type_modifier -> . KEYWORD_SIGNED
    (45) type_modifier -> . KEYWORD_REGISTER
    (46) type_modifier -> . KEYWORD_AUTO
    (121) unary_exp -> . prefix_exp
    (76) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (77) ternary_conditional_exp -> . logical_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (78) logical_exp -> . logical_or_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (79) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (80) logical_or_exp -> . logical_and_exp
    (143) primary_exp -> . identifier_exp
    (81) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (82) logical_and_exp -> . bitwise_or_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (83) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (84) bitwise_or_exp -> . bitwise_xor_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp

    RBRACE          shift and go to state 139
    SEMICOLON       shift and go to state 143
    KEYWORD_STRUCT  shift and go to state 16
    KEYWORD_UNION   shift and go to state 17
    TYPE_CHAR       shift and go to state 18
    TYPE_INT        shift and go to state 19
    TYPE_SHORT      shift and go to state 20
    TYPE_LONG       shift and go to state 21
    TYPE_FLOAT      shift and go to state 22
    TYPE_DOUBLE     shift and go to state 23
    TYPE_VOID       shift and go to state 24
    KEYWORD_STATIC  shift and go to state 25
    KEYWORD_UNSIGNED shift and go to state 26
    KEYWORD_VOLATILE shift and go to state 27
    KEYWORD_EXTERN  shift and go to state 28
    KEYWORD_SIGNED  shift and go to state 29
    KEYWORD_REGISTER shift and go to state 30
    KEYWORD_AUTO    shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    command_list                   shift and go to state 140
    command                        shift and go to state 141
    variable_declaration           shift and go to state 142
    expression                     shift and go to state 144
    type                           shift and go to state 145
    pointer                        shift and go to state 146
    assign_exp                     shift and go to state 10
    user_types                     shift and go to state 11
    primitive_types                shift and go to state 12
    type_modifier                  shift and go to state 13
    unary_exp                      shift and go to state 14
    ternary_conditional_exp        shift and go to state 15
    prefix_exp                     shift and go to state 32
    logical_exp                    shift and go to state 33
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_or_exp                 shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_and_exp                shift and go to state 49
    identifier_exp                 shift and go to state 50
    bitwise_or_exp                 shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_xor_exp                shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_and_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77

state 81

    (3) program -> variable_declaration SEMICOLON . program
    (1) program -> .
    (2) program -> . function_signature SEMICOLON program
    (3) program -> . variable_declaration SEMICOLON program
    (4) program -> . function program
    (5) program -> . expression program
    (15) function_signature -> . type IDENTIFIER LPAREN signature_param_list RPAREN
    (16) function_signature -> . pointer IDENTIFIER LPAREN signature_param_list RPAREN
    (17) function_signature -> . type IDENTIFIER LPAREN RPAREN
    (18) function_signature -> . pointer IDENTIFIER LPAREN RPAREN
    (34) variable_declaration -> . type IDENTIFIER
    (35) variable_declaration -> . pointer IDENTIFIER
    (14) function -> . function_signature command_block
    (62) expression -> . assign_exp
    (37) type -> . user_types
    (38) type -> . primitive_types
    (39) type -> . type_modifier type
    (36) pointer -> . type multiple_times
    (74) assign_exp -> . unary_exp assign_operator assign_exp
    (75) assign_exp -> . ternary_conditional_exp
    (47) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (48) user_types -> . KEYWORD_UNION IDENTIFIER
    (49) primitive_types -> . TYPE_CHAR
    (50) primitive_types -> . TYPE_INT
    (51) primitive_types -> . TYPE_SHORT
    (52) primitive_types -> . TYPE_LONG
    (53) primitive_types -> . TYPE_FLOAT
    (54) primitive_types -> . TYPE_DOUBLE
    (55) primitive_types -> . TYPE_VOID
    (40) type_modifier -> . KEYWORD_STATIC
    (41) type_modifier -> . KEYWORD_UNSIGNED
    (42) type_modifier -> . KEYWORD_VOLATILE
    (43) type_modifier -> . KEYWORD_EXTERN
    (44) type_modifier -> . KEYWORD_SIGNED
    (45) type_modifier -> . KEYWORD_REGISTER
    (46) type_modifier -> . KEYWORD_AUTO
    (121) unary_exp -> . prefix_exp
    (76) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (77) ternary_conditional_exp -> . logical_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (78) logical_exp -> . logical_or_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (79) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (80) logical_or_exp -> . logical_and_exp
    (143) primary_exp -> . identifier_exp
    (81) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (82) logical_and_exp -> . bitwise_or_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (83) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (84) bitwise_or_exp -> . bitwise_xor_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp

    $end            reduce using rule 1 (program -> .)
    KEYWORD_STRUCT  shift and go to state 16
    KEYWORD_UNION   shift and go to state 17
    TYPE_CHAR       shift and go to state 18
    TYPE_INT        shift and go to state 19
    TYPE_SHORT      shift and go to state 20
    TYPE_LONG       shift and go to state 21
    TYPE_FLOAT      shift and go to state 22
    TYPE_DOUBLE     shift and go to state 23
    TYPE_VOID       shift and go to state 24
    KEYWORD_STATIC  shift and go to state 25
    KEYWORD_UNSIGNED shift and go to state 26
    KEYWORD_VOLATILE shift and go to state 27
    KEYWORD_EXTERN  shift and go to state 28
    KEYWORD_SIGNED  shift and go to state 29
    KEYWORD_REGISTER shift and go to state 30
    KEYWORD_AUTO    shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    variable_declaration           shift and go to state 3
    program                        shift and go to state 147
    function_signature             shift and go to state 2
    function                       shift and go to state 4
    expression                     shift and go to state 5
    type                           shift and go to state 6
    pointer                        shift and go to state 9
    assign_exp                     shift and go to state 10
    user_types                     shift and go to state 11
    primitive_types                shift and go to state 12
    type_modifier                  shift and go to state 13
    unary_exp                      shift and go to state 14
    ternary_conditional_exp        shift and go to state 15
    prefix_exp                     shift and go to state 32
    logical_exp                    shift and go to state 33
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_or_exp                 shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_and_exp                shift and go to state 49
    identifier_exp                 shift and go to state 50
    bitwise_or_exp                 shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_xor_exp                shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_and_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77

state 82

    (4) program -> function program .

    $end            reduce using rule 4 (program -> function program .)


state 83

    (5) program -> expression program .

    $end            reduce using rule 5 (program -> expression program .)


state 84

    (15) function_signature -> type IDENTIFIER . LPAREN signature_param_list RPAREN
    (17) function_signature -> type IDENTIFIER . LPAREN RPAREN
    (34) variable_declaration -> type IDENTIFIER .

    LPAREN          shift and go to state 148
    SEMICOLON       reduce using rule 34 (variable_declaration -> type IDENTIFIER .)


state 85

    (36) pointer -> type multiple_times .

    IDENTIFIER      reduce using rule 36 (pointer -> type multiple_times .)
    RPAREN          reduce using rule 36 (pointer -> type multiple_times .)
    ASSIGN          reduce using rule 36 (pointer -> type multiple_times .)
    TIMES_ASSIGN    reduce using rule 36 (pointer -> type multiple_times .)
    DIVIDE_ASSIGN   reduce using rule 36 (pointer -> type multiple_times .)
    MODULUS_ASSIGN  reduce using rule 36 (pointer -> type multiple_times .)
    PLUS_ASSIGN     reduce using rule 36 (pointer -> type multiple_times .)
    MINUS_ASSIGN    reduce using rule 36 (pointer -> type multiple_times .)
    SHIFT_LEFT_ASSIGN reduce using rule 36 (pointer -> type multiple_times .)
    SHIFT_RIGHT_ASSIGN reduce using rule 36 (pointer -> type multiple_times .)
    BITWISE_AND_ASSIGN reduce using rule 36 (pointer -> type multiple_times .)
    BITWISE_XOR_ASSIGN reduce using rule 36 (pointer -> type multiple_times .)
    BITWISE_OR_ASSIGN reduce using rule 36 (pointer -> type multiple_times .)
    MODULUS         reduce using rule 36 (pointer -> type multiple_times .)
    DIVIDE          reduce using rule 36 (pointer -> type multiple_times .)
    TIMES           reduce using rule 36 (pointer -> type multiple_times .)
    MINUS           reduce using rule 36 (pointer -> type multiple_times .)
    PLUS            reduce using rule 36 (pointer -> type multiple_times .)
    BITWISE_SHIFT_RIGHT reduce using rule 36 (pointer -> type multiple_times .)
    BITWISE_SHIFT_LEFT reduce using rule 36 (pointer -> type multiple_times .)
    LESS_EQUALS     reduce using rule 36 (pointer -> type multiple_times .)
    LESS_THEN       reduce using rule 36 (pointer -> type multiple_times .)
    GREATER_EQUALS  reduce using rule 36 (pointer -> type multiple_times .)
    GREATER_THEN    reduce using rule 36 (pointer -> type multiple_times .)
    NOT_EQUALS      reduce using rule 36 (pointer -> type multiple_times .)
    EQUALS_THEN     reduce using rule 36 (pointer -> type multiple_times .)
    BITWISE_AND     reduce using rule 36 (pointer -> type multiple_times .)
    BITWISE_XOR     reduce using rule 36 (pointer -> type multiple_times .)
    BITWISE_OR      reduce using rule 36 (pointer -> type multiple_times .)
    LOGICAL_AND     reduce using rule 36 (pointer -> type multiple_times .)
    LOGICAL_OR      reduce using rule 36 (pointer -> type multiple_times .)
    QUESTION_MARK   reduce using rule 36 (pointer -> type multiple_times .)
    KEYWORD_STRUCT  reduce using rule 36 (pointer -> type multiple_times .)
    KEYWORD_UNION   reduce using rule 36 (pointer -> type multiple_times .)
    TYPE_CHAR       reduce using rule 36 (pointer -> type multiple_times .)
    TYPE_INT        reduce using rule 36 (pointer -> type multiple_times .)
    TYPE_SHORT      reduce using rule 36 (pointer -> type multiple_times .)
    TYPE_LONG       reduce using rule 36 (pointer -> type multiple_times .)
    TYPE_FLOAT      reduce using rule 36 (pointer -> type multiple_times .)
    TYPE_DOUBLE     reduce using rule 36 (pointer -> type multiple_times .)
    TYPE_VOID       reduce using rule 36 (pointer -> type multiple_times .)
    KEYWORD_STATIC  reduce using rule 36 (pointer -> type multiple_times .)
    KEYWORD_UNSIGNED reduce using rule 36 (pointer -> type multiple_times .)
    KEYWORD_VOLATILE reduce using rule 36 (pointer -> type multiple_times .)
    KEYWORD_EXTERN  reduce using rule 36 (pointer -> type multiple_times .)
    KEYWORD_SIGNED  reduce using rule 36 (pointer -> type multiple_times .)
    KEYWORD_REGISTER reduce using rule 36 (pointer -> type multiple_times .)
    KEYWORD_AUTO    reduce using rule 36 (pointer -> type multiple_times .)
    INCREMENT       reduce using rule 36 (pointer -> type multiple_times .)
    DECREMENT       reduce using rule 36 (pointer -> type multiple_times .)
    BITWISE_COMPLEMENT reduce using rule 36 (pointer -> type multiple_times .)
    NOT             reduce using rule 36 (pointer -> type multiple_times .)
    LPAREN          reduce using rule 36 (pointer -> type multiple_times .)
    KEYWORD_SIZEOF  reduce using rule 36 (pointer -> type multiple_times .)
    STRING          reduce using rule 36 (pointer -> type multiple_times .)
    FLOAT_NUMBER    reduce using rule 36 (pointer -> type multiple_times .)
    CHARACTER       reduce using rule 36 (pointer -> type multiple_times .)
    NUMBER          reduce using rule 36 (pointer -> type multiple_times .)
    BINARY_NUMBER   reduce using rule 36 (pointer -> type multiple_times .)
    HEXADECIMAL_NUMBER reduce using rule 36 (pointer -> type multiple_times .)
    OCTAL_NUMBER    reduce using rule 36 (pointer -> type multiple_times .)
    $end            reduce using rule 36 (pointer -> type multiple_times .)
    SEMICOLON       reduce using rule 36 (pointer -> type multiple_times .)
    COLON           reduce using rule 36 (pointer -> type multiple_times .)
    RBRACKET        reduce using rule 36 (pointer -> type multiple_times .)
    COMMA           reduce using rule 36 (pointer -> type multiple_times .)
    LBRACKET        reduce using rule 36 (pointer -> type multiple_times .)


state 86

    (56) multiple_times -> TIMES . multiple_times
    (57) multiple_times -> TIMES .
    (56) multiple_times -> . TIMES multiple_times
    (57) multiple_times -> . TIMES

  ! shift/reduce conflict for TIMES resolved as shift
    IDENTIFIER      reduce using rule 57 (multiple_times -> TIMES .)
    RPAREN          reduce using rule 57 (multiple_times -> TIMES .)
    ASSIGN          reduce using rule 57 (multiple_times -> TIMES .)
    TIMES_ASSIGN    reduce using rule 57 (multiple_times -> TIMES .)
    DIVIDE_ASSIGN   reduce using rule 57 (multiple_times -> TIMES .)
    MODULUS_ASSIGN  reduce using rule 57 (multiple_times -> TIMES .)
    PLUS_ASSIGN     reduce using rule 57 (multiple_times -> TIMES .)
    MINUS_ASSIGN    reduce using rule 57 (multiple_times -> TIMES .)
    SHIFT_LEFT_ASSIGN reduce using rule 57 (multiple_times -> TIMES .)
    SHIFT_RIGHT_ASSIGN reduce using rule 57 (multiple_times -> TIMES .)
    BITWISE_AND_ASSIGN reduce using rule 57 (multiple_times -> TIMES .)
    BITWISE_XOR_ASSIGN reduce using rule 57 (multiple_times -> TIMES .)
    BITWISE_OR_ASSIGN reduce using rule 57 (multiple_times -> TIMES .)
    MODULUS         reduce using rule 57 (multiple_times -> TIMES .)
    DIVIDE          reduce using rule 57 (multiple_times -> TIMES .)
    MINUS           reduce using rule 57 (multiple_times -> TIMES .)
    PLUS            reduce using rule 57 (multiple_times -> TIMES .)
    BITWISE_SHIFT_RIGHT reduce using rule 57 (multiple_times -> TIMES .)
    BITWISE_SHIFT_LEFT reduce using rule 57 (multiple_times -> TIMES .)
    LESS_EQUALS     reduce using rule 57 (multiple_times -> TIMES .)
    LESS_THEN       reduce using rule 57 (multiple_times -> TIMES .)
    GREATER_EQUALS  reduce using rule 57 (multiple_times -> TIMES .)
    GREATER_THEN    reduce using rule 57 (multiple_times -> TIMES .)
    NOT_EQUALS      reduce using rule 57 (multiple_times -> TIMES .)
    EQUALS_THEN     reduce using rule 57 (multiple_times -> TIMES .)
    BITWISE_AND     reduce using rule 57 (multiple_times -> TIMES .)
    BITWISE_XOR     reduce using rule 57 (multiple_times -> TIMES .)
    BITWISE_OR      reduce using rule 57 (multiple_times -> TIMES .)
    LOGICAL_AND     reduce using rule 57 (multiple_times -> TIMES .)
    LOGICAL_OR      reduce using rule 57 (multiple_times -> TIMES .)
    QUESTION_MARK   reduce using rule 57 (multiple_times -> TIMES .)
    KEYWORD_STRUCT  reduce using rule 57 (multiple_times -> TIMES .)
    KEYWORD_UNION   reduce using rule 57 (multiple_times -> TIMES .)
    TYPE_CHAR       reduce using rule 57 (multiple_times -> TIMES .)
    TYPE_INT        reduce using rule 57 (multiple_times -> TIMES .)
    TYPE_SHORT      reduce using rule 57 (multiple_times -> TIMES .)
    TYPE_LONG       reduce using rule 57 (multiple_times -> TIMES .)
    TYPE_FLOAT      reduce using rule 57 (multiple_times -> TIMES .)
    TYPE_DOUBLE     reduce using rule 57 (multiple_times -> TIMES .)
    TYPE_VOID       reduce using rule 57 (multiple_times -> TIMES .)
    KEYWORD_STATIC  reduce using rule 57 (multiple_times -> TIMES .)
    KEYWORD_UNSIGNED reduce using rule 57 (multiple_times -> TIMES .)
    KEYWORD_VOLATILE reduce using rule 57 (multiple_times -> TIMES .)
    KEYWORD_EXTERN  reduce using rule 57 (multiple_times -> TIMES .)
    KEYWORD_SIGNED  reduce using rule 57 (multiple_times -> TIMES .)
    KEYWORD_REGISTER reduce using rule 57 (multiple_times -> TIMES .)
    KEYWORD_AUTO    reduce using rule 57 (multiple_times -> TIMES .)
    INCREMENT       reduce using rule 57 (multiple_times -> TIMES .)
    DECREMENT       reduce using rule 57 (multiple_times -> TIMES .)
    BITWISE_COMPLEMENT reduce using rule 57 (multiple_times -> TIMES .)
    NOT             reduce using rule 57 (multiple_times -> TIMES .)
    LPAREN          reduce using rule 57 (multiple_times -> TIMES .)
    KEYWORD_SIZEOF  reduce using rule 57 (multiple_times -> TIMES .)
    STRING          reduce using rule 57 (multiple_times -> TIMES .)
    FLOAT_NUMBER    reduce using rule 57 (multiple_times -> TIMES .)
    CHARACTER       reduce using rule 57 (multiple_times -> TIMES .)
    NUMBER          reduce using rule 57 (multiple_times -> TIMES .)
    BINARY_NUMBER   reduce using rule 57 (multiple_times -> TIMES .)
    HEXADECIMAL_NUMBER reduce using rule 57 (multiple_times -> TIMES .)
    OCTAL_NUMBER    reduce using rule 57 (multiple_times -> TIMES .)
    $end            reduce using rule 57 (multiple_times -> TIMES .)
    SEMICOLON       reduce using rule 57 (multiple_times -> TIMES .)
    COLON           reduce using rule 57 (multiple_times -> TIMES .)
    RBRACKET        reduce using rule 57 (multiple_times -> TIMES .)
    COMMA           reduce using rule 57 (multiple_times -> TIMES .)
    LBRACKET        reduce using rule 57 (multiple_times -> TIMES .)
    TIMES           shift and go to state 86

  ! TIMES           [ reduce using rule 57 (multiple_times -> TIMES .) ]

    multiple_times                 shift and go to state 149

state 87

    (131) cast_exp -> LPAREN type . RPAREN
    (36) pointer -> type . multiple_times
    (56) multiple_times -> . TIMES multiple_times
    (57) multiple_times -> . TIMES

    RPAREN          shift and go to state 150
    TIMES           shift and go to state 86

    multiple_times                 shift and go to state 85

state 88

    (132) cast_exp -> LPAREN pointer . RPAREN

    RPAREN          shift and go to state 151


state 89

    (152) parentesis_exp -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 152


state 90

    (16) function_signature -> pointer IDENTIFIER . LPAREN signature_param_list RPAREN
    (18) function_signature -> pointer IDENTIFIER . LPAREN RPAREN
    (35) variable_declaration -> pointer IDENTIFIER .

    LPAREN          shift and go to state 153
    SEMICOLON       reduce using rule 35 (variable_declaration -> pointer IDENTIFIER .)


state 91

    (39) type -> type_modifier type .

    IDENTIFIER      reduce using rule 39 (type -> type_modifier type .)
    TIMES           reduce using rule 39 (type -> type_modifier type .)
    RPAREN          reduce using rule 39 (type -> type_modifier type .)
    ASSIGN          reduce using rule 39 (type -> type_modifier type .)
    TIMES_ASSIGN    reduce using rule 39 (type -> type_modifier type .)
    DIVIDE_ASSIGN   reduce using rule 39 (type -> type_modifier type .)
    MODULUS_ASSIGN  reduce using rule 39 (type -> type_modifier type .)
    PLUS_ASSIGN     reduce using rule 39 (type -> type_modifier type .)
    MINUS_ASSIGN    reduce using rule 39 (type -> type_modifier type .)
    SHIFT_LEFT_ASSIGN reduce using rule 39 (type -> type_modifier type .)
    SHIFT_RIGHT_ASSIGN reduce using rule 39 (type -> type_modifier type .)
    BITWISE_AND_ASSIGN reduce using rule 39 (type -> type_modifier type .)
    BITWISE_XOR_ASSIGN reduce using rule 39 (type -> type_modifier type .)
    BITWISE_OR_ASSIGN reduce using rule 39 (type -> type_modifier type .)
    MODULUS         reduce using rule 39 (type -> type_modifier type .)
    DIVIDE          reduce using rule 39 (type -> type_modifier type .)
    MINUS           reduce using rule 39 (type -> type_modifier type .)
    PLUS            reduce using rule 39 (type -> type_modifier type .)
    BITWISE_SHIFT_RIGHT reduce using rule 39 (type -> type_modifier type .)
    BITWISE_SHIFT_LEFT reduce using rule 39 (type -> type_modifier type .)
    LESS_EQUALS     reduce using rule 39 (type -> type_modifier type .)
    LESS_THEN       reduce using rule 39 (type -> type_modifier type .)
    GREATER_EQUALS  reduce using rule 39 (type -> type_modifier type .)
    GREATER_THEN    reduce using rule 39 (type -> type_modifier type .)
    NOT_EQUALS      reduce using rule 39 (type -> type_modifier type .)
    EQUALS_THEN     reduce using rule 39 (type -> type_modifier type .)
    BITWISE_AND     reduce using rule 39 (type -> type_modifier type .)
    BITWISE_XOR     reduce using rule 39 (type -> type_modifier type .)
    BITWISE_OR      reduce using rule 39 (type -> type_modifier type .)
    LOGICAL_AND     reduce using rule 39 (type -> type_modifier type .)
    LOGICAL_OR      reduce using rule 39 (type -> type_modifier type .)
    QUESTION_MARK   reduce using rule 39 (type -> type_modifier type .)
    KEYWORD_STRUCT  reduce using rule 39 (type -> type_modifier type .)
    KEYWORD_UNION   reduce using rule 39 (type -> type_modifier type .)
    TYPE_CHAR       reduce using rule 39 (type -> type_modifier type .)
    TYPE_INT        reduce using rule 39 (type -> type_modifier type .)
    TYPE_SHORT      reduce using rule 39 (type -> type_modifier type .)
    TYPE_LONG       reduce using rule 39 (type -> type_modifier type .)
    TYPE_FLOAT      reduce using rule 39 (type -> type_modifier type .)
    TYPE_DOUBLE     reduce using rule 39 (type -> type_modifier type .)
    TYPE_VOID       reduce using rule 39 (type -> type_modifier type .)
    KEYWORD_STATIC  reduce using rule 39 (type -> type_modifier type .)
    KEYWORD_UNSIGNED reduce using rule 39 (type -> type_modifier type .)
    KEYWORD_VOLATILE reduce using rule 39 (type -> type_modifier type .)
    KEYWORD_EXTERN  reduce using rule 39 (type -> type_modifier type .)
    KEYWORD_SIGNED  reduce using rule 39 (type -> type_modifier type .)
    KEYWORD_REGISTER reduce using rule 39 (type -> type_modifier type .)
    KEYWORD_AUTO    reduce using rule 39 (type -> type_modifier type .)
    INCREMENT       reduce using rule 39 (type -> type_modifier type .)
    DECREMENT       reduce using rule 39 (type -> type_modifier type .)
    BITWISE_COMPLEMENT reduce using rule 39 (type -> type_modifier type .)
    NOT             reduce using rule 39 (type -> type_modifier type .)
    LPAREN          reduce using rule 39 (type -> type_modifier type .)
    KEYWORD_SIZEOF  reduce using rule 39 (type -> type_modifier type .)
    STRING          reduce using rule 39 (type -> type_modifier type .)
    FLOAT_NUMBER    reduce using rule 39 (type -> type_modifier type .)
    CHARACTER       reduce using rule 39 (type -> type_modifier type .)
    NUMBER          reduce using rule 39 (type -> type_modifier type .)
    BINARY_NUMBER   reduce using rule 39 (type -> type_modifier type .)
    HEXADECIMAL_NUMBER reduce using rule 39 (type -> type_modifier type .)
    OCTAL_NUMBER    reduce using rule 39 (type -> type_modifier type .)
    $end            reduce using rule 39 (type -> type_modifier type .)
    SEMICOLON       reduce using rule 39 (type -> type_modifier type .)
    COLON           reduce using rule 39 (type -> type_modifier type .)
    RBRACKET        reduce using rule 39 (type -> type_modifier type .)
    COMMA           reduce using rule 39 (type -> type_modifier type .)
    LBRACKET        reduce using rule 39 (type -> type_modifier type .)


state 92

    (74) assign_exp -> unary_exp assign_operator . assign_exp
    (74) assign_exp -> . unary_exp assign_operator assign_exp
    (75) assign_exp -> . ternary_conditional_exp
    (121) unary_exp -> . prefix_exp
    (76) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (77) ternary_conditional_exp -> . logical_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (78) logical_exp -> . logical_or_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (79) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (80) logical_or_exp -> . logical_and_exp
    (143) primary_exp -> . identifier_exp
    (81) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (82) logical_and_exp -> . bitwise_or_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (83) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (84) bitwise_or_exp -> . bitwise_xor_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    unary_exp                      shift and go to state 14
    assign_exp                     shift and go to state 154
    ternary_conditional_exp        shift and go to state 15
    prefix_exp                     shift and go to state 32
    logical_exp                    shift and go to state 33
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_or_exp                 shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_and_exp                shift and go to state 49
    identifier_exp                 shift and go to state 50
    bitwise_or_exp                 shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_xor_exp                shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_and_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77

state 93

    (63) assign_operator -> ASSIGN .

    INCREMENT       reduce using rule 63 (assign_operator -> ASSIGN .)
    DECREMENT       reduce using rule 63 (assign_operator -> ASSIGN .)
    BITWISE_AND     reduce using rule 63 (assign_operator -> ASSIGN .)
    TIMES           reduce using rule 63 (assign_operator -> ASSIGN .)
    PLUS            reduce using rule 63 (assign_operator -> ASSIGN .)
    MINUS           reduce using rule 63 (assign_operator -> ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 63 (assign_operator -> ASSIGN .)
    NOT             reduce using rule 63 (assign_operator -> ASSIGN .)
    LPAREN          reduce using rule 63 (assign_operator -> ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 63 (assign_operator -> ASSIGN .)
    IDENTIFIER      reduce using rule 63 (assign_operator -> ASSIGN .)
    STRING          reduce using rule 63 (assign_operator -> ASSIGN .)
    FLOAT_NUMBER    reduce using rule 63 (assign_operator -> ASSIGN .)
    CHARACTER       reduce using rule 63 (assign_operator -> ASSIGN .)
    NUMBER          reduce using rule 63 (assign_operator -> ASSIGN .)
    BINARY_NUMBER   reduce using rule 63 (assign_operator -> ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 63 (assign_operator -> ASSIGN .)
    OCTAL_NUMBER    reduce using rule 63 (assign_operator -> ASSIGN .)


state 94

    (64) assign_operator -> TIMES_ASSIGN .

    INCREMENT       reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)
    DECREMENT       reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)
    BITWISE_AND     reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)
    TIMES           reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)
    PLUS            reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)
    MINUS           reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)
    NOT             reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)
    LPAREN          reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)
    IDENTIFIER      reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)
    STRING          reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)
    CHARACTER       reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)
    NUMBER          reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)
    BINARY_NUMBER   reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 64 (assign_operator -> TIMES_ASSIGN .)


state 95

    (65) assign_operator -> DIVIDE_ASSIGN .

    INCREMENT       reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    DECREMENT       reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    BITWISE_AND     reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    TIMES           reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    NOT             reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    IDENTIFIER      reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    STRING          reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    CHARACTER       reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER          reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    BINARY_NUMBER   reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)


state 96

    (66) assign_operator -> MODULUS_ASSIGN .

    INCREMENT       reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)
    DECREMENT       reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)
    BITWISE_AND     reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)
    TIMES           reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)
    PLUS            reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)
    MINUS           reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)
    NOT             reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)
    LPAREN          reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)
    IDENTIFIER      reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)
    STRING          reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)
    CHARACTER       reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)
    NUMBER          reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)
    BINARY_NUMBER   reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 66 (assign_operator -> MODULUS_ASSIGN .)


state 97

    (67) assign_operator -> PLUS_ASSIGN .

    INCREMENT       reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)
    DECREMENT       reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)
    BITWISE_AND     reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)
    TIMES           reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)
    PLUS            reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)
    NOT             reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)
    IDENTIFIER      reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)
    STRING          reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)
    CHARACTER       reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)
    NUMBER          reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)
    BINARY_NUMBER   reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 67 (assign_operator -> PLUS_ASSIGN .)


state 98

    (68) assign_operator -> MINUS_ASSIGN .

    INCREMENT       reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)
    DECREMENT       reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)
    BITWISE_AND     reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)
    TIMES           reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)
    PLUS            reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)
    MINUS           reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)
    NOT             reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)
    LPAREN          reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)
    IDENTIFIER      reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)
    STRING          reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)
    CHARACTER       reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)
    NUMBER          reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)
    BINARY_NUMBER   reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 68 (assign_operator -> MINUS_ASSIGN .)


state 99

    (69) assign_operator -> SHIFT_LEFT_ASSIGN .

    INCREMENT       reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    DECREMENT       reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    BITWISE_AND     reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    TIMES           reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    PLUS            reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    MINUS           reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    NOT             reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    LPAREN          reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    STRING          reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    CHARACTER       reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    NUMBER          reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    BINARY_NUMBER   reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 69 (assign_operator -> SHIFT_LEFT_ASSIGN .)


state 100

    (70) assign_operator -> SHIFT_RIGHT_ASSIGN .

    INCREMENT       reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    DECREMENT       reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    BITWISE_AND     reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    TIMES           reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    PLUS            reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    MINUS           reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    NOT             reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    LPAREN          reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    STRING          reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    CHARACTER       reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    NUMBER          reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    BINARY_NUMBER   reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 70 (assign_operator -> SHIFT_RIGHT_ASSIGN .)


state 101

    (71) assign_operator -> BITWISE_AND_ASSIGN .

    INCREMENT       reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)
    DECREMENT       reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)
    BITWISE_AND     reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)
    TIMES           reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)
    PLUS            reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)
    MINUS           reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)
    NOT             reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)
    LPAREN          reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)
    IDENTIFIER      reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)
    STRING          reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)
    CHARACTER       reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)
    NUMBER          reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)
    BINARY_NUMBER   reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 71 (assign_operator -> BITWISE_AND_ASSIGN .)


state 102

    (72) assign_operator -> BITWISE_XOR_ASSIGN .

    INCREMENT       reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)
    DECREMENT       reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)
    BITWISE_AND     reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)
    TIMES           reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)
    PLUS            reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)
    MINUS           reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)
    NOT             reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)
    LPAREN          reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)
    STRING          reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)
    CHARACTER       reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)
    NUMBER          reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)
    BINARY_NUMBER   reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 72 (assign_operator -> BITWISE_XOR_ASSIGN .)


state 103

    (73) assign_operator -> BITWISE_OR_ASSIGN .

    INCREMENT       reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)
    DECREMENT       reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)
    BITWISE_AND     reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)
    TIMES           reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)
    PLUS            reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)
    MINUS           reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)
    NOT             reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)
    LPAREN          reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)
    IDENTIFIER      reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)
    STRING          reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)
    CHARACTER       reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)
    NUMBER          reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)
    BINARY_NUMBER   reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 73 (assign_operator -> BITWISE_OR_ASSIGN .)


state 104

    (47) user_types -> KEYWORD_STRUCT IDENTIFIER .

    IDENTIFIER      reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TIMES           reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    RPAREN          reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    ASSIGN          reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    MODULUS_ASSIGN  reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    SHIFT_LEFT_ASSIGN reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_AND_ASSIGN reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_XOR_ASSIGN reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_OR_ASSIGN reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    MODULUS         reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    DIVIDE          reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    MINUS           reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    PLUS            reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_SHIFT_RIGHT reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_SHIFT_LEFT reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    LESS_EQUALS     reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    LESS_THEN       reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    GREATER_THEN    reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    NOT_EQUALS      reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    EQUALS_THEN     reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_AND     reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_XOR     reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_OR      reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    LOGICAL_AND     reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    LOGICAL_OR      reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    QUESTION_MARK   reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_STRUCT  reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_UNION   reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TYPE_CHAR       reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TYPE_INT        reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TYPE_SHORT      reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TYPE_LONG       reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TYPE_FLOAT      reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TYPE_DOUBLE     reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    TYPE_VOID       reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_STATIC  reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_UNSIGNED reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_VOLATILE reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_EXTERN  reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_SIGNED  reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_REGISTER reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_AUTO    reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    INCREMENT       reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    DECREMENT       reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BITWISE_COMPLEMENT reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    NOT             reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    LPAREN          reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    KEYWORD_SIZEOF  reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    STRING          reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    FLOAT_NUMBER    reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    CHARACTER       reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    NUMBER          reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    BINARY_NUMBER   reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    HEXADECIMAL_NUMBER reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    OCTAL_NUMBER    reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    $end            reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    SEMICOLON       reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    COLON           reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    RBRACKET        reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    COMMA           reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)
    LBRACKET        reduce using rule 47 (user_types -> KEYWORD_STRUCT IDENTIFIER .)


state 105

    (48) user_types -> KEYWORD_UNION IDENTIFIER .

    IDENTIFIER      reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TIMES           reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    RPAREN          reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    ASSIGN          reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    MODULUS_ASSIGN  reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    SHIFT_LEFT_ASSIGN reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_AND_ASSIGN reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_XOR_ASSIGN reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_OR_ASSIGN reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    MODULUS         reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    DIVIDE          reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    MINUS           reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    PLUS            reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_SHIFT_RIGHT reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_SHIFT_LEFT reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    LESS_EQUALS     reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    LESS_THEN       reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    GREATER_THEN    reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    NOT_EQUALS      reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    EQUALS_THEN     reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_AND     reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_XOR     reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_OR      reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    LOGICAL_AND     reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    LOGICAL_OR      reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    QUESTION_MARK   reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_STRUCT  reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_UNION   reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TYPE_CHAR       reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TYPE_INT        reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TYPE_SHORT      reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TYPE_LONG       reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TYPE_FLOAT      reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TYPE_DOUBLE     reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    TYPE_VOID       reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_STATIC  reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_UNSIGNED reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_VOLATILE reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_EXTERN  reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_SIGNED  reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_REGISTER reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_AUTO    reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    INCREMENT       reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    DECREMENT       reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BITWISE_COMPLEMENT reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    NOT             reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    LPAREN          reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    KEYWORD_SIZEOF  reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    STRING          reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    FLOAT_NUMBER    reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    CHARACTER       reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    NUMBER          reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    BINARY_NUMBER   reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    HEXADECIMAL_NUMBER reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    OCTAL_NUMBER    reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    $end            reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    SEMICOLON       reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    COLON           reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    RBRACKET        reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    COMMA           reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)
    LBRACKET        reduce using rule 48 (user_types -> KEYWORD_UNION IDENTIFIER .)


state 106

    (76) ternary_conditional_exp -> logical_exp QUESTION_MARK . expression COLON ternary_conditional_exp
    (62) expression -> . assign_exp
    (74) assign_exp -> . unary_exp assign_operator assign_exp
    (75) assign_exp -> . ternary_conditional_exp
    (121) unary_exp -> . prefix_exp
    (76) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (77) ternary_conditional_exp -> . logical_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (78) logical_exp -> . logical_or_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (79) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (80) logical_or_exp -> . logical_and_exp
    (143) primary_exp -> . identifier_exp
    (81) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (82) logical_and_exp -> . bitwise_or_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (83) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (84) bitwise_or_exp -> . bitwise_xor_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    logical_exp                    shift and go to state 33
    expression                     shift and go to state 155
    ternary_conditional_exp        shift and go to state 15
    assign_exp                     shift and go to state 10
    unary_exp                      shift and go to state 14
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_or_exp                 shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_and_exp                shift and go to state 49
    identifier_exp                 shift and go to state 50
    bitwise_or_exp                 shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_xor_exp                shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_and_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77

state 107

    (133) postfix_exp -> postfix_exp LBRACKET . expression RBRACKET
    (62) expression -> . assign_exp
    (74) assign_exp -> . unary_exp assign_operator assign_exp
    (75) assign_exp -> . ternary_conditional_exp
    (121) unary_exp -> . prefix_exp
    (76) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (77) ternary_conditional_exp -> . logical_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (78) logical_exp -> . logical_or_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (79) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (80) logical_or_exp -> . logical_and_exp
    (143) primary_exp -> . identifier_exp
    (81) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (82) logical_and_exp -> . bitwise_or_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (83) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (84) bitwise_or_exp -> . bitwise_xor_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    postfix_exp                    shift and go to state 34
    expression                     shift and go to state 156
    assign_exp                     shift and go to state 10
    unary_exp                      shift and go to state 14
    ternary_conditional_exp        shift and go to state 15
    prefix_exp                     shift and go to state 32
    logical_exp                    shift and go to state 33
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_or_exp                 shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_and_exp                shift and go to state 49
    identifier_exp                 shift and go to state 50
    bitwise_or_exp                 shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_xor_exp                shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_and_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77

state 108

    (134) postfix_exp -> postfix_exp LPAREN . RPAREN
    (135) postfix_exp -> postfix_exp LPAREN . function_call_parameters RPAREN
    (141) function_call_parameters -> . expression
    (142) function_call_parameters -> . expression COMMA function_call_parameters
    (62) expression -> . assign_exp
    (74) assign_exp -> . unary_exp assign_operator assign_exp
    (75) assign_exp -> . ternary_conditional_exp
    (121) unary_exp -> . prefix_exp
    (76) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (77) ternary_conditional_exp -> . logical_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (78) logical_exp -> . logical_or_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (79) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (80) logical_or_exp -> . logical_and_exp
    (143) primary_exp -> . identifier_exp
    (81) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (82) logical_and_exp -> . bitwise_or_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (83) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (84) bitwise_or_exp -> . bitwise_xor_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp

    RPAREN          shift and go to state 157
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    postfix_exp                    shift and go to state 34
    function_call_parameters       shift and go to state 158
    expression                     shift and go to state 159
    assign_exp                     shift and go to state 10
    unary_exp                      shift and go to state 14
    ternary_conditional_exp        shift and go to state 15
    prefix_exp                     shift and go to state 32
    logical_exp                    shift and go to state 33
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_or_exp                 shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_and_exp                shift and go to state 49
    identifier_exp                 shift and go to state 50
    bitwise_or_exp                 shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_xor_exp                shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_and_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77

state 109

    (136) postfix_exp -> postfix_exp DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 160


state 110

    (137) postfix_exp -> postfix_exp ARROW . IDENTIFIER

    IDENTIFIER      shift and go to state 161


state 111

    (138) postfix_exp -> postfix_exp INCREMENT .

    LBRACKET        reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    LPAREN          reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    DOT             reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    ARROW           reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    INCREMENT       reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    DECREMENT       reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    ASSIGN          reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    TIMES_ASSIGN    reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    DIVIDE_ASSIGN   reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    MODULUS_ASSIGN  reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    PLUS_ASSIGN     reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    MINUS_ASSIGN    reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    SHIFT_LEFT_ASSIGN reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    SHIFT_RIGHT_ASSIGN reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_AND_ASSIGN reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_XOR_ASSIGN reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_OR_ASSIGN reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    MODULUS         reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    DIVIDE          reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    TIMES           reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    MINUS           reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    PLUS            reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_SHIFT_RIGHT reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_SHIFT_LEFT reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    LESS_EQUALS     reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    LESS_THEN       reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    GREATER_EQUALS  reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    GREATER_THEN    reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    NOT_EQUALS      reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    EQUALS_THEN     reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_AND     reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_XOR     reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_OR      reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    LOGICAL_AND     reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    LOGICAL_OR      reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    QUESTION_MARK   reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_STRUCT  reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_UNION   reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    TYPE_CHAR       reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    TYPE_INT        reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    TYPE_SHORT      reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    TYPE_LONG       reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    TYPE_FLOAT      reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    TYPE_DOUBLE     reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    TYPE_VOID       reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_STATIC  reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_UNSIGNED reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_VOLATILE reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_EXTERN  reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_SIGNED  reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_REGISTER reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_AUTO    reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    BITWISE_COMPLEMENT reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    NOT             reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    KEYWORD_SIZEOF  reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    IDENTIFIER      reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    STRING          reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    FLOAT_NUMBER    reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    CHARACTER       reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    NUMBER          reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    BINARY_NUMBER   reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    HEXADECIMAL_NUMBER reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    OCTAL_NUMBER    reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    $end            reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    RPAREN          reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    SEMICOLON       reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    COLON           reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    RBRACKET        reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)
    COMMA           reduce using rule 138 (postfix_exp -> postfix_exp INCREMENT .)


state 112

    (139) postfix_exp -> postfix_exp DECREMENT .

    LBRACKET        reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    LPAREN          reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    DOT             reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    ARROW           reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    INCREMENT       reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    DECREMENT       reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    ASSIGN          reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    TIMES_ASSIGN    reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    DIVIDE_ASSIGN   reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    MODULUS_ASSIGN  reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    PLUS_ASSIGN     reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    MINUS_ASSIGN    reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    SHIFT_LEFT_ASSIGN reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    SHIFT_RIGHT_ASSIGN reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_AND_ASSIGN reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_XOR_ASSIGN reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_OR_ASSIGN reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    MODULUS         reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    DIVIDE          reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    TIMES           reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    MINUS           reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    PLUS            reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_SHIFT_RIGHT reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_SHIFT_LEFT reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    LESS_EQUALS     reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    LESS_THEN       reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    GREATER_EQUALS  reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    GREATER_THEN    reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    NOT_EQUALS      reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    EQUALS_THEN     reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_AND     reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_XOR     reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_OR      reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    LOGICAL_AND     reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    LOGICAL_OR      reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    QUESTION_MARK   reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_STRUCT  reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_UNION   reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    TYPE_CHAR       reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    TYPE_INT        reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    TYPE_SHORT      reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    TYPE_LONG       reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    TYPE_FLOAT      reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    TYPE_DOUBLE     reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    TYPE_VOID       reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_STATIC  reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_UNSIGNED reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_VOLATILE reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_EXTERN  reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_SIGNED  reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_REGISTER reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_AUTO    reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    BITWISE_COMPLEMENT reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    NOT             reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    KEYWORD_SIZEOF  reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    IDENTIFIER      reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    STRING          reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    FLOAT_NUMBER    reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    CHARACTER       reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    NUMBER          reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    BINARY_NUMBER   reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    HEXADECIMAL_NUMBER reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    OCTAL_NUMBER    reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    $end            reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    RPAREN          reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    SEMICOLON       reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    COLON           reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    RBRACKET        reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)
    COMMA           reduce using rule 139 (postfix_exp -> postfix_exp DECREMENT .)


state 113

    (123) prefix_exp -> INCREMENT unary_exp .

    ASSIGN          reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    TIMES_ASSIGN    reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    DIVIDE_ASSIGN   reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    MODULUS_ASSIGN  reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    PLUS_ASSIGN     reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    MINUS_ASSIGN    reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    BITWISE_AND_ASSIGN reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    BITWISE_OR_ASSIGN reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    MODULUS         reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    DIVIDE          reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    TIMES           reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    MINUS           reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    PLUS            reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    LESS_EQUALS     reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    LESS_THEN       reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    GREATER_EQUALS  reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    GREATER_THEN    reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    NOT_EQUALS      reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    EQUALS_THEN     reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    BITWISE_AND     reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    BITWISE_XOR     reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    BITWISE_OR      reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    LOGICAL_AND     reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    LOGICAL_OR      reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    QUESTION_MARK   reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    KEYWORD_STRUCT  reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    KEYWORD_UNION   reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    TYPE_CHAR       reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    TYPE_INT        reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    TYPE_SHORT      reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    TYPE_LONG       reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    TYPE_FLOAT      reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    TYPE_DOUBLE     reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    TYPE_VOID       reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    KEYWORD_STATIC  reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    KEYWORD_UNSIGNED reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    KEYWORD_VOLATILE reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    KEYWORD_EXTERN  reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    KEYWORD_SIGNED  reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    KEYWORD_REGISTER reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    KEYWORD_AUTO    reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    INCREMENT       reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    DECREMENT       reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    BITWISE_COMPLEMENT reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    NOT             reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    LPAREN          reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    KEYWORD_SIZEOF  reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    IDENTIFIER      reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    STRING          reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    FLOAT_NUMBER    reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    CHARACTER       reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    NUMBER          reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    BINARY_NUMBER   reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    OCTAL_NUMBER    reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    $end            reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    RPAREN          reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    SEMICOLON       reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    COLON           reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    RBRACKET        reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)
    COMMA           reduce using rule 123 (prefix_exp -> INCREMENT unary_exp .)


state 114

    (124) prefix_exp -> DECREMENT unary_exp .

    ASSIGN          reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    TIMES_ASSIGN    reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    DIVIDE_ASSIGN   reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    MODULUS_ASSIGN  reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    PLUS_ASSIGN     reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    MINUS_ASSIGN    reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    BITWISE_AND_ASSIGN reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    BITWISE_OR_ASSIGN reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    MODULUS         reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    DIVIDE          reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    TIMES           reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    MINUS           reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    PLUS            reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    LESS_EQUALS     reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    LESS_THEN       reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    GREATER_EQUALS  reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    GREATER_THEN    reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    NOT_EQUALS      reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    EQUALS_THEN     reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    BITWISE_AND     reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    BITWISE_XOR     reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    BITWISE_OR      reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    LOGICAL_AND     reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    LOGICAL_OR      reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    QUESTION_MARK   reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    KEYWORD_STRUCT  reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    KEYWORD_UNION   reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    TYPE_CHAR       reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    TYPE_INT        reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    TYPE_SHORT      reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    TYPE_LONG       reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    TYPE_FLOAT      reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    TYPE_DOUBLE     reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    TYPE_VOID       reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    KEYWORD_STATIC  reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    KEYWORD_UNSIGNED reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    KEYWORD_VOLATILE reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    KEYWORD_EXTERN  reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    KEYWORD_SIGNED  reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    KEYWORD_REGISTER reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    KEYWORD_AUTO    reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    INCREMENT       reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    DECREMENT       reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    BITWISE_COMPLEMENT reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    NOT             reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    LPAREN          reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    KEYWORD_SIZEOF  reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    IDENTIFIER      reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    STRING          reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    FLOAT_NUMBER    reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    CHARACTER       reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    NUMBER          reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    BINARY_NUMBER   reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    OCTAL_NUMBER    reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    $end            reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    RPAREN          reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    SEMICOLON       reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    COLON           reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    RBRACKET        reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)
    COMMA           reduce using rule 124 (prefix_exp -> DECREMENT unary_exp .)


state 115

    (125) prefix_exp -> unary_operator unary_exp .

    ASSIGN          reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    TIMES_ASSIGN    reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    DIVIDE_ASSIGN   reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    MODULUS_ASSIGN  reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    PLUS_ASSIGN     reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    MINUS_ASSIGN    reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    BITWISE_AND_ASSIGN reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    BITWISE_OR_ASSIGN reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    MODULUS         reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    DIVIDE          reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    TIMES           reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    MINUS           reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    PLUS            reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    LESS_EQUALS     reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    LESS_THEN       reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    GREATER_EQUALS  reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    GREATER_THEN    reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    NOT_EQUALS      reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    EQUALS_THEN     reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    BITWISE_AND     reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    BITWISE_XOR     reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    BITWISE_OR      reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    LOGICAL_AND     reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    LOGICAL_OR      reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    QUESTION_MARK   reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    KEYWORD_STRUCT  reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    KEYWORD_UNION   reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    TYPE_CHAR       reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    TYPE_INT        reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    TYPE_SHORT      reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    TYPE_LONG       reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    TYPE_FLOAT      reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    TYPE_DOUBLE     reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    TYPE_VOID       reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    KEYWORD_STATIC  reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    KEYWORD_UNSIGNED reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    KEYWORD_VOLATILE reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    KEYWORD_EXTERN  reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    KEYWORD_SIGNED  reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    KEYWORD_REGISTER reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    KEYWORD_AUTO    reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    INCREMENT       reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    DECREMENT       reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    BITWISE_COMPLEMENT reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    NOT             reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    LPAREN          reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    KEYWORD_SIZEOF  reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    IDENTIFIER      reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    STRING          reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    FLOAT_NUMBER    reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    CHARACTER       reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    NUMBER          reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    BINARY_NUMBER   reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    OCTAL_NUMBER    reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    $end            reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    RPAREN          reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    SEMICOLON       reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    COLON           reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    RBRACKET        reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)
    COMMA           reduce using rule 125 (prefix_exp -> unary_operator unary_exp .)


state 116

    (126) prefix_exp -> cast_exp unary_exp .

    ASSIGN          reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    TIMES_ASSIGN    reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    DIVIDE_ASSIGN   reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    MODULUS_ASSIGN  reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    PLUS_ASSIGN     reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    MINUS_ASSIGN    reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    BITWISE_AND_ASSIGN reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    BITWISE_OR_ASSIGN reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    MODULUS         reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    DIVIDE          reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    TIMES           reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    MINUS           reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    PLUS            reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    LESS_EQUALS     reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    LESS_THEN       reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    GREATER_EQUALS  reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    GREATER_THEN    reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    NOT_EQUALS      reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    EQUALS_THEN     reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    BITWISE_AND     reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    BITWISE_XOR     reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    BITWISE_OR      reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    LOGICAL_AND     reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    LOGICAL_OR      reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    QUESTION_MARK   reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    KEYWORD_STRUCT  reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    KEYWORD_UNION   reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    TYPE_CHAR       reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    TYPE_INT        reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    TYPE_SHORT      reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    TYPE_LONG       reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    TYPE_FLOAT      reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    TYPE_DOUBLE     reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    TYPE_VOID       reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    KEYWORD_STATIC  reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    KEYWORD_UNSIGNED reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    KEYWORD_VOLATILE reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    KEYWORD_EXTERN  reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    KEYWORD_SIGNED  reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    KEYWORD_REGISTER reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    KEYWORD_AUTO    reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    INCREMENT       reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    DECREMENT       reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    BITWISE_COMPLEMENT reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    NOT             reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    LPAREN          reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    KEYWORD_SIZEOF  reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    IDENTIFIER      reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    STRING          reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    FLOAT_NUMBER    reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    CHARACTER       reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    NUMBER          reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    BINARY_NUMBER   reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    OCTAL_NUMBER    reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    $end            reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    RPAREN          reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    SEMICOLON       reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    COLON           reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    RBRACKET        reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)
    COMMA           reduce using rule 126 (prefix_exp -> cast_exp unary_exp .)


state 117

    (79) logical_or_exp -> logical_or_exp LOGICAL_OR . logical_and_exp
    (81) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (82) logical_and_exp -> . bitwise_or_exp
    (83) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (84) bitwise_or_exp -> . bitwise_xor_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    logical_and_exp                shift and go to state 162
    bitwise_or_exp                 shift and go to state 51
    bitwise_xor_exp                shift and go to state 53
    bitwise_and_exp                shift and go to state 56
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 118

    (128) sizeof_exp -> KEYWORD_SIZEOF unary_exp .

    ASSIGN          reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TIMES_ASSIGN    reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    DIVIDE_ASSIGN   reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    MODULUS_ASSIGN  reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    PLUS_ASSIGN     reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    MINUS_ASSIGN    reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_AND_ASSIGN reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_OR_ASSIGN reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    MODULUS         reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    DIVIDE          reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TIMES           reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    MINUS           reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    PLUS            reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    LESS_EQUALS     reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    LESS_THEN       reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    GREATER_EQUALS  reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    GREATER_THEN    reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    NOT_EQUALS      reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    EQUALS_THEN     reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_AND     reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_XOR     reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_OR      reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    LOGICAL_AND     reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    LOGICAL_OR      reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    QUESTION_MARK   reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_STRUCT  reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_UNION   reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TYPE_CHAR       reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TYPE_INT        reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TYPE_SHORT      reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TYPE_LONG       reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TYPE_FLOAT      reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TYPE_DOUBLE     reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    TYPE_VOID       reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_STATIC  reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_UNSIGNED reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_VOLATILE reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_EXTERN  reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_SIGNED  reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_REGISTER reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_AUTO    reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    INCREMENT       reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    DECREMENT       reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BITWISE_COMPLEMENT reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    NOT             reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    LPAREN          reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    KEYWORD_SIZEOF  reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    IDENTIFIER      reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    STRING          reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    FLOAT_NUMBER    reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    CHARACTER       reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    NUMBER          reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    BINARY_NUMBER   reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    OCTAL_NUMBER    reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    $end            reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    RPAREN          reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    SEMICOLON       reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    COLON           reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    RBRACKET        reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)
    COMMA           reduce using rule 128 (sizeof_exp -> KEYWORD_SIZEOF unary_exp .)


state 119

    (129) sizeof_exp -> KEYWORD_SIZEOF type .
    (36) pointer -> type . multiple_times
    (56) multiple_times -> . TIMES multiple_times
    (57) multiple_times -> . TIMES

  ! shift/reduce conflict for TIMES resolved as shift
    ASSIGN          reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TIMES_ASSIGN    reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    DIVIDE_ASSIGN   reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    MODULUS_ASSIGN  reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    PLUS_ASSIGN     reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    MINUS_ASSIGN    reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    SHIFT_LEFT_ASSIGN reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    SHIFT_RIGHT_ASSIGN reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_AND_ASSIGN reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_XOR_ASSIGN reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_OR_ASSIGN reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    MODULUS         reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    DIVIDE          reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    MINUS           reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    PLUS            reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_SHIFT_RIGHT reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_SHIFT_LEFT reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    LESS_EQUALS     reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    LESS_THEN       reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    GREATER_EQUALS  reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    GREATER_THEN    reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    NOT_EQUALS      reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    EQUALS_THEN     reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_AND     reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_XOR     reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_OR      reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    LOGICAL_AND     reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    LOGICAL_OR      reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    QUESTION_MARK   reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_STRUCT  reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_UNION   reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TYPE_CHAR       reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TYPE_INT        reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TYPE_SHORT      reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TYPE_LONG       reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TYPE_FLOAT      reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TYPE_DOUBLE     reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TYPE_VOID       reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_STATIC  reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_UNSIGNED reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_VOLATILE reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_EXTERN  reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_SIGNED  reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_REGISTER reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_AUTO    reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    INCREMENT       reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    DECREMENT       reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BITWISE_COMPLEMENT reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    NOT             reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    LPAREN          reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    KEYWORD_SIZEOF  reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    IDENTIFIER      reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    STRING          reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    FLOAT_NUMBER    reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    CHARACTER       reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    NUMBER          reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    BINARY_NUMBER   reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    HEXADECIMAL_NUMBER reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    OCTAL_NUMBER    reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    $end            reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    RPAREN          reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    SEMICOLON       reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    COLON           reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    RBRACKET        reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    COMMA           reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .)
    TIMES           shift and go to state 86

  ! TIMES           [ reduce using rule 129 (sizeof_exp -> KEYWORD_SIZEOF type .) ]

    multiple_times                 shift and go to state 85

state 120

    (130) sizeof_exp -> KEYWORD_SIZEOF pointer .

    ASSIGN          reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TIMES_ASSIGN    reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    DIVIDE_ASSIGN   reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    MODULUS_ASSIGN  reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    PLUS_ASSIGN     reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    MINUS_ASSIGN    reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    SHIFT_LEFT_ASSIGN reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    SHIFT_RIGHT_ASSIGN reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_AND_ASSIGN reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_XOR_ASSIGN reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_OR_ASSIGN reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    MODULUS         reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    DIVIDE          reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TIMES           reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    MINUS           reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    PLUS            reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_SHIFT_RIGHT reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_SHIFT_LEFT reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    LESS_EQUALS     reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    LESS_THEN       reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    GREATER_EQUALS  reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    GREATER_THEN    reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    NOT_EQUALS      reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    EQUALS_THEN     reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_AND     reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_XOR     reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_OR      reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    LOGICAL_AND     reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    LOGICAL_OR      reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    QUESTION_MARK   reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_STRUCT  reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_UNION   reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TYPE_CHAR       reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TYPE_INT        reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TYPE_SHORT      reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TYPE_LONG       reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TYPE_FLOAT      reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TYPE_DOUBLE     reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    TYPE_VOID       reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_STATIC  reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_UNSIGNED reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_VOLATILE reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_EXTERN  reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_SIGNED  reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_REGISTER reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_AUTO    reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    INCREMENT       reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    DECREMENT       reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BITWISE_COMPLEMENT reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    NOT             reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    LPAREN          reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    KEYWORD_SIZEOF  reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    IDENTIFIER      reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    STRING          reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    FLOAT_NUMBER    reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    CHARACTER       reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    NUMBER          reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    BINARY_NUMBER   reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    HEXADECIMAL_NUMBER reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    OCTAL_NUMBER    reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    $end            reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    RPAREN          reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    SEMICOLON       reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    COLON           reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    RBRACKET        reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)
    COMMA           reduce using rule 130 (sizeof_exp -> KEYWORD_SIZEOF pointer .)


state 121

    (81) logical_and_exp -> logical_and_exp LOGICAL_AND . bitwise_or_exp
    (83) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (84) bitwise_or_exp -> . bitwise_xor_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    bitwise_or_exp                 shift and go to state 164
    bitwise_xor_exp                shift and go to state 53
    bitwise_and_exp                shift and go to state 56
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 122

    (83) bitwise_or_exp -> bitwise_or_exp BITWISE_OR . bitwise_xor_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    bitwise_xor_exp                shift and go to state 165
    bitwise_and_exp                shift and go to state 56
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 123

    (85) bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR . bitwise_and_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    bitwise_and_exp                shift and go to state 166
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 124

    (87) bitwise_and_exp -> bitwise_and_exp BITWISE_AND . is_equals_exp
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    is_equals_exp                  shift and go to state 167
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 125

    (89) is_equals_exp -> is_equals_exp EQUALS_THEN . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    is_not_equals_exp              shift and go to state 168
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 126

    (91) is_not_equals_exp -> is_not_equals_exp NOT_EQUALS . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    greater_then_exp               shift and go to state 169
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 127

    (93) greater_then_exp -> greater_then_exp GREATER_THEN . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    greater_equals_exp             shift and go to state 170
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 128

    (95) greater_equals_exp -> greater_equals_exp GREATER_EQUALS . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    less_then_exp                  shift and go to state 171
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 129

    (97) less_then_exp -> less_then_exp LESS_THEN . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    less_equals_exp                shift and go to state 172
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 130

    (99) less_equals_exp -> less_equals_exp LESS_EQUALS . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    left_shift_exp                 shift and go to state 173
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 131

    (101) left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    right_shift_exp                shift and go to state 174
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 132

    (103) right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    plus_exp                       shift and go to state 175
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 133

    (105) plus_exp -> plus_exp PLUS . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    minus_exp                      shift and go to state 176
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 134

    (107) minus_exp -> minus_exp MINUS . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    times_exp                      shift and go to state 177
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 135

    (109) times_exp -> times_exp TIMES . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    divide_exp                     shift and go to state 178
    modulus_exp                    shift and go to state 77
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 136

    (111) divide_exp -> divide_exp DIVIDE . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    modulus_exp                    shift and go to state 179
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 137

    (113) modulus_exp -> modulus_exp MODULUS . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    unary_exp                      shift and go to state 180
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 138

    (2) program -> function_signature SEMICOLON program .

    $end            reduce using rule 2 (program -> function_signature SEMICOLON program .)


state 139

    (6) command_block -> LBRACE RBRACE .

    KEYWORD_STRUCT  reduce using rule 6 (command_block -> LBRACE RBRACE .)
    KEYWORD_UNION   reduce using rule 6 (command_block -> LBRACE RBRACE .)
    TYPE_CHAR       reduce using rule 6 (command_block -> LBRACE RBRACE .)
    TYPE_INT        reduce using rule 6 (command_block -> LBRACE RBRACE .)
    TYPE_SHORT      reduce using rule 6 (command_block -> LBRACE RBRACE .)
    TYPE_LONG       reduce using rule 6 (command_block -> LBRACE RBRACE .)
    TYPE_FLOAT      reduce using rule 6 (command_block -> LBRACE RBRACE .)
    TYPE_DOUBLE     reduce using rule 6 (command_block -> LBRACE RBRACE .)
    TYPE_VOID       reduce using rule 6 (command_block -> LBRACE RBRACE .)
    KEYWORD_STATIC  reduce using rule 6 (command_block -> LBRACE RBRACE .)
    KEYWORD_UNSIGNED reduce using rule 6 (command_block -> LBRACE RBRACE .)
    KEYWORD_VOLATILE reduce using rule 6 (command_block -> LBRACE RBRACE .)
    KEYWORD_EXTERN  reduce using rule 6 (command_block -> LBRACE RBRACE .)
    KEYWORD_SIGNED  reduce using rule 6 (command_block -> LBRACE RBRACE .)
    KEYWORD_REGISTER reduce using rule 6 (command_block -> LBRACE RBRACE .)
    KEYWORD_AUTO    reduce using rule 6 (command_block -> LBRACE RBRACE .)
    INCREMENT       reduce using rule 6 (command_block -> LBRACE RBRACE .)
    DECREMENT       reduce using rule 6 (command_block -> LBRACE RBRACE .)
    BITWISE_AND     reduce using rule 6 (command_block -> LBRACE RBRACE .)
    TIMES           reduce using rule 6 (command_block -> LBRACE RBRACE .)
    PLUS            reduce using rule 6 (command_block -> LBRACE RBRACE .)
    MINUS           reduce using rule 6 (command_block -> LBRACE RBRACE .)
    BITWISE_COMPLEMENT reduce using rule 6 (command_block -> LBRACE RBRACE .)
    NOT             reduce using rule 6 (command_block -> LBRACE RBRACE .)
    LPAREN          reduce using rule 6 (command_block -> LBRACE RBRACE .)
    KEYWORD_SIZEOF  reduce using rule 6 (command_block -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 6 (command_block -> LBRACE RBRACE .)
    STRING          reduce using rule 6 (command_block -> LBRACE RBRACE .)
    FLOAT_NUMBER    reduce using rule 6 (command_block -> LBRACE RBRACE .)
    CHARACTER       reduce using rule 6 (command_block -> LBRACE RBRACE .)
    NUMBER          reduce using rule 6 (command_block -> LBRACE RBRACE .)
    BINARY_NUMBER   reduce using rule 6 (command_block -> LBRACE RBRACE .)
    HEXADECIMAL_NUMBER reduce using rule 6 (command_block -> LBRACE RBRACE .)
    OCTAL_NUMBER    reduce using rule 6 (command_block -> LBRACE RBRACE .)
    $end            reduce using rule 6 (command_block -> LBRACE RBRACE .)


state 140

    (7) command_block -> LBRACE command_list . RBRACE

    RBRACE          shift and go to state 181


state 141

    (8) command_list -> command . command_list
    (9) command_list -> command .
    (8) command_list -> . command command_list
    (9) command_list -> . command
    (10) command -> . variable_declaration SEMICOLON
    (11) command -> . variable_declaration ASSIGN expression SEMICOLON
    (12) command -> . expression SEMICOLON
    (13) command -> . SEMICOLON
    (34) variable_declaration -> . type IDENTIFIER
    (35) variable_declaration -> . pointer IDENTIFIER
    (62) expression -> . assign_exp
    (37) type -> . user_types
    (38) type -> . primitive_types
    (39) type -> . type_modifier type
    (36) pointer -> . type multiple_times
    (74) assign_exp -> . unary_exp assign_operator assign_exp
    (75) assign_exp -> . ternary_conditional_exp
    (47) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (48) user_types -> . KEYWORD_UNION IDENTIFIER
    (49) primitive_types -> . TYPE_CHAR
    (50) primitive_types -> . TYPE_INT
    (51) primitive_types -> . TYPE_SHORT
    (52) primitive_types -> . TYPE_LONG
    (53) primitive_types -> . TYPE_FLOAT
    (54) primitive_types -> . TYPE_DOUBLE
    (55) primitive_types -> . TYPE_VOID
    (40) type_modifier -> . KEYWORD_STATIC
    (41) type_modifier -> . KEYWORD_UNSIGNED
    (42) type_modifier -> . KEYWORD_VOLATILE
    (43) type_modifier -> . KEYWORD_EXTERN
    (44) type_modifier -> . KEYWORD_SIGNED
    (45) type_modifier -> . KEYWORD_REGISTER
    (46) type_modifier -> . KEYWORD_AUTO
    (121) unary_exp -> . prefix_exp
    (76) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (77) ternary_conditional_exp -> . logical_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (78) logical_exp -> . logical_or_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (79) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (80) logical_or_exp -> . logical_and_exp
    (143) primary_exp -> . identifier_exp
    (81) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (82) logical_and_exp -> . bitwise_or_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (83) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (84) bitwise_or_exp -> . bitwise_xor_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp

    RBRACE          reduce using rule 9 (command_list -> command .)
    SEMICOLON       shift and go to state 143
    KEYWORD_STRUCT  shift and go to state 16
    KEYWORD_UNION   shift and go to state 17
    TYPE_CHAR       shift and go to state 18
    TYPE_INT        shift and go to state 19
    TYPE_SHORT      shift and go to state 20
    TYPE_LONG       shift and go to state 21
    TYPE_FLOAT      shift and go to state 22
    TYPE_DOUBLE     shift and go to state 23
    TYPE_VOID       shift and go to state 24
    KEYWORD_STATIC  shift and go to state 25
    KEYWORD_UNSIGNED shift and go to state 26
    KEYWORD_VOLATILE shift and go to state 27
    KEYWORD_EXTERN  shift and go to state 28
    KEYWORD_SIGNED  shift and go to state 29
    KEYWORD_REGISTER shift and go to state 30
    KEYWORD_AUTO    shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    command                        shift and go to state 141
    command_list                   shift and go to state 182
    variable_declaration           shift and go to state 142
    expression                     shift and go to state 144
    type                           shift and go to state 145
    pointer                        shift and go to state 146
    assign_exp                     shift and go to state 10
    user_types                     shift and go to state 11
    primitive_types                shift and go to state 12
    type_modifier                  shift and go to state 13
    unary_exp                      shift and go to state 14
    ternary_conditional_exp        shift and go to state 15
    prefix_exp                     shift and go to state 32
    logical_exp                    shift and go to state 33
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_or_exp                 shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_and_exp                shift and go to state 49
    identifier_exp                 shift and go to state 50
    bitwise_or_exp                 shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_xor_exp                shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_and_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77

state 142

    (10) command -> variable_declaration . SEMICOLON
    (11) command -> variable_declaration . ASSIGN expression SEMICOLON

    SEMICOLON       shift and go to state 183
    ASSIGN          shift and go to state 184


state 143

    (13) command -> SEMICOLON .

    SEMICOLON       reduce using rule 13 (command -> SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 13 (command -> SEMICOLON .)
    KEYWORD_UNION   reduce using rule 13 (command -> SEMICOLON .)
    TYPE_CHAR       reduce using rule 13 (command -> SEMICOLON .)
    TYPE_INT        reduce using rule 13 (command -> SEMICOLON .)
    TYPE_SHORT      reduce using rule 13 (command -> SEMICOLON .)
    TYPE_LONG       reduce using rule 13 (command -> SEMICOLON .)
    TYPE_FLOAT      reduce using rule 13 (command -> SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 13 (command -> SEMICOLON .)
    TYPE_VOID       reduce using rule 13 (command -> SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 13 (command -> SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 13 (command -> SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 13 (command -> SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 13 (command -> SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 13 (command -> SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 13 (command -> SEMICOLON .)
    KEYWORD_AUTO    reduce using rule 13 (command -> SEMICOLON .)
    INCREMENT       reduce using rule 13 (command -> SEMICOLON .)
    DECREMENT       reduce using rule 13 (command -> SEMICOLON .)
    BITWISE_AND     reduce using rule 13 (command -> SEMICOLON .)
    TIMES           reduce using rule 13 (command -> SEMICOLON .)
    PLUS            reduce using rule 13 (command -> SEMICOLON .)
    MINUS           reduce using rule 13 (command -> SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 13 (command -> SEMICOLON .)
    NOT             reduce using rule 13 (command -> SEMICOLON .)
    LPAREN          reduce using rule 13 (command -> SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 13 (command -> SEMICOLON .)
    IDENTIFIER      reduce using rule 13 (command -> SEMICOLON .)
    STRING          reduce using rule 13 (command -> SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 13 (command -> SEMICOLON .)
    CHARACTER       reduce using rule 13 (command -> SEMICOLON .)
    NUMBER          reduce using rule 13 (command -> SEMICOLON .)
    BINARY_NUMBER   reduce using rule 13 (command -> SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 13 (command -> SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 13 (command -> SEMICOLON .)
    RBRACE          reduce using rule 13 (command -> SEMICOLON .)


state 144

    (12) command -> expression . SEMICOLON

    SEMICOLON       shift and go to state 185


state 145

    (34) variable_declaration -> type . IDENTIFIER
    (36) pointer -> type . multiple_times
    (56) multiple_times -> . TIMES multiple_times
    (57) multiple_times -> . TIMES

    IDENTIFIER      shift and go to state 186
    TIMES           shift and go to state 86

    multiple_times                 shift and go to state 85

state 146

    (35) variable_declaration -> pointer . IDENTIFIER

    IDENTIFIER      shift and go to state 187


state 147

    (3) program -> variable_declaration SEMICOLON program .

    $end            reduce using rule 3 (program -> variable_declaration SEMICOLON program .)


state 148

    (15) function_signature -> type IDENTIFIER LPAREN . signature_param_list RPAREN
    (17) function_signature -> type IDENTIFIER LPAREN . RPAREN
    (19) signature_param_list -> . signature_param COMMA signature_param
    (20) signature_param_list -> . signature_param
    (21) signature_param -> . type
    (22) signature_param -> . pointer
    (23) signature_param -> . type multiple_bracket_signature
    (24) signature_param -> . pointer multiple_bracket_signature
    (25) signature_param -> . variable_declaration
    (26) signature_param -> . variable_declaration multiple_bracket_signature
    (37) type -> . user_types
    (38) type -> . primitive_types
    (39) type -> . type_modifier type
    (36) pointer -> . type multiple_times
    (34) variable_declaration -> . type IDENTIFIER
    (35) variable_declaration -> . pointer IDENTIFIER
    (47) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (48) user_types -> . KEYWORD_UNION IDENTIFIER
    (49) primitive_types -> . TYPE_CHAR
    (50) primitive_types -> . TYPE_INT
    (51) primitive_types -> . TYPE_SHORT
    (52) primitive_types -> . TYPE_LONG
    (53) primitive_types -> . TYPE_FLOAT
    (54) primitive_types -> . TYPE_DOUBLE
    (55) primitive_types -> . TYPE_VOID
    (40) type_modifier -> . KEYWORD_STATIC
    (41) type_modifier -> . KEYWORD_UNSIGNED
    (42) type_modifier -> . KEYWORD_VOLATILE
    (43) type_modifier -> . KEYWORD_EXTERN
    (44) type_modifier -> . KEYWORD_SIGNED
    (45) type_modifier -> . KEYWORD_REGISTER
    (46) type_modifier -> . KEYWORD_AUTO

    RPAREN          shift and go to state 190
    KEYWORD_STRUCT  shift and go to state 16
    KEYWORD_UNION   shift and go to state 17
    TYPE_CHAR       shift and go to state 18
    TYPE_INT        shift and go to state 19
    TYPE_SHORT      shift and go to state 20
    TYPE_LONG       shift and go to state 21
    TYPE_FLOAT      shift and go to state 22
    TYPE_DOUBLE     shift and go to state 23
    TYPE_VOID       shift and go to state 24
    KEYWORD_STATIC  shift and go to state 25
    KEYWORD_UNSIGNED shift and go to state 26
    KEYWORD_VOLATILE shift and go to state 27
    KEYWORD_EXTERN  shift and go to state 28
    KEYWORD_SIGNED  shift and go to state 29
    KEYWORD_REGISTER shift and go to state 30
    KEYWORD_AUTO    shift and go to state 31

    type                           shift and go to state 188
    signature_param_list           shift and go to state 189
    signature_param                shift and go to state 191
    pointer                        shift and go to state 192
    variable_declaration           shift and go to state 193
    user_types                     shift and go to state 11
    primitive_types                shift and go to state 12
    type_modifier                  shift and go to state 13

state 149

    (56) multiple_times -> TIMES multiple_times .

    IDENTIFIER      reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    RPAREN          reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    ASSIGN          reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    TIMES_ASSIGN    reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    DIVIDE_ASSIGN   reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    MODULUS_ASSIGN  reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    PLUS_ASSIGN     reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    MINUS_ASSIGN    reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    SHIFT_LEFT_ASSIGN reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    SHIFT_RIGHT_ASSIGN reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    BITWISE_AND_ASSIGN reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    BITWISE_XOR_ASSIGN reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    BITWISE_OR_ASSIGN reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    MODULUS         reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    DIVIDE          reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    TIMES           reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    MINUS           reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    PLUS            reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    BITWISE_SHIFT_RIGHT reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    BITWISE_SHIFT_LEFT reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    LESS_EQUALS     reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    LESS_THEN       reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    GREATER_EQUALS  reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    GREATER_THEN    reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    NOT_EQUALS      reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    EQUALS_THEN     reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    BITWISE_AND     reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    BITWISE_XOR     reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    BITWISE_OR      reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    LOGICAL_AND     reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    LOGICAL_OR      reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    QUESTION_MARK   reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    KEYWORD_STRUCT  reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    KEYWORD_UNION   reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    TYPE_CHAR       reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    TYPE_INT        reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    TYPE_SHORT      reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    TYPE_LONG       reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    TYPE_FLOAT      reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    TYPE_DOUBLE     reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    TYPE_VOID       reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    KEYWORD_STATIC  reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    KEYWORD_UNSIGNED reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    KEYWORD_VOLATILE reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    KEYWORD_EXTERN  reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    KEYWORD_SIGNED  reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    KEYWORD_REGISTER reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    KEYWORD_AUTO    reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    INCREMENT       reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    DECREMENT       reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    BITWISE_COMPLEMENT reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    NOT             reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    LPAREN          reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    KEYWORD_SIZEOF  reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    STRING          reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    FLOAT_NUMBER    reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    CHARACTER       reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    NUMBER          reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    BINARY_NUMBER   reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    HEXADECIMAL_NUMBER reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    OCTAL_NUMBER    reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    $end            reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    SEMICOLON       reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    COLON           reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    RBRACKET        reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    COMMA           reduce using rule 56 (multiple_times -> TIMES multiple_times .)
    LBRACKET        reduce using rule 56 (multiple_times -> TIMES multiple_times .)


state 150

    (131) cast_exp -> LPAREN type RPAREN .

    INCREMENT       reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)
    DECREMENT       reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)
    BITWISE_AND     reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)
    TIMES           reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)
    PLUS            reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)
    MINUS           reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)
    BITWISE_COMPLEMENT reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)
    NOT             reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)
    LPAREN          reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)
    KEYWORD_SIZEOF  reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)
    IDENTIFIER      reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)
    STRING          reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)
    FLOAT_NUMBER    reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)
    CHARACTER       reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)
    NUMBER          reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)
    BINARY_NUMBER   reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)
    HEXADECIMAL_NUMBER reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)
    OCTAL_NUMBER    reduce using rule 131 (cast_exp -> LPAREN type RPAREN .)


state 151

    (132) cast_exp -> LPAREN pointer RPAREN .

    INCREMENT       reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)
    DECREMENT       reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)
    BITWISE_AND     reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)
    TIMES           reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)
    PLUS            reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)
    MINUS           reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)
    BITWISE_COMPLEMENT reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)
    NOT             reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)
    LPAREN          reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)
    KEYWORD_SIZEOF  reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)
    IDENTIFIER      reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)
    STRING          reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)
    FLOAT_NUMBER    reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)
    CHARACTER       reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)
    NUMBER          reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)
    BINARY_NUMBER   reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)
    HEXADECIMAL_NUMBER reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)
    OCTAL_NUMBER    reduce using rule 132 (cast_exp -> LPAREN pointer RPAREN .)


state 152

    (152) parentesis_exp -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    DOT             reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    TIMES_ASSIGN    reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    MODULUS_ASSIGN  reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    PLUS_ASSIGN     reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    MINUS_ASSIGN    reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    SHIFT_LEFT_ASSIGN reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    SHIFT_RIGHT_ASSIGN reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_AND_ASSIGN reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_XOR_ASSIGN reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_OR_ASSIGN reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    MODULUS         reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_SHIFT_RIGHT reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_SHIFT_LEFT reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    LESS_EQUALS     reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    LESS_THEN       reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    GREATER_EQUALS  reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    GREATER_THEN    reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    NOT_EQUALS      reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    EQUALS_THEN     reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_AND     reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_XOR     reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_OR      reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    LOGICAL_AND     reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    LOGICAL_OR      reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    QUESTION_MARK   reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_STRUCT  reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_UNION   reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    TYPE_CHAR       reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    TYPE_INT        reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    TYPE_SHORT      reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    TYPE_LONG       reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    TYPE_FLOAT      reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    TYPE_DOUBLE     reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    TYPE_VOID       reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_STATIC  reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_UNSIGNED reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_VOLATILE reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_EXTERN  reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_SIGNED  reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_REGISTER reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_AUTO    reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_COMPLEMENT reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    NOT             reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    KEYWORD_SIZEOF  reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    STRING          reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    FLOAT_NUMBER    reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    CHARACTER       reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    BINARY_NUMBER   reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    HEXADECIMAL_NUMBER reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    OCTAL_NUMBER    reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    $end            reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    COLON           reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 152 (parentesis_exp -> LPAREN expression RPAREN .)


state 153

    (16) function_signature -> pointer IDENTIFIER LPAREN . signature_param_list RPAREN
    (18) function_signature -> pointer IDENTIFIER LPAREN . RPAREN
    (19) signature_param_list -> . signature_param COMMA signature_param
    (20) signature_param_list -> . signature_param
    (21) signature_param -> . type
    (22) signature_param -> . pointer
    (23) signature_param -> . type multiple_bracket_signature
    (24) signature_param -> . pointer multiple_bracket_signature
    (25) signature_param -> . variable_declaration
    (26) signature_param -> . variable_declaration multiple_bracket_signature
    (37) type -> . user_types
    (38) type -> . primitive_types
    (39) type -> . type_modifier type
    (36) pointer -> . type multiple_times
    (34) variable_declaration -> . type IDENTIFIER
    (35) variable_declaration -> . pointer IDENTIFIER
    (47) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (48) user_types -> . KEYWORD_UNION IDENTIFIER
    (49) primitive_types -> . TYPE_CHAR
    (50) primitive_types -> . TYPE_INT
    (51) primitive_types -> . TYPE_SHORT
    (52) primitive_types -> . TYPE_LONG
    (53) primitive_types -> . TYPE_FLOAT
    (54) primitive_types -> . TYPE_DOUBLE
    (55) primitive_types -> . TYPE_VOID
    (40) type_modifier -> . KEYWORD_STATIC
    (41) type_modifier -> . KEYWORD_UNSIGNED
    (42) type_modifier -> . KEYWORD_VOLATILE
    (43) type_modifier -> . KEYWORD_EXTERN
    (44) type_modifier -> . KEYWORD_SIGNED
    (45) type_modifier -> . KEYWORD_REGISTER
    (46) type_modifier -> . KEYWORD_AUTO

    RPAREN          shift and go to state 195
    KEYWORD_STRUCT  shift and go to state 16
    KEYWORD_UNION   shift and go to state 17
    TYPE_CHAR       shift and go to state 18
    TYPE_INT        shift and go to state 19
    TYPE_SHORT      shift and go to state 20
    TYPE_LONG       shift and go to state 21
    TYPE_FLOAT      shift and go to state 22
    TYPE_DOUBLE     shift and go to state 23
    TYPE_VOID       shift and go to state 24
    KEYWORD_STATIC  shift and go to state 25
    KEYWORD_UNSIGNED shift and go to state 26
    KEYWORD_VOLATILE shift and go to state 27
    KEYWORD_EXTERN  shift and go to state 28
    KEYWORD_SIGNED  shift and go to state 29
    KEYWORD_REGISTER shift and go to state 30
    KEYWORD_AUTO    shift and go to state 31

    pointer                        shift and go to state 192
    signature_param_list           shift and go to state 194
    signature_param                shift and go to state 191
    type                           shift and go to state 188
    variable_declaration           shift and go to state 193
    user_types                     shift and go to state 11
    primitive_types                shift and go to state 12
    type_modifier                  shift and go to state 13

state 154

    (74) assign_exp -> unary_exp assign_operator assign_exp .

    KEYWORD_STRUCT  reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    KEYWORD_UNION   reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    TYPE_CHAR       reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    TYPE_INT        reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    TYPE_SHORT      reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    TYPE_LONG       reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    TYPE_FLOAT      reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    TYPE_DOUBLE     reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    TYPE_VOID       reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    KEYWORD_STATIC  reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    KEYWORD_UNSIGNED reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    KEYWORD_VOLATILE reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    KEYWORD_EXTERN  reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    KEYWORD_SIGNED  reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    KEYWORD_REGISTER reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    KEYWORD_AUTO    reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    INCREMENT       reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    DECREMENT       reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    BITWISE_AND     reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    TIMES           reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    PLUS            reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    MINUS           reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    BITWISE_COMPLEMENT reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    NOT             reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    LPAREN          reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    KEYWORD_SIZEOF  reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    IDENTIFIER      reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    STRING          reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    FLOAT_NUMBER    reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    CHARACTER       reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    NUMBER          reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    BINARY_NUMBER   reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    HEXADECIMAL_NUMBER reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    OCTAL_NUMBER    reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    $end            reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    RPAREN          reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    SEMICOLON       reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    COLON           reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    RBRACKET        reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)
    COMMA           reduce using rule 74 (assign_exp -> unary_exp assign_operator assign_exp .)


state 155

    (76) ternary_conditional_exp -> logical_exp QUESTION_MARK expression . COLON ternary_conditional_exp

    COLON           shift and go to state 196


state 156

    (133) postfix_exp -> postfix_exp LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 197


state 157

    (134) postfix_exp -> postfix_exp LPAREN RPAREN .

    LBRACKET        reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    LPAREN          reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    DOT             reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    ARROW           reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    INCREMENT       reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    DECREMENT       reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    ASSIGN          reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TIMES_ASSIGN    reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    MODULUS_ASSIGN  reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    PLUS_ASSIGN     reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    MINUS_ASSIGN    reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    SHIFT_LEFT_ASSIGN reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    SHIFT_RIGHT_ASSIGN reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_AND_ASSIGN reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_XOR_ASSIGN reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_OR_ASSIGN reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    MODULUS         reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    DIVIDE          reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TIMES           reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    MINUS           reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    PLUS            reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_SHIFT_RIGHT reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_SHIFT_LEFT reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    LESS_EQUALS     reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    LESS_THEN       reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    GREATER_EQUALS  reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    GREATER_THEN    reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    NOT_EQUALS      reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    EQUALS_THEN     reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_AND     reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_XOR     reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_OR      reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    LOGICAL_AND     reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    LOGICAL_OR      reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    QUESTION_MARK   reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_STRUCT  reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_UNION   reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TYPE_CHAR       reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TYPE_INT        reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TYPE_SHORT      reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TYPE_LONG       reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TYPE_FLOAT      reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TYPE_DOUBLE     reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TYPE_VOID       reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_STATIC  reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_UNSIGNED reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_VOLATILE reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_EXTERN  reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_SIGNED  reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_REGISTER reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_AUTO    reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_COMPLEMENT reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    NOT             reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    KEYWORD_SIZEOF  reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    STRING          reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    FLOAT_NUMBER    reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    CHARACTER       reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    NUMBER          reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BINARY_NUMBER   reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    HEXADECIMAL_NUMBER reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    OCTAL_NUMBER    reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    $end            reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    RPAREN          reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    SEMICOLON       reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    COLON           reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    RBRACKET        reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    COMMA           reduce using rule 134 (postfix_exp -> postfix_exp LPAREN RPAREN .)


state 158

    (135) postfix_exp -> postfix_exp LPAREN function_call_parameters . RPAREN

    RPAREN          shift and go to state 198


state 159

    (141) function_call_parameters -> expression .
    (142) function_call_parameters -> expression . COMMA function_call_parameters

    RPAREN          reduce using rule 141 (function_call_parameters -> expression .)
    COMMA           shift and go to state 199


state 160

    (136) postfix_exp -> postfix_exp DOT IDENTIFIER .

    LBRACKET        reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    LPAREN          reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    DOT             reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    ARROW           reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    INCREMENT       reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    DECREMENT       reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    ASSIGN          reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    MODULUS_ASSIGN  reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    SHIFT_LEFT_ASSIGN reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_AND_ASSIGN reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_XOR_ASSIGN reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_OR_ASSIGN reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    MODULUS         reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    DIVIDE          reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TIMES           reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    MINUS           reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    PLUS            reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_SHIFT_RIGHT reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_SHIFT_LEFT reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    LESS_EQUALS     reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    LESS_THEN       reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    GREATER_THEN    reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    NOT_EQUALS      reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    EQUALS_THEN     reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_AND     reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_XOR     reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_OR      reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    LOGICAL_AND     reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    LOGICAL_OR      reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    QUESTION_MARK   reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_STRUCT  reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_UNION   reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TYPE_CHAR       reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TYPE_INT        reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TYPE_SHORT      reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TYPE_LONG       reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TYPE_FLOAT      reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TYPE_DOUBLE     reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TYPE_VOID       reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_STATIC  reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_UNSIGNED reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_VOLATILE reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_EXTERN  reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_SIGNED  reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_REGISTER reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_AUTO    reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_COMPLEMENT reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    NOT             reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    KEYWORD_SIZEOF  reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    STRING          reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    FLOAT_NUMBER    reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    CHARACTER       reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    NUMBER          reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BINARY_NUMBER   reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    HEXADECIMAL_NUMBER reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    OCTAL_NUMBER    reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    $end            reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    RPAREN          reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    COLON           reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    RBRACKET        reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    COMMA           reduce using rule 136 (postfix_exp -> postfix_exp DOT IDENTIFIER .)


state 161

    (137) postfix_exp -> postfix_exp ARROW IDENTIFIER .

    LBRACKET        reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    LPAREN          reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    DOT             reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    ARROW           reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    INCREMENT       reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    DECREMENT       reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    ASSIGN          reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    MODULUS_ASSIGN  reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    SHIFT_LEFT_ASSIGN reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_AND_ASSIGN reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_XOR_ASSIGN reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_OR_ASSIGN reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    MODULUS         reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    DIVIDE          reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TIMES           reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    MINUS           reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    PLUS            reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_SHIFT_RIGHT reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_SHIFT_LEFT reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    LESS_EQUALS     reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    LESS_THEN       reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    GREATER_THEN    reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    NOT_EQUALS      reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    EQUALS_THEN     reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_AND     reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_XOR     reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_OR      reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    LOGICAL_AND     reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    LOGICAL_OR      reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    QUESTION_MARK   reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_STRUCT  reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_UNION   reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TYPE_CHAR       reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TYPE_INT        reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TYPE_SHORT      reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TYPE_LONG       reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TYPE_FLOAT      reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TYPE_DOUBLE     reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TYPE_VOID       reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_STATIC  reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_UNSIGNED reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_VOLATILE reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_EXTERN  reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_SIGNED  reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_REGISTER reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_AUTO    reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_COMPLEMENT reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    NOT             reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    KEYWORD_SIZEOF  reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    IDENTIFIER      reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    STRING          reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    FLOAT_NUMBER    reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    CHARACTER       reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    NUMBER          reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BINARY_NUMBER   reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    HEXADECIMAL_NUMBER reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    OCTAL_NUMBER    reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    $end            reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    RPAREN          reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    SEMICOLON       reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    COLON           reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    RBRACKET        reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    COMMA           reduce using rule 137 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)


state 162

    (79) logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .
    (81) logical_and_exp -> logical_and_exp . LOGICAL_AND bitwise_or_exp

    LOGICAL_OR      reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    QUESTION_MARK   reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_STRUCT  reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_UNION   reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    TYPE_CHAR       reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    TYPE_INT        reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    TYPE_SHORT      reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    TYPE_LONG       reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    TYPE_FLOAT      reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    TYPE_DOUBLE     reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    TYPE_VOID       reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_STATIC  reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_UNSIGNED reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_VOLATILE reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_EXTERN  reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_SIGNED  reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_REGISTER reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_AUTO    reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    INCREMENT       reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    DECREMENT       reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    BITWISE_AND     reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    TIMES           reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    PLUS            reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    MINUS           reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    BITWISE_COMPLEMENT reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    NOT             reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    LPAREN          reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    KEYWORD_SIZEOF  reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    IDENTIFIER      reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    STRING          reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    FLOAT_NUMBER    reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    CHARACTER       reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    NUMBER          reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    BINARY_NUMBER   reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    HEXADECIMAL_NUMBER reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    OCTAL_NUMBER    reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    $end            reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    RPAREN          reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    SEMICOLON       reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    COLON           reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    RBRACKET        reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    COMMA           reduce using rule 79 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    LOGICAL_AND     shift and go to state 121


state 163

    (114) modulus_exp -> unary_exp .

    MODULUS         reduce using rule 114 (modulus_exp -> unary_exp .)
    DIVIDE          reduce using rule 114 (modulus_exp -> unary_exp .)
    TIMES           reduce using rule 114 (modulus_exp -> unary_exp .)
    MINUS           reduce using rule 114 (modulus_exp -> unary_exp .)
    PLUS            reduce using rule 114 (modulus_exp -> unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 114 (modulus_exp -> unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 114 (modulus_exp -> unary_exp .)
    LESS_EQUALS     reduce using rule 114 (modulus_exp -> unary_exp .)
    LESS_THEN       reduce using rule 114 (modulus_exp -> unary_exp .)
    GREATER_EQUALS  reduce using rule 114 (modulus_exp -> unary_exp .)
    GREATER_THEN    reduce using rule 114 (modulus_exp -> unary_exp .)
    NOT_EQUALS      reduce using rule 114 (modulus_exp -> unary_exp .)
    EQUALS_THEN     reduce using rule 114 (modulus_exp -> unary_exp .)
    BITWISE_AND     reduce using rule 114 (modulus_exp -> unary_exp .)
    BITWISE_XOR     reduce using rule 114 (modulus_exp -> unary_exp .)
    BITWISE_OR      reduce using rule 114 (modulus_exp -> unary_exp .)
    LOGICAL_AND     reduce using rule 114 (modulus_exp -> unary_exp .)
    LOGICAL_OR      reduce using rule 114 (modulus_exp -> unary_exp .)
    QUESTION_MARK   reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_STRUCT  reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_UNION   reduce using rule 114 (modulus_exp -> unary_exp .)
    TYPE_CHAR       reduce using rule 114 (modulus_exp -> unary_exp .)
    TYPE_INT        reduce using rule 114 (modulus_exp -> unary_exp .)
    TYPE_SHORT      reduce using rule 114 (modulus_exp -> unary_exp .)
    TYPE_LONG       reduce using rule 114 (modulus_exp -> unary_exp .)
    TYPE_FLOAT      reduce using rule 114 (modulus_exp -> unary_exp .)
    TYPE_DOUBLE     reduce using rule 114 (modulus_exp -> unary_exp .)
    TYPE_VOID       reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_STATIC  reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_UNSIGNED reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_VOLATILE reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_EXTERN  reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_SIGNED  reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_REGISTER reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_AUTO    reduce using rule 114 (modulus_exp -> unary_exp .)
    INCREMENT       reduce using rule 114 (modulus_exp -> unary_exp .)
    DECREMENT       reduce using rule 114 (modulus_exp -> unary_exp .)
    BITWISE_COMPLEMENT reduce using rule 114 (modulus_exp -> unary_exp .)
    NOT             reduce using rule 114 (modulus_exp -> unary_exp .)
    LPAREN          reduce using rule 114 (modulus_exp -> unary_exp .)
    KEYWORD_SIZEOF  reduce using rule 114 (modulus_exp -> unary_exp .)
    IDENTIFIER      reduce using rule 114 (modulus_exp -> unary_exp .)
    STRING          reduce using rule 114 (modulus_exp -> unary_exp .)
    FLOAT_NUMBER    reduce using rule 114 (modulus_exp -> unary_exp .)
    CHARACTER       reduce using rule 114 (modulus_exp -> unary_exp .)
    NUMBER          reduce using rule 114 (modulus_exp -> unary_exp .)
    BINARY_NUMBER   reduce using rule 114 (modulus_exp -> unary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 114 (modulus_exp -> unary_exp .)
    OCTAL_NUMBER    reduce using rule 114 (modulus_exp -> unary_exp .)
    $end            reduce using rule 114 (modulus_exp -> unary_exp .)
    RPAREN          reduce using rule 114 (modulus_exp -> unary_exp .)
    SEMICOLON       reduce using rule 114 (modulus_exp -> unary_exp .)
    COLON           reduce using rule 114 (modulus_exp -> unary_exp .)
    RBRACKET        reduce using rule 114 (modulus_exp -> unary_exp .)
    COMMA           reduce using rule 114 (modulus_exp -> unary_exp .)


state 164

    (81) logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .
    (83) bitwise_or_exp -> bitwise_or_exp . BITWISE_OR bitwise_xor_exp

    LOGICAL_AND     reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    LOGICAL_OR      reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    QUESTION_MARK   reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_STRUCT  reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_UNION   reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    TYPE_CHAR       reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    TYPE_INT        reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    TYPE_SHORT      reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    TYPE_LONG       reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    TYPE_FLOAT      reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    TYPE_DOUBLE     reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    TYPE_VOID       reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_STATIC  reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_UNSIGNED reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_VOLATILE reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_EXTERN  reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_SIGNED  reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_REGISTER reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_AUTO    reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    INCREMENT       reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    DECREMENT       reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    BITWISE_AND     reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    TIMES           reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    PLUS            reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    MINUS           reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    BITWISE_COMPLEMENT reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    NOT             reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    LPAREN          reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    KEYWORD_SIZEOF  reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    IDENTIFIER      reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    STRING          reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    FLOAT_NUMBER    reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    CHARACTER       reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    NUMBER          reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    BINARY_NUMBER   reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    HEXADECIMAL_NUMBER reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    OCTAL_NUMBER    reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    $end            reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    RPAREN          reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    SEMICOLON       reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    COLON           reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    RBRACKET        reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    COMMA           reduce using rule 81 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    BITWISE_OR      shift and go to state 122


state 165

    (83) bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .
    (85) bitwise_xor_exp -> bitwise_xor_exp . BITWISE_XOR bitwise_and_exp

    BITWISE_OR      reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    LOGICAL_AND     reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    LOGICAL_OR      reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    QUESTION_MARK   reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_STRUCT  reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_UNION   reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    TYPE_CHAR       reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    TYPE_INT        reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    TYPE_SHORT      reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    TYPE_LONG       reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    TYPE_FLOAT      reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    TYPE_DOUBLE     reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    TYPE_VOID       reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_STATIC  reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_UNSIGNED reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_VOLATILE reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_EXTERN  reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_SIGNED  reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_REGISTER reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_AUTO    reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    INCREMENT       reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    DECREMENT       reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    BITWISE_AND     reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    TIMES           reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    PLUS            reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    MINUS           reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    BITWISE_COMPLEMENT reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    NOT             reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    LPAREN          reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    KEYWORD_SIZEOF  reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    IDENTIFIER      reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    STRING          reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    FLOAT_NUMBER    reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    CHARACTER       reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    NUMBER          reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    BINARY_NUMBER   reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    HEXADECIMAL_NUMBER reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    OCTAL_NUMBER    reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    $end            reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    RPAREN          reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    SEMICOLON       reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    COLON           reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    RBRACKET        reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    COMMA           reduce using rule 83 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    BITWISE_XOR     shift and go to state 123


state 166

    (85) bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .
    (87) bitwise_and_exp -> bitwise_and_exp . BITWISE_AND is_equals_exp

  ! shift/reduce conflict for BITWISE_AND resolved as shift
    BITWISE_XOR     reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    BITWISE_OR      reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    LOGICAL_AND     reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    LOGICAL_OR      reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    QUESTION_MARK   reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_STRUCT  reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_UNION   reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    TYPE_CHAR       reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    TYPE_INT        reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    TYPE_SHORT      reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    TYPE_LONG       reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    TYPE_FLOAT      reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    TYPE_DOUBLE     reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    TYPE_VOID       reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_STATIC  reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_UNSIGNED reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_VOLATILE reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_EXTERN  reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_SIGNED  reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_REGISTER reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_AUTO    reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    INCREMENT       reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    DECREMENT       reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    TIMES           reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    PLUS            reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    MINUS           reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    BITWISE_COMPLEMENT reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    NOT             reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    LPAREN          reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    KEYWORD_SIZEOF  reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    IDENTIFIER      reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    STRING          reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    FLOAT_NUMBER    reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    CHARACTER       reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    NUMBER          reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    BINARY_NUMBER   reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    HEXADECIMAL_NUMBER reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    OCTAL_NUMBER    reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    $end            reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    RPAREN          reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    SEMICOLON       reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    COLON           reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    RBRACKET        reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    COMMA           reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    BITWISE_AND     shift and go to state 124

  ! BITWISE_AND     [ reduce using rule 85 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .) ]


state 167

    (87) bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .
    (89) is_equals_exp -> is_equals_exp . EQUALS_THEN is_not_equals_exp

    BITWISE_AND     reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    BITWISE_XOR     reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    BITWISE_OR      reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    LOGICAL_AND     reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    LOGICAL_OR      reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    QUESTION_MARK   reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_STRUCT  reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_UNION   reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    TYPE_CHAR       reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    TYPE_INT        reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    TYPE_SHORT      reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    TYPE_LONG       reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    TYPE_FLOAT      reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    TYPE_DOUBLE     reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    TYPE_VOID       reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_STATIC  reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_UNSIGNED reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_VOLATILE reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_EXTERN  reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_SIGNED  reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_REGISTER reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_AUTO    reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    INCREMENT       reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    DECREMENT       reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    TIMES           reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    PLUS            reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    MINUS           reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    BITWISE_COMPLEMENT reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    NOT             reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    LPAREN          reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    KEYWORD_SIZEOF  reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    IDENTIFIER      reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    STRING          reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    FLOAT_NUMBER    reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    CHARACTER       reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    NUMBER          reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    BINARY_NUMBER   reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    HEXADECIMAL_NUMBER reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    OCTAL_NUMBER    reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    $end            reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    RPAREN          reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    SEMICOLON       reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    COLON           reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    RBRACKET        reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    COMMA           reduce using rule 87 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    EQUALS_THEN     shift and go to state 125


state 168

    (89) is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .
    (91) is_not_equals_exp -> is_not_equals_exp . NOT_EQUALS greater_then_exp

    EQUALS_THEN     reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    BITWISE_AND     reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    BITWISE_XOR     reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    BITWISE_OR      reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    LOGICAL_AND     reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    LOGICAL_OR      reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    QUESTION_MARK   reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_STRUCT  reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_UNION   reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    TYPE_CHAR       reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    TYPE_INT        reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    TYPE_SHORT      reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    TYPE_LONG       reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    TYPE_FLOAT      reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    TYPE_DOUBLE     reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    TYPE_VOID       reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_STATIC  reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_UNSIGNED reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_VOLATILE reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_EXTERN  reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_SIGNED  reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_REGISTER reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_AUTO    reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    INCREMENT       reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    DECREMENT       reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    TIMES           reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    PLUS            reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    MINUS           reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    BITWISE_COMPLEMENT reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    NOT             reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    LPAREN          reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    KEYWORD_SIZEOF  reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    IDENTIFIER      reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    STRING          reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    FLOAT_NUMBER    reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    CHARACTER       reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    NUMBER          reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    BINARY_NUMBER   reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    HEXADECIMAL_NUMBER reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    OCTAL_NUMBER    reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    $end            reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    RPAREN          reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    SEMICOLON       reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    COLON           reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    RBRACKET        reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    COMMA           reduce using rule 89 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    NOT_EQUALS      shift and go to state 126


state 169

    (91) is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .
    (93) greater_then_exp -> greater_then_exp . GREATER_THEN greater_equals_exp

    NOT_EQUALS      reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    EQUALS_THEN     reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    BITWISE_AND     reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    BITWISE_XOR     reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    BITWISE_OR      reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    LOGICAL_AND     reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    LOGICAL_OR      reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    QUESTION_MARK   reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_STRUCT  reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_UNION   reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    TYPE_CHAR       reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    TYPE_INT        reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    TYPE_SHORT      reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    TYPE_LONG       reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    TYPE_FLOAT      reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    TYPE_DOUBLE     reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    TYPE_VOID       reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_STATIC  reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_UNSIGNED reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_VOLATILE reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_EXTERN  reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_SIGNED  reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_REGISTER reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_AUTO    reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    INCREMENT       reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    DECREMENT       reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    TIMES           reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    PLUS            reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    MINUS           reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    BITWISE_COMPLEMENT reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    NOT             reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    LPAREN          reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    KEYWORD_SIZEOF  reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    IDENTIFIER      reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    STRING          reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    FLOAT_NUMBER    reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    CHARACTER       reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    NUMBER          reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    BINARY_NUMBER   reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    HEXADECIMAL_NUMBER reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    OCTAL_NUMBER    reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    $end            reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    RPAREN          reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    SEMICOLON       reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    COLON           reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    RBRACKET        reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    COMMA           reduce using rule 91 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    GREATER_THEN    shift and go to state 127


state 170

    (93) greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .
    (95) greater_equals_exp -> greater_equals_exp . GREATER_EQUALS less_then_exp

    GREATER_THEN    reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    NOT_EQUALS      reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    EQUALS_THEN     reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    BITWISE_AND     reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    BITWISE_XOR     reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    BITWISE_OR      reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    LOGICAL_AND     reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    LOGICAL_OR      reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    QUESTION_MARK   reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_STRUCT  reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_UNION   reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    TYPE_CHAR       reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    TYPE_INT        reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    TYPE_SHORT      reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    TYPE_LONG       reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    TYPE_FLOAT      reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    TYPE_DOUBLE     reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    TYPE_VOID       reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_STATIC  reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_UNSIGNED reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_VOLATILE reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_EXTERN  reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_SIGNED  reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_REGISTER reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_AUTO    reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    INCREMENT       reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    DECREMENT       reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    TIMES           reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    PLUS            reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    MINUS           reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    BITWISE_COMPLEMENT reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    NOT             reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    LPAREN          reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    KEYWORD_SIZEOF  reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    IDENTIFIER      reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    STRING          reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    FLOAT_NUMBER    reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    CHARACTER       reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    NUMBER          reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    BINARY_NUMBER   reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    HEXADECIMAL_NUMBER reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    OCTAL_NUMBER    reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    $end            reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    RPAREN          reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    SEMICOLON       reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    COLON           reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    RBRACKET        reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    COMMA           reduce using rule 93 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    GREATER_EQUALS  shift and go to state 128


state 171

    (95) greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .
    (97) less_then_exp -> less_then_exp . LESS_THEN less_equals_exp

    GREATER_EQUALS  reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    GREATER_THEN    reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    NOT_EQUALS      reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    EQUALS_THEN     reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    BITWISE_AND     reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    BITWISE_XOR     reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    BITWISE_OR      reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    LOGICAL_AND     reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    LOGICAL_OR      reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    QUESTION_MARK   reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_STRUCT  reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_UNION   reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    TYPE_CHAR       reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    TYPE_INT        reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    TYPE_SHORT      reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    TYPE_LONG       reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    TYPE_FLOAT      reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    TYPE_DOUBLE     reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    TYPE_VOID       reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_STATIC  reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_UNSIGNED reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_VOLATILE reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_EXTERN  reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_SIGNED  reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_REGISTER reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_AUTO    reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    INCREMENT       reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    DECREMENT       reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    TIMES           reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    PLUS            reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    MINUS           reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    BITWISE_COMPLEMENT reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    NOT             reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    LPAREN          reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    KEYWORD_SIZEOF  reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    IDENTIFIER      reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    STRING          reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    FLOAT_NUMBER    reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    CHARACTER       reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    NUMBER          reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    BINARY_NUMBER   reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    HEXADECIMAL_NUMBER reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    OCTAL_NUMBER    reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    $end            reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    RPAREN          reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    SEMICOLON       reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    COLON           reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    RBRACKET        reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    COMMA           reduce using rule 95 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    LESS_THEN       shift and go to state 129


state 172

    (97) less_then_exp -> less_then_exp LESS_THEN less_equals_exp .
    (99) less_equals_exp -> less_equals_exp . LESS_EQUALS left_shift_exp

    LESS_THEN       reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    GREATER_EQUALS  reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    GREATER_THEN    reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    NOT_EQUALS      reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    EQUALS_THEN     reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    BITWISE_AND     reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    BITWISE_XOR     reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    BITWISE_OR      reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    LOGICAL_AND     reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    LOGICAL_OR      reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    QUESTION_MARK   reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_STRUCT  reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_UNION   reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    TYPE_CHAR       reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    TYPE_INT        reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    TYPE_SHORT      reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    TYPE_LONG       reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    TYPE_FLOAT      reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    TYPE_DOUBLE     reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    TYPE_VOID       reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_STATIC  reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_UNSIGNED reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_VOLATILE reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_EXTERN  reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_SIGNED  reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_REGISTER reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_AUTO    reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    INCREMENT       reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    DECREMENT       reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    TIMES           reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    PLUS            reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    MINUS           reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    BITWISE_COMPLEMENT reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    NOT             reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    LPAREN          reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    KEYWORD_SIZEOF  reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    IDENTIFIER      reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    STRING          reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    FLOAT_NUMBER    reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    CHARACTER       reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    NUMBER          reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    BINARY_NUMBER   reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    HEXADECIMAL_NUMBER reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    OCTAL_NUMBER    reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    $end            reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    RPAREN          reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    SEMICOLON       reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    COLON           reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    RBRACKET        reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    COMMA           reduce using rule 97 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    LESS_EQUALS     shift and go to state 130


state 173

    (99) less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .
    (101) left_shift_exp -> left_shift_exp . BITWISE_SHIFT_LEFT right_shift_exp

    LESS_EQUALS     reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    LESS_THEN       reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    GREATER_EQUALS  reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    GREATER_THEN    reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    NOT_EQUALS      reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    EQUALS_THEN     reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    BITWISE_AND     reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    BITWISE_XOR     reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    BITWISE_OR      reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    LOGICAL_AND     reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    LOGICAL_OR      reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    QUESTION_MARK   reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_STRUCT  reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_UNION   reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    TYPE_CHAR       reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    TYPE_INT        reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    TYPE_SHORT      reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    TYPE_LONG       reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    TYPE_FLOAT      reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    TYPE_DOUBLE     reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    TYPE_VOID       reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_STATIC  reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_UNSIGNED reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_VOLATILE reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_EXTERN  reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_SIGNED  reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_REGISTER reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_AUTO    reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    INCREMENT       reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    DECREMENT       reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    TIMES           reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    PLUS            reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    MINUS           reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    BITWISE_COMPLEMENT reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    NOT             reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    LPAREN          reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    KEYWORD_SIZEOF  reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    IDENTIFIER      reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    STRING          reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    FLOAT_NUMBER    reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    CHARACTER       reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    NUMBER          reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    BINARY_NUMBER   reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    HEXADECIMAL_NUMBER reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    OCTAL_NUMBER    reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    $end            reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    RPAREN          reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    SEMICOLON       reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    COLON           reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    RBRACKET        reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    COMMA           reduce using rule 99 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    BITWISE_SHIFT_LEFT shift and go to state 131


state 174

    (101) left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .
    (103) right_shift_exp -> right_shift_exp . BITWISE_SHIFT_RIGHT plus_exp

    BITWISE_SHIFT_LEFT reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    LESS_EQUALS     reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    LESS_THEN       reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    GREATER_EQUALS  reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    GREATER_THEN    reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    NOT_EQUALS      reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    EQUALS_THEN     reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    BITWISE_AND     reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    BITWISE_XOR     reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    BITWISE_OR      reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    LOGICAL_AND     reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    LOGICAL_OR      reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    QUESTION_MARK   reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_STRUCT  reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_UNION   reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    TYPE_CHAR       reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    TYPE_INT        reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    TYPE_SHORT      reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    TYPE_LONG       reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    TYPE_FLOAT      reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    TYPE_DOUBLE     reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    TYPE_VOID       reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_STATIC  reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_UNSIGNED reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_VOLATILE reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_EXTERN  reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_SIGNED  reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_REGISTER reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_AUTO    reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    INCREMENT       reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    DECREMENT       reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    TIMES           reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    PLUS            reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    MINUS           reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    BITWISE_COMPLEMENT reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    NOT             reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    LPAREN          reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    KEYWORD_SIZEOF  reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    IDENTIFIER      reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    STRING          reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    FLOAT_NUMBER    reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    CHARACTER       reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    NUMBER          reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    BINARY_NUMBER   reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    HEXADECIMAL_NUMBER reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    OCTAL_NUMBER    reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    $end            reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    RPAREN          reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    SEMICOLON       reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    COLON           reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    RBRACKET        reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    COMMA           reduce using rule 101 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    BITWISE_SHIFT_RIGHT shift and go to state 132


state 175

    (103) right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .
    (105) plus_exp -> plus_exp . PLUS minus_exp

  ! shift/reduce conflict for PLUS resolved as shift
    BITWISE_SHIFT_RIGHT reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    LESS_EQUALS     reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    LESS_THEN       reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    GREATER_EQUALS  reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    GREATER_THEN    reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    NOT_EQUALS      reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    EQUALS_THEN     reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    BITWISE_AND     reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    BITWISE_XOR     reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    BITWISE_OR      reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    LOGICAL_AND     reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    LOGICAL_OR      reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    QUESTION_MARK   reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_STRUCT  reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_UNION   reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    TYPE_CHAR       reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    TYPE_INT        reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    TYPE_SHORT      reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    TYPE_LONG       reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    TYPE_FLOAT      reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    TYPE_DOUBLE     reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    TYPE_VOID       reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_STATIC  reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_UNSIGNED reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_VOLATILE reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_EXTERN  reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_SIGNED  reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_REGISTER reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_AUTO    reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    INCREMENT       reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    DECREMENT       reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    TIMES           reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    MINUS           reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    BITWISE_COMPLEMENT reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    NOT             reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    LPAREN          reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    KEYWORD_SIZEOF  reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    IDENTIFIER      reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    STRING          reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    FLOAT_NUMBER    reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    CHARACTER       reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    NUMBER          reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    BINARY_NUMBER   reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    HEXADECIMAL_NUMBER reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    OCTAL_NUMBER    reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    $end            reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    RPAREN          reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    SEMICOLON       reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    COLON           reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    RBRACKET        reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    COMMA           reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    PLUS            shift and go to state 133

  ! PLUS            [ reduce using rule 103 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .) ]


state 176

    (105) plus_exp -> plus_exp PLUS minus_exp .
    (107) minus_exp -> minus_exp . MINUS times_exp

  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    LESS_EQUALS     reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    LESS_THEN       reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    GREATER_EQUALS  reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    GREATER_THEN    reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    NOT_EQUALS      reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    EQUALS_THEN     reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    BITWISE_AND     reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    BITWISE_XOR     reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    BITWISE_OR      reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    LOGICAL_AND     reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    LOGICAL_OR      reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    QUESTION_MARK   reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_STRUCT  reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_UNION   reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    TYPE_CHAR       reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    TYPE_INT        reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    TYPE_SHORT      reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    TYPE_LONG       reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    TYPE_FLOAT      reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    TYPE_DOUBLE     reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    TYPE_VOID       reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_STATIC  reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_UNSIGNED reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_VOLATILE reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_EXTERN  reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_SIGNED  reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_REGISTER reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_AUTO    reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    INCREMENT       reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    DECREMENT       reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    TIMES           reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    BITWISE_COMPLEMENT reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    NOT             reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    LPAREN          reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    KEYWORD_SIZEOF  reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    IDENTIFIER      reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    STRING          reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    FLOAT_NUMBER    reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    CHARACTER       reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    NUMBER          reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    BINARY_NUMBER   reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    HEXADECIMAL_NUMBER reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    OCTAL_NUMBER    reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    $end            reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    RPAREN          reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    SEMICOLON       reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    COLON           reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    RBRACKET        reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    COMMA           reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .)
    MINUS           shift and go to state 134

  ! MINUS           [ reduce using rule 105 (plus_exp -> plus_exp PLUS minus_exp .) ]


state 177

    (107) minus_exp -> minus_exp MINUS times_exp .
    (109) times_exp -> times_exp . TIMES divide_exp

  ! shift/reduce conflict for TIMES resolved as shift
    MINUS           reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    PLUS            reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    LESS_EQUALS     reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    LESS_THEN       reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    GREATER_EQUALS  reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    GREATER_THEN    reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    NOT_EQUALS      reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    EQUALS_THEN     reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    BITWISE_AND     reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    BITWISE_XOR     reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    BITWISE_OR      reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    LOGICAL_AND     reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    LOGICAL_OR      reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    QUESTION_MARK   reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_STRUCT  reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_UNION   reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    TYPE_CHAR       reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    TYPE_INT        reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    TYPE_SHORT      reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    TYPE_LONG       reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    TYPE_FLOAT      reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    TYPE_DOUBLE     reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    TYPE_VOID       reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_STATIC  reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_UNSIGNED reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_VOLATILE reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_EXTERN  reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_SIGNED  reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_REGISTER reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_AUTO    reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    INCREMENT       reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    DECREMENT       reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    BITWISE_COMPLEMENT reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    NOT             reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    LPAREN          reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    KEYWORD_SIZEOF  reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    IDENTIFIER      reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    STRING          reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    FLOAT_NUMBER    reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    CHARACTER       reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    NUMBER          reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    BINARY_NUMBER   reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    HEXADECIMAL_NUMBER reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    OCTAL_NUMBER    reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    $end            reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    RPAREN          reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    SEMICOLON       reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    COLON           reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    RBRACKET        reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    COMMA           reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .)
    TIMES           shift and go to state 135

  ! TIMES           [ reduce using rule 107 (minus_exp -> minus_exp MINUS times_exp .) ]


state 178

    (109) times_exp -> times_exp TIMES divide_exp .
    (111) divide_exp -> divide_exp . DIVIDE modulus_exp

    TIMES           reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    MINUS           reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    PLUS            reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    LESS_EQUALS     reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    LESS_THEN       reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    GREATER_EQUALS  reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    GREATER_THEN    reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    NOT_EQUALS      reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    EQUALS_THEN     reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    BITWISE_AND     reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    BITWISE_XOR     reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    BITWISE_OR      reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    LOGICAL_AND     reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    LOGICAL_OR      reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    QUESTION_MARK   reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_STRUCT  reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_UNION   reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    TYPE_CHAR       reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    TYPE_INT        reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    TYPE_SHORT      reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    TYPE_LONG       reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    TYPE_FLOAT      reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    TYPE_DOUBLE     reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    TYPE_VOID       reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_STATIC  reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_UNSIGNED reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_VOLATILE reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_EXTERN  reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_SIGNED  reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_REGISTER reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_AUTO    reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    INCREMENT       reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    DECREMENT       reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    BITWISE_COMPLEMENT reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    NOT             reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    LPAREN          reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    KEYWORD_SIZEOF  reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    IDENTIFIER      reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    STRING          reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    FLOAT_NUMBER    reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    CHARACTER       reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    NUMBER          reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    BINARY_NUMBER   reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    HEXADECIMAL_NUMBER reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    OCTAL_NUMBER    reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    $end            reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    RPAREN          reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    SEMICOLON       reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    COLON           reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    RBRACKET        reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    COMMA           reduce using rule 109 (times_exp -> times_exp TIMES divide_exp .)
    DIVIDE          shift and go to state 136


state 179

    (111) divide_exp -> divide_exp DIVIDE modulus_exp .
    (113) modulus_exp -> modulus_exp . MODULUS unary_exp

    DIVIDE          reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    TIMES           reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    MINUS           reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    PLUS            reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    LESS_EQUALS     reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    LESS_THEN       reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    GREATER_EQUALS  reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    GREATER_THEN    reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    NOT_EQUALS      reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    EQUALS_THEN     reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BITWISE_AND     reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BITWISE_XOR     reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BITWISE_OR      reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    LOGICAL_AND     reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    LOGICAL_OR      reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    QUESTION_MARK   reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_STRUCT  reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_UNION   reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    TYPE_CHAR       reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    TYPE_INT        reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    TYPE_SHORT      reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    TYPE_LONG       reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    TYPE_FLOAT      reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    TYPE_DOUBLE     reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    TYPE_VOID       reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_STATIC  reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_UNSIGNED reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_VOLATILE reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_EXTERN  reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_SIGNED  reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_REGISTER reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_AUTO    reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    INCREMENT       reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    DECREMENT       reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BITWISE_COMPLEMENT reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    NOT             reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    LPAREN          reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    KEYWORD_SIZEOF  reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    IDENTIFIER      reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    STRING          reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    FLOAT_NUMBER    reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    CHARACTER       reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    NUMBER          reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BINARY_NUMBER   reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    HEXADECIMAL_NUMBER reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    OCTAL_NUMBER    reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    $end            reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    RPAREN          reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    SEMICOLON       reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    COLON           reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    RBRACKET        reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    COMMA           reduce using rule 111 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    MODULUS         shift and go to state 137


state 180

    (113) modulus_exp -> modulus_exp MODULUS unary_exp .

    MODULUS         reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    DIVIDE          reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    TIMES           reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    MINUS           reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    PLUS            reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    LESS_EQUALS     reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    LESS_THEN       reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    GREATER_EQUALS  reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    GREATER_THEN    reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    NOT_EQUALS      reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    EQUALS_THEN     reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BITWISE_AND     reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BITWISE_XOR     reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BITWISE_OR      reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    LOGICAL_AND     reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    LOGICAL_OR      reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    QUESTION_MARK   reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_STRUCT  reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_UNION   reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    TYPE_CHAR       reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    TYPE_INT        reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    TYPE_SHORT      reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    TYPE_LONG       reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    TYPE_FLOAT      reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    TYPE_DOUBLE     reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    TYPE_VOID       reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_STATIC  reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_UNSIGNED reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_VOLATILE reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_EXTERN  reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_SIGNED  reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_REGISTER reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_AUTO    reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    INCREMENT       reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    DECREMENT       reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BITWISE_COMPLEMENT reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    NOT             reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    LPAREN          reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    KEYWORD_SIZEOF  reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    IDENTIFIER      reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    STRING          reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    FLOAT_NUMBER    reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    CHARACTER       reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    NUMBER          reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BINARY_NUMBER   reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    HEXADECIMAL_NUMBER reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    OCTAL_NUMBER    reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    $end            reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    RPAREN          reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    SEMICOLON       reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    COLON           reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    RBRACKET        reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    COMMA           reduce using rule 113 (modulus_exp -> modulus_exp MODULUS unary_exp .)


state 181

    (7) command_block -> LBRACE command_list RBRACE .

    KEYWORD_STRUCT  reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    KEYWORD_UNION   reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    TYPE_CHAR       reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    TYPE_INT        reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    TYPE_SHORT      reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    TYPE_LONG       reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    TYPE_FLOAT      reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    TYPE_DOUBLE     reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    TYPE_VOID       reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    KEYWORD_STATIC  reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    KEYWORD_UNSIGNED reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    KEYWORD_VOLATILE reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    KEYWORD_EXTERN  reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    KEYWORD_SIGNED  reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    KEYWORD_REGISTER reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    KEYWORD_AUTO    reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    INCREMENT       reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    DECREMENT       reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    BITWISE_AND     reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    TIMES           reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    PLUS            reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    MINUS           reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    BITWISE_COMPLEMENT reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    NOT             reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    LPAREN          reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    KEYWORD_SIZEOF  reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    IDENTIFIER      reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    STRING          reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    FLOAT_NUMBER    reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    CHARACTER       reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    NUMBER          reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    BINARY_NUMBER   reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    HEXADECIMAL_NUMBER reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    OCTAL_NUMBER    reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)
    $end            reduce using rule 7 (command_block -> LBRACE command_list RBRACE .)


state 182

    (8) command_list -> command command_list .

    RBRACE          reduce using rule 8 (command_list -> command command_list .)


state 183

    (10) command -> variable_declaration SEMICOLON .

    SEMICOLON       reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    KEYWORD_UNION   reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    TYPE_CHAR       reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    TYPE_INT        reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    TYPE_SHORT      reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    TYPE_LONG       reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    TYPE_FLOAT      reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    TYPE_VOID       reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    KEYWORD_AUTO    reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    INCREMENT       reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    DECREMENT       reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    BITWISE_AND     reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    TIMES           reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    PLUS            reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    MINUS           reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    NOT             reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    LPAREN          reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    IDENTIFIER      reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    STRING          reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    CHARACTER       reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    NUMBER          reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    BINARY_NUMBER   reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 10 (command -> variable_declaration SEMICOLON .)
    RBRACE          reduce using rule 10 (command -> variable_declaration SEMICOLON .)


state 184

    (11) command -> variable_declaration ASSIGN . expression SEMICOLON
    (62) expression -> . assign_exp
    (74) assign_exp -> . unary_exp assign_operator assign_exp
    (75) assign_exp -> . ternary_conditional_exp
    (121) unary_exp -> . prefix_exp
    (76) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (77) ternary_conditional_exp -> . logical_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (78) logical_exp -> . logical_or_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (79) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (80) logical_or_exp -> . logical_and_exp
    (143) primary_exp -> . identifier_exp
    (81) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (82) logical_and_exp -> . bitwise_or_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (83) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (84) bitwise_or_exp -> . bitwise_xor_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    expression                     shift and go to state 200
    assign_exp                     shift and go to state 10
    unary_exp                      shift and go to state 14
    ternary_conditional_exp        shift and go to state 15
    prefix_exp                     shift and go to state 32
    logical_exp                    shift and go to state 33
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_or_exp                 shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_and_exp                shift and go to state 49
    identifier_exp                 shift and go to state 50
    bitwise_or_exp                 shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_xor_exp                shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_and_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77

state 185

    (12) command -> expression SEMICOLON .

    SEMICOLON       reduce using rule 12 (command -> expression SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 12 (command -> expression SEMICOLON .)
    KEYWORD_UNION   reduce using rule 12 (command -> expression SEMICOLON .)
    TYPE_CHAR       reduce using rule 12 (command -> expression SEMICOLON .)
    TYPE_INT        reduce using rule 12 (command -> expression SEMICOLON .)
    TYPE_SHORT      reduce using rule 12 (command -> expression SEMICOLON .)
    TYPE_LONG       reduce using rule 12 (command -> expression SEMICOLON .)
    TYPE_FLOAT      reduce using rule 12 (command -> expression SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 12 (command -> expression SEMICOLON .)
    TYPE_VOID       reduce using rule 12 (command -> expression SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 12 (command -> expression SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 12 (command -> expression SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 12 (command -> expression SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 12 (command -> expression SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 12 (command -> expression SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 12 (command -> expression SEMICOLON .)
    KEYWORD_AUTO    reduce using rule 12 (command -> expression SEMICOLON .)
    INCREMENT       reduce using rule 12 (command -> expression SEMICOLON .)
    DECREMENT       reduce using rule 12 (command -> expression SEMICOLON .)
    BITWISE_AND     reduce using rule 12 (command -> expression SEMICOLON .)
    TIMES           reduce using rule 12 (command -> expression SEMICOLON .)
    PLUS            reduce using rule 12 (command -> expression SEMICOLON .)
    MINUS           reduce using rule 12 (command -> expression SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 12 (command -> expression SEMICOLON .)
    NOT             reduce using rule 12 (command -> expression SEMICOLON .)
    LPAREN          reduce using rule 12 (command -> expression SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 12 (command -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 12 (command -> expression SEMICOLON .)
    STRING          reduce using rule 12 (command -> expression SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 12 (command -> expression SEMICOLON .)
    CHARACTER       reduce using rule 12 (command -> expression SEMICOLON .)
    NUMBER          reduce using rule 12 (command -> expression SEMICOLON .)
    BINARY_NUMBER   reduce using rule 12 (command -> expression SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 12 (command -> expression SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 12 (command -> expression SEMICOLON .)
    RBRACE          reduce using rule 12 (command -> expression SEMICOLON .)


state 186

    (34) variable_declaration -> type IDENTIFIER .

    SEMICOLON       reduce using rule 34 (variable_declaration -> type IDENTIFIER .)
    ASSIGN          reduce using rule 34 (variable_declaration -> type IDENTIFIER .)
    LBRACKET        reduce using rule 34 (variable_declaration -> type IDENTIFIER .)
    COMMA           reduce using rule 34 (variable_declaration -> type IDENTIFIER .)
    RPAREN          reduce using rule 34 (variable_declaration -> type IDENTIFIER .)


state 187

    (35) variable_declaration -> pointer IDENTIFIER .

    SEMICOLON       reduce using rule 35 (variable_declaration -> pointer IDENTIFIER .)
    ASSIGN          reduce using rule 35 (variable_declaration -> pointer IDENTIFIER .)
    LBRACKET        reduce using rule 35 (variable_declaration -> pointer IDENTIFIER .)
    COMMA           reduce using rule 35 (variable_declaration -> pointer IDENTIFIER .)
    RPAREN          reduce using rule 35 (variable_declaration -> pointer IDENTIFIER .)


state 188

    (21) signature_param -> type .
    (23) signature_param -> type . multiple_bracket_signature
    (36) pointer -> type . multiple_times
    (34) variable_declaration -> type . IDENTIFIER
    (27) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_with_bounds
    (28) multiple_bracket_signature -> . multiple_bracket_with_bounds
    (56) multiple_times -> . TIMES multiple_times
    (57) multiple_times -> . TIMES
    (29) multiple_bracket_with_bounds -> . bracket_with_bounds multiple_bracket_with_bounds
    (30) multiple_bracket_with_bounds -> . bracket_with_bounds
    (31) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    COMMA           reduce using rule 21 (signature_param -> type .)
    RPAREN          reduce using rule 21 (signature_param -> type .)
    IDENTIFIER      shift and go to state 186
    LBRACKET        shift and go to state 202
    TIMES           shift and go to state 86

    multiple_bracket_signature     shift and go to state 201
    multiple_times                 shift and go to state 85
    multiple_bracket_with_bounds   shift and go to state 203
    bracket_with_bounds            shift and go to state 204

state 189

    (15) function_signature -> type IDENTIFIER LPAREN signature_param_list . RPAREN

    RPAREN          shift and go to state 205


state 190

    (17) function_signature -> type IDENTIFIER LPAREN RPAREN .

    SEMICOLON       reduce using rule 17 (function_signature -> type IDENTIFIER LPAREN RPAREN .)
    LBRACE          reduce using rule 17 (function_signature -> type IDENTIFIER LPAREN RPAREN .)


state 191

    (19) signature_param_list -> signature_param . COMMA signature_param
    (20) signature_param_list -> signature_param .

    COMMA           shift and go to state 206
    RPAREN          reduce using rule 20 (signature_param_list -> signature_param .)


state 192

    (22) signature_param -> pointer .
    (24) signature_param -> pointer . multiple_bracket_signature
    (35) variable_declaration -> pointer . IDENTIFIER
    (27) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_with_bounds
    (28) multiple_bracket_signature -> . multiple_bracket_with_bounds
    (29) multiple_bracket_with_bounds -> . bracket_with_bounds multiple_bracket_with_bounds
    (30) multiple_bracket_with_bounds -> . bracket_with_bounds
    (31) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    COMMA           reduce using rule 22 (signature_param -> pointer .)
    RPAREN          reduce using rule 22 (signature_param -> pointer .)
    IDENTIFIER      shift and go to state 187
    LBRACKET        shift and go to state 202

    multiple_bracket_signature     shift and go to state 207
    multiple_bracket_with_bounds   shift and go to state 203
    bracket_with_bounds            shift and go to state 204

state 193

    (25) signature_param -> variable_declaration .
    (26) signature_param -> variable_declaration . multiple_bracket_signature
    (27) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_with_bounds
    (28) multiple_bracket_signature -> . multiple_bracket_with_bounds
    (29) multiple_bracket_with_bounds -> . bracket_with_bounds multiple_bracket_with_bounds
    (30) multiple_bracket_with_bounds -> . bracket_with_bounds
    (31) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    COMMA           reduce using rule 25 (signature_param -> variable_declaration .)
    RPAREN          reduce using rule 25 (signature_param -> variable_declaration .)
    LBRACKET        shift and go to state 202

    multiple_bracket_signature     shift and go to state 208
    multiple_bracket_with_bounds   shift and go to state 203
    bracket_with_bounds            shift and go to state 204

state 194

    (16) function_signature -> pointer IDENTIFIER LPAREN signature_param_list . RPAREN

    RPAREN          shift and go to state 209


state 195

    (18) function_signature -> pointer IDENTIFIER LPAREN RPAREN .

    SEMICOLON       reduce using rule 18 (function_signature -> pointer IDENTIFIER LPAREN RPAREN .)
    LBRACE          reduce using rule 18 (function_signature -> pointer IDENTIFIER LPAREN RPAREN .)


state 196

    (76) ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON . ternary_conditional_exp
    (76) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (77) ternary_conditional_exp -> . logical_exp
    (78) logical_exp -> . logical_or_exp
    (79) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (80) logical_or_exp -> . logical_and_exp
    (81) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (82) logical_and_exp -> . bitwise_or_exp
    (83) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (84) bitwise_or_exp -> . bitwise_xor_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp
    (121) unary_exp -> . prefix_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (143) primary_exp -> . identifier_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    logical_exp                    shift and go to state 33
    ternary_conditional_exp        shift and go to state 210
    logical_or_exp                 shift and go to state 40
    logical_and_exp                shift and go to state 49
    bitwise_or_exp                 shift and go to state 51
    bitwise_xor_exp                shift and go to state 53
    bitwise_and_exp                shift and go to state 56
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77
    unary_exp                      shift and go to state 163
    prefix_exp                     shift and go to state 32
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    primary_exp                    shift and go to state 41
    identifier_exp                 shift and go to state 50
    string_exp                     shift and go to state 52
    number_exp                     shift and go to state 55
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60

state 197

    (133) postfix_exp -> postfix_exp LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    DOT             reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    INCREMENT       reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    DECREMENT       reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TIMES_ASSIGN    reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    MODULUS_ASSIGN  reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    SHIFT_LEFT_ASSIGN reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    SHIFT_RIGHT_ASSIGN reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_AND_ASSIGN reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_XOR_ASSIGN reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_OR_ASSIGN reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    MODULUS         reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_SHIFT_RIGHT reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_SHIFT_LEFT reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    LESS_EQUALS     reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    LESS_THEN       reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    GREATER_EQUALS  reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    GREATER_THEN    reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    NOT_EQUALS      reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    EQUALS_THEN     reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_AND     reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_XOR     reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_OR      reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    LOGICAL_AND     reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    LOGICAL_OR      reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    QUESTION_MARK   reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_STRUCT  reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_UNION   reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TYPE_CHAR       reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TYPE_INT        reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TYPE_SHORT      reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TYPE_LONG       reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TYPE_FLOAT      reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TYPE_DOUBLE     reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TYPE_VOID       reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_STATIC  reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_UNSIGNED reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_VOLATILE reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_EXTERN  reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_SIGNED  reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_REGISTER reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_AUTO    reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_COMPLEMENT reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    NOT             reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    KEYWORD_SIZEOF  reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    IDENTIFIER      reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    STRING          reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    FLOAT_NUMBER    reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    CHARACTER       reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BINARY_NUMBER   reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    HEXADECIMAL_NUMBER reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    OCTAL_NUMBER    reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    $end            reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    COLON           reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 133 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)


state 198

    (135) postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .

    LBRACKET        reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    LPAREN          reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    DOT             reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    ARROW           reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    INCREMENT       reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    DECREMENT       reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    ASSIGN          reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TIMES_ASSIGN    reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    MODULUS_ASSIGN  reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    PLUS_ASSIGN     reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    MINUS_ASSIGN    reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    SHIFT_LEFT_ASSIGN reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    SHIFT_RIGHT_ASSIGN reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_AND_ASSIGN reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_XOR_ASSIGN reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_OR_ASSIGN reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    MODULUS         reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    DIVIDE          reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TIMES           reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    MINUS           reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    PLUS            reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_SHIFT_RIGHT reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_SHIFT_LEFT reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    LESS_EQUALS     reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    LESS_THEN       reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    GREATER_EQUALS  reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    GREATER_THEN    reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    NOT_EQUALS      reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    EQUALS_THEN     reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_AND     reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_XOR     reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_OR      reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    LOGICAL_AND     reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    LOGICAL_OR      reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    QUESTION_MARK   reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_STRUCT  reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_UNION   reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TYPE_CHAR       reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TYPE_INT        reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TYPE_SHORT      reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TYPE_LONG       reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TYPE_FLOAT      reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TYPE_DOUBLE     reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TYPE_VOID       reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_STATIC  reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_UNSIGNED reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_VOLATILE reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_EXTERN  reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_SIGNED  reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_REGISTER reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_AUTO    reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_COMPLEMENT reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    NOT             reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    KEYWORD_SIZEOF  reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    IDENTIFIER      reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    STRING          reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    FLOAT_NUMBER    reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    CHARACTER       reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    NUMBER          reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BINARY_NUMBER   reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    HEXADECIMAL_NUMBER reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    OCTAL_NUMBER    reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    $end            reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    RPAREN          reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    SEMICOLON       reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    COLON           reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    RBRACKET        reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    COMMA           reduce using rule 135 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)


state 199

    (142) function_call_parameters -> expression COMMA . function_call_parameters
    (141) function_call_parameters -> . expression
    (142) function_call_parameters -> . expression COMMA function_call_parameters
    (62) expression -> . assign_exp
    (74) assign_exp -> . unary_exp assign_operator assign_exp
    (75) assign_exp -> . ternary_conditional_exp
    (121) unary_exp -> . prefix_exp
    (76) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (77) ternary_conditional_exp -> . logical_exp
    (122) prefix_exp -> . postfix_exp
    (123) prefix_exp -> . INCREMENT unary_exp
    (124) prefix_exp -> . DECREMENT unary_exp
    (125) prefix_exp -> . unary_operator unary_exp
    (126) prefix_exp -> . cast_exp unary_exp
    (127) prefix_exp -> . sizeof_exp
    (78) logical_exp -> . logical_or_exp
    (133) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (134) postfix_exp -> . postfix_exp LPAREN RPAREN
    (135) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (136) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (137) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (138) postfix_exp -> . postfix_exp INCREMENT
    (139) postfix_exp -> . postfix_exp DECREMENT
    (140) postfix_exp -> . primary_exp
    (115) unary_operator -> . BITWISE_AND
    (116) unary_operator -> . TIMES
    (117) unary_operator -> . PLUS
    (118) unary_operator -> . MINUS
    (119) unary_operator -> . BITWISE_COMPLEMENT
    (120) unary_operator -> . NOT
    (131) cast_exp -> . LPAREN type RPAREN
    (132) cast_exp -> . LPAREN pointer RPAREN
    (128) sizeof_exp -> . KEYWORD_SIZEOF unary_exp
    (129) sizeof_exp -> . KEYWORD_SIZEOF type
    (130) sizeof_exp -> . KEYWORD_SIZEOF pointer
    (79) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (80) logical_or_exp -> . logical_and_exp
    (143) primary_exp -> . identifier_exp
    (81) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (82) logical_and_exp -> . bitwise_or_exp
    (144) identifier_exp -> . IDENTIFIER
    (145) identifier_exp -> . string_exp
    (83) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (84) bitwise_or_exp -> . bitwise_xor_exp
    (146) string_exp -> . STRING
    (147) string_exp -> . number_exp
    (85) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (86) bitwise_xor_exp -> . bitwise_and_exp
    (148) number_exp -> . integer_number
    (149) number_exp -> . FLOAT_NUMBER
    (150) number_exp -> . CHARACTER
    (151) number_exp -> . parentesis_exp
    (87) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (88) bitwise_and_exp -> . is_equals_exp
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER
    (152) parentesis_exp -> . LPAREN expression RPAREN
    (89) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (90) is_equals_exp -> . is_not_equals_exp
    (91) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (92) is_not_equals_exp -> . greater_then_exp
    (93) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (94) greater_then_exp -> . greater_equals_exp
    (95) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (96) greater_equals_exp -> . less_then_exp
    (97) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (98) less_then_exp -> . less_equals_exp
    (99) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (100) less_equals_exp -> . left_shift_exp
    (101) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (102) left_shift_exp -> . right_shift_exp
    (103) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (104) right_shift_exp -> . plus_exp
    (105) plus_exp -> . plus_exp PLUS minus_exp
    (106) plus_exp -> . minus_exp
    (107) minus_exp -> . minus_exp MINUS times_exp
    (108) minus_exp -> . times_exp
    (109) times_exp -> . times_exp TIMES divide_exp
    (110) times_exp -> . divide_exp
    (111) divide_exp -> . divide_exp DIVIDE modulus_exp
    (112) divide_exp -> . modulus_exp
    (113) modulus_exp -> . modulus_exp MODULUS unary_exp
    (114) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    BITWISE_AND     shift and go to state 42
    TIMES           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    BITWISE_COMPLEMENT shift and go to state 46
    NOT             shift and go to state 47
    LPAREN          shift and go to state 8
    KEYWORD_SIZEOF  shift and go to state 48
    IDENTIFIER      shift and go to state 7
    STRING          shift and go to state 54
    FLOAT_NUMBER    shift and go to state 58
    CHARACTER       shift and go to state 59
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    expression                     shift and go to state 159
    function_call_parameters       shift and go to state 211
    assign_exp                     shift and go to state 10
    unary_exp                      shift and go to state 14
    ternary_conditional_exp        shift and go to state 15
    prefix_exp                     shift and go to state 32
    logical_exp                    shift and go to state 33
    postfix_exp                    shift and go to state 34
    unary_operator                 shift and go to state 37
    cast_exp                       shift and go to state 38
    sizeof_exp                     shift and go to state 39
    logical_or_exp                 shift and go to state 40
    primary_exp                    shift and go to state 41
    logical_and_exp                shift and go to state 49
    identifier_exp                 shift and go to state 50
    bitwise_or_exp                 shift and go to state 51
    string_exp                     shift and go to state 52
    bitwise_xor_exp                shift and go to state 53
    number_exp                     shift and go to state 55
    bitwise_and_exp                shift and go to state 56
    integer_number                 shift and go to state 57
    parentesis_exp                 shift and go to state 60
    is_equals_exp                  shift and go to state 61
    is_not_equals_exp              shift and go to state 66
    greater_then_exp               shift and go to state 67
    greater_equals_exp             shift and go to state 68
    less_then_exp                  shift and go to state 69
    less_equals_exp                shift and go to state 70
    left_shift_exp                 shift and go to state 71
    right_shift_exp                shift and go to state 72
    plus_exp                       shift and go to state 73
    minus_exp                      shift and go to state 74
    times_exp                      shift and go to state 75
    divide_exp                     shift and go to state 76
    modulus_exp                    shift and go to state 77

state 200

    (11) command -> variable_declaration ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 212


state 201

    (23) signature_param -> type multiple_bracket_signature .

    COMMA           reduce using rule 23 (signature_param -> type multiple_bracket_signature .)
    RPAREN          reduce using rule 23 (signature_param -> type multiple_bracket_signature .)


state 202

    (27) multiple_bracket_signature -> LBRACKET . RBRACKET multiple_bracket_with_bounds
    (31) bracket_with_bounds -> LBRACKET . number_id RBRACKET
    (32) number_id -> . IDENTIFIER
    (33) number_id -> . integer_number
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER

    RBRACKET        shift and go to state 213
    IDENTIFIER      shift and go to state 215
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    number_id                      shift and go to state 214
    integer_number                 shift and go to state 216

state 203

    (28) multiple_bracket_signature -> multiple_bracket_with_bounds .

    COMMA           reduce using rule 28 (multiple_bracket_signature -> multiple_bracket_with_bounds .)
    RPAREN          reduce using rule 28 (multiple_bracket_signature -> multiple_bracket_with_bounds .)


state 204

    (29) multiple_bracket_with_bounds -> bracket_with_bounds . multiple_bracket_with_bounds
    (30) multiple_bracket_with_bounds -> bracket_with_bounds .
    (29) multiple_bracket_with_bounds -> . bracket_with_bounds multiple_bracket_with_bounds
    (30) multiple_bracket_with_bounds -> . bracket_with_bounds
    (31) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    COMMA           reduce using rule 30 (multiple_bracket_with_bounds -> bracket_with_bounds .)
    RPAREN          reduce using rule 30 (multiple_bracket_with_bounds -> bracket_with_bounds .)
    LBRACKET        shift and go to state 218

    bracket_with_bounds            shift and go to state 204
    multiple_bracket_with_bounds   shift and go to state 217

state 205

    (15) function_signature -> type IDENTIFIER LPAREN signature_param_list RPAREN .

    SEMICOLON       reduce using rule 15 (function_signature -> type IDENTIFIER LPAREN signature_param_list RPAREN .)
    LBRACE          reduce using rule 15 (function_signature -> type IDENTIFIER LPAREN signature_param_list RPAREN .)


state 206

    (19) signature_param_list -> signature_param COMMA . signature_param
    (21) signature_param -> . type
    (22) signature_param -> . pointer
    (23) signature_param -> . type multiple_bracket_signature
    (24) signature_param -> . pointer multiple_bracket_signature
    (25) signature_param -> . variable_declaration
    (26) signature_param -> . variable_declaration multiple_bracket_signature
    (37) type -> . user_types
    (38) type -> . primitive_types
    (39) type -> . type_modifier type
    (36) pointer -> . type multiple_times
    (34) variable_declaration -> . type IDENTIFIER
    (35) variable_declaration -> . pointer IDENTIFIER
    (47) user_types -> . KEYWORD_STRUCT IDENTIFIER
    (48) user_types -> . KEYWORD_UNION IDENTIFIER
    (49) primitive_types -> . TYPE_CHAR
    (50) primitive_types -> . TYPE_INT
    (51) primitive_types -> . TYPE_SHORT
    (52) primitive_types -> . TYPE_LONG
    (53) primitive_types -> . TYPE_FLOAT
    (54) primitive_types -> . TYPE_DOUBLE
    (55) primitive_types -> . TYPE_VOID
    (40) type_modifier -> . KEYWORD_STATIC
    (41) type_modifier -> . KEYWORD_UNSIGNED
    (42) type_modifier -> . KEYWORD_VOLATILE
    (43) type_modifier -> . KEYWORD_EXTERN
    (44) type_modifier -> . KEYWORD_SIGNED
    (45) type_modifier -> . KEYWORD_REGISTER
    (46) type_modifier -> . KEYWORD_AUTO

    KEYWORD_STRUCT  shift and go to state 16
    KEYWORD_UNION   shift and go to state 17
    TYPE_CHAR       shift and go to state 18
    TYPE_INT        shift and go to state 19
    TYPE_SHORT      shift and go to state 20
    TYPE_LONG       shift and go to state 21
    TYPE_FLOAT      shift and go to state 22
    TYPE_DOUBLE     shift and go to state 23
    TYPE_VOID       shift and go to state 24
    KEYWORD_STATIC  shift and go to state 25
    KEYWORD_UNSIGNED shift and go to state 26
    KEYWORD_VOLATILE shift and go to state 27
    KEYWORD_EXTERN  shift and go to state 28
    KEYWORD_SIGNED  shift and go to state 29
    KEYWORD_REGISTER shift and go to state 30
    KEYWORD_AUTO    shift and go to state 31

    signature_param                shift and go to state 219
    type                           shift and go to state 188
    pointer                        shift and go to state 192
    variable_declaration           shift and go to state 193
    user_types                     shift and go to state 11
    primitive_types                shift and go to state 12
    type_modifier                  shift and go to state 13

state 207

    (24) signature_param -> pointer multiple_bracket_signature .

    COMMA           reduce using rule 24 (signature_param -> pointer multiple_bracket_signature .)
    RPAREN          reduce using rule 24 (signature_param -> pointer multiple_bracket_signature .)


state 208

    (26) signature_param -> variable_declaration multiple_bracket_signature .

    COMMA           reduce using rule 26 (signature_param -> variable_declaration multiple_bracket_signature .)
    RPAREN          reduce using rule 26 (signature_param -> variable_declaration multiple_bracket_signature .)


state 209

    (16) function_signature -> pointer IDENTIFIER LPAREN signature_param_list RPAREN .

    SEMICOLON       reduce using rule 16 (function_signature -> pointer IDENTIFIER LPAREN signature_param_list RPAREN .)
    LBRACE          reduce using rule 16 (function_signature -> pointer IDENTIFIER LPAREN signature_param_list RPAREN .)


state 210

    (76) ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .

    KEYWORD_STRUCT  reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    KEYWORD_UNION   reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    TYPE_CHAR       reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    TYPE_INT        reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    TYPE_SHORT      reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    TYPE_LONG       reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    TYPE_FLOAT      reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    TYPE_DOUBLE     reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    TYPE_VOID       reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    KEYWORD_STATIC  reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    KEYWORD_UNSIGNED reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    KEYWORD_VOLATILE reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    KEYWORD_EXTERN  reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    KEYWORD_SIGNED  reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    KEYWORD_REGISTER reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    KEYWORD_AUTO    reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    INCREMENT       reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    DECREMENT       reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    BITWISE_AND     reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    TIMES           reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    PLUS            reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    MINUS           reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    BITWISE_COMPLEMENT reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    NOT             reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    LPAREN          reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    KEYWORD_SIZEOF  reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    IDENTIFIER      reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    STRING          reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    FLOAT_NUMBER    reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    CHARACTER       reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    NUMBER          reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    BINARY_NUMBER   reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    HEXADECIMAL_NUMBER reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    OCTAL_NUMBER    reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    $end            reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    RPAREN          reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    SEMICOLON       reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    COLON           reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    RBRACKET        reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    COMMA           reduce using rule 76 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)


state 211

    (142) function_call_parameters -> expression COMMA function_call_parameters .

    RPAREN          reduce using rule 142 (function_call_parameters -> expression COMMA function_call_parameters .)


state 212

    (11) command -> variable_declaration ASSIGN expression SEMICOLON .

    SEMICOLON       reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    KEYWORD_UNION   reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    TYPE_CHAR       reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    TYPE_INT        reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    TYPE_SHORT      reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    TYPE_LONG       reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    TYPE_FLOAT      reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    TYPE_VOID       reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    KEYWORD_AUTO    reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    INCREMENT       reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    DECREMENT       reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    BITWISE_AND     reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    TIMES           reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    PLUS            reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    CHARACTER       reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    BINARY_NUMBER   reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 11 (command -> variable_declaration ASSIGN expression SEMICOLON .)


state 213

    (27) multiple_bracket_signature -> LBRACKET RBRACKET . multiple_bracket_with_bounds
    (29) multiple_bracket_with_bounds -> . bracket_with_bounds multiple_bracket_with_bounds
    (30) multiple_bracket_with_bounds -> . bracket_with_bounds
    (31) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    LBRACKET        shift and go to state 218

    multiple_bracket_with_bounds   shift and go to state 220
    bracket_with_bounds            shift and go to state 204

state 214

    (31) bracket_with_bounds -> LBRACKET number_id . RBRACKET

    RBRACKET        shift and go to state 221


state 215

    (32) number_id -> IDENTIFIER .

    RBRACKET        reduce using rule 32 (number_id -> IDENTIFIER .)


state 216

    (33) number_id -> integer_number .

    RBRACKET        reduce using rule 33 (number_id -> integer_number .)


state 217

    (29) multiple_bracket_with_bounds -> bracket_with_bounds multiple_bracket_with_bounds .

    COMMA           reduce using rule 29 (multiple_bracket_with_bounds -> bracket_with_bounds multiple_bracket_with_bounds .)
    RPAREN          reduce using rule 29 (multiple_bracket_with_bounds -> bracket_with_bounds multiple_bracket_with_bounds .)


state 218

    (31) bracket_with_bounds -> LBRACKET . number_id RBRACKET
    (32) number_id -> . IDENTIFIER
    (33) number_id -> . integer_number
    (58) integer_number -> . NUMBER
    (59) integer_number -> . BINARY_NUMBER
    (60) integer_number -> . HEXADECIMAL_NUMBER
    (61) integer_number -> . OCTAL_NUMBER

    IDENTIFIER      shift and go to state 215
    NUMBER          shift and go to state 62
    BINARY_NUMBER   shift and go to state 63
    HEXADECIMAL_NUMBER shift and go to state 64
    OCTAL_NUMBER    shift and go to state 65

    number_id                      shift and go to state 214
    integer_number                 shift and go to state 216

state 219

    (19) signature_param_list -> signature_param COMMA signature_param .

    RPAREN          reduce using rule 19 (signature_param_list -> signature_param COMMA signature_param .)


state 220

    (27) multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_with_bounds .

    COMMA           reduce using rule 27 (multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_with_bounds .)
    RPAREN          reduce using rule 27 (multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_with_bounds .)


state 221

    (31) bracket_with_bounds -> LBRACKET number_id RBRACKET .

    LBRACKET        reduce using rule 31 (bracket_with_bounds -> LBRACKET number_id RBRACKET .)
    COMMA           reduce using rule 31 (bracket_with_bounds -> LBRACKET number_id RBRACKET .)
    RPAREN          reduce using rule 31 (bracket_with_bounds -> LBRACKET number_id RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 34 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 34 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 34 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 56 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 75 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 86 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 119 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 166 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 175 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 176 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 177 resolved as shift
