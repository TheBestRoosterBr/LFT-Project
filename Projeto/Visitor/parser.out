Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    KEYWORD_TYPEDEF
    PRE_PROCESSOR

Grammar

Rule 0     S' -> program
Rule 1     program -> program_item
Rule 2     program -> program_item program
Rule 3     program_item -> variable_declaration_list SEMICOLON
Rule 4     program_item -> function
Rule 5     program_item -> global_assign_identifier_list SEMICOLON
Rule 6     program_item -> type SEMICOLON
Rule 7     global_assign_identifier_list -> IDENTIFIER ASSIGN expression
Rule 8     global_assign_identifier_list -> IDENTIFIER ASSIGN expression COMMA global_assign_identifier_list
Rule 9     block -> LBRACE RBRACE
Rule 10    block -> LBRACE block_statements RBRACE
Rule 11    block_statements -> block_statement
Rule 12    block_statements -> block_statements block_statement
Rule 13    block_statement -> statement
Rule 14    statement -> statement_without_trailing_substatement
Rule 15    statement -> if_then_statement
Rule 16    statement -> if_then_else_statement
Rule 17    statement -> while_statement
Rule 18    statement -> for_statement
Rule 19    statement_without_trailing_substatement -> block
Rule 20    statement_without_trailing_substatement -> SEMICOLON
Rule 21    statement_without_trailing_substatement -> expression_list SEMICOLON
Rule 22    statement_without_trailing_substatement -> switch_stm
Rule 23    statement_without_trailing_substatement -> do_statement
Rule 24    statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON
Rule 25    statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON
Rule 26    statement_without_trailing_substatement -> return_stm SEMICOLON
Rule 27    statement_without_trailing_substatement -> IDENTIFIER COLON
Rule 28    statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON
Rule 29    statement_without_trailing_substatement -> variable_declaration_list SEMICOLON
Rule 30    statement_without_trailing_substatement -> type SEMICOLON
Rule 31    statement_no_short_if -> statement_without_trailing_substatement
Rule 32    statement_no_short_if -> if_then_else_statement_no_short_if
Rule 33    statement_no_short_if -> while_statement_no_short_if
Rule 34    statement_no_short_if -> for_statement_no_short_if
Rule 35    if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement
Rule 36    if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement
Rule 37    if_then_else_statement_no_short_if -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement_no_short_if
Rule 38    while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement
Rule 39    while_statement_no_short_if -> KEYWORD_WHILE LPAREN expression RPAREN statement_no_short_if
Rule 40    do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
Rule 41    for_params -> variable_declaration_list SEMICOLON for_param
Rule 42    for_params -> variable_declaration_list SEMICOLON for_param expression_list
Rule 43    for_params -> for_param for_param expression_list
Rule 44    for_params -> for_param for_param
Rule 45    for_param -> SEMICOLON
Rule 46    for_param -> expression_list SEMICOLON
Rule 47    for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement
Rule 48    for_statement_no_short_if -> KEYWORD_FOR LPAREN for_params RPAREN statement_no_short_if
Rule 49    switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE
Rule 50    switch_itens -> KEYWORD_CASE expression COLON block_statements
Rule 51    switch_itens -> KEYWORD_DEFAULT COLON block_statements
Rule 52    switch_itens -> KEYWORD_CASE expression COLON block_statements switch_itens
Rule 53    switch_itens -> KEYWORD_DEFAULT COLON block_statements switch_itens
Rule 54    return_stm -> KEYWORD_RETURN
Rule 55    return_stm -> KEYWORD_RETURN expression
Rule 56    function -> function_signature block
Rule 57    function_signature -> type identifier LPAREN signature_param_list RPAREN
Rule 58    function_signature -> type identifier LPAREN RPAREN
Rule 59    triple_dot -> DOT DOT DOT
Rule 60    signature_param_list -> signature_param COMMA signature_param_list
Rule 61    signature_param_list -> signature_param
Rule 62    signature_param -> type
Rule 63    signature_param -> type multiple_times
Rule 64    signature_param -> type multiple_bracket_signature
Rule 65    signature_param -> type identifier
Rule 66    signature_param -> type identifier multiple_bracket_signature
Rule 67    signature_param -> triple_dot
Rule 68    multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_signature
Rule 69    multiple_bracket_signature -> LBRACKET RBRACKET
Rule 70    multiple_bracket_signature -> bracket_with_bounds multiple_bracket_signature
Rule 71    multiple_bracket_signature -> bracket_with_bounds
Rule 72    bracket_with_bounds -> LBRACKET number_id RBRACKET
Rule 73    number_id -> IDENTIFIER
Rule 74    number_id -> integer_number
Rule 75    value_list -> LBRACE value_list_item RBRACE
Rule 76    value_list -> LBRACE RBRACE
Rule 77    value_list_item -> expression
Rule 78    value_list_item -> expression COMMA value_list_item
Rule 79    value_list_item -> value_list
Rule 80    value_list_item -> value_list COMMA value_list_item
Rule 81    variable_declaration_list -> type identifier_list
Rule 82    identifier_list -> identifier
Rule 83    identifier_list -> identifier COMMA identifier_list
Rule 84    identifier_list -> identifier multiple_bracket_signature
Rule 85    identifier_list -> identifier multiple_bracket_signature COMMA identifier_list
Rule 86    identifier_list -> identifier ASSIGN expression
Rule 87    identifier_list -> identifier ASSIGN expression COMMA identifier_list
Rule 88    identifier_list -> identifier multiple_bracket_signature ASSIGN value_list
Rule 89    identifier_list -> identifier multiple_bracket_signature ASSIGN value_list COMMA identifier_list
Rule 90    identifier_list -> identifier ASSIGN value_list
Rule 91    identifier_list -> identifier ASSIGN value_list COMMA identifier_list
Rule 92    identifier_list -> function_pointer
Rule 93    identifier_list -> function_pointer COMMA identifier_list
Rule 94    identifier_list -> function_pointer ASSIGN expression
Rule 95    identifier_list -> function_pointer ASSIGN expression COMMA identifier_list
Rule 96    identifier_list -> function_pointer_array
Rule 97    identifier_list -> function_pointer_array COMMA identifier_list
Rule 98    identifier_list -> function_pointer_array ASSIGN value_list
Rule 99    identifier_list -> function_pointer_array ASSIGN value_list COMMA identifier_list
Rule 100   function_pointer -> identifier LPAREN signature_param_list RPAREN
Rule 101   function_pointer -> identifier LPAREN RPAREN
Rule 102   function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN
Rule 103   function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN
Rule 104   identifier -> IDENTIFIER
Rule 105   identifier -> TIMES identifier
Rule 106   identifier -> LPAREN identifier RPAREN
Rule 107   type -> user_types
Rule 108   type -> primitive_types
Rule 109   type -> type_modifier type
Rule 110   type_modifier -> KEYWORD_STATIC
Rule 111   type_modifier -> KEYWORD_UNSIGNED
Rule 112   type_modifier -> KEYWORD_VOLATILE
Rule 113   type_modifier -> KEYWORD_EXTERN
Rule 114   type_modifier -> KEYWORD_SIGNED
Rule 115   type_modifier -> KEYWORD_REGISTER
Rule 116   type_modifier -> KEYWORD_CONST
Rule 117   user_types -> struct_declaration
Rule 118   user_types -> union_declaration
Rule 119   user_types -> enum_declaration
Rule 120   primitive_types -> TYPE_CHAR
Rule 121   primitive_types -> TYPE_INT
Rule 122   primitive_types -> TYPE_SHORT
Rule 123   primitive_types -> TYPE_LONG
Rule 124   primitive_types -> TYPE_FLOAT
Rule 125   primitive_types -> TYPE_DOUBLE
Rule 126   primitive_types -> TYPE_VOID
Rule 127   struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
Rule 128   struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
Rule 129   struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE
Rule 130   struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
Rule 131   struct_declaration -> KEYWORD_STRUCT IDENTIFIER
Rule 132   union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE
Rule 133   union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
Rule 134   union_declaration -> KEYWORD_UNION LBRACE RBRACE
Rule 135   union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
Rule 136   union_declaration -> KEYWORD_UNION IDENTIFIER
Rule 137   enum_declaration -> KEYWORD_ENUM LBRACE enum_item_list RBRACE
Rule 138   enum_declaration -> KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
Rule 139   enum_declaration -> KEYWORD_ENUM IDENTIFIER
Rule 140   struct_or_union_member_list -> variable_declaration_list_no_assign SEMICOLON
Rule 141   struct_or_union_member_list -> variable_declaration_list_no_assign SEMICOLON struct_or_union_member_list
Rule 142   variable_declaration_list_no_assign -> type variable_list_no_assign
Rule 143   variable_list_no_assign -> identifier
Rule 144   variable_list_no_assign -> variable_list_no_assign COMMA identifier
Rule 145   enum_item_list -> IDENTIFIER
Rule 146   enum_item_list -> IDENTIFIER COMMA enum_item_list
Rule 147   enum_item_list -> IDENTIFIER ASSIGN expression
Rule 148   enum_item_list -> IDENTIFIER ASSIGN expression COMMA enum_item_list
Rule 149   multiple_times -> TIMES multiple_times
Rule 150   multiple_times -> TIMES
Rule 151   integer_number -> NUMBER
Rule 152   integer_number -> BINARY_NUMBER
Rule 153   integer_number -> HEXADECIMAL_NUMBER
Rule 154   integer_number -> OCTAL_NUMBER
Rule 155   expression_list -> expression
Rule 156   expression_list -> expression COMMA expression_list
Rule 157   expression -> assign_exp
Rule 158   assign_operator -> ASSIGN
Rule 159   assign_operator -> TIMES_ASSIGN
Rule 160   assign_operator -> DIVIDE_ASSIGN
Rule 161   assign_operator -> MODULUS_ASSIGN
Rule 162   assign_operator -> PLUS_ASSIGN
Rule 163   assign_operator -> MINUS_ASSIGN
Rule 164   assign_operator -> SHIFT_LEFT_ASSIGN
Rule 165   assign_operator -> SHIFT_RIGHT_ASSIGN
Rule 166   assign_operator -> BITWISE_AND_ASSIGN
Rule 167   assign_operator -> BITWISE_XOR_ASSIGN
Rule 168   assign_operator -> BITWISE_OR_ASSIGN
Rule 169   assign_exp -> unary_exp assign_operator assign_exp
Rule 170   assign_exp -> ternary_conditional_exp
Rule 171   ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
Rule 172   ternary_conditional_exp -> logical_exp
Rule 173   logical_exp -> logical_or_exp
Rule 174   logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp
Rule 175   logical_or_exp -> logical_and_exp
Rule 176   logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp
Rule 177   logical_and_exp -> bitwise_or_exp
Rule 178   bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp
Rule 179   bitwise_or_exp -> bitwise_xor_exp
Rule 180   bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp
Rule 181   bitwise_xor_exp -> bitwise_and_exp
Rule 182   bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp
Rule 183   bitwise_and_exp -> is_equals_exp
Rule 184   is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp
Rule 185   is_equals_exp -> is_not_equals_exp
Rule 186   is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp
Rule 187   is_not_equals_exp -> greater_then_exp
Rule 188   greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp
Rule 189   greater_then_exp -> greater_equals_exp
Rule 190   greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp
Rule 191   greater_equals_exp -> less_then_exp
Rule 192   less_then_exp -> less_then_exp LESS_THEN less_equals_exp
Rule 193   less_then_exp -> less_equals_exp
Rule 194   less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp
Rule 195   less_equals_exp -> left_shift_exp
Rule 196   left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
Rule 197   left_shift_exp -> right_shift_exp
Rule 198   right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
Rule 199   right_shift_exp -> plus_exp
Rule 200   plus_exp -> plus_exp PLUS minus_exp
Rule 201   plus_exp -> minus_exp
Rule 202   minus_exp -> minus_exp MINUS times_exp
Rule 203   minus_exp -> times_exp
Rule 204   times_exp -> times_exp TIMES divide_exp
Rule 205   times_exp -> divide_exp
Rule 206   divide_exp -> divide_exp DIVIDE modulus_exp
Rule 207   divide_exp -> modulus_exp
Rule 208   modulus_exp -> modulus_exp MODULUS unary_exp
Rule 209   modulus_exp -> unary_exp
Rule 210   unary_operator -> BITWISE_AND
Rule 211   unary_operator -> TIMES
Rule 212   unary_operator -> PLUS
Rule 213   unary_operator -> MINUS
Rule 214   unary_operator -> BITWISE_COMPLEMENT
Rule 215   unary_operator -> NOT
Rule 216   unary_exp -> postfix_exp
Rule 217   unary_exp -> INCREMENT postfix_exp
Rule 218   unary_exp -> DECREMENT postfix_exp
Rule 219   unary_exp -> postfix_exp INCREMENT
Rule 220   unary_exp -> postfix_exp DECREMENT
Rule 221   unary_exp -> cast_exp postfix_exp
Rule 222   unary_exp -> sizeof_exp
Rule 223   unary_exp -> unary_operator unary_exp
Rule 224   sizeof_exp -> KEYWORD_SIZEOF postfix_exp
Rule 225   sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN
Rule 226   sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
Rule 227   cast_exp -> LPAREN type RPAREN
Rule 228   cast_exp -> LPAREN type multiple_times RPAREN
Rule 229   postfix_exp -> postfix_exp LBRACKET expression RBRACKET
Rule 230   postfix_exp -> postfix_exp LPAREN RPAREN
Rule 231   postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN
Rule 232   postfix_exp -> postfix_exp DOT IDENTIFIER
Rule 233   postfix_exp -> postfix_exp ARROW IDENTIFIER
Rule 234   postfix_exp -> primary_exp
Rule 235   function_call_parameters -> expression
Rule 236   function_call_parameters -> expression COMMA function_call_parameters
Rule 237   primary_exp -> identifier_exp
Rule 238   identifier_exp -> IDENTIFIER
Rule 239   identifier_exp -> string_exp
Rule 240   string_exp -> STRING
Rule 241   string_exp -> number_exp
Rule 242   number_exp -> integer_number
Rule 243   number_exp -> FLOAT_NUMBER
Rule 244   number_exp -> CHARACTER
Rule 245   number_exp -> parentesis_exp
Rule 246   parentesis_exp -> LPAREN expression RPAREN

Terminals, with rules where they appear

ARROW                : 233
ASSIGN               : 7 8 86 87 88 89 90 91 94 95 98 99 147 148 158
BINARY_NUMBER        : 152
BITWISE_AND          : 182 210
BITWISE_AND_ASSIGN   : 166
BITWISE_COMPLEMENT   : 214
BITWISE_OR           : 178
BITWISE_OR_ASSIGN    : 168
BITWISE_SHIFT_LEFT   : 196
BITWISE_SHIFT_RIGHT  : 198
BITWISE_XOR          : 180
BITWISE_XOR_ASSIGN   : 167
CHARACTER            : 244
COLON                : 27 50 51 52 53 171
COMMA                : 8 60 78 80 83 85 87 89 91 93 95 97 99 144 146 148 156 236
DECREMENT            : 218 220
DIVIDE               : 206
DIVIDE_ASSIGN        : 160
DOT                  : 59 59 59 232
EQUALS_THEN          : 184
FLOAT_NUMBER         : 243
GREATER_EQUALS       : 190
GREATER_THEN         : 188
HEXADECIMAL_NUMBER   : 153
IDENTIFIER           : 7 8 27 28 73 104 127 128 131 132 133 136 138 139 145 146 147 148 232 233 238
INCREMENT            : 217 219
KEYWORD_BREAK        : 24
KEYWORD_CASE         : 50 52
KEYWORD_CONST        : 116
KEYWORD_CONTINUE     : 25
KEYWORD_DEFAULT      : 51 53
KEYWORD_DO           : 40
KEYWORD_ELSE         : 36 37
KEYWORD_ENUM         : 137 138 139
KEYWORD_EXTERN       : 113
KEYWORD_FOR          : 47 48
KEYWORD_GOTO         : 28
KEYWORD_IF           : 35 36 37
KEYWORD_REGISTER     : 115
KEYWORD_RETURN       : 54 55
KEYWORD_SIGNED       : 114
KEYWORD_SIZEOF       : 224 225 226
KEYWORD_STATIC       : 110
KEYWORD_STRUCT       : 127 128 129 130 131
KEYWORD_SWITCH       : 49
KEYWORD_TYPEDEF      : 
KEYWORD_UNION        : 132 133 134 135 136
KEYWORD_UNSIGNED     : 111
KEYWORD_VOLATILE     : 112
KEYWORD_WHILE        : 38 39 40
LBRACE               : 9 10 49 75 76 127 128 129 130 132 133 134 135 137 138
LBRACKET             : 68 69 72 229
LESS_EQUALS          : 194
LESS_THEN            : 192
LOGICAL_AND          : 176
LOGICAL_OR           : 174
LPAREN               : 35 36 37 38 39 40 47 48 49 57 58 100 101 102 102 103 103 106 225 226 227 228 230 231 246
MINUS                : 202 213
MINUS_ASSIGN         : 163
MODULUS              : 208
MODULUS_ASSIGN       : 161
NOT                  : 215
NOT_EQUALS           : 186
NUMBER               : 151
OCTAL_NUMBER         : 154
PLUS                 : 200 212
PLUS_ASSIGN          : 162
PRE_PROCESSOR        : 
QUESTION_MARK        : 171
RBRACE               : 9 10 49 75 76 127 128 129 130 132 133 134 135 137 138
RBRACKET             : 68 69 72 229
RPAREN               : 35 36 37 38 39 40 47 48 49 57 58 100 101 102 102 103 103 106 225 226 227 228 230 231 246
SEMICOLON            : 3 5 6 20 21 24 25 26 28 29 30 40 41 42 45 46 140 141
SHIFT_LEFT_ASSIGN    : 164
SHIFT_RIGHT_ASSIGN   : 165
STRING               : 240
TIMES                : 102 103 105 149 150 204 211
TIMES_ASSIGN         : 159
TYPE_CHAR            : 120
TYPE_DOUBLE          : 125
TYPE_FLOAT           : 124
TYPE_INT             : 121
TYPE_LONG            : 123
TYPE_SHORT           : 122
TYPE_VOID            : 126
error                : 

Nonterminals, with rules where they appear

assign_exp           : 157 169
assign_operator      : 169
bitwise_and_exp      : 180 181 182
bitwise_or_exp       : 176 177 178
bitwise_xor_exp      : 178 179 180
block                : 19 56
block_statement      : 11 12
block_statements     : 10 12 50 51 52 53
bracket_with_bounds  : 70 71
cast_exp             : 221
divide_exp           : 204 205 206
do_statement         : 23
enum_declaration     : 119
enum_item_list       : 137 138 146 148
expression           : 7 8 35 36 37 38 39 40 49 50 52 55 77 78 86 87 94 95 147 148 155 156 171 229 235 236 246
expression_list      : 21 42 43 46 156
for_param            : 41 42 43 43 44 44
for_params           : 47 48
for_statement        : 18
for_statement_no_short_if : 34
function             : 4
function_call_parameters : 231 236
function_pointer     : 92 93 94 95
function_pointer_array : 96 97 98 99
function_signature   : 56
global_assign_identifier_list : 5 8
greater_equals_exp   : 188 189 190
greater_then_exp     : 186 187 188
identifier           : 57 58 65 66 82 83 84 85 86 87 88 89 90 91 100 101 102 103 105 106 143 144
identifier_exp       : 237
identifier_list      : 81 83 85 87 89 91 93 95 97 99
if_then_else_statement : 16
if_then_else_statement_no_short_if : 32
if_then_statement    : 15
integer_number       : 74 242
is_equals_exp        : 182 183 184
is_not_equals_exp    : 184 185 186
left_shift_exp       : 194 195 196
less_equals_exp      : 192 193 194
less_then_exp        : 190 191 192
logical_and_exp      : 174 175 176
logical_exp          : 171 172
logical_or_exp       : 173 174
minus_exp            : 200 201 202
modulus_exp          : 206 207 208
multiple_bracket_signature : 64 66 68 70 84 85 88 89 102 103
multiple_times       : 63 149 226 228
number_exp           : 241
number_id            : 72
parentesis_exp       : 245
plus_exp             : 198 199 200
postfix_exp          : 216 217 218 219 220 221 224 229 230 231 232 233
primary_exp          : 234
primitive_types      : 108
program              : 2 0
program_item         : 1 2
return_stm           : 26
right_shift_exp      : 196 197 198
signature_param      : 60 61
signature_param_list : 57 60 100 102
sizeof_exp           : 222
statement            : 13 35 36 38 40 47
statement_no_short_if : 36 37 37 39 48
statement_without_trailing_substatement : 14 31
string_exp           : 239
struct_declaration   : 117
struct_or_union_member_list : 128 130 133 135 141
switch_itens         : 49 52 53
switch_stm           : 22
ternary_conditional_exp : 170 171
times_exp            : 202 203 204
triple_dot           : 67
type                 : 6 30 57 58 62 63 64 65 66 81 109 142 225 226 227 228
type_modifier        : 109
unary_exp            : 169 208 209 223
unary_operator       : 223
union_declaration    : 118
user_types           : 107
value_list           : 79 80 88 89 90 91 98 99
value_list_item      : 75 78 80
variable_declaration_list : 3 29 41 42
variable_declaration_list_no_assign : 140 141
variable_list_no_assign : 142 144
while_statement      : 17
while_statement_no_short_if : 33

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_item
    (2) program -> . program_item program
    (3) program_item -> . variable_declaration_list SEMICOLON
    (4) program_item -> . function
    (5) program_item -> . global_assign_identifier_list SEMICOLON
    (6) program_item -> . type SEMICOLON
    (81) variable_declaration_list -> . type identifier_list
    (56) function -> . function_signature block
    (7) global_assign_identifier_list -> . IDENTIFIER ASSIGN expression
    (8) global_assign_identifier_list -> . IDENTIFIER ASSIGN expression COMMA global_assign_identifier_list
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (57) function_signature -> . type identifier LPAREN signature_param_list RPAREN
    (58) function_signature -> . type identifier LPAREN RPAREN
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER

    IDENTIFIER      shift and go to state 8
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31

    program                        shift and go to state 1
    program_item                   shift and go to state 2
    variable_declaration_list      shift and go to state 3
    function                       shift and go to state 4
    global_assign_identifier_list  shift and go to state 5
    type                           shift and go to state 6
    function_signature             shift and go to state 7
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> program_item .
    (2) program -> program_item . program
    (1) program -> . program_item
    (2) program -> . program_item program
    (3) program_item -> . variable_declaration_list SEMICOLON
    (4) program_item -> . function
    (5) program_item -> . global_assign_identifier_list SEMICOLON
    (6) program_item -> . type SEMICOLON
    (81) variable_declaration_list -> . type identifier_list
    (56) function -> . function_signature block
    (7) global_assign_identifier_list -> . IDENTIFIER ASSIGN expression
    (8) global_assign_identifier_list -> . IDENTIFIER ASSIGN expression COMMA global_assign_identifier_list
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (57) function_signature -> . type identifier LPAREN signature_param_list RPAREN
    (58) function_signature -> . type identifier LPAREN RPAREN
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER

    $end            reduce using rule 1 (program -> program_item .)
    IDENTIFIER      shift and go to state 8
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31

    program_item                   shift and go to state 2
    program                        shift and go to state 32
    variable_declaration_list      shift and go to state 3
    function                       shift and go to state 4
    global_assign_identifier_list  shift and go to state 5
    type                           shift and go to state 6
    function_signature             shift and go to state 7
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14

state 3

    (3) program_item -> variable_declaration_list . SEMICOLON

    SEMICOLON       shift and go to state 33


state 4

    (4) program_item -> function .

    IDENTIFIER      reduce using rule 4 (program_item -> function .)
    TYPE_CHAR       reduce using rule 4 (program_item -> function .)
    TYPE_INT        reduce using rule 4 (program_item -> function .)
    TYPE_SHORT      reduce using rule 4 (program_item -> function .)
    TYPE_LONG       reduce using rule 4 (program_item -> function .)
    TYPE_FLOAT      reduce using rule 4 (program_item -> function .)
    TYPE_DOUBLE     reduce using rule 4 (program_item -> function .)
    TYPE_VOID       reduce using rule 4 (program_item -> function .)
    KEYWORD_STATIC  reduce using rule 4 (program_item -> function .)
    KEYWORD_UNSIGNED reduce using rule 4 (program_item -> function .)
    KEYWORD_VOLATILE reduce using rule 4 (program_item -> function .)
    KEYWORD_EXTERN  reduce using rule 4 (program_item -> function .)
    KEYWORD_SIGNED  reduce using rule 4 (program_item -> function .)
    KEYWORD_REGISTER reduce using rule 4 (program_item -> function .)
    KEYWORD_CONST   reduce using rule 4 (program_item -> function .)
    KEYWORD_STRUCT  reduce using rule 4 (program_item -> function .)
    KEYWORD_UNION   reduce using rule 4 (program_item -> function .)
    KEYWORD_ENUM    reduce using rule 4 (program_item -> function .)
    $end            reduce using rule 4 (program_item -> function .)


state 5

    (5) program_item -> global_assign_identifier_list . SEMICOLON

    SEMICOLON       shift and go to state 34


state 6

    (6) program_item -> type . SEMICOLON
    (81) variable_declaration_list -> type . identifier_list
    (57) function_signature -> type . identifier LPAREN signature_param_list RPAREN
    (58) function_signature -> type . identifier LPAREN RPAREN
    (82) identifier_list -> . identifier
    (83) identifier_list -> . identifier COMMA identifier_list
    (84) identifier_list -> . identifier multiple_bracket_signature
    (85) identifier_list -> . identifier multiple_bracket_signature COMMA identifier_list
    (86) identifier_list -> . identifier ASSIGN expression
    (87) identifier_list -> . identifier ASSIGN expression COMMA identifier_list
    (88) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list
    (89) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (90) identifier_list -> . identifier ASSIGN value_list
    (91) identifier_list -> . identifier ASSIGN value_list COMMA identifier_list
    (92) identifier_list -> . function_pointer
    (93) identifier_list -> . function_pointer COMMA identifier_list
    (94) identifier_list -> . function_pointer ASSIGN expression
    (95) identifier_list -> . function_pointer ASSIGN expression COMMA identifier_list
    (96) identifier_list -> . function_pointer_array
    (97) identifier_list -> . function_pointer_array COMMA identifier_list
    (98) identifier_list -> . function_pointer_array ASSIGN value_list
    (99) identifier_list -> . function_pointer_array ASSIGN value_list COMMA identifier_list
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN
    (100) function_pointer -> . identifier LPAREN signature_param_list RPAREN
    (101) function_pointer -> . identifier LPAREN RPAREN
    (102) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN
    (103) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN

    SEMICOLON       shift and go to state 35
    IDENTIFIER      shift and go to state 41
    TIMES           shift and go to state 42
    LPAREN          shift and go to state 38

    identifier_list                shift and go to state 36
    identifier                     shift and go to state 37
    function_pointer               shift and go to state 39
    function_pointer_array         shift and go to state 40

state 7

    (56) function -> function_signature . block
    (9) block -> . LBRACE RBRACE
    (10) block -> . LBRACE block_statements RBRACE

    LBRACE          shift and go to state 44

    block                          shift and go to state 43

state 8

    (7) global_assign_identifier_list -> IDENTIFIER . ASSIGN expression
    (8) global_assign_identifier_list -> IDENTIFIER . ASSIGN expression COMMA global_assign_identifier_list

    ASSIGN          shift and go to state 45


state 9

    (107) type -> user_types .

    SEMICOLON       reduce using rule 107 (type -> user_types .)
    IDENTIFIER      reduce using rule 107 (type -> user_types .)
    TIMES           reduce using rule 107 (type -> user_types .)
    LPAREN          reduce using rule 107 (type -> user_types .)
    LBRACKET        reduce using rule 107 (type -> user_types .)
    COMMA           reduce using rule 107 (type -> user_types .)
    RPAREN          reduce using rule 107 (type -> user_types .)


state 10

    (108) type -> primitive_types .

    SEMICOLON       reduce using rule 108 (type -> primitive_types .)
    IDENTIFIER      reduce using rule 108 (type -> primitive_types .)
    TIMES           reduce using rule 108 (type -> primitive_types .)
    LPAREN          reduce using rule 108 (type -> primitive_types .)
    LBRACKET        reduce using rule 108 (type -> primitive_types .)
    COMMA           reduce using rule 108 (type -> primitive_types .)
    RPAREN          reduce using rule 108 (type -> primitive_types .)


state 11

    (109) type -> type_modifier . type
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER

    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31

    type_modifier                  shift and go to state 11
    type                           shift and go to state 46
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14

state 12

    (117) user_types -> struct_declaration .

    SEMICOLON       reduce using rule 117 (user_types -> struct_declaration .)
    IDENTIFIER      reduce using rule 117 (user_types -> struct_declaration .)
    TIMES           reduce using rule 117 (user_types -> struct_declaration .)
    LPAREN          reduce using rule 117 (user_types -> struct_declaration .)
    LBRACKET        reduce using rule 117 (user_types -> struct_declaration .)
    COMMA           reduce using rule 117 (user_types -> struct_declaration .)
    RPAREN          reduce using rule 117 (user_types -> struct_declaration .)


state 13

    (118) user_types -> union_declaration .

    SEMICOLON       reduce using rule 118 (user_types -> union_declaration .)
    IDENTIFIER      reduce using rule 118 (user_types -> union_declaration .)
    TIMES           reduce using rule 118 (user_types -> union_declaration .)
    LPAREN          reduce using rule 118 (user_types -> union_declaration .)
    LBRACKET        reduce using rule 118 (user_types -> union_declaration .)
    COMMA           reduce using rule 118 (user_types -> union_declaration .)
    RPAREN          reduce using rule 118 (user_types -> union_declaration .)


state 14

    (119) user_types -> enum_declaration .

    SEMICOLON       reduce using rule 119 (user_types -> enum_declaration .)
    IDENTIFIER      reduce using rule 119 (user_types -> enum_declaration .)
    TIMES           reduce using rule 119 (user_types -> enum_declaration .)
    LPAREN          reduce using rule 119 (user_types -> enum_declaration .)
    LBRACKET        reduce using rule 119 (user_types -> enum_declaration .)
    COMMA           reduce using rule 119 (user_types -> enum_declaration .)
    RPAREN          reduce using rule 119 (user_types -> enum_declaration .)


state 15

    (120) primitive_types -> TYPE_CHAR .

    SEMICOLON       reduce using rule 120 (primitive_types -> TYPE_CHAR .)
    IDENTIFIER      reduce using rule 120 (primitive_types -> TYPE_CHAR .)
    TIMES           reduce using rule 120 (primitive_types -> TYPE_CHAR .)
    LPAREN          reduce using rule 120 (primitive_types -> TYPE_CHAR .)
    LBRACKET        reduce using rule 120 (primitive_types -> TYPE_CHAR .)
    COMMA           reduce using rule 120 (primitive_types -> TYPE_CHAR .)
    RPAREN          reduce using rule 120 (primitive_types -> TYPE_CHAR .)


state 16

    (121) primitive_types -> TYPE_INT .

    SEMICOLON       reduce using rule 121 (primitive_types -> TYPE_INT .)
    IDENTIFIER      reduce using rule 121 (primitive_types -> TYPE_INT .)
    TIMES           reduce using rule 121 (primitive_types -> TYPE_INT .)
    LPAREN          reduce using rule 121 (primitive_types -> TYPE_INT .)
    LBRACKET        reduce using rule 121 (primitive_types -> TYPE_INT .)
    COMMA           reduce using rule 121 (primitive_types -> TYPE_INT .)
    RPAREN          reduce using rule 121 (primitive_types -> TYPE_INT .)


state 17

    (122) primitive_types -> TYPE_SHORT .

    SEMICOLON       reduce using rule 122 (primitive_types -> TYPE_SHORT .)
    IDENTIFIER      reduce using rule 122 (primitive_types -> TYPE_SHORT .)
    TIMES           reduce using rule 122 (primitive_types -> TYPE_SHORT .)
    LPAREN          reduce using rule 122 (primitive_types -> TYPE_SHORT .)
    LBRACKET        reduce using rule 122 (primitive_types -> TYPE_SHORT .)
    COMMA           reduce using rule 122 (primitive_types -> TYPE_SHORT .)
    RPAREN          reduce using rule 122 (primitive_types -> TYPE_SHORT .)


state 18

    (123) primitive_types -> TYPE_LONG .

    SEMICOLON       reduce using rule 123 (primitive_types -> TYPE_LONG .)
    IDENTIFIER      reduce using rule 123 (primitive_types -> TYPE_LONG .)
    TIMES           reduce using rule 123 (primitive_types -> TYPE_LONG .)
    LPAREN          reduce using rule 123 (primitive_types -> TYPE_LONG .)
    LBRACKET        reduce using rule 123 (primitive_types -> TYPE_LONG .)
    COMMA           reduce using rule 123 (primitive_types -> TYPE_LONG .)
    RPAREN          reduce using rule 123 (primitive_types -> TYPE_LONG .)


state 19

    (124) primitive_types -> TYPE_FLOAT .

    SEMICOLON       reduce using rule 124 (primitive_types -> TYPE_FLOAT .)
    IDENTIFIER      reduce using rule 124 (primitive_types -> TYPE_FLOAT .)
    TIMES           reduce using rule 124 (primitive_types -> TYPE_FLOAT .)
    LPAREN          reduce using rule 124 (primitive_types -> TYPE_FLOAT .)
    LBRACKET        reduce using rule 124 (primitive_types -> TYPE_FLOAT .)
    COMMA           reduce using rule 124 (primitive_types -> TYPE_FLOAT .)
    RPAREN          reduce using rule 124 (primitive_types -> TYPE_FLOAT .)


state 20

    (125) primitive_types -> TYPE_DOUBLE .

    SEMICOLON       reduce using rule 125 (primitive_types -> TYPE_DOUBLE .)
    IDENTIFIER      reduce using rule 125 (primitive_types -> TYPE_DOUBLE .)
    TIMES           reduce using rule 125 (primitive_types -> TYPE_DOUBLE .)
    LPAREN          reduce using rule 125 (primitive_types -> TYPE_DOUBLE .)
    LBRACKET        reduce using rule 125 (primitive_types -> TYPE_DOUBLE .)
    COMMA           reduce using rule 125 (primitive_types -> TYPE_DOUBLE .)
    RPAREN          reduce using rule 125 (primitive_types -> TYPE_DOUBLE .)


state 21

    (126) primitive_types -> TYPE_VOID .

    SEMICOLON       reduce using rule 126 (primitive_types -> TYPE_VOID .)
    IDENTIFIER      reduce using rule 126 (primitive_types -> TYPE_VOID .)
    TIMES           reduce using rule 126 (primitive_types -> TYPE_VOID .)
    LPAREN          reduce using rule 126 (primitive_types -> TYPE_VOID .)
    LBRACKET        reduce using rule 126 (primitive_types -> TYPE_VOID .)
    COMMA           reduce using rule 126 (primitive_types -> TYPE_VOID .)
    RPAREN          reduce using rule 126 (primitive_types -> TYPE_VOID .)


state 22

    (110) type_modifier -> KEYWORD_STATIC .

    TYPE_CHAR       reduce using rule 110 (type_modifier -> KEYWORD_STATIC .)
    TYPE_INT        reduce using rule 110 (type_modifier -> KEYWORD_STATIC .)
    TYPE_SHORT      reduce using rule 110 (type_modifier -> KEYWORD_STATIC .)
    TYPE_LONG       reduce using rule 110 (type_modifier -> KEYWORD_STATIC .)
    TYPE_FLOAT      reduce using rule 110 (type_modifier -> KEYWORD_STATIC .)
    TYPE_DOUBLE     reduce using rule 110 (type_modifier -> KEYWORD_STATIC .)
    TYPE_VOID       reduce using rule 110 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_STATIC  reduce using rule 110 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_UNSIGNED reduce using rule 110 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_VOLATILE reduce using rule 110 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_EXTERN  reduce using rule 110 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_SIGNED  reduce using rule 110 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_REGISTER reduce using rule 110 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_CONST   reduce using rule 110 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_STRUCT  reduce using rule 110 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_UNION   reduce using rule 110 (type_modifier -> KEYWORD_STATIC .)
    KEYWORD_ENUM    reduce using rule 110 (type_modifier -> KEYWORD_STATIC .)


state 23

    (111) type_modifier -> KEYWORD_UNSIGNED .

    TYPE_CHAR       reduce using rule 111 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_INT        reduce using rule 111 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_SHORT      reduce using rule 111 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_LONG       reduce using rule 111 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_FLOAT      reduce using rule 111 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_DOUBLE     reduce using rule 111 (type_modifier -> KEYWORD_UNSIGNED .)
    TYPE_VOID       reduce using rule 111 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_STATIC  reduce using rule 111 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_UNSIGNED reduce using rule 111 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_VOLATILE reduce using rule 111 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_EXTERN  reduce using rule 111 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_SIGNED  reduce using rule 111 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_REGISTER reduce using rule 111 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_CONST   reduce using rule 111 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_STRUCT  reduce using rule 111 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_UNION   reduce using rule 111 (type_modifier -> KEYWORD_UNSIGNED .)
    KEYWORD_ENUM    reduce using rule 111 (type_modifier -> KEYWORD_UNSIGNED .)


state 24

    (112) type_modifier -> KEYWORD_VOLATILE .

    TYPE_CHAR       reduce using rule 112 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_INT        reduce using rule 112 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_SHORT      reduce using rule 112 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_LONG       reduce using rule 112 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_FLOAT      reduce using rule 112 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_DOUBLE     reduce using rule 112 (type_modifier -> KEYWORD_VOLATILE .)
    TYPE_VOID       reduce using rule 112 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_STATIC  reduce using rule 112 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_UNSIGNED reduce using rule 112 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_VOLATILE reduce using rule 112 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_EXTERN  reduce using rule 112 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_SIGNED  reduce using rule 112 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_REGISTER reduce using rule 112 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_CONST   reduce using rule 112 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_STRUCT  reduce using rule 112 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_UNION   reduce using rule 112 (type_modifier -> KEYWORD_VOLATILE .)
    KEYWORD_ENUM    reduce using rule 112 (type_modifier -> KEYWORD_VOLATILE .)


state 25

    (113) type_modifier -> KEYWORD_EXTERN .

    TYPE_CHAR       reduce using rule 113 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_INT        reduce using rule 113 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_SHORT      reduce using rule 113 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_LONG       reduce using rule 113 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_FLOAT      reduce using rule 113 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_DOUBLE     reduce using rule 113 (type_modifier -> KEYWORD_EXTERN .)
    TYPE_VOID       reduce using rule 113 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_STATIC  reduce using rule 113 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_UNSIGNED reduce using rule 113 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_VOLATILE reduce using rule 113 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_EXTERN  reduce using rule 113 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_SIGNED  reduce using rule 113 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_REGISTER reduce using rule 113 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_CONST   reduce using rule 113 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_STRUCT  reduce using rule 113 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_UNION   reduce using rule 113 (type_modifier -> KEYWORD_EXTERN .)
    KEYWORD_ENUM    reduce using rule 113 (type_modifier -> KEYWORD_EXTERN .)


state 26

    (114) type_modifier -> KEYWORD_SIGNED .

    TYPE_CHAR       reduce using rule 114 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_INT        reduce using rule 114 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_SHORT      reduce using rule 114 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_LONG       reduce using rule 114 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_FLOAT      reduce using rule 114 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_DOUBLE     reduce using rule 114 (type_modifier -> KEYWORD_SIGNED .)
    TYPE_VOID       reduce using rule 114 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_STATIC  reduce using rule 114 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_UNSIGNED reduce using rule 114 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_VOLATILE reduce using rule 114 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_EXTERN  reduce using rule 114 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_SIGNED  reduce using rule 114 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_REGISTER reduce using rule 114 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_CONST   reduce using rule 114 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_STRUCT  reduce using rule 114 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_UNION   reduce using rule 114 (type_modifier -> KEYWORD_SIGNED .)
    KEYWORD_ENUM    reduce using rule 114 (type_modifier -> KEYWORD_SIGNED .)


state 27

    (115) type_modifier -> KEYWORD_REGISTER .

    TYPE_CHAR       reduce using rule 115 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_INT        reduce using rule 115 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_SHORT      reduce using rule 115 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_LONG       reduce using rule 115 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_FLOAT      reduce using rule 115 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_DOUBLE     reduce using rule 115 (type_modifier -> KEYWORD_REGISTER .)
    TYPE_VOID       reduce using rule 115 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_STATIC  reduce using rule 115 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_UNSIGNED reduce using rule 115 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_VOLATILE reduce using rule 115 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_EXTERN  reduce using rule 115 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_SIGNED  reduce using rule 115 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_REGISTER reduce using rule 115 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_CONST   reduce using rule 115 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_STRUCT  reduce using rule 115 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_UNION   reduce using rule 115 (type_modifier -> KEYWORD_REGISTER .)
    KEYWORD_ENUM    reduce using rule 115 (type_modifier -> KEYWORD_REGISTER .)


state 28

    (116) type_modifier -> KEYWORD_CONST .

    TYPE_CHAR       reduce using rule 116 (type_modifier -> KEYWORD_CONST .)
    TYPE_INT        reduce using rule 116 (type_modifier -> KEYWORD_CONST .)
    TYPE_SHORT      reduce using rule 116 (type_modifier -> KEYWORD_CONST .)
    TYPE_LONG       reduce using rule 116 (type_modifier -> KEYWORD_CONST .)
    TYPE_FLOAT      reduce using rule 116 (type_modifier -> KEYWORD_CONST .)
    TYPE_DOUBLE     reduce using rule 116 (type_modifier -> KEYWORD_CONST .)
    TYPE_VOID       reduce using rule 116 (type_modifier -> KEYWORD_CONST .)
    KEYWORD_STATIC  reduce using rule 116 (type_modifier -> KEYWORD_CONST .)
    KEYWORD_UNSIGNED reduce using rule 116 (type_modifier -> KEYWORD_CONST .)
    KEYWORD_VOLATILE reduce using rule 116 (type_modifier -> KEYWORD_CONST .)
    KEYWORD_EXTERN  reduce using rule 116 (type_modifier -> KEYWORD_CONST .)
    KEYWORD_SIGNED  reduce using rule 116 (type_modifier -> KEYWORD_CONST .)
    KEYWORD_REGISTER reduce using rule 116 (type_modifier -> KEYWORD_CONST .)
    KEYWORD_CONST   reduce using rule 116 (type_modifier -> KEYWORD_CONST .)
    KEYWORD_STRUCT  reduce using rule 116 (type_modifier -> KEYWORD_CONST .)
    KEYWORD_UNION   reduce using rule 116 (type_modifier -> KEYWORD_CONST .)
    KEYWORD_ENUM    reduce using rule 116 (type_modifier -> KEYWORD_CONST .)


state 29

    (127) struct_declaration -> KEYWORD_STRUCT . IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> KEYWORD_STRUCT . IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> KEYWORD_STRUCT . LBRACE RBRACE
    (130) struct_declaration -> KEYWORD_STRUCT . LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> KEYWORD_STRUCT . IDENTIFIER

    IDENTIFIER      shift and go to state 47
    LBRACE          shift and go to state 48


state 30

    (132) union_declaration -> KEYWORD_UNION . IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> KEYWORD_UNION . IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> KEYWORD_UNION . LBRACE RBRACE
    (135) union_declaration -> KEYWORD_UNION . LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> KEYWORD_UNION . IDENTIFIER

    IDENTIFIER      shift and go to state 49
    LBRACE          shift and go to state 50


state 31

    (137) enum_declaration -> KEYWORD_ENUM . LBRACE enum_item_list RBRACE
    (138) enum_declaration -> KEYWORD_ENUM . IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> KEYWORD_ENUM . IDENTIFIER

    LBRACE          shift and go to state 51
    IDENTIFIER      shift and go to state 52


state 32

    (2) program -> program_item program .

    $end            reduce using rule 2 (program -> program_item program .)


state 33

    (3) program_item -> variable_declaration_list SEMICOLON .

    IDENTIFIER      reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    TYPE_CHAR       reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    TYPE_INT        reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    TYPE_SHORT      reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    TYPE_LONG       reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    TYPE_FLOAT      reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    TYPE_VOID       reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    KEYWORD_CONST   reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    KEYWORD_UNION   reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    KEYWORD_ENUM    reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)
    $end            reduce using rule 3 (program_item -> variable_declaration_list SEMICOLON .)


state 34

    (5) program_item -> global_assign_identifier_list SEMICOLON .

    IDENTIFIER      reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    TYPE_CHAR       reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    TYPE_INT        reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    TYPE_SHORT      reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    TYPE_LONG       reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    TYPE_FLOAT      reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    TYPE_VOID       reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    KEYWORD_CONST   reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    KEYWORD_UNION   reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    KEYWORD_ENUM    reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)
    $end            reduce using rule 5 (program_item -> global_assign_identifier_list SEMICOLON .)


state 35

    (6) program_item -> type SEMICOLON .

    IDENTIFIER      reduce using rule 6 (program_item -> type SEMICOLON .)
    TYPE_CHAR       reduce using rule 6 (program_item -> type SEMICOLON .)
    TYPE_INT        reduce using rule 6 (program_item -> type SEMICOLON .)
    TYPE_SHORT      reduce using rule 6 (program_item -> type SEMICOLON .)
    TYPE_LONG       reduce using rule 6 (program_item -> type SEMICOLON .)
    TYPE_FLOAT      reduce using rule 6 (program_item -> type SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 6 (program_item -> type SEMICOLON .)
    TYPE_VOID       reduce using rule 6 (program_item -> type SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 6 (program_item -> type SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 6 (program_item -> type SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 6 (program_item -> type SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 6 (program_item -> type SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 6 (program_item -> type SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 6 (program_item -> type SEMICOLON .)
    KEYWORD_CONST   reduce using rule 6 (program_item -> type SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 6 (program_item -> type SEMICOLON .)
    KEYWORD_UNION   reduce using rule 6 (program_item -> type SEMICOLON .)
    KEYWORD_ENUM    reduce using rule 6 (program_item -> type SEMICOLON .)
    $end            reduce using rule 6 (program_item -> type SEMICOLON .)


state 36

    (81) variable_declaration_list -> type identifier_list .

    SEMICOLON       reduce using rule 81 (variable_declaration_list -> type identifier_list .)


state 37

    (57) function_signature -> type identifier . LPAREN signature_param_list RPAREN
    (58) function_signature -> type identifier . LPAREN RPAREN
    (82) identifier_list -> identifier .
    (83) identifier_list -> identifier . COMMA identifier_list
    (84) identifier_list -> identifier . multiple_bracket_signature
    (85) identifier_list -> identifier . multiple_bracket_signature COMMA identifier_list
    (86) identifier_list -> identifier . ASSIGN expression
    (87) identifier_list -> identifier . ASSIGN expression COMMA identifier_list
    (88) identifier_list -> identifier . multiple_bracket_signature ASSIGN value_list
    (89) identifier_list -> identifier . multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (90) identifier_list -> identifier . ASSIGN value_list
    (91) identifier_list -> identifier . ASSIGN value_list COMMA identifier_list
    (100) function_pointer -> identifier . LPAREN signature_param_list RPAREN
    (101) function_pointer -> identifier . LPAREN RPAREN
    (68) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_signature
    (69) multiple_bracket_signature -> . LBRACKET RBRACKET
    (70) multiple_bracket_signature -> . bracket_with_bounds multiple_bracket_signature
    (71) multiple_bracket_signature -> . bracket_with_bounds
    (72) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    LPAREN          shift and go to state 53
    SEMICOLON       reduce using rule 82 (identifier_list -> identifier .)
    COMMA           shift and go to state 54
    ASSIGN          shift and go to state 56
    LBRACKET        shift and go to state 57

    multiple_bracket_signature     shift and go to state 55
    bracket_with_bounds            shift and go to state 58

state 38

    (106) identifier -> LPAREN . identifier RPAREN
    (102) function_pointer_array -> LPAREN . TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN
    (103) function_pointer_array -> LPAREN . TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN

    TIMES           shift and go to state 61
    IDENTIFIER      shift and go to state 41
    LPAREN          shift and go to state 59

    identifier                     shift and go to state 60

state 39

    (92) identifier_list -> function_pointer .
    (93) identifier_list -> function_pointer . COMMA identifier_list
    (94) identifier_list -> function_pointer . ASSIGN expression
    (95) identifier_list -> function_pointer . ASSIGN expression COMMA identifier_list

    SEMICOLON       reduce using rule 92 (identifier_list -> function_pointer .)
    COMMA           shift and go to state 62
    ASSIGN          shift and go to state 63


state 40

    (96) identifier_list -> function_pointer_array .
    (97) identifier_list -> function_pointer_array . COMMA identifier_list
    (98) identifier_list -> function_pointer_array . ASSIGN value_list
    (99) identifier_list -> function_pointer_array . ASSIGN value_list COMMA identifier_list

    SEMICOLON       reduce using rule 96 (identifier_list -> function_pointer_array .)
    COMMA           shift and go to state 64
    ASSIGN          shift and go to state 65


state 41

    (104) identifier -> IDENTIFIER .

    LPAREN          reduce using rule 104 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 104 (identifier -> IDENTIFIER .)
    ASSIGN          reduce using rule 104 (identifier -> IDENTIFIER .)
    LBRACKET        reduce using rule 104 (identifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 104 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 104 (identifier -> IDENTIFIER .)


state 42

    (105) identifier -> TIMES . identifier
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN

    IDENTIFIER      shift and go to state 41
    TIMES           shift and go to state 42
    LPAREN          shift and go to state 59

    identifier                     shift and go to state 66

state 43

    (56) function -> function_signature block .

    IDENTIFIER      reduce using rule 56 (function -> function_signature block .)
    TYPE_CHAR       reduce using rule 56 (function -> function_signature block .)
    TYPE_INT        reduce using rule 56 (function -> function_signature block .)
    TYPE_SHORT      reduce using rule 56 (function -> function_signature block .)
    TYPE_LONG       reduce using rule 56 (function -> function_signature block .)
    TYPE_FLOAT      reduce using rule 56 (function -> function_signature block .)
    TYPE_DOUBLE     reduce using rule 56 (function -> function_signature block .)
    TYPE_VOID       reduce using rule 56 (function -> function_signature block .)
    KEYWORD_STATIC  reduce using rule 56 (function -> function_signature block .)
    KEYWORD_UNSIGNED reduce using rule 56 (function -> function_signature block .)
    KEYWORD_VOLATILE reduce using rule 56 (function -> function_signature block .)
    KEYWORD_EXTERN  reduce using rule 56 (function -> function_signature block .)
    KEYWORD_SIGNED  reduce using rule 56 (function -> function_signature block .)
    KEYWORD_REGISTER reduce using rule 56 (function -> function_signature block .)
    KEYWORD_CONST   reduce using rule 56 (function -> function_signature block .)
    KEYWORD_STRUCT  reduce using rule 56 (function -> function_signature block .)
    KEYWORD_UNION   reduce using rule 56 (function -> function_signature block .)
    KEYWORD_ENUM    reduce using rule 56 (function -> function_signature block .)
    $end            reduce using rule 56 (function -> function_signature block .)


state 44

    (9) block -> LBRACE . RBRACE
    (10) block -> LBRACE . block_statements RBRACE
    (11) block_statements -> . block_statement
    (12) block_statements -> . block_statements block_statement
    (13) block_statement -> . statement
    (14) statement -> . statement_without_trailing_substatement
    (15) statement -> . if_then_statement
    (16) statement -> . if_then_else_statement
    (17) statement -> . while_statement
    (18) statement -> . for_statement
    (19) statement_without_trailing_substatement -> . block
    (20) statement_without_trailing_substatement -> . SEMICOLON
    (21) statement_without_trailing_substatement -> . expression_list SEMICOLON
    (22) statement_without_trailing_substatement -> . switch_stm
    (23) statement_without_trailing_substatement -> . do_statement
    (24) statement_without_trailing_substatement -> . KEYWORD_BREAK SEMICOLON
    (25) statement_without_trailing_substatement -> . KEYWORD_CONTINUE SEMICOLON
    (26) statement_without_trailing_substatement -> . return_stm SEMICOLON
    (27) statement_without_trailing_substatement -> . IDENTIFIER COLON
    (28) statement_without_trailing_substatement -> . KEYWORD_GOTO IDENTIFIER SEMICOLON
    (29) statement_without_trailing_substatement -> . variable_declaration_list SEMICOLON
    (30) statement_without_trailing_substatement -> . type SEMICOLON
    (35) if_then_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (36) if_then_else_statement -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (38) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (47) for_statement -> . KEYWORD_FOR LPAREN for_params RPAREN statement
    (9) block -> . LBRACE RBRACE
    (10) block -> . LBRACE block_statements RBRACE
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (49) switch_stm -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE
    (40) do_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (54) return_stm -> . KEYWORD_RETURN
    (55) return_stm -> . KEYWORD_RETURN expression
    (81) variable_declaration_list -> . type identifier_list
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (157) expression -> . assign_exp
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    RBRACE          shift and go to state 67
    SEMICOLON       shift and go to state 77
    KEYWORD_BREAK   shift and go to state 81
    KEYWORD_CONTINUE shift and go to state 82
    IDENTIFIER      shift and go to state 84
    KEYWORD_GOTO    shift and go to state 85
    KEYWORD_IF      shift and go to state 88
    KEYWORD_WHILE   shift and go to state 91
    KEYWORD_FOR     shift and go to state 92
    LBRACE          shift and go to state 44
    KEYWORD_SWITCH  shift and go to state 93
    KEYWORD_DO      shift and go to state 94
    KEYWORD_RETURN  shift and go to state 95
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    block_statements               shift and go to state 68
    block_statement                shift and go to state 69
    statement                      shift and go to state 70
    statement_without_trailing_substatement shift and go to state 71
    if_then_statement              shift and go to state 72
    if_then_else_statement         shift and go to state 73
    while_statement                shift and go to state 74
    for_statement                  shift and go to state 75
    block                          shift and go to state 76
    expression_list                shift and go to state 78
    switch_stm                     shift and go to state 79
    do_statement                   shift and go to state 80
    return_stm                     shift and go to state 83
    variable_declaration_list      shift and go to state 86
    type                           shift and go to state 87
    expression                     shift and go to state 90
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    assign_exp                     shift and go to state 96
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 45

    (7) global_assign_identifier_list -> IDENTIFIER ASSIGN . expression
    (8) global_assign_identifier_list -> IDENTIFIER ASSIGN . expression COMMA global_assign_identifier_list
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 145
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 46

    (109) type -> type_modifier type .

    SEMICOLON       reduce using rule 109 (type -> type_modifier type .)
    IDENTIFIER      reduce using rule 109 (type -> type_modifier type .)
    TIMES           reduce using rule 109 (type -> type_modifier type .)
    LPAREN          reduce using rule 109 (type -> type_modifier type .)
    LBRACKET        reduce using rule 109 (type -> type_modifier type .)
    COMMA           reduce using rule 109 (type -> type_modifier type .)
    RPAREN          reduce using rule 109 (type -> type_modifier type .)


state 47

    (127) struct_declaration -> KEYWORD_STRUCT IDENTIFIER . LBRACE RBRACE
    (128) struct_declaration -> KEYWORD_STRUCT IDENTIFIER . LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> KEYWORD_STRUCT IDENTIFIER .

    LBRACE          shift and go to state 146
    SEMICOLON       reduce using rule 131 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER .)
    IDENTIFIER      reduce using rule 131 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER .)
    TIMES           reduce using rule 131 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER .)
    LPAREN          reduce using rule 131 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER .)
    LBRACKET        reduce using rule 131 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER .)
    COMMA           reduce using rule 131 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER .)
    RPAREN          reduce using rule 131 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER .)


state 48

    (129) struct_declaration -> KEYWORD_STRUCT LBRACE . RBRACE
    (130) struct_declaration -> KEYWORD_STRUCT LBRACE . struct_or_union_member_list RBRACE
    (140) struct_or_union_member_list -> . variable_declaration_list_no_assign SEMICOLON
    (141) struct_or_union_member_list -> . variable_declaration_list_no_assign SEMICOLON struct_or_union_member_list
    (142) variable_declaration_list_no_assign -> . type variable_list_no_assign
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER

    RBRACE          shift and go to state 147
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31

    struct_or_union_member_list    shift and go to state 148
    variable_declaration_list_no_assign shift and go to state 149
    type                           shift and go to state 150
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14

state 49

    (132) union_declaration -> KEYWORD_UNION IDENTIFIER . LBRACE RBRACE
    (133) union_declaration -> KEYWORD_UNION IDENTIFIER . LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> KEYWORD_UNION IDENTIFIER .

    LBRACE          shift and go to state 151
    SEMICOLON       reduce using rule 136 (union_declaration -> KEYWORD_UNION IDENTIFIER .)
    IDENTIFIER      reduce using rule 136 (union_declaration -> KEYWORD_UNION IDENTIFIER .)
    TIMES           reduce using rule 136 (union_declaration -> KEYWORD_UNION IDENTIFIER .)
    LPAREN          reduce using rule 136 (union_declaration -> KEYWORD_UNION IDENTIFIER .)
    LBRACKET        reduce using rule 136 (union_declaration -> KEYWORD_UNION IDENTIFIER .)
    COMMA           reduce using rule 136 (union_declaration -> KEYWORD_UNION IDENTIFIER .)
    RPAREN          reduce using rule 136 (union_declaration -> KEYWORD_UNION IDENTIFIER .)


state 50

    (134) union_declaration -> KEYWORD_UNION LBRACE . RBRACE
    (135) union_declaration -> KEYWORD_UNION LBRACE . struct_or_union_member_list RBRACE
    (140) struct_or_union_member_list -> . variable_declaration_list_no_assign SEMICOLON
    (141) struct_or_union_member_list -> . variable_declaration_list_no_assign SEMICOLON struct_or_union_member_list
    (142) variable_declaration_list_no_assign -> . type variable_list_no_assign
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER

    RBRACE          shift and go to state 152
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31

    struct_or_union_member_list    shift and go to state 153
    variable_declaration_list_no_assign shift and go to state 149
    type                           shift and go to state 150
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14

state 51

    (137) enum_declaration -> KEYWORD_ENUM LBRACE . enum_item_list RBRACE
    (145) enum_item_list -> . IDENTIFIER
    (146) enum_item_list -> . IDENTIFIER COMMA enum_item_list
    (147) enum_item_list -> . IDENTIFIER ASSIGN expression
    (148) enum_item_list -> . IDENTIFIER ASSIGN expression COMMA enum_item_list

    IDENTIFIER      shift and go to state 155

    enum_item_list                 shift and go to state 154

state 52

    (138) enum_declaration -> KEYWORD_ENUM IDENTIFIER . LBRACE enum_item_list RBRACE
    (139) enum_declaration -> KEYWORD_ENUM IDENTIFIER .

    LBRACE          shift and go to state 156
    SEMICOLON       reduce using rule 139 (enum_declaration -> KEYWORD_ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 139 (enum_declaration -> KEYWORD_ENUM IDENTIFIER .)
    TIMES           reduce using rule 139 (enum_declaration -> KEYWORD_ENUM IDENTIFIER .)
    LPAREN          reduce using rule 139 (enum_declaration -> KEYWORD_ENUM IDENTIFIER .)
    LBRACKET        reduce using rule 139 (enum_declaration -> KEYWORD_ENUM IDENTIFIER .)
    COMMA           reduce using rule 139 (enum_declaration -> KEYWORD_ENUM IDENTIFIER .)
    RPAREN          reduce using rule 139 (enum_declaration -> KEYWORD_ENUM IDENTIFIER .)


state 53

    (57) function_signature -> type identifier LPAREN . signature_param_list RPAREN
    (58) function_signature -> type identifier LPAREN . RPAREN
    (100) function_pointer -> identifier LPAREN . signature_param_list RPAREN
    (101) function_pointer -> identifier LPAREN . RPAREN
    (60) signature_param_list -> . signature_param COMMA signature_param_list
    (61) signature_param_list -> . signature_param
    (62) signature_param -> . type
    (63) signature_param -> . type multiple_times
    (64) signature_param -> . type multiple_bracket_signature
    (65) signature_param -> . type identifier
    (66) signature_param -> . type identifier multiple_bracket_signature
    (67) signature_param -> . triple_dot
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (59) triple_dot -> . DOT DOT DOT
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER

    RPAREN          shift and go to state 159
    DOT             shift and go to state 162
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31

    type                           shift and go to state 157
    signature_param_list           shift and go to state 158
    signature_param                shift and go to state 160
    triple_dot                     shift and go to state 161
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14

state 54

    (83) identifier_list -> identifier COMMA . identifier_list
    (82) identifier_list -> . identifier
    (83) identifier_list -> . identifier COMMA identifier_list
    (84) identifier_list -> . identifier multiple_bracket_signature
    (85) identifier_list -> . identifier multiple_bracket_signature COMMA identifier_list
    (86) identifier_list -> . identifier ASSIGN expression
    (87) identifier_list -> . identifier ASSIGN expression COMMA identifier_list
    (88) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list
    (89) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (90) identifier_list -> . identifier ASSIGN value_list
    (91) identifier_list -> . identifier ASSIGN value_list COMMA identifier_list
    (92) identifier_list -> . function_pointer
    (93) identifier_list -> . function_pointer COMMA identifier_list
    (94) identifier_list -> . function_pointer ASSIGN expression
    (95) identifier_list -> . function_pointer ASSIGN expression COMMA identifier_list
    (96) identifier_list -> . function_pointer_array
    (97) identifier_list -> . function_pointer_array COMMA identifier_list
    (98) identifier_list -> . function_pointer_array ASSIGN value_list
    (99) identifier_list -> . function_pointer_array ASSIGN value_list COMMA identifier_list
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN
    (100) function_pointer -> . identifier LPAREN signature_param_list RPAREN
    (101) function_pointer -> . identifier LPAREN RPAREN
    (102) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN
    (103) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN

    IDENTIFIER      shift and go to state 41
    TIMES           shift and go to state 42
    LPAREN          shift and go to state 38

    identifier                     shift and go to state 163
    identifier_list                shift and go to state 164
    function_pointer               shift and go to state 39
    function_pointer_array         shift and go to state 40

state 55

    (84) identifier_list -> identifier multiple_bracket_signature .
    (85) identifier_list -> identifier multiple_bracket_signature . COMMA identifier_list
    (88) identifier_list -> identifier multiple_bracket_signature . ASSIGN value_list
    (89) identifier_list -> identifier multiple_bracket_signature . ASSIGN value_list COMMA identifier_list

    SEMICOLON       reduce using rule 84 (identifier_list -> identifier multiple_bracket_signature .)
    COMMA           shift and go to state 165
    ASSIGN          shift and go to state 166


state 56

    (86) identifier_list -> identifier ASSIGN . expression
    (87) identifier_list -> identifier ASSIGN . expression COMMA identifier_list
    (90) identifier_list -> identifier ASSIGN . value_list
    (91) identifier_list -> identifier ASSIGN . value_list COMMA identifier_list
    (157) expression -> . assign_exp
    (75) value_list -> . LBRACE value_list_item RBRACE
    (76) value_list -> . LBRACE RBRACE
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    LBRACE          shift and go to state 169
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 167
    value_list                     shift and go to state 168
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 57

    (68) multiple_bracket_signature -> LBRACKET . RBRACKET multiple_bracket_signature
    (69) multiple_bracket_signature -> LBRACKET . RBRACKET
    (72) bracket_with_bounds -> LBRACKET . number_id RBRACKET
    (73) number_id -> . IDENTIFIER
    (74) number_id -> . integer_number
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER

    RBRACKET        shift and go to state 170
    IDENTIFIER      shift and go to state 172
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    number_id                      shift and go to state 171
    integer_number                 shift and go to state 173

state 58

    (70) multiple_bracket_signature -> bracket_with_bounds . multiple_bracket_signature
    (71) multiple_bracket_signature -> bracket_with_bounds .
    (68) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_signature
    (69) multiple_bracket_signature -> . LBRACKET RBRACKET
    (70) multiple_bracket_signature -> . bracket_with_bounds multiple_bracket_signature
    (71) multiple_bracket_signature -> . bracket_with_bounds
    (72) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    COMMA           reduce using rule 71 (multiple_bracket_signature -> bracket_with_bounds .)
    ASSIGN          reduce using rule 71 (multiple_bracket_signature -> bracket_with_bounds .)
    SEMICOLON       reduce using rule 71 (multiple_bracket_signature -> bracket_with_bounds .)
    RPAREN          reduce using rule 71 (multiple_bracket_signature -> bracket_with_bounds .)
    LBRACKET        shift and go to state 57

    bracket_with_bounds            shift and go to state 58
    multiple_bracket_signature     shift and go to state 174

state 59

    (106) identifier -> LPAREN . identifier RPAREN
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN

    IDENTIFIER      shift and go to state 41
    TIMES           shift and go to state 42
    LPAREN          shift and go to state 59

    identifier                     shift and go to state 60

state 60

    (106) identifier -> LPAREN identifier . RPAREN

    RPAREN          shift and go to state 175


state 61

    (102) function_pointer_array -> LPAREN TIMES . identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN
    (103) function_pointer_array -> LPAREN TIMES . identifier multiple_bracket_signature RPAREN LPAREN RPAREN
    (105) identifier -> TIMES . identifier
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN

    IDENTIFIER      shift and go to state 41
    TIMES           shift and go to state 42
    LPAREN          shift and go to state 59

    identifier                     shift and go to state 176

state 62

    (93) identifier_list -> function_pointer COMMA . identifier_list
    (82) identifier_list -> . identifier
    (83) identifier_list -> . identifier COMMA identifier_list
    (84) identifier_list -> . identifier multiple_bracket_signature
    (85) identifier_list -> . identifier multiple_bracket_signature COMMA identifier_list
    (86) identifier_list -> . identifier ASSIGN expression
    (87) identifier_list -> . identifier ASSIGN expression COMMA identifier_list
    (88) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list
    (89) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (90) identifier_list -> . identifier ASSIGN value_list
    (91) identifier_list -> . identifier ASSIGN value_list COMMA identifier_list
    (92) identifier_list -> . function_pointer
    (93) identifier_list -> . function_pointer COMMA identifier_list
    (94) identifier_list -> . function_pointer ASSIGN expression
    (95) identifier_list -> . function_pointer ASSIGN expression COMMA identifier_list
    (96) identifier_list -> . function_pointer_array
    (97) identifier_list -> . function_pointer_array COMMA identifier_list
    (98) identifier_list -> . function_pointer_array ASSIGN value_list
    (99) identifier_list -> . function_pointer_array ASSIGN value_list COMMA identifier_list
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN
    (100) function_pointer -> . identifier LPAREN signature_param_list RPAREN
    (101) function_pointer -> . identifier LPAREN RPAREN
    (102) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN
    (103) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN

    IDENTIFIER      shift and go to state 41
    TIMES           shift and go to state 42
    LPAREN          shift and go to state 38

    function_pointer               shift and go to state 39
    identifier_list                shift and go to state 177
    identifier                     shift and go to state 163
    function_pointer_array         shift and go to state 40

state 63

    (94) identifier_list -> function_pointer ASSIGN . expression
    (95) identifier_list -> function_pointer ASSIGN . expression COMMA identifier_list
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 178
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 64

    (97) identifier_list -> function_pointer_array COMMA . identifier_list
    (82) identifier_list -> . identifier
    (83) identifier_list -> . identifier COMMA identifier_list
    (84) identifier_list -> . identifier multiple_bracket_signature
    (85) identifier_list -> . identifier multiple_bracket_signature COMMA identifier_list
    (86) identifier_list -> . identifier ASSIGN expression
    (87) identifier_list -> . identifier ASSIGN expression COMMA identifier_list
    (88) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list
    (89) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (90) identifier_list -> . identifier ASSIGN value_list
    (91) identifier_list -> . identifier ASSIGN value_list COMMA identifier_list
    (92) identifier_list -> . function_pointer
    (93) identifier_list -> . function_pointer COMMA identifier_list
    (94) identifier_list -> . function_pointer ASSIGN expression
    (95) identifier_list -> . function_pointer ASSIGN expression COMMA identifier_list
    (96) identifier_list -> . function_pointer_array
    (97) identifier_list -> . function_pointer_array COMMA identifier_list
    (98) identifier_list -> . function_pointer_array ASSIGN value_list
    (99) identifier_list -> . function_pointer_array ASSIGN value_list COMMA identifier_list
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN
    (100) function_pointer -> . identifier LPAREN signature_param_list RPAREN
    (101) function_pointer -> . identifier LPAREN RPAREN
    (102) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN
    (103) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN

    IDENTIFIER      shift and go to state 41
    TIMES           shift and go to state 42
    LPAREN          shift and go to state 38

    function_pointer_array         shift and go to state 40
    identifier_list                shift and go to state 179
    identifier                     shift and go to state 163
    function_pointer               shift and go to state 39

state 65

    (98) identifier_list -> function_pointer_array ASSIGN . value_list
    (99) identifier_list -> function_pointer_array ASSIGN . value_list COMMA identifier_list
    (75) value_list -> . LBRACE value_list_item RBRACE
    (76) value_list -> . LBRACE RBRACE

    LBRACE          shift and go to state 169

    value_list                     shift and go to state 180

state 66

    (105) identifier -> TIMES identifier .

    LPAREN          reduce using rule 105 (identifier -> TIMES identifier .)
    COMMA           reduce using rule 105 (identifier -> TIMES identifier .)
    ASSIGN          reduce using rule 105 (identifier -> TIMES identifier .)
    LBRACKET        reduce using rule 105 (identifier -> TIMES identifier .)
    SEMICOLON       reduce using rule 105 (identifier -> TIMES identifier .)
    RPAREN          reduce using rule 105 (identifier -> TIMES identifier .)


state 67

    (9) block -> LBRACE RBRACE .

    IDENTIFIER      reduce using rule 9 (block -> LBRACE RBRACE .)
    TYPE_CHAR       reduce using rule 9 (block -> LBRACE RBRACE .)
    TYPE_INT        reduce using rule 9 (block -> LBRACE RBRACE .)
    TYPE_SHORT      reduce using rule 9 (block -> LBRACE RBRACE .)
    TYPE_LONG       reduce using rule 9 (block -> LBRACE RBRACE .)
    TYPE_FLOAT      reduce using rule 9 (block -> LBRACE RBRACE .)
    TYPE_DOUBLE     reduce using rule 9 (block -> LBRACE RBRACE .)
    TYPE_VOID       reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_STATIC  reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_UNSIGNED reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_VOLATILE reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_EXTERN  reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_SIGNED  reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_REGISTER reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_CONST   reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_STRUCT  reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_UNION   reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_ENUM    reduce using rule 9 (block -> LBRACE RBRACE .)
    $end            reduce using rule 9 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 9 (block -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_BREAK   reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_CONTINUE reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_GOTO    reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_IF      reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_WHILE   reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_FOR     reduce using rule 9 (block -> LBRACE RBRACE .)
    LBRACE          reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_SWITCH  reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_DO      reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_RETURN  reduce using rule 9 (block -> LBRACE RBRACE .)
    INCREMENT       reduce using rule 9 (block -> LBRACE RBRACE .)
    DECREMENT       reduce using rule 9 (block -> LBRACE RBRACE .)
    LPAREN          reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_SIZEOF  reduce using rule 9 (block -> LBRACE RBRACE .)
    BITWISE_AND     reduce using rule 9 (block -> LBRACE RBRACE .)
    TIMES           reduce using rule 9 (block -> LBRACE RBRACE .)
    PLUS            reduce using rule 9 (block -> LBRACE RBRACE .)
    MINUS           reduce using rule 9 (block -> LBRACE RBRACE .)
    BITWISE_COMPLEMENT reduce using rule 9 (block -> LBRACE RBRACE .)
    NOT             reduce using rule 9 (block -> LBRACE RBRACE .)
    STRING          reduce using rule 9 (block -> LBRACE RBRACE .)
    FLOAT_NUMBER    reduce using rule 9 (block -> LBRACE RBRACE .)
    CHARACTER       reduce using rule 9 (block -> LBRACE RBRACE .)
    NUMBER          reduce using rule 9 (block -> LBRACE RBRACE .)
    BINARY_NUMBER   reduce using rule 9 (block -> LBRACE RBRACE .)
    HEXADECIMAL_NUMBER reduce using rule 9 (block -> LBRACE RBRACE .)
    OCTAL_NUMBER    reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_CASE    reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_DEFAULT reduce using rule 9 (block -> LBRACE RBRACE .)
    KEYWORD_ELSE    reduce using rule 9 (block -> LBRACE RBRACE .)


state 68

    (10) block -> LBRACE block_statements . RBRACE
    (12) block_statements -> block_statements . block_statement
    (13) block_statement -> . statement
    (14) statement -> . statement_without_trailing_substatement
    (15) statement -> . if_then_statement
    (16) statement -> . if_then_else_statement
    (17) statement -> . while_statement
    (18) statement -> . for_statement
    (19) statement_without_trailing_substatement -> . block
    (20) statement_without_trailing_substatement -> . SEMICOLON
    (21) statement_without_trailing_substatement -> . expression_list SEMICOLON
    (22) statement_without_trailing_substatement -> . switch_stm
    (23) statement_without_trailing_substatement -> . do_statement
    (24) statement_without_trailing_substatement -> . KEYWORD_BREAK SEMICOLON
    (25) statement_without_trailing_substatement -> . KEYWORD_CONTINUE SEMICOLON
    (26) statement_without_trailing_substatement -> . return_stm SEMICOLON
    (27) statement_without_trailing_substatement -> . IDENTIFIER COLON
    (28) statement_without_trailing_substatement -> . KEYWORD_GOTO IDENTIFIER SEMICOLON
    (29) statement_without_trailing_substatement -> . variable_declaration_list SEMICOLON
    (30) statement_without_trailing_substatement -> . type SEMICOLON
    (35) if_then_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (36) if_then_else_statement -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (38) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (47) for_statement -> . KEYWORD_FOR LPAREN for_params RPAREN statement
    (9) block -> . LBRACE RBRACE
    (10) block -> . LBRACE block_statements RBRACE
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (49) switch_stm -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE
    (40) do_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (54) return_stm -> . KEYWORD_RETURN
    (55) return_stm -> . KEYWORD_RETURN expression
    (81) variable_declaration_list -> . type identifier_list
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (157) expression -> . assign_exp
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    RBRACE          shift and go to state 181
    SEMICOLON       shift and go to state 77
    KEYWORD_BREAK   shift and go to state 81
    KEYWORD_CONTINUE shift and go to state 82
    IDENTIFIER      shift and go to state 84
    KEYWORD_GOTO    shift and go to state 85
    KEYWORD_IF      shift and go to state 88
    KEYWORD_WHILE   shift and go to state 91
    KEYWORD_FOR     shift and go to state 92
    LBRACE          shift and go to state 44
    KEYWORD_SWITCH  shift and go to state 93
    KEYWORD_DO      shift and go to state 94
    KEYWORD_RETURN  shift and go to state 95
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    block_statement                shift and go to state 182
    statement                      shift and go to state 70
    statement_without_trailing_substatement shift and go to state 71
    if_then_statement              shift and go to state 72
    if_then_else_statement         shift and go to state 73
    while_statement                shift and go to state 74
    for_statement                  shift and go to state 75
    block                          shift and go to state 76
    expression_list                shift and go to state 78
    switch_stm                     shift and go to state 79
    do_statement                   shift and go to state 80
    return_stm                     shift and go to state 83
    variable_declaration_list      shift and go to state 86
    type                           shift and go to state 87
    expression                     shift and go to state 90
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    assign_exp                     shift and go to state 96
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 69

    (11) block_statements -> block_statement .

    RBRACE          reduce using rule 11 (block_statements -> block_statement .)
    SEMICOLON       reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_BREAK   reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_CONTINUE reduce using rule 11 (block_statements -> block_statement .)
    IDENTIFIER      reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_GOTO    reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_IF      reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_WHILE   reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_FOR     reduce using rule 11 (block_statements -> block_statement .)
    LBRACE          reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_SWITCH  reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_DO      reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_RETURN  reduce using rule 11 (block_statements -> block_statement .)
    TYPE_CHAR       reduce using rule 11 (block_statements -> block_statement .)
    TYPE_INT        reduce using rule 11 (block_statements -> block_statement .)
    TYPE_SHORT      reduce using rule 11 (block_statements -> block_statement .)
    TYPE_LONG       reduce using rule 11 (block_statements -> block_statement .)
    TYPE_FLOAT      reduce using rule 11 (block_statements -> block_statement .)
    TYPE_DOUBLE     reduce using rule 11 (block_statements -> block_statement .)
    TYPE_VOID       reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_STATIC  reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_UNSIGNED reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_VOLATILE reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_EXTERN  reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_SIGNED  reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_REGISTER reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_CONST   reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_STRUCT  reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_UNION   reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_ENUM    reduce using rule 11 (block_statements -> block_statement .)
    INCREMENT       reduce using rule 11 (block_statements -> block_statement .)
    DECREMENT       reduce using rule 11 (block_statements -> block_statement .)
    LPAREN          reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_SIZEOF  reduce using rule 11 (block_statements -> block_statement .)
    BITWISE_AND     reduce using rule 11 (block_statements -> block_statement .)
    TIMES           reduce using rule 11 (block_statements -> block_statement .)
    PLUS            reduce using rule 11 (block_statements -> block_statement .)
    MINUS           reduce using rule 11 (block_statements -> block_statement .)
    BITWISE_COMPLEMENT reduce using rule 11 (block_statements -> block_statement .)
    NOT             reduce using rule 11 (block_statements -> block_statement .)
    STRING          reduce using rule 11 (block_statements -> block_statement .)
    FLOAT_NUMBER    reduce using rule 11 (block_statements -> block_statement .)
    CHARACTER       reduce using rule 11 (block_statements -> block_statement .)
    NUMBER          reduce using rule 11 (block_statements -> block_statement .)
    BINARY_NUMBER   reduce using rule 11 (block_statements -> block_statement .)
    HEXADECIMAL_NUMBER reduce using rule 11 (block_statements -> block_statement .)
    OCTAL_NUMBER    reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_CASE    reduce using rule 11 (block_statements -> block_statement .)
    KEYWORD_DEFAULT reduce using rule 11 (block_statements -> block_statement .)


state 70

    (13) block_statement -> statement .

    RBRACE          reduce using rule 13 (block_statement -> statement .)
    SEMICOLON       reduce using rule 13 (block_statement -> statement .)
    KEYWORD_BREAK   reduce using rule 13 (block_statement -> statement .)
    KEYWORD_CONTINUE reduce using rule 13 (block_statement -> statement .)
    IDENTIFIER      reduce using rule 13 (block_statement -> statement .)
    KEYWORD_GOTO    reduce using rule 13 (block_statement -> statement .)
    KEYWORD_IF      reduce using rule 13 (block_statement -> statement .)
    KEYWORD_WHILE   reduce using rule 13 (block_statement -> statement .)
    KEYWORD_FOR     reduce using rule 13 (block_statement -> statement .)
    LBRACE          reduce using rule 13 (block_statement -> statement .)
    KEYWORD_SWITCH  reduce using rule 13 (block_statement -> statement .)
    KEYWORD_DO      reduce using rule 13 (block_statement -> statement .)
    KEYWORD_RETURN  reduce using rule 13 (block_statement -> statement .)
    TYPE_CHAR       reduce using rule 13 (block_statement -> statement .)
    TYPE_INT        reduce using rule 13 (block_statement -> statement .)
    TYPE_SHORT      reduce using rule 13 (block_statement -> statement .)
    TYPE_LONG       reduce using rule 13 (block_statement -> statement .)
    TYPE_FLOAT      reduce using rule 13 (block_statement -> statement .)
    TYPE_DOUBLE     reduce using rule 13 (block_statement -> statement .)
    TYPE_VOID       reduce using rule 13 (block_statement -> statement .)
    KEYWORD_STATIC  reduce using rule 13 (block_statement -> statement .)
    KEYWORD_UNSIGNED reduce using rule 13 (block_statement -> statement .)
    KEYWORD_VOLATILE reduce using rule 13 (block_statement -> statement .)
    KEYWORD_EXTERN  reduce using rule 13 (block_statement -> statement .)
    KEYWORD_SIGNED  reduce using rule 13 (block_statement -> statement .)
    KEYWORD_REGISTER reduce using rule 13 (block_statement -> statement .)
    KEYWORD_CONST   reduce using rule 13 (block_statement -> statement .)
    KEYWORD_STRUCT  reduce using rule 13 (block_statement -> statement .)
    KEYWORD_UNION   reduce using rule 13 (block_statement -> statement .)
    KEYWORD_ENUM    reduce using rule 13 (block_statement -> statement .)
    INCREMENT       reduce using rule 13 (block_statement -> statement .)
    DECREMENT       reduce using rule 13 (block_statement -> statement .)
    LPAREN          reduce using rule 13 (block_statement -> statement .)
    KEYWORD_SIZEOF  reduce using rule 13 (block_statement -> statement .)
    BITWISE_AND     reduce using rule 13 (block_statement -> statement .)
    TIMES           reduce using rule 13 (block_statement -> statement .)
    PLUS            reduce using rule 13 (block_statement -> statement .)
    MINUS           reduce using rule 13 (block_statement -> statement .)
    BITWISE_COMPLEMENT reduce using rule 13 (block_statement -> statement .)
    NOT             reduce using rule 13 (block_statement -> statement .)
    STRING          reduce using rule 13 (block_statement -> statement .)
    FLOAT_NUMBER    reduce using rule 13 (block_statement -> statement .)
    CHARACTER       reduce using rule 13 (block_statement -> statement .)
    NUMBER          reduce using rule 13 (block_statement -> statement .)
    BINARY_NUMBER   reduce using rule 13 (block_statement -> statement .)
    HEXADECIMAL_NUMBER reduce using rule 13 (block_statement -> statement .)
    OCTAL_NUMBER    reduce using rule 13 (block_statement -> statement .)
    KEYWORD_CASE    reduce using rule 13 (block_statement -> statement .)
    KEYWORD_DEFAULT reduce using rule 13 (block_statement -> statement .)


state 71

    (14) statement -> statement_without_trailing_substatement .

    RBRACE          reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    SEMICOLON       reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_BREAK   reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_CONTINUE reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    IDENTIFIER      reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_GOTO    reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_IF      reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_WHILE   reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_FOR     reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    LBRACE          reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_SWITCH  reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_DO      reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_RETURN  reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    TYPE_CHAR       reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    TYPE_INT        reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    TYPE_SHORT      reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    TYPE_LONG       reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    TYPE_FLOAT      reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    TYPE_DOUBLE     reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    TYPE_VOID       reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_STATIC  reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_UNSIGNED reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_VOLATILE reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_EXTERN  reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_SIGNED  reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_REGISTER reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_CONST   reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_STRUCT  reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_UNION   reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_ENUM    reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    INCREMENT       reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    DECREMENT       reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    LPAREN          reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_SIZEOF  reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    BITWISE_AND     reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    TIMES           reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    PLUS            reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    MINUS           reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    BITWISE_COMPLEMENT reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    NOT             reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    STRING          reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    FLOAT_NUMBER    reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    CHARACTER       reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    NUMBER          reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    BINARY_NUMBER   reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    HEXADECIMAL_NUMBER reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    OCTAL_NUMBER    reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_CASE    reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_DEFAULT reduce using rule 14 (statement -> statement_without_trailing_substatement .)


state 72

    (15) statement -> if_then_statement .

    RBRACE          reduce using rule 15 (statement -> if_then_statement .)
    SEMICOLON       reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_BREAK   reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_CONTINUE reduce using rule 15 (statement -> if_then_statement .)
    IDENTIFIER      reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_GOTO    reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_IF      reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_WHILE   reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_FOR     reduce using rule 15 (statement -> if_then_statement .)
    LBRACE          reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_SWITCH  reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_DO      reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_RETURN  reduce using rule 15 (statement -> if_then_statement .)
    TYPE_CHAR       reduce using rule 15 (statement -> if_then_statement .)
    TYPE_INT        reduce using rule 15 (statement -> if_then_statement .)
    TYPE_SHORT      reduce using rule 15 (statement -> if_then_statement .)
    TYPE_LONG       reduce using rule 15 (statement -> if_then_statement .)
    TYPE_FLOAT      reduce using rule 15 (statement -> if_then_statement .)
    TYPE_DOUBLE     reduce using rule 15 (statement -> if_then_statement .)
    TYPE_VOID       reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_STATIC  reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_UNSIGNED reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_VOLATILE reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_EXTERN  reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_SIGNED  reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_REGISTER reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_CONST   reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_STRUCT  reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_UNION   reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_ENUM    reduce using rule 15 (statement -> if_then_statement .)
    INCREMENT       reduce using rule 15 (statement -> if_then_statement .)
    DECREMENT       reduce using rule 15 (statement -> if_then_statement .)
    LPAREN          reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_SIZEOF  reduce using rule 15 (statement -> if_then_statement .)
    BITWISE_AND     reduce using rule 15 (statement -> if_then_statement .)
    TIMES           reduce using rule 15 (statement -> if_then_statement .)
    PLUS            reduce using rule 15 (statement -> if_then_statement .)
    MINUS           reduce using rule 15 (statement -> if_then_statement .)
    BITWISE_COMPLEMENT reduce using rule 15 (statement -> if_then_statement .)
    NOT             reduce using rule 15 (statement -> if_then_statement .)
    STRING          reduce using rule 15 (statement -> if_then_statement .)
    FLOAT_NUMBER    reduce using rule 15 (statement -> if_then_statement .)
    CHARACTER       reduce using rule 15 (statement -> if_then_statement .)
    NUMBER          reduce using rule 15 (statement -> if_then_statement .)
    BINARY_NUMBER   reduce using rule 15 (statement -> if_then_statement .)
    HEXADECIMAL_NUMBER reduce using rule 15 (statement -> if_then_statement .)
    OCTAL_NUMBER    reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_CASE    reduce using rule 15 (statement -> if_then_statement .)
    KEYWORD_DEFAULT reduce using rule 15 (statement -> if_then_statement .)


state 73

    (16) statement -> if_then_else_statement .

    RBRACE          reduce using rule 16 (statement -> if_then_else_statement .)
    SEMICOLON       reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_BREAK   reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_CONTINUE reduce using rule 16 (statement -> if_then_else_statement .)
    IDENTIFIER      reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_GOTO    reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_IF      reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_WHILE   reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_FOR     reduce using rule 16 (statement -> if_then_else_statement .)
    LBRACE          reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_SWITCH  reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_DO      reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_RETURN  reduce using rule 16 (statement -> if_then_else_statement .)
    TYPE_CHAR       reduce using rule 16 (statement -> if_then_else_statement .)
    TYPE_INT        reduce using rule 16 (statement -> if_then_else_statement .)
    TYPE_SHORT      reduce using rule 16 (statement -> if_then_else_statement .)
    TYPE_LONG       reduce using rule 16 (statement -> if_then_else_statement .)
    TYPE_FLOAT      reduce using rule 16 (statement -> if_then_else_statement .)
    TYPE_DOUBLE     reduce using rule 16 (statement -> if_then_else_statement .)
    TYPE_VOID       reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_STATIC  reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_UNSIGNED reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_VOLATILE reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_EXTERN  reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_SIGNED  reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_REGISTER reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_CONST   reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_STRUCT  reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_UNION   reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_ENUM    reduce using rule 16 (statement -> if_then_else_statement .)
    INCREMENT       reduce using rule 16 (statement -> if_then_else_statement .)
    DECREMENT       reduce using rule 16 (statement -> if_then_else_statement .)
    LPAREN          reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_SIZEOF  reduce using rule 16 (statement -> if_then_else_statement .)
    BITWISE_AND     reduce using rule 16 (statement -> if_then_else_statement .)
    TIMES           reduce using rule 16 (statement -> if_then_else_statement .)
    PLUS            reduce using rule 16 (statement -> if_then_else_statement .)
    MINUS           reduce using rule 16 (statement -> if_then_else_statement .)
    BITWISE_COMPLEMENT reduce using rule 16 (statement -> if_then_else_statement .)
    NOT             reduce using rule 16 (statement -> if_then_else_statement .)
    STRING          reduce using rule 16 (statement -> if_then_else_statement .)
    FLOAT_NUMBER    reduce using rule 16 (statement -> if_then_else_statement .)
    CHARACTER       reduce using rule 16 (statement -> if_then_else_statement .)
    NUMBER          reduce using rule 16 (statement -> if_then_else_statement .)
    BINARY_NUMBER   reduce using rule 16 (statement -> if_then_else_statement .)
    HEXADECIMAL_NUMBER reduce using rule 16 (statement -> if_then_else_statement .)
    OCTAL_NUMBER    reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_CASE    reduce using rule 16 (statement -> if_then_else_statement .)
    KEYWORD_DEFAULT reduce using rule 16 (statement -> if_then_else_statement .)


state 74

    (17) statement -> while_statement .

    RBRACE          reduce using rule 17 (statement -> while_statement .)
    SEMICOLON       reduce using rule 17 (statement -> while_statement .)
    KEYWORD_BREAK   reduce using rule 17 (statement -> while_statement .)
    KEYWORD_CONTINUE reduce using rule 17 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 17 (statement -> while_statement .)
    KEYWORD_GOTO    reduce using rule 17 (statement -> while_statement .)
    KEYWORD_IF      reduce using rule 17 (statement -> while_statement .)
    KEYWORD_WHILE   reduce using rule 17 (statement -> while_statement .)
    KEYWORD_FOR     reduce using rule 17 (statement -> while_statement .)
    LBRACE          reduce using rule 17 (statement -> while_statement .)
    KEYWORD_SWITCH  reduce using rule 17 (statement -> while_statement .)
    KEYWORD_DO      reduce using rule 17 (statement -> while_statement .)
    KEYWORD_RETURN  reduce using rule 17 (statement -> while_statement .)
    TYPE_CHAR       reduce using rule 17 (statement -> while_statement .)
    TYPE_INT        reduce using rule 17 (statement -> while_statement .)
    TYPE_SHORT      reduce using rule 17 (statement -> while_statement .)
    TYPE_LONG       reduce using rule 17 (statement -> while_statement .)
    TYPE_FLOAT      reduce using rule 17 (statement -> while_statement .)
    TYPE_DOUBLE     reduce using rule 17 (statement -> while_statement .)
    TYPE_VOID       reduce using rule 17 (statement -> while_statement .)
    KEYWORD_STATIC  reduce using rule 17 (statement -> while_statement .)
    KEYWORD_UNSIGNED reduce using rule 17 (statement -> while_statement .)
    KEYWORD_VOLATILE reduce using rule 17 (statement -> while_statement .)
    KEYWORD_EXTERN  reduce using rule 17 (statement -> while_statement .)
    KEYWORD_SIGNED  reduce using rule 17 (statement -> while_statement .)
    KEYWORD_REGISTER reduce using rule 17 (statement -> while_statement .)
    KEYWORD_CONST   reduce using rule 17 (statement -> while_statement .)
    KEYWORD_STRUCT  reduce using rule 17 (statement -> while_statement .)
    KEYWORD_UNION   reduce using rule 17 (statement -> while_statement .)
    KEYWORD_ENUM    reduce using rule 17 (statement -> while_statement .)
    INCREMENT       reduce using rule 17 (statement -> while_statement .)
    DECREMENT       reduce using rule 17 (statement -> while_statement .)
    LPAREN          reduce using rule 17 (statement -> while_statement .)
    KEYWORD_SIZEOF  reduce using rule 17 (statement -> while_statement .)
    BITWISE_AND     reduce using rule 17 (statement -> while_statement .)
    TIMES           reduce using rule 17 (statement -> while_statement .)
    PLUS            reduce using rule 17 (statement -> while_statement .)
    MINUS           reduce using rule 17 (statement -> while_statement .)
    BITWISE_COMPLEMENT reduce using rule 17 (statement -> while_statement .)
    NOT             reduce using rule 17 (statement -> while_statement .)
    STRING          reduce using rule 17 (statement -> while_statement .)
    FLOAT_NUMBER    reduce using rule 17 (statement -> while_statement .)
    CHARACTER       reduce using rule 17 (statement -> while_statement .)
    NUMBER          reduce using rule 17 (statement -> while_statement .)
    BINARY_NUMBER   reduce using rule 17 (statement -> while_statement .)
    HEXADECIMAL_NUMBER reduce using rule 17 (statement -> while_statement .)
    OCTAL_NUMBER    reduce using rule 17 (statement -> while_statement .)
    KEYWORD_CASE    reduce using rule 17 (statement -> while_statement .)
    KEYWORD_DEFAULT reduce using rule 17 (statement -> while_statement .)


state 75

    (18) statement -> for_statement .

    RBRACE          reduce using rule 18 (statement -> for_statement .)
    SEMICOLON       reduce using rule 18 (statement -> for_statement .)
    KEYWORD_BREAK   reduce using rule 18 (statement -> for_statement .)
    KEYWORD_CONTINUE reduce using rule 18 (statement -> for_statement .)
    IDENTIFIER      reduce using rule 18 (statement -> for_statement .)
    KEYWORD_GOTO    reduce using rule 18 (statement -> for_statement .)
    KEYWORD_IF      reduce using rule 18 (statement -> for_statement .)
    KEYWORD_WHILE   reduce using rule 18 (statement -> for_statement .)
    KEYWORD_FOR     reduce using rule 18 (statement -> for_statement .)
    LBRACE          reduce using rule 18 (statement -> for_statement .)
    KEYWORD_SWITCH  reduce using rule 18 (statement -> for_statement .)
    KEYWORD_DO      reduce using rule 18 (statement -> for_statement .)
    KEYWORD_RETURN  reduce using rule 18 (statement -> for_statement .)
    TYPE_CHAR       reduce using rule 18 (statement -> for_statement .)
    TYPE_INT        reduce using rule 18 (statement -> for_statement .)
    TYPE_SHORT      reduce using rule 18 (statement -> for_statement .)
    TYPE_LONG       reduce using rule 18 (statement -> for_statement .)
    TYPE_FLOAT      reduce using rule 18 (statement -> for_statement .)
    TYPE_DOUBLE     reduce using rule 18 (statement -> for_statement .)
    TYPE_VOID       reduce using rule 18 (statement -> for_statement .)
    KEYWORD_STATIC  reduce using rule 18 (statement -> for_statement .)
    KEYWORD_UNSIGNED reduce using rule 18 (statement -> for_statement .)
    KEYWORD_VOLATILE reduce using rule 18 (statement -> for_statement .)
    KEYWORD_EXTERN  reduce using rule 18 (statement -> for_statement .)
    KEYWORD_SIGNED  reduce using rule 18 (statement -> for_statement .)
    KEYWORD_REGISTER reduce using rule 18 (statement -> for_statement .)
    KEYWORD_CONST   reduce using rule 18 (statement -> for_statement .)
    KEYWORD_STRUCT  reduce using rule 18 (statement -> for_statement .)
    KEYWORD_UNION   reduce using rule 18 (statement -> for_statement .)
    KEYWORD_ENUM    reduce using rule 18 (statement -> for_statement .)
    INCREMENT       reduce using rule 18 (statement -> for_statement .)
    DECREMENT       reduce using rule 18 (statement -> for_statement .)
    LPAREN          reduce using rule 18 (statement -> for_statement .)
    KEYWORD_SIZEOF  reduce using rule 18 (statement -> for_statement .)
    BITWISE_AND     reduce using rule 18 (statement -> for_statement .)
    TIMES           reduce using rule 18 (statement -> for_statement .)
    PLUS            reduce using rule 18 (statement -> for_statement .)
    MINUS           reduce using rule 18 (statement -> for_statement .)
    BITWISE_COMPLEMENT reduce using rule 18 (statement -> for_statement .)
    NOT             reduce using rule 18 (statement -> for_statement .)
    STRING          reduce using rule 18 (statement -> for_statement .)
    FLOAT_NUMBER    reduce using rule 18 (statement -> for_statement .)
    CHARACTER       reduce using rule 18 (statement -> for_statement .)
    NUMBER          reduce using rule 18 (statement -> for_statement .)
    BINARY_NUMBER   reduce using rule 18 (statement -> for_statement .)
    HEXADECIMAL_NUMBER reduce using rule 18 (statement -> for_statement .)
    OCTAL_NUMBER    reduce using rule 18 (statement -> for_statement .)
    KEYWORD_CASE    reduce using rule 18 (statement -> for_statement .)
    KEYWORD_DEFAULT reduce using rule 18 (statement -> for_statement .)


state 76

    (19) statement_without_trailing_substatement -> block .

    RBRACE          reduce using rule 19 (statement_without_trailing_substatement -> block .)
    SEMICOLON       reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_BREAK   reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_CONTINUE reduce using rule 19 (statement_without_trailing_substatement -> block .)
    IDENTIFIER      reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_GOTO    reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_IF      reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_WHILE   reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_FOR     reduce using rule 19 (statement_without_trailing_substatement -> block .)
    LBRACE          reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_SWITCH  reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_DO      reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_RETURN  reduce using rule 19 (statement_without_trailing_substatement -> block .)
    TYPE_CHAR       reduce using rule 19 (statement_without_trailing_substatement -> block .)
    TYPE_INT        reduce using rule 19 (statement_without_trailing_substatement -> block .)
    TYPE_SHORT      reduce using rule 19 (statement_without_trailing_substatement -> block .)
    TYPE_LONG       reduce using rule 19 (statement_without_trailing_substatement -> block .)
    TYPE_FLOAT      reduce using rule 19 (statement_without_trailing_substatement -> block .)
    TYPE_DOUBLE     reduce using rule 19 (statement_without_trailing_substatement -> block .)
    TYPE_VOID       reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_STATIC  reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_UNSIGNED reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_VOLATILE reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_EXTERN  reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_SIGNED  reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_REGISTER reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_CONST   reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_STRUCT  reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_UNION   reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_ENUM    reduce using rule 19 (statement_without_trailing_substatement -> block .)
    INCREMENT       reduce using rule 19 (statement_without_trailing_substatement -> block .)
    DECREMENT       reduce using rule 19 (statement_without_trailing_substatement -> block .)
    LPAREN          reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_SIZEOF  reduce using rule 19 (statement_without_trailing_substatement -> block .)
    BITWISE_AND     reduce using rule 19 (statement_without_trailing_substatement -> block .)
    TIMES           reduce using rule 19 (statement_without_trailing_substatement -> block .)
    PLUS            reduce using rule 19 (statement_without_trailing_substatement -> block .)
    MINUS           reduce using rule 19 (statement_without_trailing_substatement -> block .)
    BITWISE_COMPLEMENT reduce using rule 19 (statement_without_trailing_substatement -> block .)
    NOT             reduce using rule 19 (statement_without_trailing_substatement -> block .)
    STRING          reduce using rule 19 (statement_without_trailing_substatement -> block .)
    FLOAT_NUMBER    reduce using rule 19 (statement_without_trailing_substatement -> block .)
    CHARACTER       reduce using rule 19 (statement_without_trailing_substatement -> block .)
    NUMBER          reduce using rule 19 (statement_without_trailing_substatement -> block .)
    BINARY_NUMBER   reduce using rule 19 (statement_without_trailing_substatement -> block .)
    HEXADECIMAL_NUMBER reduce using rule 19 (statement_without_trailing_substatement -> block .)
    OCTAL_NUMBER    reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_CASE    reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_DEFAULT reduce using rule 19 (statement_without_trailing_substatement -> block .)
    KEYWORD_ELSE    reduce using rule 19 (statement_without_trailing_substatement -> block .)


state 77

    (20) statement_without_trailing_substatement -> SEMICOLON .

    RBRACE          reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    SEMICOLON       reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_CONTINUE reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_IF      reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_FOR     reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    LBRACE          reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_DO      reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    TYPE_CHAR       reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    TYPE_INT        reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    TYPE_SHORT      reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    TYPE_LONG       reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    TYPE_FLOAT      reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    TYPE_VOID       reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_CONST   reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_UNION   reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_ENUM    reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    INCREMENT       reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    DECREMENT       reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    LPAREN          reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    BITWISE_AND     reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    TIMES           reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    PLUS            reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    MINUS           reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    NOT             reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    STRING          reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    CHARACTER       reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    NUMBER          reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    BINARY_NUMBER   reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_CASE    reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 20 (statement_without_trailing_substatement -> SEMICOLON .)


state 78

    (21) statement_without_trailing_substatement -> expression_list . SEMICOLON

    SEMICOLON       shift and go to state 183


state 79

    (22) statement_without_trailing_substatement -> switch_stm .

    RBRACE          reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    SEMICOLON       reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_BREAK   reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_CONTINUE reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    IDENTIFIER      reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_GOTO    reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_IF      reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_WHILE   reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_FOR     reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    LBRACE          reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_SWITCH  reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_DO      reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_RETURN  reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    TYPE_CHAR       reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    TYPE_INT        reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    TYPE_SHORT      reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    TYPE_LONG       reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    TYPE_FLOAT      reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    TYPE_DOUBLE     reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    TYPE_VOID       reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_STATIC  reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_UNSIGNED reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_VOLATILE reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_EXTERN  reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_SIGNED  reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_REGISTER reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_CONST   reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_STRUCT  reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_UNION   reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_ENUM    reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    INCREMENT       reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    DECREMENT       reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    LPAREN          reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_SIZEOF  reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    BITWISE_AND     reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    TIMES           reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    PLUS            reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    MINUS           reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    BITWISE_COMPLEMENT reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    NOT             reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    STRING          reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    FLOAT_NUMBER    reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    CHARACTER       reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    NUMBER          reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    BINARY_NUMBER   reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    HEXADECIMAL_NUMBER reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    OCTAL_NUMBER    reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_CASE    reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_DEFAULT reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)
    KEYWORD_ELSE    reduce using rule 22 (statement_without_trailing_substatement -> switch_stm .)


state 80

    (23) statement_without_trailing_substatement -> do_statement .

    RBRACE          reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    SEMICOLON       reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_BREAK   reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_CONTINUE reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    IDENTIFIER      reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_GOTO    reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_IF      reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_WHILE   reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_FOR     reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    LBRACE          reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_SWITCH  reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_DO      reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_RETURN  reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    TYPE_CHAR       reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    TYPE_INT        reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    TYPE_SHORT      reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    TYPE_LONG       reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    TYPE_FLOAT      reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    TYPE_DOUBLE     reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    TYPE_VOID       reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_STATIC  reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_UNSIGNED reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_VOLATILE reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_EXTERN  reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_SIGNED  reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_REGISTER reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_CONST   reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_STRUCT  reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_UNION   reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_ENUM    reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    INCREMENT       reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    DECREMENT       reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    LPAREN          reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_SIZEOF  reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    BITWISE_AND     reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    TIMES           reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    PLUS            reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    MINUS           reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    BITWISE_COMPLEMENT reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    NOT             reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    STRING          reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    FLOAT_NUMBER    reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    CHARACTER       reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    NUMBER          reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    BINARY_NUMBER   reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    HEXADECIMAL_NUMBER reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    OCTAL_NUMBER    reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_CASE    reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_DEFAULT reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)
    KEYWORD_ELSE    reduce using rule 23 (statement_without_trailing_substatement -> do_statement .)


state 81

    (24) statement_without_trailing_substatement -> KEYWORD_BREAK . SEMICOLON

    SEMICOLON       shift and go to state 184


state 82

    (25) statement_without_trailing_substatement -> KEYWORD_CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 185


state 83

    (26) statement_without_trailing_substatement -> return_stm . SEMICOLON

    SEMICOLON       shift and go to state 186


state 84

    (27) statement_without_trailing_substatement -> IDENTIFIER . COLON
    (238) identifier_exp -> IDENTIFIER .

    COLON           shift and go to state 187
    INCREMENT       reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    DECREMENT       reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    LBRACKET        reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    LPAREN          reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    DOT             reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    ARROW           reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    ASSIGN          reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    MODULUS_ASSIGN  reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    SHIFT_LEFT_ASSIGN reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    BITWISE_AND_ASSIGN reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    BITWISE_XOR_ASSIGN reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    BITWISE_OR_ASSIGN reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    MODULUS         reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    TIMES           reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    MINUS           reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    PLUS            reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    BITWISE_SHIFT_RIGHT reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    BITWISE_SHIFT_LEFT reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    LESS_THEN       reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    GREATER_THEN    reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    EQUALS_THEN     reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    BITWISE_AND     reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    BITWISE_XOR     reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    BITWISE_OR      reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    QUESTION_MARK   reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    COMMA           reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 238 (identifier_exp -> IDENTIFIER .)


state 85

    (28) statement_without_trailing_substatement -> KEYWORD_GOTO . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 188


state 86

    (29) statement_without_trailing_substatement -> variable_declaration_list . SEMICOLON

    SEMICOLON       shift and go to state 189


state 87

    (30) statement_without_trailing_substatement -> type . SEMICOLON
    (81) variable_declaration_list -> type . identifier_list
    (82) identifier_list -> . identifier
    (83) identifier_list -> . identifier COMMA identifier_list
    (84) identifier_list -> . identifier multiple_bracket_signature
    (85) identifier_list -> . identifier multiple_bracket_signature COMMA identifier_list
    (86) identifier_list -> . identifier ASSIGN expression
    (87) identifier_list -> . identifier ASSIGN expression COMMA identifier_list
    (88) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list
    (89) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (90) identifier_list -> . identifier ASSIGN value_list
    (91) identifier_list -> . identifier ASSIGN value_list COMMA identifier_list
    (92) identifier_list -> . function_pointer
    (93) identifier_list -> . function_pointer COMMA identifier_list
    (94) identifier_list -> . function_pointer ASSIGN expression
    (95) identifier_list -> . function_pointer ASSIGN expression COMMA identifier_list
    (96) identifier_list -> . function_pointer_array
    (97) identifier_list -> . function_pointer_array COMMA identifier_list
    (98) identifier_list -> . function_pointer_array ASSIGN value_list
    (99) identifier_list -> . function_pointer_array ASSIGN value_list COMMA identifier_list
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN
    (100) function_pointer -> . identifier LPAREN signature_param_list RPAREN
    (101) function_pointer -> . identifier LPAREN RPAREN
    (102) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN
    (103) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN

    SEMICOLON       shift and go to state 190
    IDENTIFIER      shift and go to state 41
    TIMES           shift and go to state 42
    LPAREN          shift and go to state 38

    identifier_list                shift and go to state 36
    identifier                     shift and go to state 163
    function_pointer               shift and go to state 39
    function_pointer_array         shift and go to state 40

state 88

    (35) if_then_statement -> KEYWORD_IF . LPAREN expression RPAREN statement
    (36) if_then_else_statement -> KEYWORD_IF . LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement

    LPAREN          shift and go to state 191


state 89

    (227) cast_exp -> LPAREN . type RPAREN
    (228) cast_exp -> LPAREN . type multiple_times RPAREN
    (246) parentesis_exp -> LPAREN . expression RPAREN
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (157) expression -> . assign_exp
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    type                           shift and go to state 192
    expression                     shift and go to state 193
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    assign_exp                     shift and go to state 96
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 90

    (155) expression_list -> expression .
    (156) expression_list -> expression . COMMA expression_list

    SEMICOLON       reduce using rule 155 (expression_list -> expression .)
    RPAREN          reduce using rule 155 (expression_list -> expression .)
    COMMA           shift and go to state 194


state 91

    (38) while_statement -> KEYWORD_WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 195


state 92

    (47) for_statement -> KEYWORD_FOR . LPAREN for_params RPAREN statement

    LPAREN          shift and go to state 196


state 93

    (49) switch_stm -> KEYWORD_SWITCH . LPAREN expression RPAREN LBRACE switch_itens RBRACE

    LPAREN          shift and go to state 197


state 94

    (40) do_statement -> KEYWORD_DO . statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (14) statement -> . statement_without_trailing_substatement
    (15) statement -> . if_then_statement
    (16) statement -> . if_then_else_statement
    (17) statement -> . while_statement
    (18) statement -> . for_statement
    (19) statement_without_trailing_substatement -> . block
    (20) statement_without_trailing_substatement -> . SEMICOLON
    (21) statement_without_trailing_substatement -> . expression_list SEMICOLON
    (22) statement_without_trailing_substatement -> . switch_stm
    (23) statement_without_trailing_substatement -> . do_statement
    (24) statement_without_trailing_substatement -> . KEYWORD_BREAK SEMICOLON
    (25) statement_without_trailing_substatement -> . KEYWORD_CONTINUE SEMICOLON
    (26) statement_without_trailing_substatement -> . return_stm SEMICOLON
    (27) statement_without_trailing_substatement -> . IDENTIFIER COLON
    (28) statement_without_trailing_substatement -> . KEYWORD_GOTO IDENTIFIER SEMICOLON
    (29) statement_without_trailing_substatement -> . variable_declaration_list SEMICOLON
    (30) statement_without_trailing_substatement -> . type SEMICOLON
    (35) if_then_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (36) if_then_else_statement -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (38) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (47) for_statement -> . KEYWORD_FOR LPAREN for_params RPAREN statement
    (9) block -> . LBRACE RBRACE
    (10) block -> . LBRACE block_statements RBRACE
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (49) switch_stm -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE
    (40) do_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (54) return_stm -> . KEYWORD_RETURN
    (55) return_stm -> . KEYWORD_RETURN expression
    (81) variable_declaration_list -> . type identifier_list
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (157) expression -> . assign_exp
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    SEMICOLON       shift and go to state 77
    KEYWORD_BREAK   shift and go to state 81
    KEYWORD_CONTINUE shift and go to state 82
    IDENTIFIER      shift and go to state 84
    KEYWORD_GOTO    shift and go to state 85
    KEYWORD_IF      shift and go to state 88
    KEYWORD_WHILE   shift and go to state 91
    KEYWORD_FOR     shift and go to state 92
    LBRACE          shift and go to state 44
    KEYWORD_SWITCH  shift and go to state 93
    KEYWORD_DO      shift and go to state 94
    KEYWORD_RETURN  shift and go to state 95
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    statement                      shift and go to state 198
    expression                     shift and go to state 90
    statement_without_trailing_substatement shift and go to state 71
    if_then_statement              shift and go to state 72
    if_then_else_statement         shift and go to state 73
    while_statement                shift and go to state 74
    for_statement                  shift and go to state 75
    block                          shift and go to state 76
    expression_list                shift and go to state 78
    switch_stm                     shift and go to state 79
    do_statement                   shift and go to state 80
    return_stm                     shift and go to state 83
    variable_declaration_list      shift and go to state 86
    type                           shift and go to state 87
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    assign_exp                     shift and go to state 96
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 95

    (54) return_stm -> KEYWORD_RETURN .
    (55) return_stm -> KEYWORD_RETURN . expression
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    SEMICOLON       reduce using rule 54 (return_stm -> KEYWORD_RETURN .)
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 199
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 96

    (157) expression -> assign_exp .

    COMMA           reduce using rule 157 (expression -> assign_exp .)
    SEMICOLON       reduce using rule 157 (expression -> assign_exp .)
    RPAREN          reduce using rule 157 (expression -> assign_exp .)
    RBRACE          reduce using rule 157 (expression -> assign_exp .)
    RBRACKET        reduce using rule 157 (expression -> assign_exp .)
    COLON           reduce using rule 157 (expression -> assign_exp .)


state 97

    (169) assign_exp -> unary_exp . assign_operator assign_exp
    (209) modulus_exp -> unary_exp .
    (158) assign_operator -> . ASSIGN
    (159) assign_operator -> . TIMES_ASSIGN
    (160) assign_operator -> . DIVIDE_ASSIGN
    (161) assign_operator -> . MODULUS_ASSIGN
    (162) assign_operator -> . PLUS_ASSIGN
    (163) assign_operator -> . MINUS_ASSIGN
    (164) assign_operator -> . SHIFT_LEFT_ASSIGN
    (165) assign_operator -> . SHIFT_RIGHT_ASSIGN
    (166) assign_operator -> . BITWISE_AND_ASSIGN
    (167) assign_operator -> . BITWISE_XOR_ASSIGN
    (168) assign_operator -> . BITWISE_OR_ASSIGN

    MODULUS         reduce using rule 209 (modulus_exp -> unary_exp .)
    DIVIDE          reduce using rule 209 (modulus_exp -> unary_exp .)
    TIMES           reduce using rule 209 (modulus_exp -> unary_exp .)
    MINUS           reduce using rule 209 (modulus_exp -> unary_exp .)
    PLUS            reduce using rule 209 (modulus_exp -> unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 209 (modulus_exp -> unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 209 (modulus_exp -> unary_exp .)
    LESS_EQUALS     reduce using rule 209 (modulus_exp -> unary_exp .)
    LESS_THEN       reduce using rule 209 (modulus_exp -> unary_exp .)
    GREATER_EQUALS  reduce using rule 209 (modulus_exp -> unary_exp .)
    GREATER_THEN    reduce using rule 209 (modulus_exp -> unary_exp .)
    NOT_EQUALS      reduce using rule 209 (modulus_exp -> unary_exp .)
    EQUALS_THEN     reduce using rule 209 (modulus_exp -> unary_exp .)
    BITWISE_AND     reduce using rule 209 (modulus_exp -> unary_exp .)
    BITWISE_XOR     reduce using rule 209 (modulus_exp -> unary_exp .)
    BITWISE_OR      reduce using rule 209 (modulus_exp -> unary_exp .)
    LOGICAL_AND     reduce using rule 209 (modulus_exp -> unary_exp .)
    LOGICAL_OR      reduce using rule 209 (modulus_exp -> unary_exp .)
    QUESTION_MARK   reduce using rule 209 (modulus_exp -> unary_exp .)
    COMMA           reduce using rule 209 (modulus_exp -> unary_exp .)
    SEMICOLON       reduce using rule 209 (modulus_exp -> unary_exp .)
    RPAREN          reduce using rule 209 (modulus_exp -> unary_exp .)
    RBRACE          reduce using rule 209 (modulus_exp -> unary_exp .)
    RBRACKET        reduce using rule 209 (modulus_exp -> unary_exp .)
    COLON           reduce using rule 209 (modulus_exp -> unary_exp .)
    ASSIGN          shift and go to state 201
    TIMES_ASSIGN    shift and go to state 202
    DIVIDE_ASSIGN   shift and go to state 203
    MODULUS_ASSIGN  shift and go to state 204
    PLUS_ASSIGN     shift and go to state 205
    MINUS_ASSIGN    shift and go to state 206
    SHIFT_LEFT_ASSIGN shift and go to state 207
    SHIFT_RIGHT_ASSIGN shift and go to state 208
    BITWISE_AND_ASSIGN shift and go to state 209
    BITWISE_XOR_ASSIGN shift and go to state 210
    BITWISE_OR_ASSIGN shift and go to state 211

    assign_operator                shift and go to state 200

state 98

    (170) assign_exp -> ternary_conditional_exp .

    COMMA           reduce using rule 170 (assign_exp -> ternary_conditional_exp .)
    SEMICOLON       reduce using rule 170 (assign_exp -> ternary_conditional_exp .)
    RPAREN          reduce using rule 170 (assign_exp -> ternary_conditional_exp .)
    RBRACE          reduce using rule 170 (assign_exp -> ternary_conditional_exp .)
    RBRACKET        reduce using rule 170 (assign_exp -> ternary_conditional_exp .)
    COLON           reduce using rule 170 (assign_exp -> ternary_conditional_exp .)


state 99

    (216) unary_exp -> postfix_exp .
    (219) unary_exp -> postfix_exp . INCREMENT
    (220) unary_exp -> postfix_exp . DECREMENT
    (229) postfix_exp -> postfix_exp . LBRACKET expression RBRACKET
    (230) postfix_exp -> postfix_exp . LPAREN RPAREN
    (231) postfix_exp -> postfix_exp . LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> postfix_exp . DOT IDENTIFIER
    (233) postfix_exp -> postfix_exp . ARROW IDENTIFIER

    ASSIGN          reduce using rule 216 (unary_exp -> postfix_exp .)
    TIMES_ASSIGN    reduce using rule 216 (unary_exp -> postfix_exp .)
    DIVIDE_ASSIGN   reduce using rule 216 (unary_exp -> postfix_exp .)
    MODULUS_ASSIGN  reduce using rule 216 (unary_exp -> postfix_exp .)
    PLUS_ASSIGN     reduce using rule 216 (unary_exp -> postfix_exp .)
    MINUS_ASSIGN    reduce using rule 216 (unary_exp -> postfix_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 216 (unary_exp -> postfix_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 216 (unary_exp -> postfix_exp .)
    BITWISE_AND_ASSIGN reduce using rule 216 (unary_exp -> postfix_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 216 (unary_exp -> postfix_exp .)
    BITWISE_OR_ASSIGN reduce using rule 216 (unary_exp -> postfix_exp .)
    MODULUS         reduce using rule 216 (unary_exp -> postfix_exp .)
    DIVIDE          reduce using rule 216 (unary_exp -> postfix_exp .)
    TIMES           reduce using rule 216 (unary_exp -> postfix_exp .)
    MINUS           reduce using rule 216 (unary_exp -> postfix_exp .)
    PLUS            reduce using rule 216 (unary_exp -> postfix_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 216 (unary_exp -> postfix_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 216 (unary_exp -> postfix_exp .)
    LESS_EQUALS     reduce using rule 216 (unary_exp -> postfix_exp .)
    LESS_THEN       reduce using rule 216 (unary_exp -> postfix_exp .)
    GREATER_EQUALS  reduce using rule 216 (unary_exp -> postfix_exp .)
    GREATER_THEN    reduce using rule 216 (unary_exp -> postfix_exp .)
    NOT_EQUALS      reduce using rule 216 (unary_exp -> postfix_exp .)
    EQUALS_THEN     reduce using rule 216 (unary_exp -> postfix_exp .)
    BITWISE_AND     reduce using rule 216 (unary_exp -> postfix_exp .)
    BITWISE_XOR     reduce using rule 216 (unary_exp -> postfix_exp .)
    BITWISE_OR      reduce using rule 216 (unary_exp -> postfix_exp .)
    LOGICAL_AND     reduce using rule 216 (unary_exp -> postfix_exp .)
    LOGICAL_OR      reduce using rule 216 (unary_exp -> postfix_exp .)
    QUESTION_MARK   reduce using rule 216 (unary_exp -> postfix_exp .)
    COMMA           reduce using rule 216 (unary_exp -> postfix_exp .)
    SEMICOLON       reduce using rule 216 (unary_exp -> postfix_exp .)
    RPAREN          reduce using rule 216 (unary_exp -> postfix_exp .)
    RBRACE          reduce using rule 216 (unary_exp -> postfix_exp .)
    RBRACKET        reduce using rule 216 (unary_exp -> postfix_exp .)
    COLON           reduce using rule 216 (unary_exp -> postfix_exp .)
    INCREMENT       shift and go to state 212
    DECREMENT       shift and go to state 213
    LBRACKET        shift and go to state 214
    LPAREN          shift and go to state 215
    DOT             shift and go to state 216
    ARROW           shift and go to state 217


state 100

    (217) unary_exp -> INCREMENT . postfix_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130
    LPAREN          shift and go to state 219

    postfix_exp                    shift and go to state 218
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 101

    (218) unary_exp -> DECREMENT . postfix_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130
    LPAREN          shift and go to state 219

    postfix_exp                    shift and go to state 220
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 102

    (221) unary_exp -> cast_exp . postfix_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130
    LPAREN          shift and go to state 219

    postfix_exp                    shift and go to state 221
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 103

    (222) unary_exp -> sizeof_exp .

    ASSIGN          reduce using rule 222 (unary_exp -> sizeof_exp .)
    TIMES_ASSIGN    reduce using rule 222 (unary_exp -> sizeof_exp .)
    DIVIDE_ASSIGN   reduce using rule 222 (unary_exp -> sizeof_exp .)
    MODULUS_ASSIGN  reduce using rule 222 (unary_exp -> sizeof_exp .)
    PLUS_ASSIGN     reduce using rule 222 (unary_exp -> sizeof_exp .)
    MINUS_ASSIGN    reduce using rule 222 (unary_exp -> sizeof_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 222 (unary_exp -> sizeof_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 222 (unary_exp -> sizeof_exp .)
    BITWISE_AND_ASSIGN reduce using rule 222 (unary_exp -> sizeof_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 222 (unary_exp -> sizeof_exp .)
    BITWISE_OR_ASSIGN reduce using rule 222 (unary_exp -> sizeof_exp .)
    MODULUS         reduce using rule 222 (unary_exp -> sizeof_exp .)
    DIVIDE          reduce using rule 222 (unary_exp -> sizeof_exp .)
    TIMES           reduce using rule 222 (unary_exp -> sizeof_exp .)
    MINUS           reduce using rule 222 (unary_exp -> sizeof_exp .)
    PLUS            reduce using rule 222 (unary_exp -> sizeof_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 222 (unary_exp -> sizeof_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 222 (unary_exp -> sizeof_exp .)
    LESS_EQUALS     reduce using rule 222 (unary_exp -> sizeof_exp .)
    LESS_THEN       reduce using rule 222 (unary_exp -> sizeof_exp .)
    GREATER_EQUALS  reduce using rule 222 (unary_exp -> sizeof_exp .)
    GREATER_THEN    reduce using rule 222 (unary_exp -> sizeof_exp .)
    NOT_EQUALS      reduce using rule 222 (unary_exp -> sizeof_exp .)
    EQUALS_THEN     reduce using rule 222 (unary_exp -> sizeof_exp .)
    BITWISE_AND     reduce using rule 222 (unary_exp -> sizeof_exp .)
    BITWISE_XOR     reduce using rule 222 (unary_exp -> sizeof_exp .)
    BITWISE_OR      reduce using rule 222 (unary_exp -> sizeof_exp .)
    LOGICAL_AND     reduce using rule 222 (unary_exp -> sizeof_exp .)
    LOGICAL_OR      reduce using rule 222 (unary_exp -> sizeof_exp .)
    QUESTION_MARK   reduce using rule 222 (unary_exp -> sizeof_exp .)
    COMMA           reduce using rule 222 (unary_exp -> sizeof_exp .)
    SEMICOLON       reduce using rule 222 (unary_exp -> sizeof_exp .)
    RPAREN          reduce using rule 222 (unary_exp -> sizeof_exp .)
    RBRACE          reduce using rule 222 (unary_exp -> sizeof_exp .)
    RBRACKET        reduce using rule 222 (unary_exp -> sizeof_exp .)
    COLON           reduce using rule 222 (unary_exp -> sizeof_exp .)


state 104

    (223) unary_exp -> unary_operator . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    unary_operator                 shift and go to state 104
    unary_exp                      shift and go to state 222
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 105

    (171) ternary_conditional_exp -> logical_exp . QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> logical_exp .

    QUESTION_MARK   shift and go to state 223
    COMMA           reduce using rule 172 (ternary_conditional_exp -> logical_exp .)
    SEMICOLON       reduce using rule 172 (ternary_conditional_exp -> logical_exp .)
    RPAREN          reduce using rule 172 (ternary_conditional_exp -> logical_exp .)
    RBRACE          reduce using rule 172 (ternary_conditional_exp -> logical_exp .)
    RBRACKET        reduce using rule 172 (ternary_conditional_exp -> logical_exp .)
    COLON           reduce using rule 172 (ternary_conditional_exp -> logical_exp .)


state 106

    (234) postfix_exp -> primary_exp .

    INCREMENT       reduce using rule 234 (postfix_exp -> primary_exp .)
    DECREMENT       reduce using rule 234 (postfix_exp -> primary_exp .)
    LBRACKET        reduce using rule 234 (postfix_exp -> primary_exp .)
    LPAREN          reduce using rule 234 (postfix_exp -> primary_exp .)
    DOT             reduce using rule 234 (postfix_exp -> primary_exp .)
    ARROW           reduce using rule 234 (postfix_exp -> primary_exp .)
    ASSIGN          reduce using rule 234 (postfix_exp -> primary_exp .)
    TIMES_ASSIGN    reduce using rule 234 (postfix_exp -> primary_exp .)
    DIVIDE_ASSIGN   reduce using rule 234 (postfix_exp -> primary_exp .)
    MODULUS_ASSIGN  reduce using rule 234 (postfix_exp -> primary_exp .)
    PLUS_ASSIGN     reduce using rule 234 (postfix_exp -> primary_exp .)
    MINUS_ASSIGN    reduce using rule 234 (postfix_exp -> primary_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 234 (postfix_exp -> primary_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 234 (postfix_exp -> primary_exp .)
    BITWISE_AND_ASSIGN reduce using rule 234 (postfix_exp -> primary_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 234 (postfix_exp -> primary_exp .)
    BITWISE_OR_ASSIGN reduce using rule 234 (postfix_exp -> primary_exp .)
    MODULUS         reduce using rule 234 (postfix_exp -> primary_exp .)
    DIVIDE          reduce using rule 234 (postfix_exp -> primary_exp .)
    TIMES           reduce using rule 234 (postfix_exp -> primary_exp .)
    MINUS           reduce using rule 234 (postfix_exp -> primary_exp .)
    PLUS            reduce using rule 234 (postfix_exp -> primary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 234 (postfix_exp -> primary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 234 (postfix_exp -> primary_exp .)
    LESS_EQUALS     reduce using rule 234 (postfix_exp -> primary_exp .)
    LESS_THEN       reduce using rule 234 (postfix_exp -> primary_exp .)
    GREATER_EQUALS  reduce using rule 234 (postfix_exp -> primary_exp .)
    GREATER_THEN    reduce using rule 234 (postfix_exp -> primary_exp .)
    NOT_EQUALS      reduce using rule 234 (postfix_exp -> primary_exp .)
    EQUALS_THEN     reduce using rule 234 (postfix_exp -> primary_exp .)
    BITWISE_AND     reduce using rule 234 (postfix_exp -> primary_exp .)
    BITWISE_XOR     reduce using rule 234 (postfix_exp -> primary_exp .)
    BITWISE_OR      reduce using rule 234 (postfix_exp -> primary_exp .)
    LOGICAL_AND     reduce using rule 234 (postfix_exp -> primary_exp .)
    LOGICAL_OR      reduce using rule 234 (postfix_exp -> primary_exp .)
    QUESTION_MARK   reduce using rule 234 (postfix_exp -> primary_exp .)
    COMMA           reduce using rule 234 (postfix_exp -> primary_exp .)
    SEMICOLON       reduce using rule 234 (postfix_exp -> primary_exp .)
    RPAREN          reduce using rule 234 (postfix_exp -> primary_exp .)
    RBRACE          reduce using rule 234 (postfix_exp -> primary_exp .)
    RBRACKET        reduce using rule 234 (postfix_exp -> primary_exp .)
    COLON           reduce using rule 234 (postfix_exp -> primary_exp .)


state 107

    (224) sizeof_exp -> KEYWORD_SIZEOF . postfix_exp
    (225) sizeof_exp -> KEYWORD_SIZEOF . LPAREN type RPAREN
    (226) sizeof_exp -> KEYWORD_SIZEOF . LPAREN type multiple_times RPAREN
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 225
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    postfix_exp                    shift and go to state 224
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 108

    (210) unary_operator -> BITWISE_AND .

    INCREMENT       reduce using rule 210 (unary_operator -> BITWISE_AND .)
    DECREMENT       reduce using rule 210 (unary_operator -> BITWISE_AND .)
    LPAREN          reduce using rule 210 (unary_operator -> BITWISE_AND .)
    KEYWORD_SIZEOF  reduce using rule 210 (unary_operator -> BITWISE_AND .)
    BITWISE_AND     reduce using rule 210 (unary_operator -> BITWISE_AND .)
    TIMES           reduce using rule 210 (unary_operator -> BITWISE_AND .)
    PLUS            reduce using rule 210 (unary_operator -> BITWISE_AND .)
    MINUS           reduce using rule 210 (unary_operator -> BITWISE_AND .)
    BITWISE_COMPLEMENT reduce using rule 210 (unary_operator -> BITWISE_AND .)
    NOT             reduce using rule 210 (unary_operator -> BITWISE_AND .)
    IDENTIFIER      reduce using rule 210 (unary_operator -> BITWISE_AND .)
    STRING          reduce using rule 210 (unary_operator -> BITWISE_AND .)
    FLOAT_NUMBER    reduce using rule 210 (unary_operator -> BITWISE_AND .)
    CHARACTER       reduce using rule 210 (unary_operator -> BITWISE_AND .)
    NUMBER          reduce using rule 210 (unary_operator -> BITWISE_AND .)
    BINARY_NUMBER   reduce using rule 210 (unary_operator -> BITWISE_AND .)
    HEXADECIMAL_NUMBER reduce using rule 210 (unary_operator -> BITWISE_AND .)
    OCTAL_NUMBER    reduce using rule 210 (unary_operator -> BITWISE_AND .)


state 109

    (211) unary_operator -> TIMES .

    INCREMENT       reduce using rule 211 (unary_operator -> TIMES .)
    DECREMENT       reduce using rule 211 (unary_operator -> TIMES .)
    LPAREN          reduce using rule 211 (unary_operator -> TIMES .)
    KEYWORD_SIZEOF  reduce using rule 211 (unary_operator -> TIMES .)
    BITWISE_AND     reduce using rule 211 (unary_operator -> TIMES .)
    TIMES           reduce using rule 211 (unary_operator -> TIMES .)
    PLUS            reduce using rule 211 (unary_operator -> TIMES .)
    MINUS           reduce using rule 211 (unary_operator -> TIMES .)
    BITWISE_COMPLEMENT reduce using rule 211 (unary_operator -> TIMES .)
    NOT             reduce using rule 211 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 211 (unary_operator -> TIMES .)
    STRING          reduce using rule 211 (unary_operator -> TIMES .)
    FLOAT_NUMBER    reduce using rule 211 (unary_operator -> TIMES .)
    CHARACTER       reduce using rule 211 (unary_operator -> TIMES .)
    NUMBER          reduce using rule 211 (unary_operator -> TIMES .)
    BINARY_NUMBER   reduce using rule 211 (unary_operator -> TIMES .)
    HEXADECIMAL_NUMBER reduce using rule 211 (unary_operator -> TIMES .)
    OCTAL_NUMBER    reduce using rule 211 (unary_operator -> TIMES .)


state 110

    (212) unary_operator -> PLUS .

    INCREMENT       reduce using rule 212 (unary_operator -> PLUS .)
    DECREMENT       reduce using rule 212 (unary_operator -> PLUS .)
    LPAREN          reduce using rule 212 (unary_operator -> PLUS .)
    KEYWORD_SIZEOF  reduce using rule 212 (unary_operator -> PLUS .)
    BITWISE_AND     reduce using rule 212 (unary_operator -> PLUS .)
    TIMES           reduce using rule 212 (unary_operator -> PLUS .)
    PLUS            reduce using rule 212 (unary_operator -> PLUS .)
    MINUS           reduce using rule 212 (unary_operator -> PLUS .)
    BITWISE_COMPLEMENT reduce using rule 212 (unary_operator -> PLUS .)
    NOT             reduce using rule 212 (unary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 212 (unary_operator -> PLUS .)
    STRING          reduce using rule 212 (unary_operator -> PLUS .)
    FLOAT_NUMBER    reduce using rule 212 (unary_operator -> PLUS .)
    CHARACTER       reduce using rule 212 (unary_operator -> PLUS .)
    NUMBER          reduce using rule 212 (unary_operator -> PLUS .)
    BINARY_NUMBER   reduce using rule 212 (unary_operator -> PLUS .)
    HEXADECIMAL_NUMBER reduce using rule 212 (unary_operator -> PLUS .)
    OCTAL_NUMBER    reduce using rule 212 (unary_operator -> PLUS .)


state 111

    (213) unary_operator -> MINUS .

    INCREMENT       reduce using rule 213 (unary_operator -> MINUS .)
    DECREMENT       reduce using rule 213 (unary_operator -> MINUS .)
    LPAREN          reduce using rule 213 (unary_operator -> MINUS .)
    KEYWORD_SIZEOF  reduce using rule 213 (unary_operator -> MINUS .)
    BITWISE_AND     reduce using rule 213 (unary_operator -> MINUS .)
    TIMES           reduce using rule 213 (unary_operator -> MINUS .)
    PLUS            reduce using rule 213 (unary_operator -> MINUS .)
    MINUS           reduce using rule 213 (unary_operator -> MINUS .)
    BITWISE_COMPLEMENT reduce using rule 213 (unary_operator -> MINUS .)
    NOT             reduce using rule 213 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 213 (unary_operator -> MINUS .)
    STRING          reduce using rule 213 (unary_operator -> MINUS .)
    FLOAT_NUMBER    reduce using rule 213 (unary_operator -> MINUS .)
    CHARACTER       reduce using rule 213 (unary_operator -> MINUS .)
    NUMBER          reduce using rule 213 (unary_operator -> MINUS .)
    BINARY_NUMBER   reduce using rule 213 (unary_operator -> MINUS .)
    HEXADECIMAL_NUMBER reduce using rule 213 (unary_operator -> MINUS .)
    OCTAL_NUMBER    reduce using rule 213 (unary_operator -> MINUS .)


state 112

    (214) unary_operator -> BITWISE_COMPLEMENT .

    INCREMENT       reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)
    DECREMENT       reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)
    LPAREN          reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)
    KEYWORD_SIZEOF  reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)
    BITWISE_AND     reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)
    TIMES           reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)
    PLUS            reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)
    MINUS           reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)
    BITWISE_COMPLEMENT reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)
    NOT             reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)
    IDENTIFIER      reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)
    STRING          reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)
    FLOAT_NUMBER    reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)
    CHARACTER       reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)
    NUMBER          reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)
    BINARY_NUMBER   reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)
    HEXADECIMAL_NUMBER reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)
    OCTAL_NUMBER    reduce using rule 214 (unary_operator -> BITWISE_COMPLEMENT .)


state 113

    (215) unary_operator -> NOT .

    INCREMENT       reduce using rule 215 (unary_operator -> NOT .)
    DECREMENT       reduce using rule 215 (unary_operator -> NOT .)
    LPAREN          reduce using rule 215 (unary_operator -> NOT .)
    KEYWORD_SIZEOF  reduce using rule 215 (unary_operator -> NOT .)
    BITWISE_AND     reduce using rule 215 (unary_operator -> NOT .)
    TIMES           reduce using rule 215 (unary_operator -> NOT .)
    PLUS            reduce using rule 215 (unary_operator -> NOT .)
    MINUS           reduce using rule 215 (unary_operator -> NOT .)
    BITWISE_COMPLEMENT reduce using rule 215 (unary_operator -> NOT .)
    NOT             reduce using rule 215 (unary_operator -> NOT .)
    IDENTIFIER      reduce using rule 215 (unary_operator -> NOT .)
    STRING          reduce using rule 215 (unary_operator -> NOT .)
    FLOAT_NUMBER    reduce using rule 215 (unary_operator -> NOT .)
    CHARACTER       reduce using rule 215 (unary_operator -> NOT .)
    NUMBER          reduce using rule 215 (unary_operator -> NOT .)
    BINARY_NUMBER   reduce using rule 215 (unary_operator -> NOT .)
    HEXADECIMAL_NUMBER reduce using rule 215 (unary_operator -> NOT .)
    OCTAL_NUMBER    reduce using rule 215 (unary_operator -> NOT .)


state 114

    (173) logical_exp -> logical_or_exp .
    (174) logical_or_exp -> logical_or_exp . LOGICAL_OR logical_and_exp

    QUESTION_MARK   reduce using rule 173 (logical_exp -> logical_or_exp .)
    COMMA           reduce using rule 173 (logical_exp -> logical_or_exp .)
    SEMICOLON       reduce using rule 173 (logical_exp -> logical_or_exp .)
    RPAREN          reduce using rule 173 (logical_exp -> logical_or_exp .)
    RBRACE          reduce using rule 173 (logical_exp -> logical_or_exp .)
    RBRACKET        reduce using rule 173 (logical_exp -> logical_or_exp .)
    COLON           reduce using rule 173 (logical_exp -> logical_or_exp .)
    LOGICAL_OR      shift and go to state 226


state 115

    (237) primary_exp -> identifier_exp .

    INCREMENT       reduce using rule 237 (primary_exp -> identifier_exp .)
    DECREMENT       reduce using rule 237 (primary_exp -> identifier_exp .)
    LBRACKET        reduce using rule 237 (primary_exp -> identifier_exp .)
    LPAREN          reduce using rule 237 (primary_exp -> identifier_exp .)
    DOT             reduce using rule 237 (primary_exp -> identifier_exp .)
    ARROW           reduce using rule 237 (primary_exp -> identifier_exp .)
    ASSIGN          reduce using rule 237 (primary_exp -> identifier_exp .)
    TIMES_ASSIGN    reduce using rule 237 (primary_exp -> identifier_exp .)
    DIVIDE_ASSIGN   reduce using rule 237 (primary_exp -> identifier_exp .)
    MODULUS_ASSIGN  reduce using rule 237 (primary_exp -> identifier_exp .)
    PLUS_ASSIGN     reduce using rule 237 (primary_exp -> identifier_exp .)
    MINUS_ASSIGN    reduce using rule 237 (primary_exp -> identifier_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 237 (primary_exp -> identifier_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 237 (primary_exp -> identifier_exp .)
    BITWISE_AND_ASSIGN reduce using rule 237 (primary_exp -> identifier_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 237 (primary_exp -> identifier_exp .)
    BITWISE_OR_ASSIGN reduce using rule 237 (primary_exp -> identifier_exp .)
    MODULUS         reduce using rule 237 (primary_exp -> identifier_exp .)
    DIVIDE          reduce using rule 237 (primary_exp -> identifier_exp .)
    TIMES           reduce using rule 237 (primary_exp -> identifier_exp .)
    MINUS           reduce using rule 237 (primary_exp -> identifier_exp .)
    PLUS            reduce using rule 237 (primary_exp -> identifier_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 237 (primary_exp -> identifier_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 237 (primary_exp -> identifier_exp .)
    LESS_EQUALS     reduce using rule 237 (primary_exp -> identifier_exp .)
    LESS_THEN       reduce using rule 237 (primary_exp -> identifier_exp .)
    GREATER_EQUALS  reduce using rule 237 (primary_exp -> identifier_exp .)
    GREATER_THEN    reduce using rule 237 (primary_exp -> identifier_exp .)
    NOT_EQUALS      reduce using rule 237 (primary_exp -> identifier_exp .)
    EQUALS_THEN     reduce using rule 237 (primary_exp -> identifier_exp .)
    BITWISE_AND     reduce using rule 237 (primary_exp -> identifier_exp .)
    BITWISE_XOR     reduce using rule 237 (primary_exp -> identifier_exp .)
    BITWISE_OR      reduce using rule 237 (primary_exp -> identifier_exp .)
    LOGICAL_AND     reduce using rule 237 (primary_exp -> identifier_exp .)
    LOGICAL_OR      reduce using rule 237 (primary_exp -> identifier_exp .)
    QUESTION_MARK   reduce using rule 237 (primary_exp -> identifier_exp .)
    COMMA           reduce using rule 237 (primary_exp -> identifier_exp .)
    SEMICOLON       reduce using rule 237 (primary_exp -> identifier_exp .)
    RPAREN          reduce using rule 237 (primary_exp -> identifier_exp .)
    RBRACE          reduce using rule 237 (primary_exp -> identifier_exp .)
    RBRACKET        reduce using rule 237 (primary_exp -> identifier_exp .)
    COLON           reduce using rule 237 (primary_exp -> identifier_exp .)


state 116

    (175) logical_or_exp -> logical_and_exp .
    (176) logical_and_exp -> logical_and_exp . LOGICAL_AND bitwise_or_exp

    LOGICAL_OR      reduce using rule 175 (logical_or_exp -> logical_and_exp .)
    QUESTION_MARK   reduce using rule 175 (logical_or_exp -> logical_and_exp .)
    COMMA           reduce using rule 175 (logical_or_exp -> logical_and_exp .)
    SEMICOLON       reduce using rule 175 (logical_or_exp -> logical_and_exp .)
    RPAREN          reduce using rule 175 (logical_or_exp -> logical_and_exp .)
    RBRACE          reduce using rule 175 (logical_or_exp -> logical_and_exp .)
    RBRACKET        reduce using rule 175 (logical_or_exp -> logical_and_exp .)
    COLON           reduce using rule 175 (logical_or_exp -> logical_and_exp .)
    LOGICAL_AND     shift and go to state 227


state 117

    (239) identifier_exp -> string_exp .

    INCREMENT       reduce using rule 239 (identifier_exp -> string_exp .)
    DECREMENT       reduce using rule 239 (identifier_exp -> string_exp .)
    LBRACKET        reduce using rule 239 (identifier_exp -> string_exp .)
    LPAREN          reduce using rule 239 (identifier_exp -> string_exp .)
    DOT             reduce using rule 239 (identifier_exp -> string_exp .)
    ARROW           reduce using rule 239 (identifier_exp -> string_exp .)
    ASSIGN          reduce using rule 239 (identifier_exp -> string_exp .)
    TIMES_ASSIGN    reduce using rule 239 (identifier_exp -> string_exp .)
    DIVIDE_ASSIGN   reduce using rule 239 (identifier_exp -> string_exp .)
    MODULUS_ASSIGN  reduce using rule 239 (identifier_exp -> string_exp .)
    PLUS_ASSIGN     reduce using rule 239 (identifier_exp -> string_exp .)
    MINUS_ASSIGN    reduce using rule 239 (identifier_exp -> string_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 239 (identifier_exp -> string_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 239 (identifier_exp -> string_exp .)
    BITWISE_AND_ASSIGN reduce using rule 239 (identifier_exp -> string_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 239 (identifier_exp -> string_exp .)
    BITWISE_OR_ASSIGN reduce using rule 239 (identifier_exp -> string_exp .)
    MODULUS         reduce using rule 239 (identifier_exp -> string_exp .)
    DIVIDE          reduce using rule 239 (identifier_exp -> string_exp .)
    TIMES           reduce using rule 239 (identifier_exp -> string_exp .)
    MINUS           reduce using rule 239 (identifier_exp -> string_exp .)
    PLUS            reduce using rule 239 (identifier_exp -> string_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 239 (identifier_exp -> string_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 239 (identifier_exp -> string_exp .)
    LESS_EQUALS     reduce using rule 239 (identifier_exp -> string_exp .)
    LESS_THEN       reduce using rule 239 (identifier_exp -> string_exp .)
    GREATER_EQUALS  reduce using rule 239 (identifier_exp -> string_exp .)
    GREATER_THEN    reduce using rule 239 (identifier_exp -> string_exp .)
    NOT_EQUALS      reduce using rule 239 (identifier_exp -> string_exp .)
    EQUALS_THEN     reduce using rule 239 (identifier_exp -> string_exp .)
    BITWISE_AND     reduce using rule 239 (identifier_exp -> string_exp .)
    BITWISE_XOR     reduce using rule 239 (identifier_exp -> string_exp .)
    BITWISE_OR      reduce using rule 239 (identifier_exp -> string_exp .)
    LOGICAL_AND     reduce using rule 239 (identifier_exp -> string_exp .)
    LOGICAL_OR      reduce using rule 239 (identifier_exp -> string_exp .)
    QUESTION_MARK   reduce using rule 239 (identifier_exp -> string_exp .)
    COMMA           reduce using rule 239 (identifier_exp -> string_exp .)
    SEMICOLON       reduce using rule 239 (identifier_exp -> string_exp .)
    RPAREN          reduce using rule 239 (identifier_exp -> string_exp .)
    RBRACE          reduce using rule 239 (identifier_exp -> string_exp .)
    RBRACKET        reduce using rule 239 (identifier_exp -> string_exp .)
    COLON           reduce using rule 239 (identifier_exp -> string_exp .)


state 118

    (177) logical_and_exp -> bitwise_or_exp .
    (178) bitwise_or_exp -> bitwise_or_exp . BITWISE_OR bitwise_xor_exp

    LOGICAL_AND     reduce using rule 177 (logical_and_exp -> bitwise_or_exp .)
    LOGICAL_OR      reduce using rule 177 (logical_and_exp -> bitwise_or_exp .)
    QUESTION_MARK   reduce using rule 177 (logical_and_exp -> bitwise_or_exp .)
    COMMA           reduce using rule 177 (logical_and_exp -> bitwise_or_exp .)
    SEMICOLON       reduce using rule 177 (logical_and_exp -> bitwise_or_exp .)
    RPAREN          reduce using rule 177 (logical_and_exp -> bitwise_or_exp .)
    RBRACE          reduce using rule 177 (logical_and_exp -> bitwise_or_exp .)
    RBRACKET        reduce using rule 177 (logical_and_exp -> bitwise_or_exp .)
    COLON           reduce using rule 177 (logical_and_exp -> bitwise_or_exp .)
    BITWISE_OR      shift and go to state 228


state 119

    (240) string_exp -> STRING .

    INCREMENT       reduce using rule 240 (string_exp -> STRING .)
    DECREMENT       reduce using rule 240 (string_exp -> STRING .)
    LBRACKET        reduce using rule 240 (string_exp -> STRING .)
    LPAREN          reduce using rule 240 (string_exp -> STRING .)
    DOT             reduce using rule 240 (string_exp -> STRING .)
    ARROW           reduce using rule 240 (string_exp -> STRING .)
    ASSIGN          reduce using rule 240 (string_exp -> STRING .)
    TIMES_ASSIGN    reduce using rule 240 (string_exp -> STRING .)
    DIVIDE_ASSIGN   reduce using rule 240 (string_exp -> STRING .)
    MODULUS_ASSIGN  reduce using rule 240 (string_exp -> STRING .)
    PLUS_ASSIGN     reduce using rule 240 (string_exp -> STRING .)
    MINUS_ASSIGN    reduce using rule 240 (string_exp -> STRING .)
    SHIFT_LEFT_ASSIGN reduce using rule 240 (string_exp -> STRING .)
    SHIFT_RIGHT_ASSIGN reduce using rule 240 (string_exp -> STRING .)
    BITWISE_AND_ASSIGN reduce using rule 240 (string_exp -> STRING .)
    BITWISE_XOR_ASSIGN reduce using rule 240 (string_exp -> STRING .)
    BITWISE_OR_ASSIGN reduce using rule 240 (string_exp -> STRING .)
    MODULUS         reduce using rule 240 (string_exp -> STRING .)
    DIVIDE          reduce using rule 240 (string_exp -> STRING .)
    TIMES           reduce using rule 240 (string_exp -> STRING .)
    MINUS           reduce using rule 240 (string_exp -> STRING .)
    PLUS            reduce using rule 240 (string_exp -> STRING .)
    BITWISE_SHIFT_RIGHT reduce using rule 240 (string_exp -> STRING .)
    BITWISE_SHIFT_LEFT reduce using rule 240 (string_exp -> STRING .)
    LESS_EQUALS     reduce using rule 240 (string_exp -> STRING .)
    LESS_THEN       reduce using rule 240 (string_exp -> STRING .)
    GREATER_EQUALS  reduce using rule 240 (string_exp -> STRING .)
    GREATER_THEN    reduce using rule 240 (string_exp -> STRING .)
    NOT_EQUALS      reduce using rule 240 (string_exp -> STRING .)
    EQUALS_THEN     reduce using rule 240 (string_exp -> STRING .)
    BITWISE_AND     reduce using rule 240 (string_exp -> STRING .)
    BITWISE_XOR     reduce using rule 240 (string_exp -> STRING .)
    BITWISE_OR      reduce using rule 240 (string_exp -> STRING .)
    LOGICAL_AND     reduce using rule 240 (string_exp -> STRING .)
    LOGICAL_OR      reduce using rule 240 (string_exp -> STRING .)
    QUESTION_MARK   reduce using rule 240 (string_exp -> STRING .)
    COMMA           reduce using rule 240 (string_exp -> STRING .)
    SEMICOLON       reduce using rule 240 (string_exp -> STRING .)
    RPAREN          reduce using rule 240 (string_exp -> STRING .)
    RBRACE          reduce using rule 240 (string_exp -> STRING .)
    RBRACKET        reduce using rule 240 (string_exp -> STRING .)
    COLON           reduce using rule 240 (string_exp -> STRING .)


state 120

    (241) string_exp -> number_exp .

    INCREMENT       reduce using rule 241 (string_exp -> number_exp .)
    DECREMENT       reduce using rule 241 (string_exp -> number_exp .)
    LBRACKET        reduce using rule 241 (string_exp -> number_exp .)
    LPAREN          reduce using rule 241 (string_exp -> number_exp .)
    DOT             reduce using rule 241 (string_exp -> number_exp .)
    ARROW           reduce using rule 241 (string_exp -> number_exp .)
    ASSIGN          reduce using rule 241 (string_exp -> number_exp .)
    TIMES_ASSIGN    reduce using rule 241 (string_exp -> number_exp .)
    DIVIDE_ASSIGN   reduce using rule 241 (string_exp -> number_exp .)
    MODULUS_ASSIGN  reduce using rule 241 (string_exp -> number_exp .)
    PLUS_ASSIGN     reduce using rule 241 (string_exp -> number_exp .)
    MINUS_ASSIGN    reduce using rule 241 (string_exp -> number_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 241 (string_exp -> number_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 241 (string_exp -> number_exp .)
    BITWISE_AND_ASSIGN reduce using rule 241 (string_exp -> number_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 241 (string_exp -> number_exp .)
    BITWISE_OR_ASSIGN reduce using rule 241 (string_exp -> number_exp .)
    MODULUS         reduce using rule 241 (string_exp -> number_exp .)
    DIVIDE          reduce using rule 241 (string_exp -> number_exp .)
    TIMES           reduce using rule 241 (string_exp -> number_exp .)
    MINUS           reduce using rule 241 (string_exp -> number_exp .)
    PLUS            reduce using rule 241 (string_exp -> number_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 241 (string_exp -> number_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 241 (string_exp -> number_exp .)
    LESS_EQUALS     reduce using rule 241 (string_exp -> number_exp .)
    LESS_THEN       reduce using rule 241 (string_exp -> number_exp .)
    GREATER_EQUALS  reduce using rule 241 (string_exp -> number_exp .)
    GREATER_THEN    reduce using rule 241 (string_exp -> number_exp .)
    NOT_EQUALS      reduce using rule 241 (string_exp -> number_exp .)
    EQUALS_THEN     reduce using rule 241 (string_exp -> number_exp .)
    BITWISE_AND     reduce using rule 241 (string_exp -> number_exp .)
    BITWISE_XOR     reduce using rule 241 (string_exp -> number_exp .)
    BITWISE_OR      reduce using rule 241 (string_exp -> number_exp .)
    LOGICAL_AND     reduce using rule 241 (string_exp -> number_exp .)
    LOGICAL_OR      reduce using rule 241 (string_exp -> number_exp .)
    QUESTION_MARK   reduce using rule 241 (string_exp -> number_exp .)
    COMMA           reduce using rule 241 (string_exp -> number_exp .)
    SEMICOLON       reduce using rule 241 (string_exp -> number_exp .)
    RPAREN          reduce using rule 241 (string_exp -> number_exp .)
    RBRACE          reduce using rule 241 (string_exp -> number_exp .)
    RBRACKET        reduce using rule 241 (string_exp -> number_exp .)
    COLON           reduce using rule 241 (string_exp -> number_exp .)


state 121

    (179) bitwise_or_exp -> bitwise_xor_exp .
    (180) bitwise_xor_exp -> bitwise_xor_exp . BITWISE_XOR bitwise_and_exp

    BITWISE_OR      reduce using rule 179 (bitwise_or_exp -> bitwise_xor_exp .)
    LOGICAL_AND     reduce using rule 179 (bitwise_or_exp -> bitwise_xor_exp .)
    LOGICAL_OR      reduce using rule 179 (bitwise_or_exp -> bitwise_xor_exp .)
    QUESTION_MARK   reduce using rule 179 (bitwise_or_exp -> bitwise_xor_exp .)
    COMMA           reduce using rule 179 (bitwise_or_exp -> bitwise_xor_exp .)
    SEMICOLON       reduce using rule 179 (bitwise_or_exp -> bitwise_xor_exp .)
    RPAREN          reduce using rule 179 (bitwise_or_exp -> bitwise_xor_exp .)
    RBRACE          reduce using rule 179 (bitwise_or_exp -> bitwise_xor_exp .)
    RBRACKET        reduce using rule 179 (bitwise_or_exp -> bitwise_xor_exp .)
    COLON           reduce using rule 179 (bitwise_or_exp -> bitwise_xor_exp .)
    BITWISE_XOR     shift and go to state 229


state 122

    (242) number_exp -> integer_number .

    INCREMENT       reduce using rule 242 (number_exp -> integer_number .)
    DECREMENT       reduce using rule 242 (number_exp -> integer_number .)
    LBRACKET        reduce using rule 242 (number_exp -> integer_number .)
    LPAREN          reduce using rule 242 (number_exp -> integer_number .)
    DOT             reduce using rule 242 (number_exp -> integer_number .)
    ARROW           reduce using rule 242 (number_exp -> integer_number .)
    ASSIGN          reduce using rule 242 (number_exp -> integer_number .)
    TIMES_ASSIGN    reduce using rule 242 (number_exp -> integer_number .)
    DIVIDE_ASSIGN   reduce using rule 242 (number_exp -> integer_number .)
    MODULUS_ASSIGN  reduce using rule 242 (number_exp -> integer_number .)
    PLUS_ASSIGN     reduce using rule 242 (number_exp -> integer_number .)
    MINUS_ASSIGN    reduce using rule 242 (number_exp -> integer_number .)
    SHIFT_LEFT_ASSIGN reduce using rule 242 (number_exp -> integer_number .)
    SHIFT_RIGHT_ASSIGN reduce using rule 242 (number_exp -> integer_number .)
    BITWISE_AND_ASSIGN reduce using rule 242 (number_exp -> integer_number .)
    BITWISE_XOR_ASSIGN reduce using rule 242 (number_exp -> integer_number .)
    BITWISE_OR_ASSIGN reduce using rule 242 (number_exp -> integer_number .)
    MODULUS         reduce using rule 242 (number_exp -> integer_number .)
    DIVIDE          reduce using rule 242 (number_exp -> integer_number .)
    TIMES           reduce using rule 242 (number_exp -> integer_number .)
    MINUS           reduce using rule 242 (number_exp -> integer_number .)
    PLUS            reduce using rule 242 (number_exp -> integer_number .)
    BITWISE_SHIFT_RIGHT reduce using rule 242 (number_exp -> integer_number .)
    BITWISE_SHIFT_LEFT reduce using rule 242 (number_exp -> integer_number .)
    LESS_EQUALS     reduce using rule 242 (number_exp -> integer_number .)
    LESS_THEN       reduce using rule 242 (number_exp -> integer_number .)
    GREATER_EQUALS  reduce using rule 242 (number_exp -> integer_number .)
    GREATER_THEN    reduce using rule 242 (number_exp -> integer_number .)
    NOT_EQUALS      reduce using rule 242 (number_exp -> integer_number .)
    EQUALS_THEN     reduce using rule 242 (number_exp -> integer_number .)
    BITWISE_AND     reduce using rule 242 (number_exp -> integer_number .)
    BITWISE_XOR     reduce using rule 242 (number_exp -> integer_number .)
    BITWISE_OR      reduce using rule 242 (number_exp -> integer_number .)
    LOGICAL_AND     reduce using rule 242 (number_exp -> integer_number .)
    LOGICAL_OR      reduce using rule 242 (number_exp -> integer_number .)
    QUESTION_MARK   reduce using rule 242 (number_exp -> integer_number .)
    COMMA           reduce using rule 242 (number_exp -> integer_number .)
    SEMICOLON       reduce using rule 242 (number_exp -> integer_number .)
    RPAREN          reduce using rule 242 (number_exp -> integer_number .)
    RBRACE          reduce using rule 242 (number_exp -> integer_number .)
    RBRACKET        reduce using rule 242 (number_exp -> integer_number .)
    COLON           reduce using rule 242 (number_exp -> integer_number .)


state 123

    (243) number_exp -> FLOAT_NUMBER .

    INCREMENT       reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    DECREMENT       reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    LBRACKET        reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    LPAREN          reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    DOT             reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    ARROW           reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    ASSIGN          reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    TIMES_ASSIGN    reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    MODULUS_ASSIGN  reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    PLUS_ASSIGN     reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    MINUS_ASSIGN    reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    SHIFT_LEFT_ASSIGN reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    BITWISE_AND_ASSIGN reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    BITWISE_XOR_ASSIGN reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    BITWISE_OR_ASSIGN reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    MODULUS         reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    TIMES           reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    MINUS           reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    PLUS            reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    BITWISE_SHIFT_RIGHT reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    BITWISE_SHIFT_LEFT reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    LESS_EQUALS     reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    LESS_THEN       reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    GREATER_EQUALS  reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    GREATER_THEN    reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    NOT_EQUALS      reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    EQUALS_THEN     reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    BITWISE_AND     reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    BITWISE_XOR     reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    BITWISE_OR      reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    LOGICAL_AND     reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    LOGICAL_OR      reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    QUESTION_MARK   reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    COMMA           reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    SEMICOLON       reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    RPAREN          reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    RBRACE          reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    RBRACKET        reduce using rule 243 (number_exp -> FLOAT_NUMBER .)
    COLON           reduce using rule 243 (number_exp -> FLOAT_NUMBER .)


state 124

    (244) number_exp -> CHARACTER .

    INCREMENT       reduce using rule 244 (number_exp -> CHARACTER .)
    DECREMENT       reduce using rule 244 (number_exp -> CHARACTER .)
    LBRACKET        reduce using rule 244 (number_exp -> CHARACTER .)
    LPAREN          reduce using rule 244 (number_exp -> CHARACTER .)
    DOT             reduce using rule 244 (number_exp -> CHARACTER .)
    ARROW           reduce using rule 244 (number_exp -> CHARACTER .)
    ASSIGN          reduce using rule 244 (number_exp -> CHARACTER .)
    TIMES_ASSIGN    reduce using rule 244 (number_exp -> CHARACTER .)
    DIVIDE_ASSIGN   reduce using rule 244 (number_exp -> CHARACTER .)
    MODULUS_ASSIGN  reduce using rule 244 (number_exp -> CHARACTER .)
    PLUS_ASSIGN     reduce using rule 244 (number_exp -> CHARACTER .)
    MINUS_ASSIGN    reduce using rule 244 (number_exp -> CHARACTER .)
    SHIFT_LEFT_ASSIGN reduce using rule 244 (number_exp -> CHARACTER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 244 (number_exp -> CHARACTER .)
    BITWISE_AND_ASSIGN reduce using rule 244 (number_exp -> CHARACTER .)
    BITWISE_XOR_ASSIGN reduce using rule 244 (number_exp -> CHARACTER .)
    BITWISE_OR_ASSIGN reduce using rule 244 (number_exp -> CHARACTER .)
    MODULUS         reduce using rule 244 (number_exp -> CHARACTER .)
    DIVIDE          reduce using rule 244 (number_exp -> CHARACTER .)
    TIMES           reduce using rule 244 (number_exp -> CHARACTER .)
    MINUS           reduce using rule 244 (number_exp -> CHARACTER .)
    PLUS            reduce using rule 244 (number_exp -> CHARACTER .)
    BITWISE_SHIFT_RIGHT reduce using rule 244 (number_exp -> CHARACTER .)
    BITWISE_SHIFT_LEFT reduce using rule 244 (number_exp -> CHARACTER .)
    LESS_EQUALS     reduce using rule 244 (number_exp -> CHARACTER .)
    LESS_THEN       reduce using rule 244 (number_exp -> CHARACTER .)
    GREATER_EQUALS  reduce using rule 244 (number_exp -> CHARACTER .)
    GREATER_THEN    reduce using rule 244 (number_exp -> CHARACTER .)
    NOT_EQUALS      reduce using rule 244 (number_exp -> CHARACTER .)
    EQUALS_THEN     reduce using rule 244 (number_exp -> CHARACTER .)
    BITWISE_AND     reduce using rule 244 (number_exp -> CHARACTER .)
    BITWISE_XOR     reduce using rule 244 (number_exp -> CHARACTER .)
    BITWISE_OR      reduce using rule 244 (number_exp -> CHARACTER .)
    LOGICAL_AND     reduce using rule 244 (number_exp -> CHARACTER .)
    LOGICAL_OR      reduce using rule 244 (number_exp -> CHARACTER .)
    QUESTION_MARK   reduce using rule 244 (number_exp -> CHARACTER .)
    COMMA           reduce using rule 244 (number_exp -> CHARACTER .)
    SEMICOLON       reduce using rule 244 (number_exp -> CHARACTER .)
    RPAREN          reduce using rule 244 (number_exp -> CHARACTER .)
    RBRACE          reduce using rule 244 (number_exp -> CHARACTER .)
    RBRACKET        reduce using rule 244 (number_exp -> CHARACTER .)
    COLON           reduce using rule 244 (number_exp -> CHARACTER .)


state 125

    (245) number_exp -> parentesis_exp .

    INCREMENT       reduce using rule 245 (number_exp -> parentesis_exp .)
    DECREMENT       reduce using rule 245 (number_exp -> parentesis_exp .)
    LBRACKET        reduce using rule 245 (number_exp -> parentesis_exp .)
    LPAREN          reduce using rule 245 (number_exp -> parentesis_exp .)
    DOT             reduce using rule 245 (number_exp -> parentesis_exp .)
    ARROW           reduce using rule 245 (number_exp -> parentesis_exp .)
    ASSIGN          reduce using rule 245 (number_exp -> parentesis_exp .)
    TIMES_ASSIGN    reduce using rule 245 (number_exp -> parentesis_exp .)
    DIVIDE_ASSIGN   reduce using rule 245 (number_exp -> parentesis_exp .)
    MODULUS_ASSIGN  reduce using rule 245 (number_exp -> parentesis_exp .)
    PLUS_ASSIGN     reduce using rule 245 (number_exp -> parentesis_exp .)
    MINUS_ASSIGN    reduce using rule 245 (number_exp -> parentesis_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 245 (number_exp -> parentesis_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 245 (number_exp -> parentesis_exp .)
    BITWISE_AND_ASSIGN reduce using rule 245 (number_exp -> parentesis_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 245 (number_exp -> parentesis_exp .)
    BITWISE_OR_ASSIGN reduce using rule 245 (number_exp -> parentesis_exp .)
    MODULUS         reduce using rule 245 (number_exp -> parentesis_exp .)
    DIVIDE          reduce using rule 245 (number_exp -> parentesis_exp .)
    TIMES           reduce using rule 245 (number_exp -> parentesis_exp .)
    MINUS           reduce using rule 245 (number_exp -> parentesis_exp .)
    PLUS            reduce using rule 245 (number_exp -> parentesis_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 245 (number_exp -> parentesis_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 245 (number_exp -> parentesis_exp .)
    LESS_EQUALS     reduce using rule 245 (number_exp -> parentesis_exp .)
    LESS_THEN       reduce using rule 245 (number_exp -> parentesis_exp .)
    GREATER_EQUALS  reduce using rule 245 (number_exp -> parentesis_exp .)
    GREATER_THEN    reduce using rule 245 (number_exp -> parentesis_exp .)
    NOT_EQUALS      reduce using rule 245 (number_exp -> parentesis_exp .)
    EQUALS_THEN     reduce using rule 245 (number_exp -> parentesis_exp .)
    BITWISE_AND     reduce using rule 245 (number_exp -> parentesis_exp .)
    BITWISE_XOR     reduce using rule 245 (number_exp -> parentesis_exp .)
    BITWISE_OR      reduce using rule 245 (number_exp -> parentesis_exp .)
    LOGICAL_AND     reduce using rule 245 (number_exp -> parentesis_exp .)
    LOGICAL_OR      reduce using rule 245 (number_exp -> parentesis_exp .)
    QUESTION_MARK   reduce using rule 245 (number_exp -> parentesis_exp .)
    COMMA           reduce using rule 245 (number_exp -> parentesis_exp .)
    SEMICOLON       reduce using rule 245 (number_exp -> parentesis_exp .)
    RPAREN          reduce using rule 245 (number_exp -> parentesis_exp .)
    RBRACE          reduce using rule 245 (number_exp -> parentesis_exp .)
    RBRACKET        reduce using rule 245 (number_exp -> parentesis_exp .)
    COLON           reduce using rule 245 (number_exp -> parentesis_exp .)


state 126

    (181) bitwise_xor_exp -> bitwise_and_exp .
    (182) bitwise_and_exp -> bitwise_and_exp . BITWISE_AND is_equals_exp

    BITWISE_XOR     reduce using rule 181 (bitwise_xor_exp -> bitwise_and_exp .)
    BITWISE_OR      reduce using rule 181 (bitwise_xor_exp -> bitwise_and_exp .)
    LOGICAL_AND     reduce using rule 181 (bitwise_xor_exp -> bitwise_and_exp .)
    LOGICAL_OR      reduce using rule 181 (bitwise_xor_exp -> bitwise_and_exp .)
    QUESTION_MARK   reduce using rule 181 (bitwise_xor_exp -> bitwise_and_exp .)
    COMMA           reduce using rule 181 (bitwise_xor_exp -> bitwise_and_exp .)
    SEMICOLON       reduce using rule 181 (bitwise_xor_exp -> bitwise_and_exp .)
    RPAREN          reduce using rule 181 (bitwise_xor_exp -> bitwise_and_exp .)
    RBRACE          reduce using rule 181 (bitwise_xor_exp -> bitwise_and_exp .)
    RBRACKET        reduce using rule 181 (bitwise_xor_exp -> bitwise_and_exp .)
    COLON           reduce using rule 181 (bitwise_xor_exp -> bitwise_and_exp .)
    BITWISE_AND     shift and go to state 230


state 127

    (151) integer_number -> NUMBER .

    INCREMENT       reduce using rule 151 (integer_number -> NUMBER .)
    DECREMENT       reduce using rule 151 (integer_number -> NUMBER .)
    LBRACKET        reduce using rule 151 (integer_number -> NUMBER .)
    LPAREN          reduce using rule 151 (integer_number -> NUMBER .)
    DOT             reduce using rule 151 (integer_number -> NUMBER .)
    ARROW           reduce using rule 151 (integer_number -> NUMBER .)
    ASSIGN          reduce using rule 151 (integer_number -> NUMBER .)
    TIMES_ASSIGN    reduce using rule 151 (integer_number -> NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 151 (integer_number -> NUMBER .)
    MODULUS_ASSIGN  reduce using rule 151 (integer_number -> NUMBER .)
    PLUS_ASSIGN     reduce using rule 151 (integer_number -> NUMBER .)
    MINUS_ASSIGN    reduce using rule 151 (integer_number -> NUMBER .)
    SHIFT_LEFT_ASSIGN reduce using rule 151 (integer_number -> NUMBER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 151 (integer_number -> NUMBER .)
    BITWISE_AND_ASSIGN reduce using rule 151 (integer_number -> NUMBER .)
    BITWISE_XOR_ASSIGN reduce using rule 151 (integer_number -> NUMBER .)
    BITWISE_OR_ASSIGN reduce using rule 151 (integer_number -> NUMBER .)
    MODULUS         reduce using rule 151 (integer_number -> NUMBER .)
    DIVIDE          reduce using rule 151 (integer_number -> NUMBER .)
    TIMES           reduce using rule 151 (integer_number -> NUMBER .)
    MINUS           reduce using rule 151 (integer_number -> NUMBER .)
    PLUS            reduce using rule 151 (integer_number -> NUMBER .)
    BITWISE_SHIFT_RIGHT reduce using rule 151 (integer_number -> NUMBER .)
    BITWISE_SHIFT_LEFT reduce using rule 151 (integer_number -> NUMBER .)
    LESS_EQUALS     reduce using rule 151 (integer_number -> NUMBER .)
    LESS_THEN       reduce using rule 151 (integer_number -> NUMBER .)
    GREATER_EQUALS  reduce using rule 151 (integer_number -> NUMBER .)
    GREATER_THEN    reduce using rule 151 (integer_number -> NUMBER .)
    NOT_EQUALS      reduce using rule 151 (integer_number -> NUMBER .)
    EQUALS_THEN     reduce using rule 151 (integer_number -> NUMBER .)
    BITWISE_AND     reduce using rule 151 (integer_number -> NUMBER .)
    BITWISE_XOR     reduce using rule 151 (integer_number -> NUMBER .)
    BITWISE_OR      reduce using rule 151 (integer_number -> NUMBER .)
    LOGICAL_AND     reduce using rule 151 (integer_number -> NUMBER .)
    LOGICAL_OR      reduce using rule 151 (integer_number -> NUMBER .)
    QUESTION_MARK   reduce using rule 151 (integer_number -> NUMBER .)
    COMMA           reduce using rule 151 (integer_number -> NUMBER .)
    SEMICOLON       reduce using rule 151 (integer_number -> NUMBER .)
    RBRACKET        reduce using rule 151 (integer_number -> NUMBER .)
    RPAREN          reduce using rule 151 (integer_number -> NUMBER .)
    RBRACE          reduce using rule 151 (integer_number -> NUMBER .)
    COLON           reduce using rule 151 (integer_number -> NUMBER .)


state 128

    (152) integer_number -> BINARY_NUMBER .

    INCREMENT       reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    DECREMENT       reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    LBRACKET        reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    LPAREN          reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    DOT             reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    ARROW           reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    ASSIGN          reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    TIMES_ASSIGN    reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    MODULUS_ASSIGN  reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    PLUS_ASSIGN     reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    MINUS_ASSIGN    reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    SHIFT_LEFT_ASSIGN reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    BITWISE_AND_ASSIGN reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    BITWISE_XOR_ASSIGN reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    BITWISE_OR_ASSIGN reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    MODULUS         reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    DIVIDE          reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    TIMES           reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    MINUS           reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    PLUS            reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    BITWISE_SHIFT_RIGHT reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    BITWISE_SHIFT_LEFT reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    LESS_EQUALS     reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    LESS_THEN       reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    GREATER_EQUALS  reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    GREATER_THEN    reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    NOT_EQUALS      reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    EQUALS_THEN     reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    BITWISE_AND     reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    BITWISE_XOR     reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    BITWISE_OR      reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    LOGICAL_AND     reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    LOGICAL_OR      reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    QUESTION_MARK   reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    COMMA           reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    SEMICOLON       reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    RBRACKET        reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    RPAREN          reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    RBRACE          reduce using rule 152 (integer_number -> BINARY_NUMBER .)
    COLON           reduce using rule 152 (integer_number -> BINARY_NUMBER .)


state 129

    (153) integer_number -> HEXADECIMAL_NUMBER .

    INCREMENT       reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    DECREMENT       reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    LBRACKET        reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    LPAREN          reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    DOT             reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    ARROW           reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    ASSIGN          reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    TIMES_ASSIGN    reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    MODULUS_ASSIGN  reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    PLUS_ASSIGN     reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    MINUS_ASSIGN    reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    SHIFT_LEFT_ASSIGN reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_AND_ASSIGN reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_XOR_ASSIGN reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_OR_ASSIGN reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    MODULUS         reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    DIVIDE          reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    TIMES           reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    MINUS           reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    PLUS            reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_SHIFT_RIGHT reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_SHIFT_LEFT reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    LESS_EQUALS     reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    LESS_THEN       reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    GREATER_EQUALS  reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    GREATER_THEN    reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    NOT_EQUALS      reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    EQUALS_THEN     reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_AND     reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_XOR     reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    BITWISE_OR      reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    LOGICAL_AND     reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    LOGICAL_OR      reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    QUESTION_MARK   reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    COMMA           reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    SEMICOLON       reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    RBRACKET        reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    RPAREN          reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    RBRACE          reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)
    COLON           reduce using rule 153 (integer_number -> HEXADECIMAL_NUMBER .)


state 130

    (154) integer_number -> OCTAL_NUMBER .

    INCREMENT       reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    DECREMENT       reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    LBRACKET        reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    LPAREN          reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    DOT             reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    ARROW           reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    ASSIGN          reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    TIMES_ASSIGN    reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    MODULUS_ASSIGN  reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    PLUS_ASSIGN     reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    MINUS_ASSIGN    reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    SHIFT_LEFT_ASSIGN reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    BITWISE_AND_ASSIGN reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    BITWISE_XOR_ASSIGN reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    BITWISE_OR_ASSIGN reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    MODULUS         reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    DIVIDE          reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    TIMES           reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    MINUS           reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    PLUS            reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    BITWISE_SHIFT_RIGHT reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    BITWISE_SHIFT_LEFT reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    LESS_EQUALS     reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    LESS_THEN       reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    GREATER_EQUALS  reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    GREATER_THEN    reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    NOT_EQUALS      reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    EQUALS_THEN     reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    BITWISE_AND     reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    BITWISE_XOR     reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    BITWISE_OR      reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    LOGICAL_AND     reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    LOGICAL_OR      reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    QUESTION_MARK   reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    COMMA           reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    SEMICOLON       reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    RBRACKET        reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    RPAREN          reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    RBRACE          reduce using rule 154 (integer_number -> OCTAL_NUMBER .)
    COLON           reduce using rule 154 (integer_number -> OCTAL_NUMBER .)


state 131

    (183) bitwise_and_exp -> is_equals_exp .
    (184) is_equals_exp -> is_equals_exp . EQUALS_THEN is_not_equals_exp

    BITWISE_AND     reduce using rule 183 (bitwise_and_exp -> is_equals_exp .)
    BITWISE_XOR     reduce using rule 183 (bitwise_and_exp -> is_equals_exp .)
    BITWISE_OR      reduce using rule 183 (bitwise_and_exp -> is_equals_exp .)
    LOGICAL_AND     reduce using rule 183 (bitwise_and_exp -> is_equals_exp .)
    LOGICAL_OR      reduce using rule 183 (bitwise_and_exp -> is_equals_exp .)
    QUESTION_MARK   reduce using rule 183 (bitwise_and_exp -> is_equals_exp .)
    COMMA           reduce using rule 183 (bitwise_and_exp -> is_equals_exp .)
    SEMICOLON       reduce using rule 183 (bitwise_and_exp -> is_equals_exp .)
    RPAREN          reduce using rule 183 (bitwise_and_exp -> is_equals_exp .)
    RBRACE          reduce using rule 183 (bitwise_and_exp -> is_equals_exp .)
    RBRACKET        reduce using rule 183 (bitwise_and_exp -> is_equals_exp .)
    COLON           reduce using rule 183 (bitwise_and_exp -> is_equals_exp .)
    EQUALS_THEN     shift and go to state 231


state 132

    (185) is_equals_exp -> is_not_equals_exp .
    (186) is_not_equals_exp -> is_not_equals_exp . NOT_EQUALS greater_then_exp

    EQUALS_THEN     reduce using rule 185 (is_equals_exp -> is_not_equals_exp .)
    BITWISE_AND     reduce using rule 185 (is_equals_exp -> is_not_equals_exp .)
    BITWISE_XOR     reduce using rule 185 (is_equals_exp -> is_not_equals_exp .)
    BITWISE_OR      reduce using rule 185 (is_equals_exp -> is_not_equals_exp .)
    LOGICAL_AND     reduce using rule 185 (is_equals_exp -> is_not_equals_exp .)
    LOGICAL_OR      reduce using rule 185 (is_equals_exp -> is_not_equals_exp .)
    QUESTION_MARK   reduce using rule 185 (is_equals_exp -> is_not_equals_exp .)
    COMMA           reduce using rule 185 (is_equals_exp -> is_not_equals_exp .)
    SEMICOLON       reduce using rule 185 (is_equals_exp -> is_not_equals_exp .)
    RPAREN          reduce using rule 185 (is_equals_exp -> is_not_equals_exp .)
    RBRACE          reduce using rule 185 (is_equals_exp -> is_not_equals_exp .)
    RBRACKET        reduce using rule 185 (is_equals_exp -> is_not_equals_exp .)
    COLON           reduce using rule 185 (is_equals_exp -> is_not_equals_exp .)
    NOT_EQUALS      shift and go to state 232


state 133

    (187) is_not_equals_exp -> greater_then_exp .
    (188) greater_then_exp -> greater_then_exp . GREATER_THEN greater_equals_exp

    NOT_EQUALS      reduce using rule 187 (is_not_equals_exp -> greater_then_exp .)
    EQUALS_THEN     reduce using rule 187 (is_not_equals_exp -> greater_then_exp .)
    BITWISE_AND     reduce using rule 187 (is_not_equals_exp -> greater_then_exp .)
    BITWISE_XOR     reduce using rule 187 (is_not_equals_exp -> greater_then_exp .)
    BITWISE_OR      reduce using rule 187 (is_not_equals_exp -> greater_then_exp .)
    LOGICAL_AND     reduce using rule 187 (is_not_equals_exp -> greater_then_exp .)
    LOGICAL_OR      reduce using rule 187 (is_not_equals_exp -> greater_then_exp .)
    QUESTION_MARK   reduce using rule 187 (is_not_equals_exp -> greater_then_exp .)
    COMMA           reduce using rule 187 (is_not_equals_exp -> greater_then_exp .)
    SEMICOLON       reduce using rule 187 (is_not_equals_exp -> greater_then_exp .)
    RPAREN          reduce using rule 187 (is_not_equals_exp -> greater_then_exp .)
    RBRACE          reduce using rule 187 (is_not_equals_exp -> greater_then_exp .)
    RBRACKET        reduce using rule 187 (is_not_equals_exp -> greater_then_exp .)
    COLON           reduce using rule 187 (is_not_equals_exp -> greater_then_exp .)
    GREATER_THEN    shift and go to state 233


state 134

    (189) greater_then_exp -> greater_equals_exp .
    (190) greater_equals_exp -> greater_equals_exp . GREATER_EQUALS less_then_exp

    GREATER_THEN    reduce using rule 189 (greater_then_exp -> greater_equals_exp .)
    NOT_EQUALS      reduce using rule 189 (greater_then_exp -> greater_equals_exp .)
    EQUALS_THEN     reduce using rule 189 (greater_then_exp -> greater_equals_exp .)
    BITWISE_AND     reduce using rule 189 (greater_then_exp -> greater_equals_exp .)
    BITWISE_XOR     reduce using rule 189 (greater_then_exp -> greater_equals_exp .)
    BITWISE_OR      reduce using rule 189 (greater_then_exp -> greater_equals_exp .)
    LOGICAL_AND     reduce using rule 189 (greater_then_exp -> greater_equals_exp .)
    LOGICAL_OR      reduce using rule 189 (greater_then_exp -> greater_equals_exp .)
    QUESTION_MARK   reduce using rule 189 (greater_then_exp -> greater_equals_exp .)
    COMMA           reduce using rule 189 (greater_then_exp -> greater_equals_exp .)
    SEMICOLON       reduce using rule 189 (greater_then_exp -> greater_equals_exp .)
    RPAREN          reduce using rule 189 (greater_then_exp -> greater_equals_exp .)
    RBRACE          reduce using rule 189 (greater_then_exp -> greater_equals_exp .)
    RBRACKET        reduce using rule 189 (greater_then_exp -> greater_equals_exp .)
    COLON           reduce using rule 189 (greater_then_exp -> greater_equals_exp .)
    GREATER_EQUALS  shift and go to state 234


state 135

    (191) greater_equals_exp -> less_then_exp .
    (192) less_then_exp -> less_then_exp . LESS_THEN less_equals_exp

    GREATER_EQUALS  reduce using rule 191 (greater_equals_exp -> less_then_exp .)
    GREATER_THEN    reduce using rule 191 (greater_equals_exp -> less_then_exp .)
    NOT_EQUALS      reduce using rule 191 (greater_equals_exp -> less_then_exp .)
    EQUALS_THEN     reduce using rule 191 (greater_equals_exp -> less_then_exp .)
    BITWISE_AND     reduce using rule 191 (greater_equals_exp -> less_then_exp .)
    BITWISE_XOR     reduce using rule 191 (greater_equals_exp -> less_then_exp .)
    BITWISE_OR      reduce using rule 191 (greater_equals_exp -> less_then_exp .)
    LOGICAL_AND     reduce using rule 191 (greater_equals_exp -> less_then_exp .)
    LOGICAL_OR      reduce using rule 191 (greater_equals_exp -> less_then_exp .)
    QUESTION_MARK   reduce using rule 191 (greater_equals_exp -> less_then_exp .)
    COMMA           reduce using rule 191 (greater_equals_exp -> less_then_exp .)
    SEMICOLON       reduce using rule 191 (greater_equals_exp -> less_then_exp .)
    RPAREN          reduce using rule 191 (greater_equals_exp -> less_then_exp .)
    RBRACE          reduce using rule 191 (greater_equals_exp -> less_then_exp .)
    RBRACKET        reduce using rule 191 (greater_equals_exp -> less_then_exp .)
    COLON           reduce using rule 191 (greater_equals_exp -> less_then_exp .)
    LESS_THEN       shift and go to state 235


state 136

    (193) less_then_exp -> less_equals_exp .
    (194) less_equals_exp -> less_equals_exp . LESS_EQUALS left_shift_exp

    LESS_THEN       reduce using rule 193 (less_then_exp -> less_equals_exp .)
    GREATER_EQUALS  reduce using rule 193 (less_then_exp -> less_equals_exp .)
    GREATER_THEN    reduce using rule 193 (less_then_exp -> less_equals_exp .)
    NOT_EQUALS      reduce using rule 193 (less_then_exp -> less_equals_exp .)
    EQUALS_THEN     reduce using rule 193 (less_then_exp -> less_equals_exp .)
    BITWISE_AND     reduce using rule 193 (less_then_exp -> less_equals_exp .)
    BITWISE_XOR     reduce using rule 193 (less_then_exp -> less_equals_exp .)
    BITWISE_OR      reduce using rule 193 (less_then_exp -> less_equals_exp .)
    LOGICAL_AND     reduce using rule 193 (less_then_exp -> less_equals_exp .)
    LOGICAL_OR      reduce using rule 193 (less_then_exp -> less_equals_exp .)
    QUESTION_MARK   reduce using rule 193 (less_then_exp -> less_equals_exp .)
    COMMA           reduce using rule 193 (less_then_exp -> less_equals_exp .)
    SEMICOLON       reduce using rule 193 (less_then_exp -> less_equals_exp .)
    RPAREN          reduce using rule 193 (less_then_exp -> less_equals_exp .)
    RBRACE          reduce using rule 193 (less_then_exp -> less_equals_exp .)
    RBRACKET        reduce using rule 193 (less_then_exp -> less_equals_exp .)
    COLON           reduce using rule 193 (less_then_exp -> less_equals_exp .)
    LESS_EQUALS     shift and go to state 236


state 137

    (195) less_equals_exp -> left_shift_exp .
    (196) left_shift_exp -> left_shift_exp . BITWISE_SHIFT_LEFT right_shift_exp

    LESS_EQUALS     reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    LESS_THEN       reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    GREATER_EQUALS  reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    GREATER_THEN    reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    NOT_EQUALS      reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    EQUALS_THEN     reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    BITWISE_AND     reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    BITWISE_XOR     reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    BITWISE_OR      reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    LOGICAL_AND     reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    LOGICAL_OR      reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    QUESTION_MARK   reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    COMMA           reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    SEMICOLON       reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    RPAREN          reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    RBRACE          reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    RBRACKET        reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    COLON           reduce using rule 195 (less_equals_exp -> left_shift_exp .)
    BITWISE_SHIFT_LEFT shift and go to state 237


state 138

    (197) left_shift_exp -> right_shift_exp .
    (198) right_shift_exp -> right_shift_exp . BITWISE_SHIFT_RIGHT plus_exp

    BITWISE_SHIFT_LEFT reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    LESS_EQUALS     reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    LESS_THEN       reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    GREATER_EQUALS  reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    GREATER_THEN    reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    NOT_EQUALS      reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    EQUALS_THEN     reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    BITWISE_AND     reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    BITWISE_XOR     reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    BITWISE_OR      reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    LOGICAL_AND     reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    LOGICAL_OR      reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    QUESTION_MARK   reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    COMMA           reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    SEMICOLON       reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    RPAREN          reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    RBRACE          reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    RBRACKET        reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    COLON           reduce using rule 197 (left_shift_exp -> right_shift_exp .)
    BITWISE_SHIFT_RIGHT shift and go to state 238


state 139

    (199) right_shift_exp -> plus_exp .
    (200) plus_exp -> plus_exp . PLUS minus_exp

    BITWISE_SHIFT_RIGHT reduce using rule 199 (right_shift_exp -> plus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 199 (right_shift_exp -> plus_exp .)
    LESS_EQUALS     reduce using rule 199 (right_shift_exp -> plus_exp .)
    LESS_THEN       reduce using rule 199 (right_shift_exp -> plus_exp .)
    GREATER_EQUALS  reduce using rule 199 (right_shift_exp -> plus_exp .)
    GREATER_THEN    reduce using rule 199 (right_shift_exp -> plus_exp .)
    NOT_EQUALS      reduce using rule 199 (right_shift_exp -> plus_exp .)
    EQUALS_THEN     reduce using rule 199 (right_shift_exp -> plus_exp .)
    BITWISE_AND     reduce using rule 199 (right_shift_exp -> plus_exp .)
    BITWISE_XOR     reduce using rule 199 (right_shift_exp -> plus_exp .)
    BITWISE_OR      reduce using rule 199 (right_shift_exp -> plus_exp .)
    LOGICAL_AND     reduce using rule 199 (right_shift_exp -> plus_exp .)
    LOGICAL_OR      reduce using rule 199 (right_shift_exp -> plus_exp .)
    QUESTION_MARK   reduce using rule 199 (right_shift_exp -> plus_exp .)
    COMMA           reduce using rule 199 (right_shift_exp -> plus_exp .)
    SEMICOLON       reduce using rule 199 (right_shift_exp -> plus_exp .)
    RPAREN          reduce using rule 199 (right_shift_exp -> plus_exp .)
    RBRACE          reduce using rule 199 (right_shift_exp -> plus_exp .)
    RBRACKET        reduce using rule 199 (right_shift_exp -> plus_exp .)
    COLON           reduce using rule 199 (right_shift_exp -> plus_exp .)
    PLUS            shift and go to state 239


state 140

    (201) plus_exp -> minus_exp .
    (202) minus_exp -> minus_exp . MINUS times_exp

    PLUS            reduce using rule 201 (plus_exp -> minus_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 201 (plus_exp -> minus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 201 (plus_exp -> minus_exp .)
    LESS_EQUALS     reduce using rule 201 (plus_exp -> minus_exp .)
    LESS_THEN       reduce using rule 201 (plus_exp -> minus_exp .)
    GREATER_EQUALS  reduce using rule 201 (plus_exp -> minus_exp .)
    GREATER_THEN    reduce using rule 201 (plus_exp -> minus_exp .)
    NOT_EQUALS      reduce using rule 201 (plus_exp -> minus_exp .)
    EQUALS_THEN     reduce using rule 201 (plus_exp -> minus_exp .)
    BITWISE_AND     reduce using rule 201 (plus_exp -> minus_exp .)
    BITWISE_XOR     reduce using rule 201 (plus_exp -> minus_exp .)
    BITWISE_OR      reduce using rule 201 (plus_exp -> minus_exp .)
    LOGICAL_AND     reduce using rule 201 (plus_exp -> minus_exp .)
    LOGICAL_OR      reduce using rule 201 (plus_exp -> minus_exp .)
    QUESTION_MARK   reduce using rule 201 (plus_exp -> minus_exp .)
    COMMA           reduce using rule 201 (plus_exp -> minus_exp .)
    SEMICOLON       reduce using rule 201 (plus_exp -> minus_exp .)
    RPAREN          reduce using rule 201 (plus_exp -> minus_exp .)
    RBRACE          reduce using rule 201 (plus_exp -> minus_exp .)
    RBRACKET        reduce using rule 201 (plus_exp -> minus_exp .)
    COLON           reduce using rule 201 (plus_exp -> minus_exp .)
    MINUS           shift and go to state 240


state 141

    (203) minus_exp -> times_exp .
    (204) times_exp -> times_exp . TIMES divide_exp

    MINUS           reduce using rule 203 (minus_exp -> times_exp .)
    PLUS            reduce using rule 203 (minus_exp -> times_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 203 (minus_exp -> times_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 203 (minus_exp -> times_exp .)
    LESS_EQUALS     reduce using rule 203 (minus_exp -> times_exp .)
    LESS_THEN       reduce using rule 203 (minus_exp -> times_exp .)
    GREATER_EQUALS  reduce using rule 203 (minus_exp -> times_exp .)
    GREATER_THEN    reduce using rule 203 (minus_exp -> times_exp .)
    NOT_EQUALS      reduce using rule 203 (minus_exp -> times_exp .)
    EQUALS_THEN     reduce using rule 203 (minus_exp -> times_exp .)
    BITWISE_AND     reduce using rule 203 (minus_exp -> times_exp .)
    BITWISE_XOR     reduce using rule 203 (minus_exp -> times_exp .)
    BITWISE_OR      reduce using rule 203 (minus_exp -> times_exp .)
    LOGICAL_AND     reduce using rule 203 (minus_exp -> times_exp .)
    LOGICAL_OR      reduce using rule 203 (minus_exp -> times_exp .)
    QUESTION_MARK   reduce using rule 203 (minus_exp -> times_exp .)
    COMMA           reduce using rule 203 (minus_exp -> times_exp .)
    SEMICOLON       reduce using rule 203 (minus_exp -> times_exp .)
    RPAREN          reduce using rule 203 (minus_exp -> times_exp .)
    RBRACE          reduce using rule 203 (minus_exp -> times_exp .)
    RBRACKET        reduce using rule 203 (minus_exp -> times_exp .)
    COLON           reduce using rule 203 (minus_exp -> times_exp .)
    TIMES           shift and go to state 241


state 142

    (205) times_exp -> divide_exp .
    (206) divide_exp -> divide_exp . DIVIDE modulus_exp

    TIMES           reduce using rule 205 (times_exp -> divide_exp .)
    MINUS           reduce using rule 205 (times_exp -> divide_exp .)
    PLUS            reduce using rule 205 (times_exp -> divide_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 205 (times_exp -> divide_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 205 (times_exp -> divide_exp .)
    LESS_EQUALS     reduce using rule 205 (times_exp -> divide_exp .)
    LESS_THEN       reduce using rule 205 (times_exp -> divide_exp .)
    GREATER_EQUALS  reduce using rule 205 (times_exp -> divide_exp .)
    GREATER_THEN    reduce using rule 205 (times_exp -> divide_exp .)
    NOT_EQUALS      reduce using rule 205 (times_exp -> divide_exp .)
    EQUALS_THEN     reduce using rule 205 (times_exp -> divide_exp .)
    BITWISE_AND     reduce using rule 205 (times_exp -> divide_exp .)
    BITWISE_XOR     reduce using rule 205 (times_exp -> divide_exp .)
    BITWISE_OR      reduce using rule 205 (times_exp -> divide_exp .)
    LOGICAL_AND     reduce using rule 205 (times_exp -> divide_exp .)
    LOGICAL_OR      reduce using rule 205 (times_exp -> divide_exp .)
    QUESTION_MARK   reduce using rule 205 (times_exp -> divide_exp .)
    COMMA           reduce using rule 205 (times_exp -> divide_exp .)
    SEMICOLON       reduce using rule 205 (times_exp -> divide_exp .)
    RPAREN          reduce using rule 205 (times_exp -> divide_exp .)
    RBRACE          reduce using rule 205 (times_exp -> divide_exp .)
    RBRACKET        reduce using rule 205 (times_exp -> divide_exp .)
    COLON           reduce using rule 205 (times_exp -> divide_exp .)
    DIVIDE          shift and go to state 242


state 143

    (207) divide_exp -> modulus_exp .
    (208) modulus_exp -> modulus_exp . MODULUS unary_exp

    DIVIDE          reduce using rule 207 (divide_exp -> modulus_exp .)
    TIMES           reduce using rule 207 (divide_exp -> modulus_exp .)
    MINUS           reduce using rule 207 (divide_exp -> modulus_exp .)
    PLUS            reduce using rule 207 (divide_exp -> modulus_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 207 (divide_exp -> modulus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 207 (divide_exp -> modulus_exp .)
    LESS_EQUALS     reduce using rule 207 (divide_exp -> modulus_exp .)
    LESS_THEN       reduce using rule 207 (divide_exp -> modulus_exp .)
    GREATER_EQUALS  reduce using rule 207 (divide_exp -> modulus_exp .)
    GREATER_THEN    reduce using rule 207 (divide_exp -> modulus_exp .)
    NOT_EQUALS      reduce using rule 207 (divide_exp -> modulus_exp .)
    EQUALS_THEN     reduce using rule 207 (divide_exp -> modulus_exp .)
    BITWISE_AND     reduce using rule 207 (divide_exp -> modulus_exp .)
    BITWISE_XOR     reduce using rule 207 (divide_exp -> modulus_exp .)
    BITWISE_OR      reduce using rule 207 (divide_exp -> modulus_exp .)
    LOGICAL_AND     reduce using rule 207 (divide_exp -> modulus_exp .)
    LOGICAL_OR      reduce using rule 207 (divide_exp -> modulus_exp .)
    QUESTION_MARK   reduce using rule 207 (divide_exp -> modulus_exp .)
    COMMA           reduce using rule 207 (divide_exp -> modulus_exp .)
    SEMICOLON       reduce using rule 207 (divide_exp -> modulus_exp .)
    RPAREN          reduce using rule 207 (divide_exp -> modulus_exp .)
    RBRACE          reduce using rule 207 (divide_exp -> modulus_exp .)
    RBRACKET        reduce using rule 207 (divide_exp -> modulus_exp .)
    COLON           reduce using rule 207 (divide_exp -> modulus_exp .)
    MODULUS         shift and go to state 243


state 144

    (238) identifier_exp -> IDENTIFIER .

    INCREMENT       reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    DECREMENT       reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    LBRACKET        reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    LPAREN          reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    DOT             reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    ARROW           reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    ASSIGN          reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    MODULUS_ASSIGN  reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    SHIFT_LEFT_ASSIGN reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    BITWISE_AND_ASSIGN reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    BITWISE_XOR_ASSIGN reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    BITWISE_OR_ASSIGN reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    MODULUS         reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    TIMES           reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    MINUS           reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    PLUS            reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    BITWISE_SHIFT_RIGHT reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    BITWISE_SHIFT_LEFT reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    LESS_THEN       reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    GREATER_THEN    reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    EQUALS_THEN     reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    BITWISE_AND     reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    BITWISE_XOR     reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    BITWISE_OR      reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    QUESTION_MARK   reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    COMMA           reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    RPAREN          reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    RBRACE          reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    RBRACKET        reduce using rule 238 (identifier_exp -> IDENTIFIER .)
    COLON           reduce using rule 238 (identifier_exp -> IDENTIFIER .)


state 145

    (7) global_assign_identifier_list -> IDENTIFIER ASSIGN expression .
    (8) global_assign_identifier_list -> IDENTIFIER ASSIGN expression . COMMA global_assign_identifier_list

    SEMICOLON       reduce using rule 7 (global_assign_identifier_list -> IDENTIFIER ASSIGN expression .)
    COMMA           shift and go to state 244


state 146

    (127) struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE . RBRACE
    (128) struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE . struct_or_union_member_list RBRACE
    (140) struct_or_union_member_list -> . variable_declaration_list_no_assign SEMICOLON
    (141) struct_or_union_member_list -> . variable_declaration_list_no_assign SEMICOLON struct_or_union_member_list
    (142) variable_declaration_list_no_assign -> . type variable_list_no_assign
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER

    RBRACE          shift and go to state 245
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31

    struct_or_union_member_list    shift and go to state 246
    variable_declaration_list_no_assign shift and go to state 149
    type                           shift and go to state 150
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14

state 147

    (129) struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE .

    SEMICOLON       reduce using rule 129 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 129 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE .)
    TIMES           reduce using rule 129 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE .)
    LPAREN          reduce using rule 129 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE .)
    LBRACKET        reduce using rule 129 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE .)
    COMMA           reduce using rule 129 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE .)
    RPAREN          reduce using rule 129 (struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE .)


state 148

    (130) struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list . RBRACE

    RBRACE          shift and go to state 247


state 149

    (140) struct_or_union_member_list -> variable_declaration_list_no_assign . SEMICOLON
    (141) struct_or_union_member_list -> variable_declaration_list_no_assign . SEMICOLON struct_or_union_member_list

    SEMICOLON       shift and go to state 248


state 150

    (142) variable_declaration_list_no_assign -> type . variable_list_no_assign
    (143) variable_list_no_assign -> . identifier
    (144) variable_list_no_assign -> . variable_list_no_assign COMMA identifier
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN

    IDENTIFIER      shift and go to state 41
    TIMES           shift and go to state 42
    LPAREN          shift and go to state 59

    variable_list_no_assign        shift and go to state 249
    identifier                     shift and go to state 250

state 151

    (132) union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE . RBRACE
    (133) union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE . struct_or_union_member_list RBRACE
    (140) struct_or_union_member_list -> . variable_declaration_list_no_assign SEMICOLON
    (141) struct_or_union_member_list -> . variable_declaration_list_no_assign SEMICOLON struct_or_union_member_list
    (142) variable_declaration_list_no_assign -> . type variable_list_no_assign
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER

    RBRACE          shift and go to state 251
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31

    struct_or_union_member_list    shift and go to state 252
    variable_declaration_list_no_assign shift and go to state 149
    type                           shift and go to state 150
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14

state 152

    (134) union_declaration -> KEYWORD_UNION LBRACE RBRACE .

    SEMICOLON       reduce using rule 134 (union_declaration -> KEYWORD_UNION LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 134 (union_declaration -> KEYWORD_UNION LBRACE RBRACE .)
    TIMES           reduce using rule 134 (union_declaration -> KEYWORD_UNION LBRACE RBRACE .)
    LPAREN          reduce using rule 134 (union_declaration -> KEYWORD_UNION LBRACE RBRACE .)
    LBRACKET        reduce using rule 134 (union_declaration -> KEYWORD_UNION LBRACE RBRACE .)
    COMMA           reduce using rule 134 (union_declaration -> KEYWORD_UNION LBRACE RBRACE .)
    RPAREN          reduce using rule 134 (union_declaration -> KEYWORD_UNION LBRACE RBRACE .)


state 153

    (135) union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list . RBRACE

    RBRACE          shift and go to state 253


state 154

    (137) enum_declaration -> KEYWORD_ENUM LBRACE enum_item_list . RBRACE

    RBRACE          shift and go to state 254


state 155

    (145) enum_item_list -> IDENTIFIER .
    (146) enum_item_list -> IDENTIFIER . COMMA enum_item_list
    (147) enum_item_list -> IDENTIFIER . ASSIGN expression
    (148) enum_item_list -> IDENTIFIER . ASSIGN expression COMMA enum_item_list

    RBRACE          reduce using rule 145 (enum_item_list -> IDENTIFIER .)
    COMMA           shift and go to state 255
    ASSIGN          shift and go to state 256


state 156

    (138) enum_declaration -> KEYWORD_ENUM IDENTIFIER LBRACE . enum_item_list RBRACE
    (145) enum_item_list -> . IDENTIFIER
    (146) enum_item_list -> . IDENTIFIER COMMA enum_item_list
    (147) enum_item_list -> . IDENTIFIER ASSIGN expression
    (148) enum_item_list -> . IDENTIFIER ASSIGN expression COMMA enum_item_list

    IDENTIFIER      shift and go to state 155

    enum_item_list                 shift and go to state 257

state 157

    (62) signature_param -> type .
    (63) signature_param -> type . multiple_times
    (64) signature_param -> type . multiple_bracket_signature
    (65) signature_param -> type . identifier
    (66) signature_param -> type . identifier multiple_bracket_signature
    (149) multiple_times -> . TIMES multiple_times
    (150) multiple_times -> . TIMES
    (68) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_signature
    (69) multiple_bracket_signature -> . LBRACKET RBRACKET
    (70) multiple_bracket_signature -> . bracket_with_bounds multiple_bracket_signature
    (71) multiple_bracket_signature -> . bracket_with_bounds
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN
    (72) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    COMMA           reduce using rule 62 (signature_param -> type .)
    RPAREN          reduce using rule 62 (signature_param -> type .)
    TIMES           shift and go to state 261
    LBRACKET        shift and go to state 57
    IDENTIFIER      shift and go to state 41
    LPAREN          shift and go to state 59

    multiple_times                 shift and go to state 258
    multiple_bracket_signature     shift and go to state 259
    identifier                     shift and go to state 260
    bracket_with_bounds            shift and go to state 58

state 158

    (57) function_signature -> type identifier LPAREN signature_param_list . RPAREN
    (100) function_pointer -> identifier LPAREN signature_param_list . RPAREN

    RPAREN          shift and go to state 262


state 159

    (58) function_signature -> type identifier LPAREN RPAREN .
    (101) function_pointer -> identifier LPAREN RPAREN .

    LBRACE          reduce using rule 58 (function_signature -> type identifier LPAREN RPAREN .)
    COMMA           reduce using rule 101 (function_pointer -> identifier LPAREN RPAREN .)
    ASSIGN          reduce using rule 101 (function_pointer -> identifier LPAREN RPAREN .)
    SEMICOLON       reduce using rule 101 (function_pointer -> identifier LPAREN RPAREN .)


state 160

    (60) signature_param_list -> signature_param . COMMA signature_param_list
    (61) signature_param_list -> signature_param .

    COMMA           shift and go to state 263
    RPAREN          reduce using rule 61 (signature_param_list -> signature_param .)


state 161

    (67) signature_param -> triple_dot .

    COMMA           reduce using rule 67 (signature_param -> triple_dot .)
    RPAREN          reduce using rule 67 (signature_param -> triple_dot .)


state 162

    (59) triple_dot -> DOT . DOT DOT

    DOT             shift and go to state 264


state 163

    (82) identifier_list -> identifier .
    (83) identifier_list -> identifier . COMMA identifier_list
    (84) identifier_list -> identifier . multiple_bracket_signature
    (85) identifier_list -> identifier . multiple_bracket_signature COMMA identifier_list
    (86) identifier_list -> identifier . ASSIGN expression
    (87) identifier_list -> identifier . ASSIGN expression COMMA identifier_list
    (88) identifier_list -> identifier . multiple_bracket_signature ASSIGN value_list
    (89) identifier_list -> identifier . multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (90) identifier_list -> identifier . ASSIGN value_list
    (91) identifier_list -> identifier . ASSIGN value_list COMMA identifier_list
    (100) function_pointer -> identifier . LPAREN signature_param_list RPAREN
    (101) function_pointer -> identifier . LPAREN RPAREN
    (68) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_signature
    (69) multiple_bracket_signature -> . LBRACKET RBRACKET
    (70) multiple_bracket_signature -> . bracket_with_bounds multiple_bracket_signature
    (71) multiple_bracket_signature -> . bracket_with_bounds
    (72) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    SEMICOLON       reduce using rule 82 (identifier_list -> identifier .)
    COMMA           shift and go to state 54
    ASSIGN          shift and go to state 56
    LPAREN          shift and go to state 265
    LBRACKET        shift and go to state 57

    multiple_bracket_signature     shift and go to state 55
    bracket_with_bounds            shift and go to state 58

state 164

    (83) identifier_list -> identifier COMMA identifier_list .

    SEMICOLON       reduce using rule 83 (identifier_list -> identifier COMMA identifier_list .)


state 165

    (85) identifier_list -> identifier multiple_bracket_signature COMMA . identifier_list
    (82) identifier_list -> . identifier
    (83) identifier_list -> . identifier COMMA identifier_list
    (84) identifier_list -> . identifier multiple_bracket_signature
    (85) identifier_list -> . identifier multiple_bracket_signature COMMA identifier_list
    (86) identifier_list -> . identifier ASSIGN expression
    (87) identifier_list -> . identifier ASSIGN expression COMMA identifier_list
    (88) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list
    (89) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (90) identifier_list -> . identifier ASSIGN value_list
    (91) identifier_list -> . identifier ASSIGN value_list COMMA identifier_list
    (92) identifier_list -> . function_pointer
    (93) identifier_list -> . function_pointer COMMA identifier_list
    (94) identifier_list -> . function_pointer ASSIGN expression
    (95) identifier_list -> . function_pointer ASSIGN expression COMMA identifier_list
    (96) identifier_list -> . function_pointer_array
    (97) identifier_list -> . function_pointer_array COMMA identifier_list
    (98) identifier_list -> . function_pointer_array ASSIGN value_list
    (99) identifier_list -> . function_pointer_array ASSIGN value_list COMMA identifier_list
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN
    (100) function_pointer -> . identifier LPAREN signature_param_list RPAREN
    (101) function_pointer -> . identifier LPAREN RPAREN
    (102) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN
    (103) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN

    IDENTIFIER      shift and go to state 41
    TIMES           shift and go to state 42
    LPAREN          shift and go to state 38

    identifier                     shift and go to state 163
    identifier_list                shift and go to state 266
    function_pointer               shift and go to state 39
    function_pointer_array         shift and go to state 40

state 166

    (88) identifier_list -> identifier multiple_bracket_signature ASSIGN . value_list
    (89) identifier_list -> identifier multiple_bracket_signature ASSIGN . value_list COMMA identifier_list
    (75) value_list -> . LBRACE value_list_item RBRACE
    (76) value_list -> . LBRACE RBRACE

    LBRACE          shift and go to state 169

    value_list                     shift and go to state 267

state 167

    (86) identifier_list -> identifier ASSIGN expression .
    (87) identifier_list -> identifier ASSIGN expression . COMMA identifier_list

    SEMICOLON       reduce using rule 86 (identifier_list -> identifier ASSIGN expression .)
    COMMA           shift and go to state 268


state 168

    (90) identifier_list -> identifier ASSIGN value_list .
    (91) identifier_list -> identifier ASSIGN value_list . COMMA identifier_list

    SEMICOLON       reduce using rule 90 (identifier_list -> identifier ASSIGN value_list .)
    COMMA           shift and go to state 269


state 169

    (75) value_list -> LBRACE . value_list_item RBRACE
    (76) value_list -> LBRACE . RBRACE
    (77) value_list_item -> . expression
    (78) value_list_item -> . expression COMMA value_list_item
    (79) value_list_item -> . value_list
    (80) value_list_item -> . value_list COMMA value_list_item
    (157) expression -> . assign_exp
    (75) value_list -> . LBRACE value_list_item RBRACE
    (76) value_list -> . LBRACE RBRACE
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    RBRACE          shift and go to state 271
    LBRACE          shift and go to state 169
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    value_list_item                shift and go to state 270
    expression                     shift and go to state 272
    value_list                     shift and go to state 273
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 170

    (68) multiple_bracket_signature -> LBRACKET RBRACKET . multiple_bracket_signature
    (69) multiple_bracket_signature -> LBRACKET RBRACKET .
    (68) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_signature
    (69) multiple_bracket_signature -> . LBRACKET RBRACKET
    (70) multiple_bracket_signature -> . bracket_with_bounds multiple_bracket_signature
    (71) multiple_bracket_signature -> . bracket_with_bounds
    (72) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    COMMA           reduce using rule 69 (multiple_bracket_signature -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 69 (multiple_bracket_signature -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 69 (multiple_bracket_signature -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 69 (multiple_bracket_signature -> LBRACKET RBRACKET .)
    LBRACKET        shift and go to state 57

    multiple_bracket_signature     shift and go to state 274
    bracket_with_bounds            shift and go to state 58

state 171

    (72) bracket_with_bounds -> LBRACKET number_id . RBRACKET

    RBRACKET        shift and go to state 275


state 172

    (73) number_id -> IDENTIFIER .

    RBRACKET        reduce using rule 73 (number_id -> IDENTIFIER .)


state 173

    (74) number_id -> integer_number .

    RBRACKET        reduce using rule 74 (number_id -> integer_number .)


state 174

    (70) multiple_bracket_signature -> bracket_with_bounds multiple_bracket_signature .

    COMMA           reduce using rule 70 (multiple_bracket_signature -> bracket_with_bounds multiple_bracket_signature .)
    ASSIGN          reduce using rule 70 (multiple_bracket_signature -> bracket_with_bounds multiple_bracket_signature .)
    SEMICOLON       reduce using rule 70 (multiple_bracket_signature -> bracket_with_bounds multiple_bracket_signature .)
    RPAREN          reduce using rule 70 (multiple_bracket_signature -> bracket_with_bounds multiple_bracket_signature .)


state 175

    (106) identifier -> LPAREN identifier RPAREN .

    LPAREN          reduce using rule 106 (identifier -> LPAREN identifier RPAREN .)
    COMMA           reduce using rule 106 (identifier -> LPAREN identifier RPAREN .)
    ASSIGN          reduce using rule 106 (identifier -> LPAREN identifier RPAREN .)
    LBRACKET        reduce using rule 106 (identifier -> LPAREN identifier RPAREN .)
    SEMICOLON       reduce using rule 106 (identifier -> LPAREN identifier RPAREN .)
    RPAREN          reduce using rule 106 (identifier -> LPAREN identifier RPAREN .)


state 176

    (102) function_pointer_array -> LPAREN TIMES identifier . multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN
    (103) function_pointer_array -> LPAREN TIMES identifier . multiple_bracket_signature RPAREN LPAREN RPAREN
    (105) identifier -> TIMES identifier .
    (68) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_signature
    (69) multiple_bracket_signature -> . LBRACKET RBRACKET
    (70) multiple_bracket_signature -> . bracket_with_bounds multiple_bracket_signature
    (71) multiple_bracket_signature -> . bracket_with_bounds
    (72) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    RPAREN          reduce using rule 105 (identifier -> TIMES identifier .)
    LBRACKET        shift and go to state 57

    multiple_bracket_signature     shift and go to state 276
    bracket_with_bounds            shift and go to state 58

state 177

    (93) identifier_list -> function_pointer COMMA identifier_list .

    SEMICOLON       reduce using rule 93 (identifier_list -> function_pointer COMMA identifier_list .)


state 178

    (94) identifier_list -> function_pointer ASSIGN expression .
    (95) identifier_list -> function_pointer ASSIGN expression . COMMA identifier_list

    SEMICOLON       reduce using rule 94 (identifier_list -> function_pointer ASSIGN expression .)
    COMMA           shift and go to state 277


state 179

    (97) identifier_list -> function_pointer_array COMMA identifier_list .

    SEMICOLON       reduce using rule 97 (identifier_list -> function_pointer_array COMMA identifier_list .)


state 180

    (98) identifier_list -> function_pointer_array ASSIGN value_list .
    (99) identifier_list -> function_pointer_array ASSIGN value_list . COMMA identifier_list

    SEMICOLON       reduce using rule 98 (identifier_list -> function_pointer_array ASSIGN value_list .)
    COMMA           shift and go to state 278


state 181

    (10) block -> LBRACE block_statements RBRACE .

    IDENTIFIER      reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    TYPE_CHAR       reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    TYPE_INT        reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    TYPE_SHORT      reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    TYPE_LONG       reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    TYPE_FLOAT      reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    TYPE_DOUBLE     reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    TYPE_VOID       reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_STATIC  reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_UNSIGNED reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_VOLATILE reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_EXTERN  reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_SIGNED  reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_REGISTER reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_CONST   reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_STRUCT  reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_UNION   reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_ENUM    reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    $end            reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    RBRACE          reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    SEMICOLON       reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_BREAK   reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_CONTINUE reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_GOTO    reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_IF      reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_WHILE   reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_FOR     reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    LBRACE          reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_SWITCH  reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_DO      reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_RETURN  reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    INCREMENT       reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    DECREMENT       reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    LPAREN          reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_SIZEOF  reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    BITWISE_AND     reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    TIMES           reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    PLUS            reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    MINUS           reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    BITWISE_COMPLEMENT reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    NOT             reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    STRING          reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    FLOAT_NUMBER    reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    CHARACTER       reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    NUMBER          reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    BINARY_NUMBER   reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    HEXADECIMAL_NUMBER reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    OCTAL_NUMBER    reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_CASE    reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_DEFAULT reduce using rule 10 (block -> LBRACE block_statements RBRACE .)
    KEYWORD_ELSE    reduce using rule 10 (block -> LBRACE block_statements RBRACE .)


state 182

    (12) block_statements -> block_statements block_statement .

    RBRACE          reduce using rule 12 (block_statements -> block_statements block_statement .)
    SEMICOLON       reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_BREAK   reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_CONTINUE reduce using rule 12 (block_statements -> block_statements block_statement .)
    IDENTIFIER      reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_GOTO    reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_IF      reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_WHILE   reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_FOR     reduce using rule 12 (block_statements -> block_statements block_statement .)
    LBRACE          reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_SWITCH  reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_DO      reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_RETURN  reduce using rule 12 (block_statements -> block_statements block_statement .)
    TYPE_CHAR       reduce using rule 12 (block_statements -> block_statements block_statement .)
    TYPE_INT        reduce using rule 12 (block_statements -> block_statements block_statement .)
    TYPE_SHORT      reduce using rule 12 (block_statements -> block_statements block_statement .)
    TYPE_LONG       reduce using rule 12 (block_statements -> block_statements block_statement .)
    TYPE_FLOAT      reduce using rule 12 (block_statements -> block_statements block_statement .)
    TYPE_DOUBLE     reduce using rule 12 (block_statements -> block_statements block_statement .)
    TYPE_VOID       reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_STATIC  reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_UNSIGNED reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_VOLATILE reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_EXTERN  reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_SIGNED  reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_REGISTER reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_CONST   reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_STRUCT  reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_UNION   reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_ENUM    reduce using rule 12 (block_statements -> block_statements block_statement .)
    INCREMENT       reduce using rule 12 (block_statements -> block_statements block_statement .)
    DECREMENT       reduce using rule 12 (block_statements -> block_statements block_statement .)
    LPAREN          reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_SIZEOF  reduce using rule 12 (block_statements -> block_statements block_statement .)
    BITWISE_AND     reduce using rule 12 (block_statements -> block_statements block_statement .)
    TIMES           reduce using rule 12 (block_statements -> block_statements block_statement .)
    PLUS            reduce using rule 12 (block_statements -> block_statements block_statement .)
    MINUS           reduce using rule 12 (block_statements -> block_statements block_statement .)
    BITWISE_COMPLEMENT reduce using rule 12 (block_statements -> block_statements block_statement .)
    NOT             reduce using rule 12 (block_statements -> block_statements block_statement .)
    STRING          reduce using rule 12 (block_statements -> block_statements block_statement .)
    FLOAT_NUMBER    reduce using rule 12 (block_statements -> block_statements block_statement .)
    CHARACTER       reduce using rule 12 (block_statements -> block_statements block_statement .)
    NUMBER          reduce using rule 12 (block_statements -> block_statements block_statement .)
    BINARY_NUMBER   reduce using rule 12 (block_statements -> block_statements block_statement .)
    HEXADECIMAL_NUMBER reduce using rule 12 (block_statements -> block_statements block_statement .)
    OCTAL_NUMBER    reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_CASE    reduce using rule 12 (block_statements -> block_statements block_statement .)
    KEYWORD_DEFAULT reduce using rule 12 (block_statements -> block_statements block_statement .)


state 183

    (21) statement_without_trailing_substatement -> expression_list SEMICOLON .

    RBRACE          reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    SEMICOLON       reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_CONTINUE reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    IDENTIFIER      reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_IF      reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_FOR     reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    LBRACE          reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_DO      reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    TYPE_CHAR       reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    TYPE_INT        reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    TYPE_SHORT      reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    TYPE_LONG       reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    TYPE_FLOAT      reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    TYPE_VOID       reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_CONST   reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_UNION   reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_ENUM    reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    INCREMENT       reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    DECREMENT       reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    LPAREN          reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    BITWISE_AND     reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    TIMES           reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    PLUS            reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    MINUS           reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    NOT             reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    STRING          reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    CHARACTER       reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    NUMBER          reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    BINARY_NUMBER   reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_CASE    reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 21 (statement_without_trailing_substatement -> expression_list SEMICOLON .)


state 184

    (24) statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .

    RBRACE          reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_CONTINUE reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_IF      reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_FOR     reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    LBRACE          reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_DO      reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    TYPE_CHAR       reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    TYPE_INT        reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    TYPE_SHORT      reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    TYPE_LONG       reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    TYPE_FLOAT      reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    TYPE_VOID       reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_CONST   reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_UNION   reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_ENUM    reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    INCREMENT       reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    DECREMENT       reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    LPAREN          reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    BITWISE_AND     reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    TIMES           reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    PLUS            reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    MINUS           reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    NOT             reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    STRING          reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    CHARACTER       reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    NUMBER          reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    BINARY_NUMBER   reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_CASE    reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 24 (statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON .)


state 185

    (25) statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .

    RBRACE          reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_CONTINUE reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_IF      reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_FOR     reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_DO      reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    TYPE_CHAR       reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    TYPE_INT        reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    TYPE_SHORT      reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    TYPE_LONG       reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    TYPE_FLOAT      reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    TYPE_VOID       reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_CONST   reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_UNION   reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_ENUM    reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    INCREMENT       reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    DECREMENT       reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    BITWISE_AND     reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    TIMES           reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    PLUS            reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    MINUS           reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    NOT             reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    STRING          reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    CHARACTER       reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    BINARY_NUMBER   reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_CASE    reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 25 (statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON .)


state 186

    (26) statement_without_trailing_substatement -> return_stm SEMICOLON .

    RBRACE          reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    SEMICOLON       reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_CONTINUE reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    IDENTIFIER      reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_IF      reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_FOR     reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    LBRACE          reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_DO      reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    TYPE_CHAR       reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    TYPE_INT        reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    TYPE_SHORT      reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    TYPE_LONG       reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    TYPE_FLOAT      reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    TYPE_VOID       reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_CONST   reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_UNION   reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_ENUM    reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    INCREMENT       reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    DECREMENT       reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    LPAREN          reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    BITWISE_AND     reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    TIMES           reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    PLUS            reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    MINUS           reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    NOT             reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    STRING          reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    CHARACTER       reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    NUMBER          reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    BINARY_NUMBER   reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_CASE    reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 26 (statement_without_trailing_substatement -> return_stm SEMICOLON .)


state 187

    (27) statement_without_trailing_substatement -> IDENTIFIER COLON .

    RBRACE          reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    SEMICOLON       reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_BREAK   reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_CONTINUE reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    IDENTIFIER      reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_GOTO    reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_IF      reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_WHILE   reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_FOR     reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    LBRACE          reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_SWITCH  reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_DO      reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_RETURN  reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    TYPE_CHAR       reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    TYPE_INT        reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    TYPE_SHORT      reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    TYPE_LONG       reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    TYPE_FLOAT      reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    TYPE_DOUBLE     reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    TYPE_VOID       reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_STATIC  reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_UNSIGNED reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_VOLATILE reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_EXTERN  reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_SIGNED  reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_REGISTER reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_CONST   reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_STRUCT  reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_UNION   reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_ENUM    reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    INCREMENT       reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    DECREMENT       reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    LPAREN          reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_SIZEOF  reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    BITWISE_AND     reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    TIMES           reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    PLUS            reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    MINUS           reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    BITWISE_COMPLEMENT reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    NOT             reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    STRING          reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    FLOAT_NUMBER    reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    CHARACTER       reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    NUMBER          reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    BINARY_NUMBER   reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    HEXADECIMAL_NUMBER reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    OCTAL_NUMBER    reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_CASE    reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_DEFAULT reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)
    KEYWORD_ELSE    reduce using rule 27 (statement_without_trailing_substatement -> IDENTIFIER COLON .)


state 188

    (28) statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 279


state 189

    (29) statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .

    RBRACE          reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    SEMICOLON       reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_CONTINUE reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    IDENTIFIER      reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_IF      reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_FOR     reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    LBRACE          reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_DO      reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    TYPE_CHAR       reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    TYPE_INT        reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    TYPE_SHORT      reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    TYPE_LONG       reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    TYPE_FLOAT      reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    TYPE_VOID       reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_CONST   reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_UNION   reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_ENUM    reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    INCREMENT       reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    DECREMENT       reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    LPAREN          reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    BITWISE_AND     reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    TIMES           reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    PLUS            reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    MINUS           reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    NOT             reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    STRING          reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    CHARACTER       reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    NUMBER          reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    BINARY_NUMBER   reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_CASE    reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 29 (statement_without_trailing_substatement -> variable_declaration_list SEMICOLON .)


state 190

    (30) statement_without_trailing_substatement -> type SEMICOLON .

    RBRACE          reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    SEMICOLON       reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_CONTINUE reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    IDENTIFIER      reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_IF      reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_FOR     reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    LBRACE          reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_DO      reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    TYPE_CHAR       reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    TYPE_INT        reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    TYPE_SHORT      reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    TYPE_LONG       reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    TYPE_FLOAT      reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    TYPE_VOID       reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_CONST   reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_UNION   reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_ENUM    reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    INCREMENT       reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    DECREMENT       reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    LPAREN          reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    BITWISE_AND     reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    TIMES           reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    PLUS            reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    MINUS           reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    NOT             reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    STRING          reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    CHARACTER       reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    NUMBER          reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    BINARY_NUMBER   reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_CASE    reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 30 (statement_without_trailing_substatement -> type SEMICOLON .)


state 191

    (35) if_then_statement -> KEYWORD_IF LPAREN . expression RPAREN statement
    (36) if_then_else_statement -> KEYWORD_IF LPAREN . expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 280
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 192

    (227) cast_exp -> LPAREN type . RPAREN
    (228) cast_exp -> LPAREN type . multiple_times RPAREN
    (149) multiple_times -> . TIMES multiple_times
    (150) multiple_times -> . TIMES

    RPAREN          shift and go to state 281
    TIMES           shift and go to state 283

    multiple_times                 shift and go to state 282

state 193

    (246) parentesis_exp -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 284


state 194

    (156) expression_list -> expression COMMA . expression_list
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 90
    expression_list                shift and go to state 285
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 195

    (38) while_statement -> KEYWORD_WHILE LPAREN . expression RPAREN statement
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 286
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 196

    (47) for_statement -> KEYWORD_FOR LPAREN . for_params RPAREN statement
    (41) for_params -> . variable_declaration_list SEMICOLON for_param
    (42) for_params -> . variable_declaration_list SEMICOLON for_param expression_list
    (43) for_params -> . for_param for_param expression_list
    (44) for_params -> . for_param for_param
    (81) variable_declaration_list -> . type identifier_list
    (45) for_param -> . SEMICOLON
    (46) for_param -> . expression_list SEMICOLON
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (157) expression -> . assign_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    SEMICOLON       shift and go to state 289
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    for_params                     shift and go to state 287
    variable_declaration_list      shift and go to state 288
    for_param                      shift and go to state 290
    expression_list                shift and go to state 291
    type                           shift and go to state 292
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    expression                     shift and go to state 90
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 197

    (49) switch_stm -> KEYWORD_SWITCH LPAREN . expression RPAREN LBRACE switch_itens RBRACE
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 293
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 198

    (40) do_statement -> KEYWORD_DO statement . KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON

    KEYWORD_WHILE   shift and go to state 294


state 199

    (55) return_stm -> KEYWORD_RETURN expression .

    SEMICOLON       reduce using rule 55 (return_stm -> KEYWORD_RETURN expression .)


state 200

    (169) assign_exp -> unary_exp assign_operator . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    unary_exp                      shift and go to state 97
    assign_exp                     shift and go to state 295
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 201

    (158) assign_operator -> ASSIGN .

    INCREMENT       reduce using rule 158 (assign_operator -> ASSIGN .)
    DECREMENT       reduce using rule 158 (assign_operator -> ASSIGN .)
    LPAREN          reduce using rule 158 (assign_operator -> ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 158 (assign_operator -> ASSIGN .)
    BITWISE_AND     reduce using rule 158 (assign_operator -> ASSIGN .)
    TIMES           reduce using rule 158 (assign_operator -> ASSIGN .)
    PLUS            reduce using rule 158 (assign_operator -> ASSIGN .)
    MINUS           reduce using rule 158 (assign_operator -> ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 158 (assign_operator -> ASSIGN .)
    NOT             reduce using rule 158 (assign_operator -> ASSIGN .)
    IDENTIFIER      reduce using rule 158 (assign_operator -> ASSIGN .)
    STRING          reduce using rule 158 (assign_operator -> ASSIGN .)
    FLOAT_NUMBER    reduce using rule 158 (assign_operator -> ASSIGN .)
    CHARACTER       reduce using rule 158 (assign_operator -> ASSIGN .)
    NUMBER          reduce using rule 158 (assign_operator -> ASSIGN .)
    BINARY_NUMBER   reduce using rule 158 (assign_operator -> ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 158 (assign_operator -> ASSIGN .)
    OCTAL_NUMBER    reduce using rule 158 (assign_operator -> ASSIGN .)


state 202

    (159) assign_operator -> TIMES_ASSIGN .

    INCREMENT       reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)
    DECREMENT       reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)
    LPAREN          reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)
    BITWISE_AND     reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)
    TIMES           reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)
    PLUS            reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)
    MINUS           reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)
    NOT             reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)
    IDENTIFIER      reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)
    STRING          reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)
    CHARACTER       reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)
    NUMBER          reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)
    BINARY_NUMBER   reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 159 (assign_operator -> TIMES_ASSIGN .)


state 203

    (160) assign_operator -> DIVIDE_ASSIGN .

    INCREMENT       reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)
    DECREMENT       reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)
    BITWISE_AND     reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)
    TIMES           reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)
    NOT             reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)
    IDENTIFIER      reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)
    STRING          reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)
    CHARACTER       reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER          reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)
    BINARY_NUMBER   reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 160 (assign_operator -> DIVIDE_ASSIGN .)


state 204

    (161) assign_operator -> MODULUS_ASSIGN .

    INCREMENT       reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)
    DECREMENT       reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)
    LPAREN          reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)
    BITWISE_AND     reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)
    TIMES           reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)
    PLUS            reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)
    MINUS           reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)
    NOT             reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)
    IDENTIFIER      reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)
    STRING          reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)
    CHARACTER       reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)
    NUMBER          reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)
    BINARY_NUMBER   reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 161 (assign_operator -> MODULUS_ASSIGN .)


state 205

    (162) assign_operator -> PLUS_ASSIGN .

    INCREMENT       reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)
    DECREMENT       reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)
    BITWISE_AND     reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)
    TIMES           reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)
    PLUS            reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)
    NOT             reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)
    IDENTIFIER      reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)
    STRING          reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)
    CHARACTER       reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)
    NUMBER          reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)
    BINARY_NUMBER   reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 162 (assign_operator -> PLUS_ASSIGN .)


state 206

    (163) assign_operator -> MINUS_ASSIGN .

    INCREMENT       reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)
    DECREMENT       reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)
    LPAREN          reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)
    BITWISE_AND     reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)
    TIMES           reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)
    PLUS            reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)
    MINUS           reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)
    NOT             reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)
    IDENTIFIER      reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)
    STRING          reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)
    CHARACTER       reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)
    NUMBER          reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)
    BINARY_NUMBER   reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 163 (assign_operator -> MINUS_ASSIGN .)


state 207

    (164) assign_operator -> SHIFT_LEFT_ASSIGN .

    INCREMENT       reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    DECREMENT       reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    LPAREN          reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    BITWISE_AND     reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    TIMES           reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    PLUS            reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    MINUS           reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    NOT             reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    STRING          reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    CHARACTER       reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    NUMBER          reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    BINARY_NUMBER   reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 164 (assign_operator -> SHIFT_LEFT_ASSIGN .)


state 208

    (165) assign_operator -> SHIFT_RIGHT_ASSIGN .

    INCREMENT       reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    DECREMENT       reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    LPAREN          reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    BITWISE_AND     reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    TIMES           reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    PLUS            reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    MINUS           reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    NOT             reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    STRING          reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    CHARACTER       reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    NUMBER          reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    BINARY_NUMBER   reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 165 (assign_operator -> SHIFT_RIGHT_ASSIGN .)


state 209

    (166) assign_operator -> BITWISE_AND_ASSIGN .

    INCREMENT       reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)
    DECREMENT       reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)
    LPAREN          reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)
    BITWISE_AND     reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)
    TIMES           reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)
    PLUS            reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)
    MINUS           reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)
    NOT             reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)
    IDENTIFIER      reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)
    STRING          reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)
    CHARACTER       reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)
    NUMBER          reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)
    BINARY_NUMBER   reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 166 (assign_operator -> BITWISE_AND_ASSIGN .)


state 210

    (167) assign_operator -> BITWISE_XOR_ASSIGN .

    INCREMENT       reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)
    DECREMENT       reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)
    LPAREN          reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)
    BITWISE_AND     reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)
    TIMES           reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)
    PLUS            reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)
    MINUS           reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)
    NOT             reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)
    STRING          reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)
    CHARACTER       reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)
    NUMBER          reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)
    BINARY_NUMBER   reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 167 (assign_operator -> BITWISE_XOR_ASSIGN .)


state 211

    (168) assign_operator -> BITWISE_OR_ASSIGN .

    INCREMENT       reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)
    DECREMENT       reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)
    LPAREN          reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)
    KEYWORD_SIZEOF  reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)
    BITWISE_AND     reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)
    TIMES           reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)
    PLUS            reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)
    MINUS           reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)
    BITWISE_COMPLEMENT reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)
    NOT             reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)
    IDENTIFIER      reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)
    STRING          reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)
    FLOAT_NUMBER    reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)
    CHARACTER       reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)
    NUMBER          reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)
    BINARY_NUMBER   reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)
    HEXADECIMAL_NUMBER reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)
    OCTAL_NUMBER    reduce using rule 168 (assign_operator -> BITWISE_OR_ASSIGN .)


state 212

    (219) unary_exp -> postfix_exp INCREMENT .

    ASSIGN          reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    TIMES_ASSIGN    reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    DIVIDE_ASSIGN   reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    MODULUS_ASSIGN  reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    PLUS_ASSIGN     reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    MINUS_ASSIGN    reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    SHIFT_LEFT_ASSIGN reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    SHIFT_RIGHT_ASSIGN reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    BITWISE_AND_ASSIGN reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    BITWISE_XOR_ASSIGN reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    BITWISE_OR_ASSIGN reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    MODULUS         reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    DIVIDE          reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    TIMES           reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    MINUS           reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    PLUS            reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    BITWISE_SHIFT_RIGHT reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    BITWISE_SHIFT_LEFT reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    LESS_EQUALS     reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    LESS_THEN       reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    GREATER_EQUALS  reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    GREATER_THEN    reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    NOT_EQUALS      reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    EQUALS_THEN     reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    BITWISE_AND     reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    BITWISE_XOR     reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    BITWISE_OR      reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    LOGICAL_AND     reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    LOGICAL_OR      reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    QUESTION_MARK   reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    COMMA           reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    SEMICOLON       reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    RPAREN          reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    RBRACE          reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    RBRACKET        reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)
    COLON           reduce using rule 219 (unary_exp -> postfix_exp INCREMENT .)


state 213

    (220) unary_exp -> postfix_exp DECREMENT .

    ASSIGN          reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    TIMES_ASSIGN    reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    DIVIDE_ASSIGN   reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    MODULUS_ASSIGN  reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    PLUS_ASSIGN     reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    MINUS_ASSIGN    reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    SHIFT_LEFT_ASSIGN reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    SHIFT_RIGHT_ASSIGN reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    BITWISE_AND_ASSIGN reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    BITWISE_XOR_ASSIGN reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    BITWISE_OR_ASSIGN reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    MODULUS         reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    DIVIDE          reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    TIMES           reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    MINUS           reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    PLUS            reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    BITWISE_SHIFT_RIGHT reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    BITWISE_SHIFT_LEFT reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    LESS_EQUALS     reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    LESS_THEN       reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    GREATER_EQUALS  reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    GREATER_THEN    reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    NOT_EQUALS      reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    EQUALS_THEN     reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    BITWISE_AND     reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    BITWISE_XOR     reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    BITWISE_OR      reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    LOGICAL_AND     reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    LOGICAL_OR      reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    QUESTION_MARK   reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    COMMA           reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    SEMICOLON       reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    RPAREN          reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    RBRACE          reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    RBRACKET        reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)
    COLON           reduce using rule 220 (unary_exp -> postfix_exp DECREMENT .)


state 214

    (229) postfix_exp -> postfix_exp LBRACKET . expression RBRACKET
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    postfix_exp                    shift and go to state 99
    expression                     shift and go to state 296
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 215

    (230) postfix_exp -> postfix_exp LPAREN . RPAREN
    (231) postfix_exp -> postfix_exp LPAREN . function_call_parameters RPAREN
    (235) function_call_parameters -> . expression
    (236) function_call_parameters -> . expression COMMA function_call_parameters
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    RPAREN          shift and go to state 297
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    postfix_exp                    shift and go to state 99
    function_call_parameters       shift and go to state 298
    expression                     shift and go to state 299
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 216

    (232) postfix_exp -> postfix_exp DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 300


state 217

    (233) postfix_exp -> postfix_exp ARROW . IDENTIFIER

    IDENTIFIER      shift and go to state 301


state 218

    (217) unary_exp -> INCREMENT postfix_exp .
    (229) postfix_exp -> postfix_exp . LBRACKET expression RBRACKET
    (230) postfix_exp -> postfix_exp . LPAREN RPAREN
    (231) postfix_exp -> postfix_exp . LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> postfix_exp . DOT IDENTIFIER
    (233) postfix_exp -> postfix_exp . ARROW IDENTIFIER

    ASSIGN          reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    TIMES_ASSIGN    reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    DIVIDE_ASSIGN   reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    MODULUS_ASSIGN  reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    PLUS_ASSIGN     reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    MINUS_ASSIGN    reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    BITWISE_AND_ASSIGN reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    BITWISE_OR_ASSIGN reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    MODULUS         reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    DIVIDE          reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    TIMES           reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    MINUS           reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    PLUS            reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    LESS_EQUALS     reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    LESS_THEN       reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    GREATER_EQUALS  reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    GREATER_THEN    reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    NOT_EQUALS      reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    EQUALS_THEN     reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    BITWISE_AND     reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    BITWISE_XOR     reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    BITWISE_OR      reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    LOGICAL_AND     reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    LOGICAL_OR      reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    QUESTION_MARK   reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    COMMA           reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    SEMICOLON       reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    RPAREN          reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    RBRACE          reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    RBRACKET        reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    COLON           reduce using rule 217 (unary_exp -> INCREMENT postfix_exp .)
    LBRACKET        shift and go to state 214
    LPAREN          shift and go to state 215
    DOT             shift and go to state 216
    ARROW           shift and go to state 217


state 219

    (246) parentesis_exp -> LPAREN . expression RPAREN
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 193
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 220

    (218) unary_exp -> DECREMENT postfix_exp .
    (229) postfix_exp -> postfix_exp . LBRACKET expression RBRACKET
    (230) postfix_exp -> postfix_exp . LPAREN RPAREN
    (231) postfix_exp -> postfix_exp . LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> postfix_exp . DOT IDENTIFIER
    (233) postfix_exp -> postfix_exp . ARROW IDENTIFIER

    ASSIGN          reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    TIMES_ASSIGN    reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    DIVIDE_ASSIGN   reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    MODULUS_ASSIGN  reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    PLUS_ASSIGN     reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    MINUS_ASSIGN    reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    BITWISE_AND_ASSIGN reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    BITWISE_OR_ASSIGN reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    MODULUS         reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    DIVIDE          reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    TIMES           reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    MINUS           reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    PLUS            reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    LESS_EQUALS     reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    LESS_THEN       reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    GREATER_EQUALS  reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    GREATER_THEN    reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    NOT_EQUALS      reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    EQUALS_THEN     reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    BITWISE_AND     reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    BITWISE_XOR     reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    BITWISE_OR      reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    LOGICAL_AND     reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    LOGICAL_OR      reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    QUESTION_MARK   reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    COMMA           reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    SEMICOLON       reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    RPAREN          reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    RBRACE          reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    RBRACKET        reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    COLON           reduce using rule 218 (unary_exp -> DECREMENT postfix_exp .)
    LBRACKET        shift and go to state 214
    LPAREN          shift and go to state 215
    DOT             shift and go to state 216
    ARROW           shift and go to state 217


state 221

    (221) unary_exp -> cast_exp postfix_exp .
    (229) postfix_exp -> postfix_exp . LBRACKET expression RBRACKET
    (230) postfix_exp -> postfix_exp . LPAREN RPAREN
    (231) postfix_exp -> postfix_exp . LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> postfix_exp . DOT IDENTIFIER
    (233) postfix_exp -> postfix_exp . ARROW IDENTIFIER

    ASSIGN          reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    TIMES_ASSIGN    reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    DIVIDE_ASSIGN   reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    MODULUS_ASSIGN  reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    PLUS_ASSIGN     reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    MINUS_ASSIGN    reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    BITWISE_AND_ASSIGN reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    BITWISE_OR_ASSIGN reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    MODULUS         reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    DIVIDE          reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    TIMES           reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    MINUS           reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    PLUS            reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    LESS_EQUALS     reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    LESS_THEN       reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    GREATER_EQUALS  reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    GREATER_THEN    reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    NOT_EQUALS      reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    EQUALS_THEN     reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    BITWISE_AND     reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    BITWISE_XOR     reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    BITWISE_OR      reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    LOGICAL_AND     reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    LOGICAL_OR      reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    QUESTION_MARK   reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    COMMA           reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    SEMICOLON       reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    RPAREN          reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    RBRACE          reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    RBRACKET        reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    COLON           reduce using rule 221 (unary_exp -> cast_exp postfix_exp .)
    LBRACKET        shift and go to state 214
    LPAREN          shift and go to state 215
    DOT             shift and go to state 216
    ARROW           shift and go to state 217


state 222

    (223) unary_exp -> unary_operator unary_exp .

    ASSIGN          reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    TIMES_ASSIGN    reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    DIVIDE_ASSIGN   reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    MODULUS_ASSIGN  reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    PLUS_ASSIGN     reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    MINUS_ASSIGN    reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    BITWISE_AND_ASSIGN reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    BITWISE_OR_ASSIGN reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    MODULUS         reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    DIVIDE          reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    TIMES           reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    MINUS           reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    PLUS            reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    LESS_EQUALS     reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    LESS_THEN       reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    GREATER_EQUALS  reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    GREATER_THEN    reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    NOT_EQUALS      reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    EQUALS_THEN     reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    BITWISE_AND     reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    BITWISE_XOR     reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    BITWISE_OR      reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    LOGICAL_AND     reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    LOGICAL_OR      reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    QUESTION_MARK   reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    COMMA           reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    SEMICOLON       reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    RPAREN          reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    RBRACE          reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    RBRACKET        reduce using rule 223 (unary_exp -> unary_operator unary_exp .)
    COLON           reduce using rule 223 (unary_exp -> unary_operator unary_exp .)


state 223

    (171) ternary_conditional_exp -> logical_exp QUESTION_MARK . expression COLON ternary_conditional_exp
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    logical_exp                    shift and go to state 105
    expression                     shift and go to state 302
    ternary_conditional_exp        shift and go to state 98
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 224

    (224) sizeof_exp -> KEYWORD_SIZEOF postfix_exp .
    (229) postfix_exp -> postfix_exp . LBRACKET expression RBRACKET
    (230) postfix_exp -> postfix_exp . LPAREN RPAREN
    (231) postfix_exp -> postfix_exp . LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> postfix_exp . DOT IDENTIFIER
    (233) postfix_exp -> postfix_exp . ARROW IDENTIFIER

    ASSIGN          reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    TIMES_ASSIGN    reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    DIVIDE_ASSIGN   reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    MODULUS_ASSIGN  reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    PLUS_ASSIGN     reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    MINUS_ASSIGN    reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    SHIFT_LEFT_ASSIGN reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    SHIFT_RIGHT_ASSIGN reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    BITWISE_AND_ASSIGN reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    BITWISE_XOR_ASSIGN reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    BITWISE_OR_ASSIGN reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    MODULUS         reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    DIVIDE          reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    TIMES           reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    MINUS           reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    PLUS            reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    LESS_EQUALS     reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    LESS_THEN       reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    GREATER_EQUALS  reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    GREATER_THEN    reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    NOT_EQUALS      reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    EQUALS_THEN     reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    BITWISE_AND     reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    BITWISE_XOR     reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    BITWISE_OR      reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    LOGICAL_AND     reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    LOGICAL_OR      reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    QUESTION_MARK   reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    COMMA           reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    SEMICOLON       reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    RPAREN          reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    RBRACE          reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    RBRACKET        reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    COLON           reduce using rule 224 (sizeof_exp -> KEYWORD_SIZEOF postfix_exp .)
    LBRACKET        shift and go to state 214
    LPAREN          shift and go to state 215
    DOT             shift and go to state 216
    ARROW           shift and go to state 217


state 225

    (225) sizeof_exp -> KEYWORD_SIZEOF LPAREN . type RPAREN
    (226) sizeof_exp -> KEYWORD_SIZEOF LPAREN . type multiple_times RPAREN
    (246) parentesis_exp -> LPAREN . expression RPAREN
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (157) expression -> . assign_exp
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    type                           shift and go to state 303
    expression                     shift and go to state 193
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    assign_exp                     shift and go to state 96
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 226

    (174) logical_or_exp -> logical_or_exp LOGICAL_OR . logical_and_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    logical_and_exp                shift and go to state 304
    bitwise_or_exp                 shift and go to state 118
    bitwise_xor_exp                shift and go to state 121
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 227

    (176) logical_and_exp -> logical_and_exp LOGICAL_AND . bitwise_or_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    bitwise_or_exp                 shift and go to state 306
    bitwise_xor_exp                shift and go to state 121
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 228

    (178) bitwise_or_exp -> bitwise_or_exp BITWISE_OR . bitwise_xor_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    bitwise_xor_exp                shift and go to state 307
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 229

    (180) bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR . bitwise_and_exp
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    bitwise_and_exp                shift and go to state 308
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 230

    (182) bitwise_and_exp -> bitwise_and_exp BITWISE_AND . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    is_equals_exp                  shift and go to state 309
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 231

    (184) is_equals_exp -> is_equals_exp EQUALS_THEN . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    is_not_equals_exp              shift and go to state 310
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 232

    (186) is_not_equals_exp -> is_not_equals_exp NOT_EQUALS . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    greater_then_exp               shift and go to state 311
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 233

    (188) greater_then_exp -> greater_then_exp GREATER_THEN . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    greater_equals_exp             shift and go to state 312
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 234

    (190) greater_equals_exp -> greater_equals_exp GREATER_EQUALS . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    less_then_exp                  shift and go to state 313
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 235

    (192) less_then_exp -> less_then_exp LESS_THEN . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    less_equals_exp                shift and go to state 314
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 236

    (194) less_equals_exp -> less_equals_exp LESS_EQUALS . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    left_shift_exp                 shift and go to state 315
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 237

    (196) left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    right_shift_exp                shift and go to state 316
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 238

    (198) right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    plus_exp                       shift and go to state 317
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 239

    (200) plus_exp -> plus_exp PLUS . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    minus_exp                      shift and go to state 318
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 240

    (202) minus_exp -> minus_exp MINUS . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    times_exp                      shift and go to state 319
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 241

    (204) times_exp -> times_exp TIMES . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    divide_exp                     shift and go to state 320
    modulus_exp                    shift and go to state 143
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 242

    (206) divide_exp -> divide_exp DIVIDE . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    modulus_exp                    shift and go to state 321
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 243

    (208) modulus_exp -> modulus_exp MODULUS . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    unary_exp                      shift and go to state 322
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 244

    (8) global_assign_identifier_list -> IDENTIFIER ASSIGN expression COMMA . global_assign_identifier_list
    (7) global_assign_identifier_list -> . IDENTIFIER ASSIGN expression
    (8) global_assign_identifier_list -> . IDENTIFIER ASSIGN expression COMMA global_assign_identifier_list

    IDENTIFIER      shift and go to state 8

    global_assign_identifier_list  shift and go to state 323

state 245

    (127) struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE .

    SEMICOLON       reduce using rule 127 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 127 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE .)
    TIMES           reduce using rule 127 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE .)
    LPAREN          reduce using rule 127 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE .)
    LBRACKET        reduce using rule 127 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE .)
    COMMA           reduce using rule 127 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE .)
    RPAREN          reduce using rule 127 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE .)


state 246

    (128) struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list . RBRACE

    RBRACE          shift and go to state 324


state 247

    (130) struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE .

    SEMICOLON       reduce using rule 130 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE .)
    IDENTIFIER      reduce using rule 130 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE .)
    TIMES           reduce using rule 130 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE .)
    LPAREN          reduce using rule 130 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE .)
    LBRACKET        reduce using rule 130 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE .)
    COMMA           reduce using rule 130 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE .)
    RPAREN          reduce using rule 130 (struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE .)


state 248

    (140) struct_or_union_member_list -> variable_declaration_list_no_assign SEMICOLON .
    (141) struct_or_union_member_list -> variable_declaration_list_no_assign SEMICOLON . struct_or_union_member_list
    (140) struct_or_union_member_list -> . variable_declaration_list_no_assign SEMICOLON
    (141) struct_or_union_member_list -> . variable_declaration_list_no_assign SEMICOLON struct_or_union_member_list
    (142) variable_declaration_list_no_assign -> . type variable_list_no_assign
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER

    RBRACE          reduce using rule 140 (struct_or_union_member_list -> variable_declaration_list_no_assign SEMICOLON .)
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31

    variable_declaration_list_no_assign shift and go to state 149
    struct_or_union_member_list    shift and go to state 325
    type                           shift and go to state 150
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14

state 249

    (142) variable_declaration_list_no_assign -> type variable_list_no_assign .
    (144) variable_list_no_assign -> variable_list_no_assign . COMMA identifier

    SEMICOLON       reduce using rule 142 (variable_declaration_list_no_assign -> type variable_list_no_assign .)
    COMMA           shift and go to state 326


state 250

    (143) variable_list_no_assign -> identifier .

    COMMA           reduce using rule 143 (variable_list_no_assign -> identifier .)
    SEMICOLON       reduce using rule 143 (variable_list_no_assign -> identifier .)


state 251

    (132) union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE .

    SEMICOLON       reduce using rule 132 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 132 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE .)
    TIMES           reduce using rule 132 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE .)
    LPAREN          reduce using rule 132 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE .)
    LBRACKET        reduce using rule 132 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE .)
    COMMA           reduce using rule 132 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE .)
    RPAREN          reduce using rule 132 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE .)


state 252

    (133) union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list . RBRACE

    RBRACE          shift and go to state 327


state 253

    (135) union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE .

    SEMICOLON       reduce using rule 135 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE .)
    IDENTIFIER      reduce using rule 135 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE .)
    TIMES           reduce using rule 135 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE .)
    LPAREN          reduce using rule 135 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE .)
    LBRACKET        reduce using rule 135 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE .)
    COMMA           reduce using rule 135 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE .)
    RPAREN          reduce using rule 135 (union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE .)


state 254

    (137) enum_declaration -> KEYWORD_ENUM LBRACE enum_item_list RBRACE .

    SEMICOLON       reduce using rule 137 (enum_declaration -> KEYWORD_ENUM LBRACE enum_item_list RBRACE .)
    IDENTIFIER      reduce using rule 137 (enum_declaration -> KEYWORD_ENUM LBRACE enum_item_list RBRACE .)
    TIMES           reduce using rule 137 (enum_declaration -> KEYWORD_ENUM LBRACE enum_item_list RBRACE .)
    LPAREN          reduce using rule 137 (enum_declaration -> KEYWORD_ENUM LBRACE enum_item_list RBRACE .)
    LBRACKET        reduce using rule 137 (enum_declaration -> KEYWORD_ENUM LBRACE enum_item_list RBRACE .)
    COMMA           reduce using rule 137 (enum_declaration -> KEYWORD_ENUM LBRACE enum_item_list RBRACE .)
    RPAREN          reduce using rule 137 (enum_declaration -> KEYWORD_ENUM LBRACE enum_item_list RBRACE .)


state 255

    (146) enum_item_list -> IDENTIFIER COMMA . enum_item_list
    (145) enum_item_list -> . IDENTIFIER
    (146) enum_item_list -> . IDENTIFIER COMMA enum_item_list
    (147) enum_item_list -> . IDENTIFIER ASSIGN expression
    (148) enum_item_list -> . IDENTIFIER ASSIGN expression COMMA enum_item_list

    IDENTIFIER      shift and go to state 155

    enum_item_list                 shift and go to state 328

state 256

    (147) enum_item_list -> IDENTIFIER ASSIGN . expression
    (148) enum_item_list -> IDENTIFIER ASSIGN . expression COMMA enum_item_list
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 329
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 257

    (138) enum_declaration -> KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list . RBRACE

    RBRACE          shift and go to state 330


state 258

    (63) signature_param -> type multiple_times .

    COMMA           reduce using rule 63 (signature_param -> type multiple_times .)
    RPAREN          reduce using rule 63 (signature_param -> type multiple_times .)


state 259

    (64) signature_param -> type multiple_bracket_signature .

    COMMA           reduce using rule 64 (signature_param -> type multiple_bracket_signature .)
    RPAREN          reduce using rule 64 (signature_param -> type multiple_bracket_signature .)


state 260

    (65) signature_param -> type identifier .
    (66) signature_param -> type identifier . multiple_bracket_signature
    (68) multiple_bracket_signature -> . LBRACKET RBRACKET multiple_bracket_signature
    (69) multiple_bracket_signature -> . LBRACKET RBRACKET
    (70) multiple_bracket_signature -> . bracket_with_bounds multiple_bracket_signature
    (71) multiple_bracket_signature -> . bracket_with_bounds
    (72) bracket_with_bounds -> . LBRACKET number_id RBRACKET

    COMMA           reduce using rule 65 (signature_param -> type identifier .)
    RPAREN          reduce using rule 65 (signature_param -> type identifier .)
    LBRACKET        shift and go to state 57

    multiple_bracket_signature     shift and go to state 331
    bracket_with_bounds            shift and go to state 58

state 261

    (149) multiple_times -> TIMES . multiple_times
    (150) multiple_times -> TIMES .
    (105) identifier -> TIMES . identifier
    (149) multiple_times -> . TIMES multiple_times
    (150) multiple_times -> . TIMES
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN

    COMMA           reduce using rule 150 (multiple_times -> TIMES .)
    RPAREN          reduce using rule 150 (multiple_times -> TIMES .)
    TIMES           shift and go to state 261
    IDENTIFIER      shift and go to state 41
    LPAREN          shift and go to state 59

    multiple_times                 shift and go to state 332
    identifier                     shift and go to state 66

state 262

    (57) function_signature -> type identifier LPAREN signature_param_list RPAREN .
    (100) function_pointer -> identifier LPAREN signature_param_list RPAREN .

    LBRACE          reduce using rule 57 (function_signature -> type identifier LPAREN signature_param_list RPAREN .)
    COMMA           reduce using rule 100 (function_pointer -> identifier LPAREN signature_param_list RPAREN .)
    ASSIGN          reduce using rule 100 (function_pointer -> identifier LPAREN signature_param_list RPAREN .)
    SEMICOLON       reduce using rule 100 (function_pointer -> identifier LPAREN signature_param_list RPAREN .)


state 263

    (60) signature_param_list -> signature_param COMMA . signature_param_list
    (60) signature_param_list -> . signature_param COMMA signature_param_list
    (61) signature_param_list -> . signature_param
    (62) signature_param -> . type
    (63) signature_param -> . type multiple_times
    (64) signature_param -> . type multiple_bracket_signature
    (65) signature_param -> . type identifier
    (66) signature_param -> . type identifier multiple_bracket_signature
    (67) signature_param -> . triple_dot
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (59) triple_dot -> . DOT DOT DOT
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER

    DOT             shift and go to state 162
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31

    signature_param                shift and go to state 160
    signature_param_list           shift and go to state 333
    type                           shift and go to state 157
    triple_dot                     shift and go to state 161
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14

state 264

    (59) triple_dot -> DOT DOT . DOT

    DOT             shift and go to state 334


state 265

    (100) function_pointer -> identifier LPAREN . signature_param_list RPAREN
    (101) function_pointer -> identifier LPAREN . RPAREN
    (60) signature_param_list -> . signature_param COMMA signature_param_list
    (61) signature_param_list -> . signature_param
    (62) signature_param -> . type
    (63) signature_param -> . type multiple_times
    (64) signature_param -> . type multiple_bracket_signature
    (65) signature_param -> . type identifier
    (66) signature_param -> . type identifier multiple_bracket_signature
    (67) signature_param -> . triple_dot
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (59) triple_dot -> . DOT DOT DOT
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER

    RPAREN          shift and go to state 336
    DOT             shift and go to state 162
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31

    signature_param_list           shift and go to state 335
    signature_param                shift and go to state 160
    type                           shift and go to state 157
    triple_dot                     shift and go to state 161
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14

state 266

    (85) identifier_list -> identifier multiple_bracket_signature COMMA identifier_list .

    SEMICOLON       reduce using rule 85 (identifier_list -> identifier multiple_bracket_signature COMMA identifier_list .)


state 267

    (88) identifier_list -> identifier multiple_bracket_signature ASSIGN value_list .
    (89) identifier_list -> identifier multiple_bracket_signature ASSIGN value_list . COMMA identifier_list

    SEMICOLON       reduce using rule 88 (identifier_list -> identifier multiple_bracket_signature ASSIGN value_list .)
    COMMA           shift and go to state 337


state 268

    (87) identifier_list -> identifier ASSIGN expression COMMA . identifier_list
    (82) identifier_list -> . identifier
    (83) identifier_list -> . identifier COMMA identifier_list
    (84) identifier_list -> . identifier multiple_bracket_signature
    (85) identifier_list -> . identifier multiple_bracket_signature COMMA identifier_list
    (86) identifier_list -> . identifier ASSIGN expression
    (87) identifier_list -> . identifier ASSIGN expression COMMA identifier_list
    (88) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list
    (89) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (90) identifier_list -> . identifier ASSIGN value_list
    (91) identifier_list -> . identifier ASSIGN value_list COMMA identifier_list
    (92) identifier_list -> . function_pointer
    (93) identifier_list -> . function_pointer COMMA identifier_list
    (94) identifier_list -> . function_pointer ASSIGN expression
    (95) identifier_list -> . function_pointer ASSIGN expression COMMA identifier_list
    (96) identifier_list -> . function_pointer_array
    (97) identifier_list -> . function_pointer_array COMMA identifier_list
    (98) identifier_list -> . function_pointer_array ASSIGN value_list
    (99) identifier_list -> . function_pointer_array ASSIGN value_list COMMA identifier_list
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN
    (100) function_pointer -> . identifier LPAREN signature_param_list RPAREN
    (101) function_pointer -> . identifier LPAREN RPAREN
    (102) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN
    (103) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN

    IDENTIFIER      shift and go to state 41
    TIMES           shift and go to state 42
    LPAREN          shift and go to state 38

    identifier                     shift and go to state 163
    identifier_list                shift and go to state 338
    function_pointer               shift and go to state 39
    function_pointer_array         shift and go to state 40

state 269

    (91) identifier_list -> identifier ASSIGN value_list COMMA . identifier_list
    (82) identifier_list -> . identifier
    (83) identifier_list -> . identifier COMMA identifier_list
    (84) identifier_list -> . identifier multiple_bracket_signature
    (85) identifier_list -> . identifier multiple_bracket_signature COMMA identifier_list
    (86) identifier_list -> . identifier ASSIGN expression
    (87) identifier_list -> . identifier ASSIGN expression COMMA identifier_list
    (88) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list
    (89) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (90) identifier_list -> . identifier ASSIGN value_list
    (91) identifier_list -> . identifier ASSIGN value_list COMMA identifier_list
    (92) identifier_list -> . function_pointer
    (93) identifier_list -> . function_pointer COMMA identifier_list
    (94) identifier_list -> . function_pointer ASSIGN expression
    (95) identifier_list -> . function_pointer ASSIGN expression COMMA identifier_list
    (96) identifier_list -> . function_pointer_array
    (97) identifier_list -> . function_pointer_array COMMA identifier_list
    (98) identifier_list -> . function_pointer_array ASSIGN value_list
    (99) identifier_list -> . function_pointer_array ASSIGN value_list COMMA identifier_list
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN
    (100) function_pointer -> . identifier LPAREN signature_param_list RPAREN
    (101) function_pointer -> . identifier LPAREN RPAREN
    (102) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN
    (103) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN

    IDENTIFIER      shift and go to state 41
    TIMES           shift and go to state 42
    LPAREN          shift and go to state 38

    identifier                     shift and go to state 163
    identifier_list                shift and go to state 339
    function_pointer               shift and go to state 39
    function_pointer_array         shift and go to state 40

state 270

    (75) value_list -> LBRACE value_list_item . RBRACE

    RBRACE          shift and go to state 340


state 271

    (76) value_list -> LBRACE RBRACE .

    COMMA           reduce using rule 76 (value_list -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 76 (value_list -> LBRACE RBRACE .)
    RBRACE          reduce using rule 76 (value_list -> LBRACE RBRACE .)


state 272

    (77) value_list_item -> expression .
    (78) value_list_item -> expression . COMMA value_list_item

    RBRACE          reduce using rule 77 (value_list_item -> expression .)
    COMMA           shift and go to state 341


state 273

    (79) value_list_item -> value_list .
    (80) value_list_item -> value_list . COMMA value_list_item

    RBRACE          reduce using rule 79 (value_list_item -> value_list .)
    COMMA           shift and go to state 342


state 274

    (68) multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_signature .

    COMMA           reduce using rule 68 (multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_signature .)
    ASSIGN          reduce using rule 68 (multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_signature .)
    SEMICOLON       reduce using rule 68 (multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_signature .)
    RPAREN          reduce using rule 68 (multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_signature .)


state 275

    (72) bracket_with_bounds -> LBRACKET number_id RBRACKET .

    LBRACKET        reduce using rule 72 (bracket_with_bounds -> LBRACKET number_id RBRACKET .)
    COMMA           reduce using rule 72 (bracket_with_bounds -> LBRACKET number_id RBRACKET .)
    ASSIGN          reduce using rule 72 (bracket_with_bounds -> LBRACKET number_id RBRACKET .)
    SEMICOLON       reduce using rule 72 (bracket_with_bounds -> LBRACKET number_id RBRACKET .)
    RPAREN          reduce using rule 72 (bracket_with_bounds -> LBRACKET number_id RBRACKET .)


state 276

    (102) function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature . RPAREN LPAREN signature_param_list RPAREN
    (103) function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature . RPAREN LPAREN RPAREN

    RPAREN          shift and go to state 343


state 277

    (95) identifier_list -> function_pointer ASSIGN expression COMMA . identifier_list
    (82) identifier_list -> . identifier
    (83) identifier_list -> . identifier COMMA identifier_list
    (84) identifier_list -> . identifier multiple_bracket_signature
    (85) identifier_list -> . identifier multiple_bracket_signature COMMA identifier_list
    (86) identifier_list -> . identifier ASSIGN expression
    (87) identifier_list -> . identifier ASSIGN expression COMMA identifier_list
    (88) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list
    (89) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (90) identifier_list -> . identifier ASSIGN value_list
    (91) identifier_list -> . identifier ASSIGN value_list COMMA identifier_list
    (92) identifier_list -> . function_pointer
    (93) identifier_list -> . function_pointer COMMA identifier_list
    (94) identifier_list -> . function_pointer ASSIGN expression
    (95) identifier_list -> . function_pointer ASSIGN expression COMMA identifier_list
    (96) identifier_list -> . function_pointer_array
    (97) identifier_list -> . function_pointer_array COMMA identifier_list
    (98) identifier_list -> . function_pointer_array ASSIGN value_list
    (99) identifier_list -> . function_pointer_array ASSIGN value_list COMMA identifier_list
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN
    (100) function_pointer -> . identifier LPAREN signature_param_list RPAREN
    (101) function_pointer -> . identifier LPAREN RPAREN
    (102) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN
    (103) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN

    IDENTIFIER      shift and go to state 41
    TIMES           shift and go to state 42
    LPAREN          shift and go to state 38

    function_pointer               shift and go to state 39
    identifier_list                shift and go to state 344
    identifier                     shift and go to state 163
    function_pointer_array         shift and go to state 40

state 278

    (99) identifier_list -> function_pointer_array ASSIGN value_list COMMA . identifier_list
    (82) identifier_list -> . identifier
    (83) identifier_list -> . identifier COMMA identifier_list
    (84) identifier_list -> . identifier multiple_bracket_signature
    (85) identifier_list -> . identifier multiple_bracket_signature COMMA identifier_list
    (86) identifier_list -> . identifier ASSIGN expression
    (87) identifier_list -> . identifier ASSIGN expression COMMA identifier_list
    (88) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list
    (89) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (90) identifier_list -> . identifier ASSIGN value_list
    (91) identifier_list -> . identifier ASSIGN value_list COMMA identifier_list
    (92) identifier_list -> . function_pointer
    (93) identifier_list -> . function_pointer COMMA identifier_list
    (94) identifier_list -> . function_pointer ASSIGN expression
    (95) identifier_list -> . function_pointer ASSIGN expression COMMA identifier_list
    (96) identifier_list -> . function_pointer_array
    (97) identifier_list -> . function_pointer_array COMMA identifier_list
    (98) identifier_list -> . function_pointer_array ASSIGN value_list
    (99) identifier_list -> . function_pointer_array ASSIGN value_list COMMA identifier_list
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN
    (100) function_pointer -> . identifier LPAREN signature_param_list RPAREN
    (101) function_pointer -> . identifier LPAREN RPAREN
    (102) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN
    (103) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN

    IDENTIFIER      shift and go to state 41
    TIMES           shift and go to state 42
    LPAREN          shift and go to state 38

    function_pointer_array         shift and go to state 40
    identifier_list                shift and go to state 345
    identifier                     shift and go to state 163
    function_pointer               shift and go to state 39

state 279

    (28) statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .

    RBRACE          reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_CONTINUE reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_IF      reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_FOR     reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_DO      reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    TYPE_CHAR       reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    TYPE_INT        reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    TYPE_SHORT      reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    TYPE_LONG       reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    TYPE_FLOAT      reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    TYPE_VOID       reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_CONST   reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_UNION   reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_ENUM    reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    INCREMENT       reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    DECREMENT       reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    BITWISE_AND     reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    TIMES           reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    NOT             reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    CHARACTER       reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    BINARY_NUMBER   reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_CASE    reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 28 (statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON .)


state 280

    (35) if_then_statement -> KEYWORD_IF LPAREN expression . RPAREN statement
    (36) if_then_else_statement -> KEYWORD_IF LPAREN expression . RPAREN statement_no_short_if KEYWORD_ELSE statement

    RPAREN          shift and go to state 346


state 281

    (227) cast_exp -> LPAREN type RPAREN .

    IDENTIFIER      reduce using rule 227 (cast_exp -> LPAREN type RPAREN .)
    STRING          reduce using rule 227 (cast_exp -> LPAREN type RPAREN .)
    FLOAT_NUMBER    reduce using rule 227 (cast_exp -> LPAREN type RPAREN .)
    CHARACTER       reduce using rule 227 (cast_exp -> LPAREN type RPAREN .)
    NUMBER          reduce using rule 227 (cast_exp -> LPAREN type RPAREN .)
    BINARY_NUMBER   reduce using rule 227 (cast_exp -> LPAREN type RPAREN .)
    HEXADECIMAL_NUMBER reduce using rule 227 (cast_exp -> LPAREN type RPAREN .)
    OCTAL_NUMBER    reduce using rule 227 (cast_exp -> LPAREN type RPAREN .)
    LPAREN          reduce using rule 227 (cast_exp -> LPAREN type RPAREN .)


state 282

    (228) cast_exp -> LPAREN type multiple_times . RPAREN

    RPAREN          shift and go to state 347


state 283

    (149) multiple_times -> TIMES . multiple_times
    (150) multiple_times -> TIMES .
    (149) multiple_times -> . TIMES multiple_times
    (150) multiple_times -> . TIMES

    RPAREN          reduce using rule 150 (multiple_times -> TIMES .)
    TIMES           shift and go to state 283

    multiple_times                 shift and go to state 332

state 284

    (246) parentesis_exp -> LPAREN expression RPAREN .

    INCREMENT       reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    DOT             reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    TIMES_ASSIGN    reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    MODULUS_ASSIGN  reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    PLUS_ASSIGN     reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    MINUS_ASSIGN    reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    SHIFT_LEFT_ASSIGN reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    SHIFT_RIGHT_ASSIGN reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_AND_ASSIGN reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_XOR_ASSIGN reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_OR_ASSIGN reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    MODULUS         reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_SHIFT_RIGHT reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_SHIFT_LEFT reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    LESS_EQUALS     reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    LESS_THEN       reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    GREATER_EQUALS  reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    GREATER_THEN    reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    NOT_EQUALS      reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    EQUALS_THEN     reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_AND     reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_XOR     reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    BITWISE_OR      reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    LOGICAL_AND     reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    LOGICAL_OR      reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    QUESTION_MARK   reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)
    COLON           reduce using rule 246 (parentesis_exp -> LPAREN expression RPAREN .)


state 285

    (156) expression_list -> expression COMMA expression_list .

    SEMICOLON       reduce using rule 156 (expression_list -> expression COMMA expression_list .)
    RPAREN          reduce using rule 156 (expression_list -> expression COMMA expression_list .)


state 286

    (38) while_statement -> KEYWORD_WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 348


state 287

    (47) for_statement -> KEYWORD_FOR LPAREN for_params . RPAREN statement

    RPAREN          shift and go to state 349


state 288

    (41) for_params -> variable_declaration_list . SEMICOLON for_param
    (42) for_params -> variable_declaration_list . SEMICOLON for_param expression_list

    SEMICOLON       shift and go to state 350


state 289

    (45) for_param -> SEMICOLON .

    SEMICOLON       reduce using rule 45 (for_param -> SEMICOLON .)
    INCREMENT       reduce using rule 45 (for_param -> SEMICOLON .)
    DECREMENT       reduce using rule 45 (for_param -> SEMICOLON .)
    LPAREN          reduce using rule 45 (for_param -> SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 45 (for_param -> SEMICOLON .)
    BITWISE_AND     reduce using rule 45 (for_param -> SEMICOLON .)
    TIMES           reduce using rule 45 (for_param -> SEMICOLON .)
    PLUS            reduce using rule 45 (for_param -> SEMICOLON .)
    MINUS           reduce using rule 45 (for_param -> SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 45 (for_param -> SEMICOLON .)
    NOT             reduce using rule 45 (for_param -> SEMICOLON .)
    IDENTIFIER      reduce using rule 45 (for_param -> SEMICOLON .)
    STRING          reduce using rule 45 (for_param -> SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 45 (for_param -> SEMICOLON .)
    CHARACTER       reduce using rule 45 (for_param -> SEMICOLON .)
    NUMBER          reduce using rule 45 (for_param -> SEMICOLON .)
    BINARY_NUMBER   reduce using rule 45 (for_param -> SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 45 (for_param -> SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 45 (for_param -> SEMICOLON .)
    RPAREN          reduce using rule 45 (for_param -> SEMICOLON .)


state 290

    (43) for_params -> for_param . for_param expression_list
    (44) for_params -> for_param . for_param
    (45) for_param -> . SEMICOLON
    (46) for_param -> . expression_list SEMICOLON
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    SEMICOLON       shift and go to state 289
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    for_param                      shift and go to state 351
    expression_list                shift and go to state 291
    expression                     shift and go to state 90
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 291

    (46) for_param -> expression_list . SEMICOLON

    SEMICOLON       shift and go to state 352


state 292

    (81) variable_declaration_list -> type . identifier_list
    (82) identifier_list -> . identifier
    (83) identifier_list -> . identifier COMMA identifier_list
    (84) identifier_list -> . identifier multiple_bracket_signature
    (85) identifier_list -> . identifier multiple_bracket_signature COMMA identifier_list
    (86) identifier_list -> . identifier ASSIGN expression
    (87) identifier_list -> . identifier ASSIGN expression COMMA identifier_list
    (88) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list
    (89) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (90) identifier_list -> . identifier ASSIGN value_list
    (91) identifier_list -> . identifier ASSIGN value_list COMMA identifier_list
    (92) identifier_list -> . function_pointer
    (93) identifier_list -> . function_pointer COMMA identifier_list
    (94) identifier_list -> . function_pointer ASSIGN expression
    (95) identifier_list -> . function_pointer ASSIGN expression COMMA identifier_list
    (96) identifier_list -> . function_pointer_array
    (97) identifier_list -> . function_pointer_array COMMA identifier_list
    (98) identifier_list -> . function_pointer_array ASSIGN value_list
    (99) identifier_list -> . function_pointer_array ASSIGN value_list COMMA identifier_list
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN
    (100) function_pointer -> . identifier LPAREN signature_param_list RPAREN
    (101) function_pointer -> . identifier LPAREN RPAREN
    (102) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN
    (103) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN

    IDENTIFIER      shift and go to state 41
    TIMES           shift and go to state 42
    LPAREN          shift and go to state 38

    identifier_list                shift and go to state 36
    identifier                     shift and go to state 163
    function_pointer               shift and go to state 39
    function_pointer_array         shift and go to state 40

state 293

    (49) switch_stm -> KEYWORD_SWITCH LPAREN expression . RPAREN LBRACE switch_itens RBRACE

    RPAREN          shift and go to state 353


state 294

    (40) do_statement -> KEYWORD_DO statement KEYWORD_WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 354


state 295

    (169) assign_exp -> unary_exp assign_operator assign_exp .

    COMMA           reduce using rule 169 (assign_exp -> unary_exp assign_operator assign_exp .)
    SEMICOLON       reduce using rule 169 (assign_exp -> unary_exp assign_operator assign_exp .)
    RPAREN          reduce using rule 169 (assign_exp -> unary_exp assign_operator assign_exp .)
    RBRACE          reduce using rule 169 (assign_exp -> unary_exp assign_operator assign_exp .)
    RBRACKET        reduce using rule 169 (assign_exp -> unary_exp assign_operator assign_exp .)
    COLON           reduce using rule 169 (assign_exp -> unary_exp assign_operator assign_exp .)


state 296

    (229) postfix_exp -> postfix_exp LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 355


state 297

    (230) postfix_exp -> postfix_exp LPAREN RPAREN .

    INCREMENT       reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    DECREMENT       reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    LBRACKET        reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    LPAREN          reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    DOT             reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    ARROW           reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    ASSIGN          reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TIMES_ASSIGN    reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    MODULUS_ASSIGN  reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    PLUS_ASSIGN     reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    MINUS_ASSIGN    reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    SHIFT_LEFT_ASSIGN reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    SHIFT_RIGHT_ASSIGN reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_AND_ASSIGN reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_XOR_ASSIGN reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_OR_ASSIGN reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    MODULUS         reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    DIVIDE          reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    TIMES           reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    MINUS           reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    PLUS            reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_SHIFT_RIGHT reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_SHIFT_LEFT reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    LESS_EQUALS     reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    LESS_THEN       reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    GREATER_EQUALS  reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    GREATER_THEN    reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    NOT_EQUALS      reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    EQUALS_THEN     reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_AND     reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_XOR     reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    BITWISE_OR      reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    LOGICAL_AND     reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    LOGICAL_OR      reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    QUESTION_MARK   reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    COMMA           reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    SEMICOLON       reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    RPAREN          reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    RBRACE          reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    RBRACKET        reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)
    COLON           reduce using rule 230 (postfix_exp -> postfix_exp LPAREN RPAREN .)


state 298

    (231) postfix_exp -> postfix_exp LPAREN function_call_parameters . RPAREN

    RPAREN          shift and go to state 356


state 299

    (235) function_call_parameters -> expression .
    (236) function_call_parameters -> expression . COMMA function_call_parameters

    RPAREN          reduce using rule 235 (function_call_parameters -> expression .)
    COMMA           shift and go to state 357


state 300

    (232) postfix_exp -> postfix_exp DOT IDENTIFIER .

    INCREMENT       reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    DECREMENT       reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    LBRACKET        reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    LPAREN          reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    DOT             reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    ARROW           reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    ASSIGN          reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    MODULUS_ASSIGN  reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    SHIFT_LEFT_ASSIGN reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_AND_ASSIGN reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_XOR_ASSIGN reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_OR_ASSIGN reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    MODULUS         reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    DIVIDE          reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    TIMES           reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    MINUS           reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    PLUS            reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_SHIFT_RIGHT reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_SHIFT_LEFT reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    LESS_EQUALS     reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    LESS_THEN       reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    GREATER_THEN    reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    NOT_EQUALS      reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    EQUALS_THEN     reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_AND     reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_XOR     reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    BITWISE_OR      reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    LOGICAL_AND     reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    LOGICAL_OR      reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    QUESTION_MARK   reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    COMMA           reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    RPAREN          reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    RBRACE          reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    RBRACKET        reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)
    COLON           reduce using rule 232 (postfix_exp -> postfix_exp DOT IDENTIFIER .)


state 301

    (233) postfix_exp -> postfix_exp ARROW IDENTIFIER .

    INCREMENT       reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    DECREMENT       reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    LBRACKET        reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    LPAREN          reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    DOT             reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    ARROW           reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    ASSIGN          reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    MODULUS_ASSIGN  reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    SHIFT_LEFT_ASSIGN reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    SHIFT_RIGHT_ASSIGN reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_AND_ASSIGN reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_XOR_ASSIGN reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_OR_ASSIGN reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    MODULUS         reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    DIVIDE          reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    TIMES           reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    MINUS           reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    PLUS            reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_SHIFT_RIGHT reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_SHIFT_LEFT reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    LESS_EQUALS     reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    LESS_THEN       reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    GREATER_THEN    reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    NOT_EQUALS      reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    EQUALS_THEN     reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_AND     reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_XOR     reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    BITWISE_OR      reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    LOGICAL_AND     reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    LOGICAL_OR      reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    QUESTION_MARK   reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    COMMA           reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    SEMICOLON       reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    RPAREN          reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    RBRACE          reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    RBRACKET        reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)
    COLON           reduce using rule 233 (postfix_exp -> postfix_exp ARROW IDENTIFIER .)


state 302

    (171) ternary_conditional_exp -> logical_exp QUESTION_MARK expression . COLON ternary_conditional_exp

    COLON           shift and go to state 358


state 303

    (225) sizeof_exp -> KEYWORD_SIZEOF LPAREN type . RPAREN
    (226) sizeof_exp -> KEYWORD_SIZEOF LPAREN type . multiple_times RPAREN
    (149) multiple_times -> . TIMES multiple_times
    (150) multiple_times -> . TIMES

    RPAREN          shift and go to state 359
    TIMES           shift and go to state 283

    multiple_times                 shift and go to state 360

state 304

    (174) logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .
    (176) logical_and_exp -> logical_and_exp . LOGICAL_AND bitwise_or_exp

    LOGICAL_OR      reduce using rule 174 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    QUESTION_MARK   reduce using rule 174 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    COMMA           reduce using rule 174 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    SEMICOLON       reduce using rule 174 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    RPAREN          reduce using rule 174 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    RBRACE          reduce using rule 174 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    RBRACKET        reduce using rule 174 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    COLON           reduce using rule 174 (logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp .)
    LOGICAL_AND     shift and go to state 227


state 305

    (209) modulus_exp -> unary_exp .

    MODULUS         reduce using rule 209 (modulus_exp -> unary_exp .)
    DIVIDE          reduce using rule 209 (modulus_exp -> unary_exp .)
    TIMES           reduce using rule 209 (modulus_exp -> unary_exp .)
    MINUS           reduce using rule 209 (modulus_exp -> unary_exp .)
    PLUS            reduce using rule 209 (modulus_exp -> unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 209 (modulus_exp -> unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 209 (modulus_exp -> unary_exp .)
    LESS_EQUALS     reduce using rule 209 (modulus_exp -> unary_exp .)
    LESS_THEN       reduce using rule 209 (modulus_exp -> unary_exp .)
    GREATER_EQUALS  reduce using rule 209 (modulus_exp -> unary_exp .)
    GREATER_THEN    reduce using rule 209 (modulus_exp -> unary_exp .)
    NOT_EQUALS      reduce using rule 209 (modulus_exp -> unary_exp .)
    EQUALS_THEN     reduce using rule 209 (modulus_exp -> unary_exp .)
    BITWISE_AND     reduce using rule 209 (modulus_exp -> unary_exp .)
    BITWISE_XOR     reduce using rule 209 (modulus_exp -> unary_exp .)
    BITWISE_OR      reduce using rule 209 (modulus_exp -> unary_exp .)
    LOGICAL_AND     reduce using rule 209 (modulus_exp -> unary_exp .)
    LOGICAL_OR      reduce using rule 209 (modulus_exp -> unary_exp .)
    QUESTION_MARK   reduce using rule 209 (modulus_exp -> unary_exp .)
    COMMA           reduce using rule 209 (modulus_exp -> unary_exp .)
    SEMICOLON       reduce using rule 209 (modulus_exp -> unary_exp .)
    RPAREN          reduce using rule 209 (modulus_exp -> unary_exp .)
    RBRACE          reduce using rule 209 (modulus_exp -> unary_exp .)
    RBRACKET        reduce using rule 209 (modulus_exp -> unary_exp .)
    COLON           reduce using rule 209 (modulus_exp -> unary_exp .)


state 306

    (176) logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .
    (178) bitwise_or_exp -> bitwise_or_exp . BITWISE_OR bitwise_xor_exp

    LOGICAL_AND     reduce using rule 176 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    LOGICAL_OR      reduce using rule 176 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    QUESTION_MARK   reduce using rule 176 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    COMMA           reduce using rule 176 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    SEMICOLON       reduce using rule 176 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    RPAREN          reduce using rule 176 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    RBRACE          reduce using rule 176 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    RBRACKET        reduce using rule 176 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    COLON           reduce using rule 176 (logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp .)
    BITWISE_OR      shift and go to state 228


state 307

    (178) bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .
    (180) bitwise_xor_exp -> bitwise_xor_exp . BITWISE_XOR bitwise_and_exp

    BITWISE_OR      reduce using rule 178 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    LOGICAL_AND     reduce using rule 178 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    LOGICAL_OR      reduce using rule 178 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    QUESTION_MARK   reduce using rule 178 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    COMMA           reduce using rule 178 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    SEMICOLON       reduce using rule 178 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    RPAREN          reduce using rule 178 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    RBRACE          reduce using rule 178 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    RBRACKET        reduce using rule 178 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    COLON           reduce using rule 178 (bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp .)
    BITWISE_XOR     shift and go to state 229


state 308

    (180) bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .
    (182) bitwise_and_exp -> bitwise_and_exp . BITWISE_AND is_equals_exp

    BITWISE_XOR     reduce using rule 180 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    BITWISE_OR      reduce using rule 180 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    LOGICAL_AND     reduce using rule 180 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    LOGICAL_OR      reduce using rule 180 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    QUESTION_MARK   reduce using rule 180 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    COMMA           reduce using rule 180 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    SEMICOLON       reduce using rule 180 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    RPAREN          reduce using rule 180 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    RBRACE          reduce using rule 180 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    RBRACKET        reduce using rule 180 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    COLON           reduce using rule 180 (bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp .)
    BITWISE_AND     shift and go to state 230


state 309

    (182) bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .
    (184) is_equals_exp -> is_equals_exp . EQUALS_THEN is_not_equals_exp

    BITWISE_AND     reduce using rule 182 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    BITWISE_XOR     reduce using rule 182 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    BITWISE_OR      reduce using rule 182 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    LOGICAL_AND     reduce using rule 182 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    LOGICAL_OR      reduce using rule 182 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    QUESTION_MARK   reduce using rule 182 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    COMMA           reduce using rule 182 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    SEMICOLON       reduce using rule 182 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    RPAREN          reduce using rule 182 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    RBRACE          reduce using rule 182 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    RBRACKET        reduce using rule 182 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    COLON           reduce using rule 182 (bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp .)
    EQUALS_THEN     shift and go to state 231


state 310

    (184) is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .
    (186) is_not_equals_exp -> is_not_equals_exp . NOT_EQUALS greater_then_exp

    EQUALS_THEN     reduce using rule 184 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    BITWISE_AND     reduce using rule 184 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    BITWISE_XOR     reduce using rule 184 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    BITWISE_OR      reduce using rule 184 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    LOGICAL_AND     reduce using rule 184 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    LOGICAL_OR      reduce using rule 184 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    QUESTION_MARK   reduce using rule 184 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    COMMA           reduce using rule 184 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    SEMICOLON       reduce using rule 184 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    RPAREN          reduce using rule 184 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    RBRACE          reduce using rule 184 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    RBRACKET        reduce using rule 184 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    COLON           reduce using rule 184 (is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp .)
    NOT_EQUALS      shift and go to state 232


state 311

    (186) is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .
    (188) greater_then_exp -> greater_then_exp . GREATER_THEN greater_equals_exp

    NOT_EQUALS      reduce using rule 186 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    EQUALS_THEN     reduce using rule 186 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    BITWISE_AND     reduce using rule 186 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    BITWISE_XOR     reduce using rule 186 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    BITWISE_OR      reduce using rule 186 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    LOGICAL_AND     reduce using rule 186 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    LOGICAL_OR      reduce using rule 186 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    QUESTION_MARK   reduce using rule 186 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    COMMA           reduce using rule 186 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    SEMICOLON       reduce using rule 186 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    RPAREN          reduce using rule 186 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    RBRACE          reduce using rule 186 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    RBRACKET        reduce using rule 186 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    COLON           reduce using rule 186 (is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp .)
    GREATER_THEN    shift and go to state 233


state 312

    (188) greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .
    (190) greater_equals_exp -> greater_equals_exp . GREATER_EQUALS less_then_exp

    GREATER_THEN    reduce using rule 188 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    NOT_EQUALS      reduce using rule 188 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    EQUALS_THEN     reduce using rule 188 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    BITWISE_AND     reduce using rule 188 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    BITWISE_XOR     reduce using rule 188 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    BITWISE_OR      reduce using rule 188 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    LOGICAL_AND     reduce using rule 188 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    LOGICAL_OR      reduce using rule 188 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    QUESTION_MARK   reduce using rule 188 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    COMMA           reduce using rule 188 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    SEMICOLON       reduce using rule 188 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    RPAREN          reduce using rule 188 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    RBRACE          reduce using rule 188 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    RBRACKET        reduce using rule 188 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    COLON           reduce using rule 188 (greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp .)
    GREATER_EQUALS  shift and go to state 234


state 313

    (190) greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .
    (192) less_then_exp -> less_then_exp . LESS_THEN less_equals_exp

    GREATER_EQUALS  reduce using rule 190 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    GREATER_THEN    reduce using rule 190 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    NOT_EQUALS      reduce using rule 190 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    EQUALS_THEN     reduce using rule 190 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    BITWISE_AND     reduce using rule 190 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    BITWISE_XOR     reduce using rule 190 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    BITWISE_OR      reduce using rule 190 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    LOGICAL_AND     reduce using rule 190 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    LOGICAL_OR      reduce using rule 190 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    QUESTION_MARK   reduce using rule 190 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    COMMA           reduce using rule 190 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    SEMICOLON       reduce using rule 190 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    RPAREN          reduce using rule 190 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    RBRACE          reduce using rule 190 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    RBRACKET        reduce using rule 190 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    COLON           reduce using rule 190 (greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp .)
    LESS_THEN       shift and go to state 235


state 314

    (192) less_then_exp -> less_then_exp LESS_THEN less_equals_exp .
    (194) less_equals_exp -> less_equals_exp . LESS_EQUALS left_shift_exp

    LESS_THEN       reduce using rule 192 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    GREATER_EQUALS  reduce using rule 192 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    GREATER_THEN    reduce using rule 192 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    NOT_EQUALS      reduce using rule 192 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    EQUALS_THEN     reduce using rule 192 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    BITWISE_AND     reduce using rule 192 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    BITWISE_XOR     reduce using rule 192 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    BITWISE_OR      reduce using rule 192 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    LOGICAL_AND     reduce using rule 192 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    LOGICAL_OR      reduce using rule 192 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    QUESTION_MARK   reduce using rule 192 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    COMMA           reduce using rule 192 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    SEMICOLON       reduce using rule 192 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    RPAREN          reduce using rule 192 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    RBRACE          reduce using rule 192 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    RBRACKET        reduce using rule 192 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    COLON           reduce using rule 192 (less_then_exp -> less_then_exp LESS_THEN less_equals_exp .)
    LESS_EQUALS     shift and go to state 236


state 315

    (194) less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .
    (196) left_shift_exp -> left_shift_exp . BITWISE_SHIFT_LEFT right_shift_exp

    LESS_EQUALS     reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    LESS_THEN       reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    GREATER_EQUALS  reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    GREATER_THEN    reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    NOT_EQUALS      reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    EQUALS_THEN     reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    BITWISE_AND     reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    BITWISE_XOR     reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    BITWISE_OR      reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    LOGICAL_AND     reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    LOGICAL_OR      reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    QUESTION_MARK   reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    COMMA           reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    SEMICOLON       reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    RPAREN          reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    RBRACE          reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    RBRACKET        reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    COLON           reduce using rule 194 (less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp .)
    BITWISE_SHIFT_LEFT shift and go to state 237


state 316

    (196) left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .
    (198) right_shift_exp -> right_shift_exp . BITWISE_SHIFT_RIGHT plus_exp

    BITWISE_SHIFT_LEFT reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    LESS_EQUALS     reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    LESS_THEN       reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    GREATER_EQUALS  reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    GREATER_THEN    reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    NOT_EQUALS      reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    EQUALS_THEN     reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    BITWISE_AND     reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    BITWISE_XOR     reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    BITWISE_OR      reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    LOGICAL_AND     reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    LOGICAL_OR      reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    QUESTION_MARK   reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    COMMA           reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    SEMICOLON       reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    RPAREN          reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    RBRACE          reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    RBRACKET        reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    COLON           reduce using rule 196 (left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp .)
    BITWISE_SHIFT_RIGHT shift and go to state 238


state 317

    (198) right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .
    (200) plus_exp -> plus_exp . PLUS minus_exp

    BITWISE_SHIFT_RIGHT reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    LESS_EQUALS     reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    LESS_THEN       reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    GREATER_EQUALS  reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    GREATER_THEN    reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    NOT_EQUALS      reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    EQUALS_THEN     reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    BITWISE_AND     reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    BITWISE_XOR     reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    BITWISE_OR      reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    LOGICAL_AND     reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    LOGICAL_OR      reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    QUESTION_MARK   reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    COMMA           reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    SEMICOLON       reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    RPAREN          reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    RBRACE          reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    RBRACKET        reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    COLON           reduce using rule 198 (right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp .)
    PLUS            shift and go to state 239


state 318

    (200) plus_exp -> plus_exp PLUS minus_exp .
    (202) minus_exp -> minus_exp . MINUS times_exp

    PLUS            reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    LESS_EQUALS     reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    LESS_THEN       reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    GREATER_EQUALS  reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    GREATER_THEN    reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    NOT_EQUALS      reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    EQUALS_THEN     reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    BITWISE_AND     reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    BITWISE_XOR     reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    BITWISE_OR      reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    LOGICAL_AND     reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    LOGICAL_OR      reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    QUESTION_MARK   reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    COMMA           reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    SEMICOLON       reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    RPAREN          reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    RBRACE          reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    RBRACKET        reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    COLON           reduce using rule 200 (plus_exp -> plus_exp PLUS minus_exp .)
    MINUS           shift and go to state 240


state 319

    (202) minus_exp -> minus_exp MINUS times_exp .
    (204) times_exp -> times_exp . TIMES divide_exp

    MINUS           reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    PLUS            reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    LESS_EQUALS     reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    LESS_THEN       reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    GREATER_EQUALS  reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    GREATER_THEN    reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    NOT_EQUALS      reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    EQUALS_THEN     reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    BITWISE_AND     reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    BITWISE_XOR     reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    BITWISE_OR      reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    LOGICAL_AND     reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    LOGICAL_OR      reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    QUESTION_MARK   reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    COMMA           reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    SEMICOLON       reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    RPAREN          reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    RBRACE          reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    RBRACKET        reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    COLON           reduce using rule 202 (minus_exp -> minus_exp MINUS times_exp .)
    TIMES           shift and go to state 241


state 320

    (204) times_exp -> times_exp TIMES divide_exp .
    (206) divide_exp -> divide_exp . DIVIDE modulus_exp

    TIMES           reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    MINUS           reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    PLUS            reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    LESS_EQUALS     reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    LESS_THEN       reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    GREATER_EQUALS  reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    GREATER_THEN    reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    NOT_EQUALS      reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    EQUALS_THEN     reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    BITWISE_AND     reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    BITWISE_XOR     reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    BITWISE_OR      reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    LOGICAL_AND     reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    LOGICAL_OR      reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    QUESTION_MARK   reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    COMMA           reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    SEMICOLON       reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    RPAREN          reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    RBRACE          reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    RBRACKET        reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    COLON           reduce using rule 204 (times_exp -> times_exp TIMES divide_exp .)
    DIVIDE          shift and go to state 242


state 321

    (206) divide_exp -> divide_exp DIVIDE modulus_exp .
    (208) modulus_exp -> modulus_exp . MODULUS unary_exp

    DIVIDE          reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    TIMES           reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    MINUS           reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    PLUS            reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    LESS_EQUALS     reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    LESS_THEN       reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    GREATER_EQUALS  reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    GREATER_THEN    reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    NOT_EQUALS      reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    EQUALS_THEN     reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BITWISE_AND     reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BITWISE_XOR     reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    BITWISE_OR      reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    LOGICAL_AND     reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    LOGICAL_OR      reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    QUESTION_MARK   reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    COMMA           reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    SEMICOLON       reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    RPAREN          reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    RBRACE          reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    RBRACKET        reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    COLON           reduce using rule 206 (divide_exp -> divide_exp DIVIDE modulus_exp .)
    MODULUS         shift and go to state 243


state 322

    (208) modulus_exp -> modulus_exp MODULUS unary_exp .

    MODULUS         reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    DIVIDE          reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    TIMES           reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    MINUS           reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    PLUS            reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BITWISE_SHIFT_RIGHT reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BITWISE_SHIFT_LEFT reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    LESS_EQUALS     reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    LESS_THEN       reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    GREATER_EQUALS  reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    GREATER_THEN    reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    NOT_EQUALS      reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    EQUALS_THEN     reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BITWISE_AND     reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BITWISE_XOR     reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    BITWISE_OR      reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    LOGICAL_AND     reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    LOGICAL_OR      reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    QUESTION_MARK   reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    COMMA           reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    SEMICOLON       reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    RPAREN          reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    RBRACE          reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    RBRACKET        reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)
    COLON           reduce using rule 208 (modulus_exp -> modulus_exp MODULUS unary_exp .)


state 323

    (8) global_assign_identifier_list -> IDENTIFIER ASSIGN expression COMMA global_assign_identifier_list .

    SEMICOLON       reduce using rule 8 (global_assign_identifier_list -> IDENTIFIER ASSIGN expression COMMA global_assign_identifier_list .)


state 324

    (128) struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE .

    SEMICOLON       reduce using rule 128 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE .)
    IDENTIFIER      reduce using rule 128 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE .)
    TIMES           reduce using rule 128 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE .)
    LPAREN          reduce using rule 128 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE .)
    LBRACKET        reduce using rule 128 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE .)
    COMMA           reduce using rule 128 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE .)
    RPAREN          reduce using rule 128 (struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE .)


state 325

    (141) struct_or_union_member_list -> variable_declaration_list_no_assign SEMICOLON struct_or_union_member_list .

    RBRACE          reduce using rule 141 (struct_or_union_member_list -> variable_declaration_list_no_assign SEMICOLON struct_or_union_member_list .)


state 326

    (144) variable_list_no_assign -> variable_list_no_assign COMMA . identifier
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN

    IDENTIFIER      shift and go to state 41
    TIMES           shift and go to state 42
    LPAREN          shift and go to state 59

    identifier                     shift and go to state 361

state 327

    (133) union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE .

    SEMICOLON       reduce using rule 133 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE .)
    IDENTIFIER      reduce using rule 133 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE .)
    TIMES           reduce using rule 133 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE .)
    LPAREN          reduce using rule 133 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE .)
    LBRACKET        reduce using rule 133 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE .)
    COMMA           reduce using rule 133 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE .)
    RPAREN          reduce using rule 133 (union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE .)


state 328

    (146) enum_item_list -> IDENTIFIER COMMA enum_item_list .

    RBRACE          reduce using rule 146 (enum_item_list -> IDENTIFIER COMMA enum_item_list .)


state 329

    (147) enum_item_list -> IDENTIFIER ASSIGN expression .
    (148) enum_item_list -> IDENTIFIER ASSIGN expression . COMMA enum_item_list

    RBRACE          reduce using rule 147 (enum_item_list -> IDENTIFIER ASSIGN expression .)
    COMMA           shift and go to state 362


state 330

    (138) enum_declaration -> KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE .

    SEMICOLON       reduce using rule 138 (enum_declaration -> KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE .)
    IDENTIFIER      reduce using rule 138 (enum_declaration -> KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE .)
    TIMES           reduce using rule 138 (enum_declaration -> KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE .)
    LPAREN          reduce using rule 138 (enum_declaration -> KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE .)
    LBRACKET        reduce using rule 138 (enum_declaration -> KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE .)
    COMMA           reduce using rule 138 (enum_declaration -> KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE .)
    RPAREN          reduce using rule 138 (enum_declaration -> KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE .)


state 331

    (66) signature_param -> type identifier multiple_bracket_signature .

    COMMA           reduce using rule 66 (signature_param -> type identifier multiple_bracket_signature .)
    RPAREN          reduce using rule 66 (signature_param -> type identifier multiple_bracket_signature .)


state 332

    (149) multiple_times -> TIMES multiple_times .

    COMMA           reduce using rule 149 (multiple_times -> TIMES multiple_times .)
    RPAREN          reduce using rule 149 (multiple_times -> TIMES multiple_times .)


state 333

    (60) signature_param_list -> signature_param COMMA signature_param_list .

    RPAREN          reduce using rule 60 (signature_param_list -> signature_param COMMA signature_param_list .)


state 334

    (59) triple_dot -> DOT DOT DOT .

    COMMA           reduce using rule 59 (triple_dot -> DOT DOT DOT .)
    RPAREN          reduce using rule 59 (triple_dot -> DOT DOT DOT .)


state 335

    (100) function_pointer -> identifier LPAREN signature_param_list . RPAREN

    RPAREN          shift and go to state 363


state 336

    (101) function_pointer -> identifier LPAREN RPAREN .

    COMMA           reduce using rule 101 (function_pointer -> identifier LPAREN RPAREN .)
    ASSIGN          reduce using rule 101 (function_pointer -> identifier LPAREN RPAREN .)
    SEMICOLON       reduce using rule 101 (function_pointer -> identifier LPAREN RPAREN .)


state 337

    (89) identifier_list -> identifier multiple_bracket_signature ASSIGN value_list COMMA . identifier_list
    (82) identifier_list -> . identifier
    (83) identifier_list -> . identifier COMMA identifier_list
    (84) identifier_list -> . identifier multiple_bracket_signature
    (85) identifier_list -> . identifier multiple_bracket_signature COMMA identifier_list
    (86) identifier_list -> . identifier ASSIGN expression
    (87) identifier_list -> . identifier ASSIGN expression COMMA identifier_list
    (88) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list
    (89) identifier_list -> . identifier multiple_bracket_signature ASSIGN value_list COMMA identifier_list
    (90) identifier_list -> . identifier ASSIGN value_list
    (91) identifier_list -> . identifier ASSIGN value_list COMMA identifier_list
    (92) identifier_list -> . function_pointer
    (93) identifier_list -> . function_pointer COMMA identifier_list
    (94) identifier_list -> . function_pointer ASSIGN expression
    (95) identifier_list -> . function_pointer ASSIGN expression COMMA identifier_list
    (96) identifier_list -> . function_pointer_array
    (97) identifier_list -> . function_pointer_array COMMA identifier_list
    (98) identifier_list -> . function_pointer_array ASSIGN value_list
    (99) identifier_list -> . function_pointer_array ASSIGN value_list COMMA identifier_list
    (104) identifier -> . IDENTIFIER
    (105) identifier -> . TIMES identifier
    (106) identifier -> . LPAREN identifier RPAREN
    (100) function_pointer -> . identifier LPAREN signature_param_list RPAREN
    (101) function_pointer -> . identifier LPAREN RPAREN
    (102) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN
    (103) function_pointer_array -> . LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN

    IDENTIFIER      shift and go to state 41
    TIMES           shift and go to state 42
    LPAREN          shift and go to state 38

    identifier                     shift and go to state 163
    identifier_list                shift and go to state 364
    function_pointer               shift and go to state 39
    function_pointer_array         shift and go to state 40

state 338

    (87) identifier_list -> identifier ASSIGN expression COMMA identifier_list .

    SEMICOLON       reduce using rule 87 (identifier_list -> identifier ASSIGN expression COMMA identifier_list .)


state 339

    (91) identifier_list -> identifier ASSIGN value_list COMMA identifier_list .

    SEMICOLON       reduce using rule 91 (identifier_list -> identifier ASSIGN value_list COMMA identifier_list .)


state 340

    (75) value_list -> LBRACE value_list_item RBRACE .

    COMMA           reduce using rule 75 (value_list -> LBRACE value_list_item RBRACE .)
    SEMICOLON       reduce using rule 75 (value_list -> LBRACE value_list_item RBRACE .)
    RBRACE          reduce using rule 75 (value_list -> LBRACE value_list_item RBRACE .)


state 341

    (78) value_list_item -> expression COMMA . value_list_item
    (77) value_list_item -> . expression
    (78) value_list_item -> . expression COMMA value_list_item
    (79) value_list_item -> . value_list
    (80) value_list_item -> . value_list COMMA value_list_item
    (157) expression -> . assign_exp
    (75) value_list -> . LBRACE value_list_item RBRACE
    (76) value_list -> . LBRACE RBRACE
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    LBRACE          shift and go to state 169
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 272
    value_list_item                shift and go to state 365
    value_list                     shift and go to state 273
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 342

    (80) value_list_item -> value_list COMMA . value_list_item
    (77) value_list_item -> . expression
    (78) value_list_item -> . expression COMMA value_list_item
    (79) value_list_item -> . value_list
    (80) value_list_item -> . value_list COMMA value_list_item
    (157) expression -> . assign_exp
    (75) value_list -> . LBRACE value_list_item RBRACE
    (76) value_list -> . LBRACE RBRACE
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    LBRACE          shift and go to state 169
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    value_list                     shift and go to state 273
    value_list_item                shift and go to state 366
    expression                     shift and go to state 272
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 343

    (102) function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature RPAREN . LPAREN signature_param_list RPAREN
    (103) function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature RPAREN . LPAREN RPAREN

    LPAREN          shift and go to state 367


state 344

    (95) identifier_list -> function_pointer ASSIGN expression COMMA identifier_list .

    SEMICOLON       reduce using rule 95 (identifier_list -> function_pointer ASSIGN expression COMMA identifier_list .)


state 345

    (99) identifier_list -> function_pointer_array ASSIGN value_list COMMA identifier_list .

    SEMICOLON       reduce using rule 99 (identifier_list -> function_pointer_array ASSIGN value_list COMMA identifier_list .)


state 346

    (35) if_then_statement -> KEYWORD_IF LPAREN expression RPAREN . statement
    (36) if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN . statement_no_short_if KEYWORD_ELSE statement
    (14) statement -> . statement_without_trailing_substatement
    (15) statement -> . if_then_statement
    (16) statement -> . if_then_else_statement
    (17) statement -> . while_statement
    (18) statement -> . for_statement
    (31) statement_no_short_if -> . statement_without_trailing_substatement
    (32) statement_no_short_if -> . if_then_else_statement_no_short_if
    (33) statement_no_short_if -> . while_statement_no_short_if
    (34) statement_no_short_if -> . for_statement_no_short_if
    (19) statement_without_trailing_substatement -> . block
    (20) statement_without_trailing_substatement -> . SEMICOLON
    (21) statement_without_trailing_substatement -> . expression_list SEMICOLON
    (22) statement_without_trailing_substatement -> . switch_stm
    (23) statement_without_trailing_substatement -> . do_statement
    (24) statement_without_trailing_substatement -> . KEYWORD_BREAK SEMICOLON
    (25) statement_without_trailing_substatement -> . KEYWORD_CONTINUE SEMICOLON
    (26) statement_without_trailing_substatement -> . return_stm SEMICOLON
    (27) statement_without_trailing_substatement -> . IDENTIFIER COLON
    (28) statement_without_trailing_substatement -> . KEYWORD_GOTO IDENTIFIER SEMICOLON
    (29) statement_without_trailing_substatement -> . variable_declaration_list SEMICOLON
    (30) statement_without_trailing_substatement -> . type SEMICOLON
    (35) if_then_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (36) if_then_else_statement -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (38) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (47) for_statement -> . KEYWORD_FOR LPAREN for_params RPAREN statement
    (37) if_then_else_statement_no_short_if -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement_no_short_if
    (39) while_statement_no_short_if -> . KEYWORD_WHILE LPAREN expression RPAREN statement_no_short_if
    (48) for_statement_no_short_if -> . KEYWORD_FOR LPAREN for_params RPAREN statement_no_short_if
    (9) block -> . LBRACE RBRACE
    (10) block -> . LBRACE block_statements RBRACE
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (49) switch_stm -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE
    (40) do_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (54) return_stm -> . KEYWORD_RETURN
    (55) return_stm -> . KEYWORD_RETURN expression
    (81) variable_declaration_list -> . type identifier_list
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (157) expression -> . assign_exp
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    SEMICOLON       shift and go to state 77
    KEYWORD_BREAK   shift and go to state 81
    KEYWORD_CONTINUE shift and go to state 82
    IDENTIFIER      shift and go to state 84
    KEYWORD_GOTO    shift and go to state 85
    KEYWORD_IF      shift and go to state 368
    KEYWORD_WHILE   shift and go to state 375
    KEYWORD_FOR     shift and go to state 376
    LBRACE          shift and go to state 44
    KEYWORD_SWITCH  shift and go to state 93
    KEYWORD_DO      shift and go to state 94
    KEYWORD_RETURN  shift and go to state 95
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 90
    statement                      shift and go to state 369
    statement_no_short_if          shift and go to state 370
    statement_without_trailing_substatement shift and go to state 371
    if_then_statement              shift and go to state 72
    if_then_else_statement         shift and go to state 73
    while_statement                shift and go to state 74
    for_statement                  shift and go to state 75
    if_then_else_statement_no_short_if shift and go to state 372
    while_statement_no_short_if    shift and go to state 373
    for_statement_no_short_if      shift and go to state 374
    block                          shift and go to state 76
    expression_list                shift and go to state 78
    switch_stm                     shift and go to state 79
    do_statement                   shift and go to state 80
    return_stm                     shift and go to state 83
    variable_declaration_list      shift and go to state 86
    type                           shift and go to state 87
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    assign_exp                     shift and go to state 96
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 347

    (228) cast_exp -> LPAREN type multiple_times RPAREN .

    IDENTIFIER      reduce using rule 228 (cast_exp -> LPAREN type multiple_times RPAREN .)
    STRING          reduce using rule 228 (cast_exp -> LPAREN type multiple_times RPAREN .)
    FLOAT_NUMBER    reduce using rule 228 (cast_exp -> LPAREN type multiple_times RPAREN .)
    CHARACTER       reduce using rule 228 (cast_exp -> LPAREN type multiple_times RPAREN .)
    NUMBER          reduce using rule 228 (cast_exp -> LPAREN type multiple_times RPAREN .)
    BINARY_NUMBER   reduce using rule 228 (cast_exp -> LPAREN type multiple_times RPAREN .)
    HEXADECIMAL_NUMBER reduce using rule 228 (cast_exp -> LPAREN type multiple_times RPAREN .)
    OCTAL_NUMBER    reduce using rule 228 (cast_exp -> LPAREN type multiple_times RPAREN .)
    LPAREN          reduce using rule 228 (cast_exp -> LPAREN type multiple_times RPAREN .)


state 348

    (38) while_statement -> KEYWORD_WHILE LPAREN expression RPAREN . statement
    (14) statement -> . statement_without_trailing_substatement
    (15) statement -> . if_then_statement
    (16) statement -> . if_then_else_statement
    (17) statement -> . while_statement
    (18) statement -> . for_statement
    (19) statement_without_trailing_substatement -> . block
    (20) statement_without_trailing_substatement -> . SEMICOLON
    (21) statement_without_trailing_substatement -> . expression_list SEMICOLON
    (22) statement_without_trailing_substatement -> . switch_stm
    (23) statement_without_trailing_substatement -> . do_statement
    (24) statement_without_trailing_substatement -> . KEYWORD_BREAK SEMICOLON
    (25) statement_without_trailing_substatement -> . KEYWORD_CONTINUE SEMICOLON
    (26) statement_without_trailing_substatement -> . return_stm SEMICOLON
    (27) statement_without_trailing_substatement -> . IDENTIFIER COLON
    (28) statement_without_trailing_substatement -> . KEYWORD_GOTO IDENTIFIER SEMICOLON
    (29) statement_without_trailing_substatement -> . variable_declaration_list SEMICOLON
    (30) statement_without_trailing_substatement -> . type SEMICOLON
    (35) if_then_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (36) if_then_else_statement -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (38) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (47) for_statement -> . KEYWORD_FOR LPAREN for_params RPAREN statement
    (9) block -> . LBRACE RBRACE
    (10) block -> . LBRACE block_statements RBRACE
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (49) switch_stm -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE
    (40) do_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (54) return_stm -> . KEYWORD_RETURN
    (55) return_stm -> . KEYWORD_RETURN expression
    (81) variable_declaration_list -> . type identifier_list
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (157) expression -> . assign_exp
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    SEMICOLON       shift and go to state 77
    KEYWORD_BREAK   shift and go to state 81
    KEYWORD_CONTINUE shift and go to state 82
    IDENTIFIER      shift and go to state 84
    KEYWORD_GOTO    shift and go to state 85
    KEYWORD_IF      shift and go to state 88
    KEYWORD_WHILE   shift and go to state 91
    KEYWORD_FOR     shift and go to state 92
    LBRACE          shift and go to state 44
    KEYWORD_SWITCH  shift and go to state 93
    KEYWORD_DO      shift and go to state 94
    KEYWORD_RETURN  shift and go to state 95
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 90
    statement                      shift and go to state 377
    statement_without_trailing_substatement shift and go to state 71
    if_then_statement              shift and go to state 72
    if_then_else_statement         shift and go to state 73
    while_statement                shift and go to state 74
    for_statement                  shift and go to state 75
    block                          shift and go to state 76
    expression_list                shift and go to state 78
    switch_stm                     shift and go to state 79
    do_statement                   shift and go to state 80
    return_stm                     shift and go to state 83
    variable_declaration_list      shift and go to state 86
    type                           shift and go to state 87
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    assign_exp                     shift and go to state 96
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 349

    (47) for_statement -> KEYWORD_FOR LPAREN for_params RPAREN . statement
    (14) statement -> . statement_without_trailing_substatement
    (15) statement -> . if_then_statement
    (16) statement -> . if_then_else_statement
    (17) statement -> . while_statement
    (18) statement -> . for_statement
    (19) statement_without_trailing_substatement -> . block
    (20) statement_without_trailing_substatement -> . SEMICOLON
    (21) statement_without_trailing_substatement -> . expression_list SEMICOLON
    (22) statement_without_trailing_substatement -> . switch_stm
    (23) statement_without_trailing_substatement -> . do_statement
    (24) statement_without_trailing_substatement -> . KEYWORD_BREAK SEMICOLON
    (25) statement_without_trailing_substatement -> . KEYWORD_CONTINUE SEMICOLON
    (26) statement_without_trailing_substatement -> . return_stm SEMICOLON
    (27) statement_without_trailing_substatement -> . IDENTIFIER COLON
    (28) statement_without_trailing_substatement -> . KEYWORD_GOTO IDENTIFIER SEMICOLON
    (29) statement_without_trailing_substatement -> . variable_declaration_list SEMICOLON
    (30) statement_without_trailing_substatement -> . type SEMICOLON
    (35) if_then_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (36) if_then_else_statement -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (38) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (47) for_statement -> . KEYWORD_FOR LPAREN for_params RPAREN statement
    (9) block -> . LBRACE RBRACE
    (10) block -> . LBRACE block_statements RBRACE
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (49) switch_stm -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE
    (40) do_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (54) return_stm -> . KEYWORD_RETURN
    (55) return_stm -> . KEYWORD_RETURN expression
    (81) variable_declaration_list -> . type identifier_list
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (157) expression -> . assign_exp
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    SEMICOLON       shift and go to state 77
    KEYWORD_BREAK   shift and go to state 81
    KEYWORD_CONTINUE shift and go to state 82
    IDENTIFIER      shift and go to state 84
    KEYWORD_GOTO    shift and go to state 85
    KEYWORD_IF      shift and go to state 88
    KEYWORD_WHILE   shift and go to state 91
    KEYWORD_FOR     shift and go to state 92
    LBRACE          shift and go to state 44
    KEYWORD_SWITCH  shift and go to state 93
    KEYWORD_DO      shift and go to state 94
    KEYWORD_RETURN  shift and go to state 95
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    statement                      shift and go to state 378
    statement_without_trailing_substatement shift and go to state 71
    if_then_statement              shift and go to state 72
    if_then_else_statement         shift and go to state 73
    while_statement                shift and go to state 74
    for_statement                  shift and go to state 75
    block                          shift and go to state 76
    expression_list                shift and go to state 78
    switch_stm                     shift and go to state 79
    do_statement                   shift and go to state 80
    return_stm                     shift and go to state 83
    variable_declaration_list      shift and go to state 86
    type                           shift and go to state 87
    expression                     shift and go to state 90
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    assign_exp                     shift and go to state 96
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 350

    (41) for_params -> variable_declaration_list SEMICOLON . for_param
    (42) for_params -> variable_declaration_list SEMICOLON . for_param expression_list
    (45) for_param -> . SEMICOLON
    (46) for_param -> . expression_list SEMICOLON
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    SEMICOLON       shift and go to state 289
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    for_param                      shift and go to state 379
    expression_list                shift and go to state 291
    expression                     shift and go to state 90
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 351

    (43) for_params -> for_param for_param . expression_list
    (44) for_params -> for_param for_param .
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    RPAREN          reduce using rule 44 (for_params -> for_param for_param .)
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression_list                shift and go to state 380
    expression                     shift and go to state 90
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 352

    (46) for_param -> expression_list SEMICOLON .

    SEMICOLON       reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    INCREMENT       reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    DECREMENT       reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    LPAREN          reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    BITWISE_AND     reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    TIMES           reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    PLUS            reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    MINUS           reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    NOT             reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    IDENTIFIER      reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    STRING          reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    CHARACTER       reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    NUMBER          reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    BINARY_NUMBER   reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 46 (for_param -> expression_list SEMICOLON .)
    RPAREN          reduce using rule 46 (for_param -> expression_list SEMICOLON .)


state 353

    (49) switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN . LBRACE switch_itens RBRACE

    LBRACE          shift and go to state 381


state 354

    (40) do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN . expression RPAREN SEMICOLON
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 382
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 355

    (229) postfix_exp -> postfix_exp LBRACKET expression RBRACKET .

    INCREMENT       reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    DECREMENT       reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    DOT             reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TIMES_ASSIGN    reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    MODULUS_ASSIGN  reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    SHIFT_LEFT_ASSIGN reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    SHIFT_RIGHT_ASSIGN reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_AND_ASSIGN reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_XOR_ASSIGN reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_OR_ASSIGN reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    MODULUS         reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_SHIFT_RIGHT reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_SHIFT_LEFT reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    LESS_EQUALS     reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    LESS_THEN       reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    GREATER_EQUALS  reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    GREATER_THEN    reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    NOT_EQUALS      reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    EQUALS_THEN     reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_AND     reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_XOR     reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    BITWISE_OR      reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    LOGICAL_AND     reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    LOGICAL_OR      reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    QUESTION_MARK   reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)
    COLON           reduce using rule 229 (postfix_exp -> postfix_exp LBRACKET expression RBRACKET .)


state 356

    (231) postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .

    INCREMENT       reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    DECREMENT       reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    LBRACKET        reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    LPAREN          reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    DOT             reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    ARROW           reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    ASSIGN          reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TIMES_ASSIGN    reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    MODULUS_ASSIGN  reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    PLUS_ASSIGN     reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    MINUS_ASSIGN    reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    SHIFT_LEFT_ASSIGN reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    SHIFT_RIGHT_ASSIGN reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_AND_ASSIGN reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_XOR_ASSIGN reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_OR_ASSIGN reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    MODULUS         reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    DIVIDE          reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    TIMES           reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    MINUS           reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    PLUS            reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_SHIFT_RIGHT reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_SHIFT_LEFT reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    LESS_EQUALS     reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    LESS_THEN       reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    GREATER_EQUALS  reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    GREATER_THEN    reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    NOT_EQUALS      reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    EQUALS_THEN     reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_AND     reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_XOR     reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    BITWISE_OR      reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    LOGICAL_AND     reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    LOGICAL_OR      reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    QUESTION_MARK   reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    COMMA           reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    SEMICOLON       reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    RPAREN          reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    RBRACE          reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    RBRACKET        reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)
    COLON           reduce using rule 231 (postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN .)


state 357

    (236) function_call_parameters -> expression COMMA . function_call_parameters
    (235) function_call_parameters -> . expression
    (236) function_call_parameters -> . expression COMMA function_call_parameters
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 299
    function_call_parameters       shift and go to state 383
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 358

    (171) ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON . ternary_conditional_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (173) logical_exp -> . logical_or_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (237) primary_exp -> . identifier_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    logical_exp                    shift and go to state 105
    ternary_conditional_exp        shift and go to state 384
    logical_or_exp                 shift and go to state 114
    logical_and_exp                shift and go to state 116
    bitwise_or_exp                 shift and go to state 118
    bitwise_xor_exp                shift and go to state 121
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143
    unary_exp                      shift and go to state 305
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    primary_exp                    shift and go to state 106
    identifier_exp                 shift and go to state 115
    string_exp                     shift and go to state 117
    number_exp                     shift and go to state 120
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125

state 359

    (225) sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .

    ASSIGN          reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    TIMES_ASSIGN    reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    MODULUS_ASSIGN  reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    PLUS_ASSIGN     reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    MINUS_ASSIGN    reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    SHIFT_LEFT_ASSIGN reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    SHIFT_RIGHT_ASSIGN reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    BITWISE_AND_ASSIGN reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    BITWISE_XOR_ASSIGN reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    BITWISE_OR_ASSIGN reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    MODULUS         reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    DIVIDE          reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    TIMES           reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    MINUS           reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    PLUS            reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    BITWISE_SHIFT_RIGHT reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    BITWISE_SHIFT_LEFT reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    LESS_EQUALS     reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    LESS_THEN       reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    GREATER_EQUALS  reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    GREATER_THEN    reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    NOT_EQUALS      reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    EQUALS_THEN     reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    BITWISE_AND     reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    BITWISE_XOR     reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    BITWISE_OR      reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    LOGICAL_AND     reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    LOGICAL_OR      reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    QUESTION_MARK   reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    COMMA           reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    SEMICOLON       reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    RPAREN          reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    RBRACE          reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    RBRACKET        reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)
    COLON           reduce using rule 225 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN .)


state 360

    (226) sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times . RPAREN

    RPAREN          shift and go to state 385


state 361

    (144) variable_list_no_assign -> variable_list_no_assign COMMA identifier .

    COMMA           reduce using rule 144 (variable_list_no_assign -> variable_list_no_assign COMMA identifier .)
    SEMICOLON       reduce using rule 144 (variable_list_no_assign -> variable_list_no_assign COMMA identifier .)


state 362

    (148) enum_item_list -> IDENTIFIER ASSIGN expression COMMA . enum_item_list
    (145) enum_item_list -> . IDENTIFIER
    (146) enum_item_list -> . IDENTIFIER COMMA enum_item_list
    (147) enum_item_list -> . IDENTIFIER ASSIGN expression
    (148) enum_item_list -> . IDENTIFIER ASSIGN expression COMMA enum_item_list

    IDENTIFIER      shift and go to state 155

    enum_item_list                 shift and go to state 386

state 363

    (100) function_pointer -> identifier LPAREN signature_param_list RPAREN .

    COMMA           reduce using rule 100 (function_pointer -> identifier LPAREN signature_param_list RPAREN .)
    ASSIGN          reduce using rule 100 (function_pointer -> identifier LPAREN signature_param_list RPAREN .)
    SEMICOLON       reduce using rule 100 (function_pointer -> identifier LPAREN signature_param_list RPAREN .)


state 364

    (89) identifier_list -> identifier multiple_bracket_signature ASSIGN value_list COMMA identifier_list .

    SEMICOLON       reduce using rule 89 (identifier_list -> identifier multiple_bracket_signature ASSIGN value_list COMMA identifier_list .)


state 365

    (78) value_list_item -> expression COMMA value_list_item .

    RBRACE          reduce using rule 78 (value_list_item -> expression COMMA value_list_item .)


state 366

    (80) value_list_item -> value_list COMMA value_list_item .

    RBRACE          reduce using rule 80 (value_list_item -> value_list COMMA value_list_item .)


state 367

    (102) function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN . signature_param_list RPAREN
    (103) function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN . RPAREN
    (60) signature_param_list -> . signature_param COMMA signature_param_list
    (61) signature_param_list -> . signature_param
    (62) signature_param -> . type
    (63) signature_param -> . type multiple_times
    (64) signature_param -> . type multiple_bracket_signature
    (65) signature_param -> . type identifier
    (66) signature_param -> . type identifier multiple_bracket_signature
    (67) signature_param -> . triple_dot
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (59) triple_dot -> . DOT DOT DOT
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER

    RPAREN          shift and go to state 387
    DOT             shift and go to state 162
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31

    signature_param_list           shift and go to state 388
    signature_param                shift and go to state 160
    type                           shift and go to state 157
    triple_dot                     shift and go to state 161
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14

state 368

    (35) if_then_statement -> KEYWORD_IF . LPAREN expression RPAREN statement
    (36) if_then_else_statement -> KEYWORD_IF . LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (37) if_then_else_statement_no_short_if -> KEYWORD_IF . LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement_no_short_if

    LPAREN          shift and go to state 389


state 369

    (35) if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_BREAK   reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_CONTINUE reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_GOTO    reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_IF      reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_WHILE   reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_FOR     reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_SWITCH  reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_DO      reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_RETURN  reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    TYPE_CHAR       reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    TYPE_INT        reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    TYPE_SHORT      reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    TYPE_LONG       reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    TYPE_FLOAT      reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    TYPE_DOUBLE     reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    TYPE_VOID       reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_STATIC  reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_UNSIGNED reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_VOLATILE reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_EXTERN  reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_SIGNED  reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_REGISTER reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_CONST   reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_STRUCT  reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_UNION   reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_ENUM    reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    INCREMENT       reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    DECREMENT       reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_SIZEOF  reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    BITWISE_AND     reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    BITWISE_COMPLEMENT reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    FLOAT_NUMBER    reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    CHARACTER       reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    BINARY_NUMBER   reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    HEXADECIMAL_NUMBER reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    OCTAL_NUMBER    reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_CASE    reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_DEFAULT reduce using rule 35 (if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)


state 370

    (36) if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if . KEYWORD_ELSE statement

    KEYWORD_ELSE    shift and go to state 390


state 371

    (14) statement -> statement_without_trailing_substatement .
    (31) statement_no_short_if -> statement_without_trailing_substatement .

    RBRACE          reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    SEMICOLON       reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_BREAK   reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_CONTINUE reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    IDENTIFIER      reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_GOTO    reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_IF      reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_WHILE   reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_FOR     reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    LBRACE          reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_SWITCH  reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_DO      reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_RETURN  reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    TYPE_CHAR       reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    TYPE_INT        reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    TYPE_SHORT      reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    TYPE_LONG       reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    TYPE_FLOAT      reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    TYPE_DOUBLE     reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    TYPE_VOID       reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_STATIC  reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_UNSIGNED reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_VOLATILE reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_EXTERN  reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_SIGNED  reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_REGISTER reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_CONST   reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_STRUCT  reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_UNION   reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_ENUM    reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    INCREMENT       reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    DECREMENT       reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    LPAREN          reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_SIZEOF  reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    BITWISE_AND     reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    TIMES           reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    PLUS            reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    MINUS           reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    BITWISE_COMPLEMENT reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    NOT             reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    STRING          reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    FLOAT_NUMBER    reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    CHARACTER       reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    NUMBER          reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    BINARY_NUMBER   reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    HEXADECIMAL_NUMBER reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    OCTAL_NUMBER    reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_CASE    reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_DEFAULT reduce using rule 14 (statement -> statement_without_trailing_substatement .)
    KEYWORD_ELSE    reduce using rule 31 (statement_no_short_if -> statement_without_trailing_substatement .)


state 372

    (32) statement_no_short_if -> if_then_else_statement_no_short_if .

    KEYWORD_ELSE    reduce using rule 32 (statement_no_short_if -> if_then_else_statement_no_short_if .)


state 373

    (33) statement_no_short_if -> while_statement_no_short_if .

    KEYWORD_ELSE    reduce using rule 33 (statement_no_short_if -> while_statement_no_short_if .)


state 374

    (34) statement_no_short_if -> for_statement_no_short_if .

    KEYWORD_ELSE    reduce using rule 34 (statement_no_short_if -> for_statement_no_short_if .)


state 375

    (38) while_statement -> KEYWORD_WHILE . LPAREN expression RPAREN statement
    (39) while_statement_no_short_if -> KEYWORD_WHILE . LPAREN expression RPAREN statement_no_short_if

    LPAREN          shift and go to state 391


state 376

    (47) for_statement -> KEYWORD_FOR . LPAREN for_params RPAREN statement
    (48) for_statement_no_short_if -> KEYWORD_FOR . LPAREN for_params RPAREN statement_no_short_if

    LPAREN          shift and go to state 392


state 377

    (38) while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_BREAK   reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_CONTINUE reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_GOTO    reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_IF      reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_WHILE   reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_FOR     reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_SWITCH  reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_DO      reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_RETURN  reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    TYPE_CHAR       reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    TYPE_INT        reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    TYPE_SHORT      reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    TYPE_LONG       reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    TYPE_FLOAT      reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    TYPE_DOUBLE     reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    TYPE_VOID       reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_STATIC  reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_UNSIGNED reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_VOLATILE reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_EXTERN  reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_SIGNED  reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_REGISTER reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_CONST   reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_STRUCT  reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_UNION   reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_ENUM    reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    INCREMENT       reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    DECREMENT       reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_SIZEOF  reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    BITWISE_AND     reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    BITWISE_COMPLEMENT reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    FLOAT_NUMBER    reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    CHARACTER       reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    BINARY_NUMBER   reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    HEXADECIMAL_NUMBER reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    OCTAL_NUMBER    reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_CASE    reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_DEFAULT reduce using rule 38 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)


state 378

    (47) for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .

    RBRACE          reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    SEMICOLON       reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_BREAK   reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_CONTINUE reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    IDENTIFIER      reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_GOTO    reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_IF      reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_WHILE   reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_FOR     reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    LBRACE          reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_SWITCH  reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_DO      reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_RETURN  reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    TYPE_CHAR       reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    TYPE_INT        reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    TYPE_SHORT      reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    TYPE_LONG       reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    TYPE_FLOAT      reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    TYPE_DOUBLE     reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    TYPE_VOID       reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_STATIC  reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_UNSIGNED reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_VOLATILE reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_EXTERN  reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_SIGNED  reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_REGISTER reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_CONST   reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_STRUCT  reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_UNION   reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_ENUM    reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    INCREMENT       reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    DECREMENT       reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    LPAREN          reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_SIZEOF  reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    BITWISE_AND     reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    TIMES           reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    PLUS            reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    MINUS           reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    BITWISE_COMPLEMENT reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    NOT             reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    STRING          reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    FLOAT_NUMBER    reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    CHARACTER       reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    NUMBER          reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    BINARY_NUMBER   reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    HEXADECIMAL_NUMBER reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    OCTAL_NUMBER    reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_CASE    reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)
    KEYWORD_DEFAULT reduce using rule 47 (for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement .)


state 379

    (41) for_params -> variable_declaration_list SEMICOLON for_param .
    (42) for_params -> variable_declaration_list SEMICOLON for_param . expression_list
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    RPAREN          reduce using rule 41 (for_params -> variable_declaration_list SEMICOLON for_param .)
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression_list                shift and go to state 393
    expression                     shift and go to state 90
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 380

    (43) for_params -> for_param for_param expression_list .

    RPAREN          reduce using rule 43 (for_params -> for_param for_param expression_list .)


state 381

    (49) switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE . switch_itens RBRACE
    (50) switch_itens -> . KEYWORD_CASE expression COLON block_statements
    (51) switch_itens -> . KEYWORD_DEFAULT COLON block_statements
    (52) switch_itens -> . KEYWORD_CASE expression COLON block_statements switch_itens
    (53) switch_itens -> . KEYWORD_DEFAULT COLON block_statements switch_itens

    KEYWORD_CASE    shift and go to state 395
    KEYWORD_DEFAULT shift and go to state 396

    switch_itens                   shift and go to state 394

state 382

    (40) do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 397


state 383

    (236) function_call_parameters -> expression COMMA function_call_parameters .

    RPAREN          reduce using rule 236 (function_call_parameters -> expression COMMA function_call_parameters .)


state 384

    (171) ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .

    COMMA           reduce using rule 171 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    SEMICOLON       reduce using rule 171 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    RPAREN          reduce using rule 171 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    RBRACE          reduce using rule 171 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    RBRACKET        reduce using rule 171 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)
    COLON           reduce using rule 171 (ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp .)


state 385

    (226) sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .

    ASSIGN          reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    TIMES_ASSIGN    reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    MODULUS_ASSIGN  reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    PLUS_ASSIGN     reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    MINUS_ASSIGN    reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    SHIFT_LEFT_ASSIGN reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    SHIFT_RIGHT_ASSIGN reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    BITWISE_AND_ASSIGN reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    BITWISE_XOR_ASSIGN reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    BITWISE_OR_ASSIGN reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    MODULUS         reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    DIVIDE          reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    TIMES           reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    MINUS           reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    PLUS            reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    BITWISE_SHIFT_RIGHT reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    BITWISE_SHIFT_LEFT reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    LESS_EQUALS     reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    LESS_THEN       reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    GREATER_EQUALS  reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    GREATER_THEN    reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    NOT_EQUALS      reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    EQUALS_THEN     reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    BITWISE_AND     reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    BITWISE_XOR     reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    BITWISE_OR      reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    LOGICAL_AND     reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    LOGICAL_OR      reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    QUESTION_MARK   reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    COMMA           reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    SEMICOLON       reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    RPAREN          reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    RBRACE          reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    RBRACKET        reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)
    COLON           reduce using rule 226 (sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN .)


state 386

    (148) enum_item_list -> IDENTIFIER ASSIGN expression COMMA enum_item_list .

    RBRACE          reduce using rule 148 (enum_item_list -> IDENTIFIER ASSIGN expression COMMA enum_item_list .)


state 387

    (103) function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN .

    COMMA           reduce using rule 103 (function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN .)
    ASSIGN          reduce using rule 103 (function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN .)
    SEMICOLON       reduce using rule 103 (function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN .)


state 388

    (102) function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list . RPAREN

    RPAREN          shift and go to state 398


state 389

    (35) if_then_statement -> KEYWORD_IF LPAREN . expression RPAREN statement
    (36) if_then_else_statement -> KEYWORD_IF LPAREN . expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (37) if_then_else_statement_no_short_if -> KEYWORD_IF LPAREN . expression RPAREN statement_no_short_if KEYWORD_ELSE statement_no_short_if
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 399
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 390

    (36) if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE . statement
    (14) statement -> . statement_without_trailing_substatement
    (15) statement -> . if_then_statement
    (16) statement -> . if_then_else_statement
    (17) statement -> . while_statement
    (18) statement -> . for_statement
    (19) statement_without_trailing_substatement -> . block
    (20) statement_without_trailing_substatement -> . SEMICOLON
    (21) statement_without_trailing_substatement -> . expression_list SEMICOLON
    (22) statement_without_trailing_substatement -> . switch_stm
    (23) statement_without_trailing_substatement -> . do_statement
    (24) statement_without_trailing_substatement -> . KEYWORD_BREAK SEMICOLON
    (25) statement_without_trailing_substatement -> . KEYWORD_CONTINUE SEMICOLON
    (26) statement_without_trailing_substatement -> . return_stm SEMICOLON
    (27) statement_without_trailing_substatement -> . IDENTIFIER COLON
    (28) statement_without_trailing_substatement -> . KEYWORD_GOTO IDENTIFIER SEMICOLON
    (29) statement_without_trailing_substatement -> . variable_declaration_list SEMICOLON
    (30) statement_without_trailing_substatement -> . type SEMICOLON
    (35) if_then_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (36) if_then_else_statement -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (38) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (47) for_statement -> . KEYWORD_FOR LPAREN for_params RPAREN statement
    (9) block -> . LBRACE RBRACE
    (10) block -> . LBRACE block_statements RBRACE
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (49) switch_stm -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE
    (40) do_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (54) return_stm -> . KEYWORD_RETURN
    (55) return_stm -> . KEYWORD_RETURN expression
    (81) variable_declaration_list -> . type identifier_list
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (157) expression -> . assign_exp
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    SEMICOLON       shift and go to state 77
    KEYWORD_BREAK   shift and go to state 81
    KEYWORD_CONTINUE shift and go to state 82
    IDENTIFIER      shift and go to state 84
    KEYWORD_GOTO    shift and go to state 85
    KEYWORD_IF      shift and go to state 88
    KEYWORD_WHILE   shift and go to state 91
    KEYWORD_FOR     shift and go to state 92
    LBRACE          shift and go to state 44
    KEYWORD_SWITCH  shift and go to state 93
    KEYWORD_DO      shift and go to state 94
    KEYWORD_RETURN  shift and go to state 95
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 90
    statement                      shift and go to state 400
    statement_without_trailing_substatement shift and go to state 71
    if_then_statement              shift and go to state 72
    if_then_else_statement         shift and go to state 73
    while_statement                shift and go to state 74
    for_statement                  shift and go to state 75
    block                          shift and go to state 76
    expression_list                shift and go to state 78
    switch_stm                     shift and go to state 79
    do_statement                   shift and go to state 80
    return_stm                     shift and go to state 83
    variable_declaration_list      shift and go to state 86
    type                           shift and go to state 87
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    assign_exp                     shift and go to state 96
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 391

    (38) while_statement -> KEYWORD_WHILE LPAREN . expression RPAREN statement
    (39) while_statement_no_short_if -> KEYWORD_WHILE LPAREN . expression RPAREN statement_no_short_if
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 401
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 392

    (47) for_statement -> KEYWORD_FOR LPAREN . for_params RPAREN statement
    (48) for_statement_no_short_if -> KEYWORD_FOR LPAREN . for_params RPAREN statement_no_short_if
    (41) for_params -> . variable_declaration_list SEMICOLON for_param
    (42) for_params -> . variable_declaration_list SEMICOLON for_param expression_list
    (43) for_params -> . for_param for_param expression_list
    (44) for_params -> . for_param for_param
    (81) variable_declaration_list -> . type identifier_list
    (45) for_param -> . SEMICOLON
    (46) for_param -> . expression_list SEMICOLON
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (157) expression -> . assign_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    SEMICOLON       shift and go to state 289
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    for_params                     shift and go to state 402
    variable_declaration_list      shift and go to state 288
    for_param                      shift and go to state 290
    expression_list                shift and go to state 291
    type                           shift and go to state 292
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    expression                     shift and go to state 90
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 393

    (42) for_params -> variable_declaration_list SEMICOLON for_param expression_list .

    RPAREN          reduce using rule 42 (for_params -> variable_declaration_list SEMICOLON for_param expression_list .)


state 394

    (49) switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens . RBRACE

    RBRACE          shift and go to state 403


state 395

    (50) switch_itens -> KEYWORD_CASE . expression COLON block_statements
    (52) switch_itens -> KEYWORD_CASE . expression COLON block_statements switch_itens
    (157) expression -> . assign_exp
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    IDENTIFIER      shift and go to state 144
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 404
    assign_exp                     shift and go to state 96
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 396

    (51) switch_itens -> KEYWORD_DEFAULT . COLON block_statements
    (53) switch_itens -> KEYWORD_DEFAULT . COLON block_statements switch_itens

    COLON           shift and go to state 405


state 397

    (40) do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 406


state 398

    (102) function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN .

    COMMA           reduce using rule 102 (function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN .)
    ASSIGN          reduce using rule 102 (function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN .)
    SEMICOLON       reduce using rule 102 (function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN .)


state 399

    (35) if_then_statement -> KEYWORD_IF LPAREN expression . RPAREN statement
    (36) if_then_else_statement -> KEYWORD_IF LPAREN expression . RPAREN statement_no_short_if KEYWORD_ELSE statement
    (37) if_then_else_statement_no_short_if -> KEYWORD_IF LPAREN expression . RPAREN statement_no_short_if KEYWORD_ELSE statement_no_short_if

    RPAREN          shift and go to state 407


state 400

    (36) if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .

    RBRACE          reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    SEMICOLON       reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_BREAK   reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_CONTINUE reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    IDENTIFIER      reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_GOTO    reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_IF      reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_WHILE   reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_FOR     reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    LBRACE          reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_SWITCH  reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_DO      reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_RETURN  reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    TYPE_CHAR       reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    TYPE_INT        reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    TYPE_SHORT      reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    TYPE_LONG       reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    TYPE_FLOAT      reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    TYPE_DOUBLE     reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    TYPE_VOID       reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_STATIC  reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_UNSIGNED reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_VOLATILE reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_EXTERN  reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_SIGNED  reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_REGISTER reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_CONST   reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_STRUCT  reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_UNION   reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_ENUM    reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    INCREMENT       reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    DECREMENT       reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    LPAREN          reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_SIZEOF  reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    BITWISE_AND     reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    TIMES           reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    PLUS            reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    MINUS           reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    BITWISE_COMPLEMENT reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    NOT             reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    STRING          reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    FLOAT_NUMBER    reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    CHARACTER       reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    NUMBER          reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    BINARY_NUMBER   reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    HEXADECIMAL_NUMBER reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    OCTAL_NUMBER    reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_CASE    reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)
    KEYWORD_DEFAULT reduce using rule 36 (if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement .)


state 401

    (38) while_statement -> KEYWORD_WHILE LPAREN expression . RPAREN statement
    (39) while_statement_no_short_if -> KEYWORD_WHILE LPAREN expression . RPAREN statement_no_short_if

    RPAREN          shift and go to state 408


state 402

    (47) for_statement -> KEYWORD_FOR LPAREN for_params . RPAREN statement
    (48) for_statement_no_short_if -> KEYWORD_FOR LPAREN for_params . RPAREN statement_no_short_if

    RPAREN          shift and go to state 409


state 403

    (49) switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .

    RBRACE          reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    SEMICOLON       reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_BREAK   reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_CONTINUE reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    IDENTIFIER      reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_GOTO    reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_IF      reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_WHILE   reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_FOR     reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    LBRACE          reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_SWITCH  reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_DO      reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_RETURN  reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    TYPE_CHAR       reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    TYPE_INT        reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    TYPE_SHORT      reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    TYPE_LONG       reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    TYPE_FLOAT      reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    TYPE_DOUBLE     reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    TYPE_VOID       reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_STATIC  reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_UNSIGNED reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_VOLATILE reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_EXTERN  reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_SIGNED  reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_REGISTER reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_CONST   reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_STRUCT  reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_UNION   reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_ENUM    reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    INCREMENT       reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    DECREMENT       reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    LPAREN          reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_SIZEOF  reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    BITWISE_AND     reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    TIMES           reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    PLUS            reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    MINUS           reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    BITWISE_COMPLEMENT reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    NOT             reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    STRING          reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    FLOAT_NUMBER    reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    CHARACTER       reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    NUMBER          reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    BINARY_NUMBER   reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    HEXADECIMAL_NUMBER reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    OCTAL_NUMBER    reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_CASE    reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_DEFAULT reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)
    KEYWORD_ELSE    reduce using rule 49 (switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE .)


state 404

    (50) switch_itens -> KEYWORD_CASE expression . COLON block_statements
    (52) switch_itens -> KEYWORD_CASE expression . COLON block_statements switch_itens

    COLON           shift and go to state 410


state 405

    (51) switch_itens -> KEYWORD_DEFAULT COLON . block_statements
    (53) switch_itens -> KEYWORD_DEFAULT COLON . block_statements switch_itens
    (11) block_statements -> . block_statement
    (12) block_statements -> . block_statements block_statement
    (13) block_statement -> . statement
    (14) statement -> . statement_without_trailing_substatement
    (15) statement -> . if_then_statement
    (16) statement -> . if_then_else_statement
    (17) statement -> . while_statement
    (18) statement -> . for_statement
    (19) statement_without_trailing_substatement -> . block
    (20) statement_without_trailing_substatement -> . SEMICOLON
    (21) statement_without_trailing_substatement -> . expression_list SEMICOLON
    (22) statement_without_trailing_substatement -> . switch_stm
    (23) statement_without_trailing_substatement -> . do_statement
    (24) statement_without_trailing_substatement -> . KEYWORD_BREAK SEMICOLON
    (25) statement_without_trailing_substatement -> . KEYWORD_CONTINUE SEMICOLON
    (26) statement_without_trailing_substatement -> . return_stm SEMICOLON
    (27) statement_without_trailing_substatement -> . IDENTIFIER COLON
    (28) statement_without_trailing_substatement -> . KEYWORD_GOTO IDENTIFIER SEMICOLON
    (29) statement_without_trailing_substatement -> . variable_declaration_list SEMICOLON
    (30) statement_without_trailing_substatement -> . type SEMICOLON
    (35) if_then_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (36) if_then_else_statement -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (38) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (47) for_statement -> . KEYWORD_FOR LPAREN for_params RPAREN statement
    (9) block -> . LBRACE RBRACE
    (10) block -> . LBRACE block_statements RBRACE
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (49) switch_stm -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE
    (40) do_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (54) return_stm -> . KEYWORD_RETURN
    (55) return_stm -> . KEYWORD_RETURN expression
    (81) variable_declaration_list -> . type identifier_list
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (157) expression -> . assign_exp
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    SEMICOLON       shift and go to state 77
    KEYWORD_BREAK   shift and go to state 81
    KEYWORD_CONTINUE shift and go to state 82
    IDENTIFIER      shift and go to state 84
    KEYWORD_GOTO    shift and go to state 85
    KEYWORD_IF      shift and go to state 88
    KEYWORD_WHILE   shift and go to state 91
    KEYWORD_FOR     shift and go to state 92
    LBRACE          shift and go to state 44
    KEYWORD_SWITCH  shift and go to state 93
    KEYWORD_DO      shift and go to state 94
    KEYWORD_RETURN  shift and go to state 95
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    block_statements               shift and go to state 411
    block_statement                shift and go to state 69
    statement                      shift and go to state 70
    statement_without_trailing_substatement shift and go to state 71
    if_then_statement              shift and go to state 72
    if_then_else_statement         shift and go to state 73
    while_statement                shift and go to state 74
    for_statement                  shift and go to state 75
    block                          shift and go to state 76
    expression_list                shift and go to state 78
    switch_stm                     shift and go to state 79
    do_statement                   shift and go to state 80
    return_stm                     shift and go to state 83
    variable_declaration_list      shift and go to state 86
    type                           shift and go to state 87
    expression                     shift and go to state 90
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    assign_exp                     shift and go to state 96
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 406

    (40) do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_CONTINUE reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_GOTO    reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_IF      reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_FOR     reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    LBRACE          reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_DO      reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPE_CHAR       reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPE_INT        reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPE_SHORT      reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPE_LONG       reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPE_FLOAT      reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPE_DOUBLE     reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPE_VOID       reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_STATIC  reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_UNSIGNED reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_VOLATILE reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_EXTERN  reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_SIGNED  reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_REGISTER reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_CONST   reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_STRUCT  reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_UNION   reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_ENUM    reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    INCREMENT       reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    DECREMENT       reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_SIZEOF  reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    BITWISE_AND     reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    TIMES           reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUS            reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    BITWISE_COMPLEMENT reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    NOT             reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING          reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    CHARACTER       reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    BINARY_NUMBER   reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    HEXADECIMAL_NUMBER reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    OCTAL_NUMBER    reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_CASE    reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 40 (do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)


state 407

    (35) if_then_statement -> KEYWORD_IF LPAREN expression RPAREN . statement
    (36) if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN . statement_no_short_if KEYWORD_ELSE statement
    (37) if_then_else_statement_no_short_if -> KEYWORD_IF LPAREN expression RPAREN . statement_no_short_if KEYWORD_ELSE statement_no_short_if
    (14) statement -> . statement_without_trailing_substatement
    (15) statement -> . if_then_statement
    (16) statement -> . if_then_else_statement
    (17) statement -> . while_statement
    (18) statement -> . for_statement
    (31) statement_no_short_if -> . statement_without_trailing_substatement
    (32) statement_no_short_if -> . if_then_else_statement_no_short_if
    (33) statement_no_short_if -> . while_statement_no_short_if
    (34) statement_no_short_if -> . for_statement_no_short_if
    (19) statement_without_trailing_substatement -> . block
    (20) statement_without_trailing_substatement -> . SEMICOLON
    (21) statement_without_trailing_substatement -> . expression_list SEMICOLON
    (22) statement_without_trailing_substatement -> . switch_stm
    (23) statement_without_trailing_substatement -> . do_statement
    (24) statement_without_trailing_substatement -> . KEYWORD_BREAK SEMICOLON
    (25) statement_without_trailing_substatement -> . KEYWORD_CONTINUE SEMICOLON
    (26) statement_without_trailing_substatement -> . return_stm SEMICOLON
    (27) statement_without_trailing_substatement -> . IDENTIFIER COLON
    (28) statement_without_trailing_substatement -> . KEYWORD_GOTO IDENTIFIER SEMICOLON
    (29) statement_without_trailing_substatement -> . variable_declaration_list SEMICOLON
    (30) statement_without_trailing_substatement -> . type SEMICOLON
    (35) if_then_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (36) if_then_else_statement -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (38) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (47) for_statement -> . KEYWORD_FOR LPAREN for_params RPAREN statement
    (37) if_then_else_statement_no_short_if -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement_no_short_if
    (39) while_statement_no_short_if -> . KEYWORD_WHILE LPAREN expression RPAREN statement_no_short_if
    (48) for_statement_no_short_if -> . KEYWORD_FOR LPAREN for_params RPAREN statement_no_short_if
    (9) block -> . LBRACE RBRACE
    (10) block -> . LBRACE block_statements RBRACE
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (49) switch_stm -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE
    (40) do_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (54) return_stm -> . KEYWORD_RETURN
    (55) return_stm -> . KEYWORD_RETURN expression
    (81) variable_declaration_list -> . type identifier_list
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (157) expression -> . assign_exp
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    SEMICOLON       shift and go to state 77
    KEYWORD_BREAK   shift and go to state 81
    KEYWORD_CONTINUE shift and go to state 82
    IDENTIFIER      shift and go to state 84
    KEYWORD_GOTO    shift and go to state 85
    KEYWORD_IF      shift and go to state 368
    KEYWORD_WHILE   shift and go to state 375
    KEYWORD_FOR     shift and go to state 376
    LBRACE          shift and go to state 44
    KEYWORD_SWITCH  shift and go to state 93
    KEYWORD_DO      shift and go to state 94
    KEYWORD_RETURN  shift and go to state 95
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 90
    statement                      shift and go to state 369
    statement_no_short_if          shift and go to state 412
    statement_without_trailing_substatement shift and go to state 371
    if_then_statement              shift and go to state 72
    if_then_else_statement         shift and go to state 73
    while_statement                shift and go to state 74
    for_statement                  shift and go to state 75
    if_then_else_statement_no_short_if shift and go to state 372
    while_statement_no_short_if    shift and go to state 373
    for_statement_no_short_if      shift and go to state 374
    block                          shift and go to state 76
    expression_list                shift and go to state 78
    switch_stm                     shift and go to state 79
    do_statement                   shift and go to state 80
    return_stm                     shift and go to state 83
    variable_declaration_list      shift and go to state 86
    type                           shift and go to state 87
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    assign_exp                     shift and go to state 96
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 408

    (38) while_statement -> KEYWORD_WHILE LPAREN expression RPAREN . statement
    (39) while_statement_no_short_if -> KEYWORD_WHILE LPAREN expression RPAREN . statement_no_short_if
    (14) statement -> . statement_without_trailing_substatement
    (15) statement -> . if_then_statement
    (16) statement -> . if_then_else_statement
    (17) statement -> . while_statement
    (18) statement -> . for_statement
    (31) statement_no_short_if -> . statement_without_trailing_substatement
    (32) statement_no_short_if -> . if_then_else_statement_no_short_if
    (33) statement_no_short_if -> . while_statement_no_short_if
    (34) statement_no_short_if -> . for_statement_no_short_if
    (19) statement_without_trailing_substatement -> . block
    (20) statement_without_trailing_substatement -> . SEMICOLON
    (21) statement_without_trailing_substatement -> . expression_list SEMICOLON
    (22) statement_without_trailing_substatement -> . switch_stm
    (23) statement_without_trailing_substatement -> . do_statement
    (24) statement_without_trailing_substatement -> . KEYWORD_BREAK SEMICOLON
    (25) statement_without_trailing_substatement -> . KEYWORD_CONTINUE SEMICOLON
    (26) statement_without_trailing_substatement -> . return_stm SEMICOLON
    (27) statement_without_trailing_substatement -> . IDENTIFIER COLON
    (28) statement_without_trailing_substatement -> . KEYWORD_GOTO IDENTIFIER SEMICOLON
    (29) statement_without_trailing_substatement -> . variable_declaration_list SEMICOLON
    (30) statement_without_trailing_substatement -> . type SEMICOLON
    (35) if_then_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (36) if_then_else_statement -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (38) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (47) for_statement -> . KEYWORD_FOR LPAREN for_params RPAREN statement
    (37) if_then_else_statement_no_short_if -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement_no_short_if
    (39) while_statement_no_short_if -> . KEYWORD_WHILE LPAREN expression RPAREN statement_no_short_if
    (48) for_statement_no_short_if -> . KEYWORD_FOR LPAREN for_params RPAREN statement_no_short_if
    (9) block -> . LBRACE RBRACE
    (10) block -> . LBRACE block_statements RBRACE
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (49) switch_stm -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE
    (40) do_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (54) return_stm -> . KEYWORD_RETURN
    (55) return_stm -> . KEYWORD_RETURN expression
    (81) variable_declaration_list -> . type identifier_list
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (157) expression -> . assign_exp
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    SEMICOLON       shift and go to state 77
    KEYWORD_BREAK   shift and go to state 81
    KEYWORD_CONTINUE shift and go to state 82
    IDENTIFIER      shift and go to state 84
    KEYWORD_GOTO    shift and go to state 85
    KEYWORD_IF      shift and go to state 368
    KEYWORD_WHILE   shift and go to state 375
    KEYWORD_FOR     shift and go to state 376
    LBRACE          shift and go to state 44
    KEYWORD_SWITCH  shift and go to state 93
    KEYWORD_DO      shift and go to state 94
    KEYWORD_RETURN  shift and go to state 95
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 90
    statement                      shift and go to state 377
    statement_no_short_if          shift and go to state 413
    statement_without_trailing_substatement shift and go to state 371
    if_then_statement              shift and go to state 72
    if_then_else_statement         shift and go to state 73
    while_statement                shift and go to state 74
    for_statement                  shift and go to state 75
    if_then_else_statement_no_short_if shift and go to state 372
    while_statement_no_short_if    shift and go to state 373
    for_statement_no_short_if      shift and go to state 374
    block                          shift and go to state 76
    expression_list                shift and go to state 78
    switch_stm                     shift and go to state 79
    do_statement                   shift and go to state 80
    return_stm                     shift and go to state 83
    variable_declaration_list      shift and go to state 86
    type                           shift and go to state 87
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    assign_exp                     shift and go to state 96
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 409

    (47) for_statement -> KEYWORD_FOR LPAREN for_params RPAREN . statement
    (48) for_statement_no_short_if -> KEYWORD_FOR LPAREN for_params RPAREN . statement_no_short_if
    (14) statement -> . statement_without_trailing_substatement
    (15) statement -> . if_then_statement
    (16) statement -> . if_then_else_statement
    (17) statement -> . while_statement
    (18) statement -> . for_statement
    (31) statement_no_short_if -> . statement_without_trailing_substatement
    (32) statement_no_short_if -> . if_then_else_statement_no_short_if
    (33) statement_no_short_if -> . while_statement_no_short_if
    (34) statement_no_short_if -> . for_statement_no_short_if
    (19) statement_without_trailing_substatement -> . block
    (20) statement_without_trailing_substatement -> . SEMICOLON
    (21) statement_without_trailing_substatement -> . expression_list SEMICOLON
    (22) statement_without_trailing_substatement -> . switch_stm
    (23) statement_without_trailing_substatement -> . do_statement
    (24) statement_without_trailing_substatement -> . KEYWORD_BREAK SEMICOLON
    (25) statement_without_trailing_substatement -> . KEYWORD_CONTINUE SEMICOLON
    (26) statement_without_trailing_substatement -> . return_stm SEMICOLON
    (27) statement_without_trailing_substatement -> . IDENTIFIER COLON
    (28) statement_without_trailing_substatement -> . KEYWORD_GOTO IDENTIFIER SEMICOLON
    (29) statement_without_trailing_substatement -> . variable_declaration_list SEMICOLON
    (30) statement_without_trailing_substatement -> . type SEMICOLON
    (35) if_then_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (36) if_then_else_statement -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (38) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (47) for_statement -> . KEYWORD_FOR LPAREN for_params RPAREN statement
    (37) if_then_else_statement_no_short_if -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement_no_short_if
    (39) while_statement_no_short_if -> . KEYWORD_WHILE LPAREN expression RPAREN statement_no_short_if
    (48) for_statement_no_short_if -> . KEYWORD_FOR LPAREN for_params RPAREN statement_no_short_if
    (9) block -> . LBRACE RBRACE
    (10) block -> . LBRACE block_statements RBRACE
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (49) switch_stm -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE
    (40) do_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (54) return_stm -> . KEYWORD_RETURN
    (55) return_stm -> . KEYWORD_RETURN expression
    (81) variable_declaration_list -> . type identifier_list
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (157) expression -> . assign_exp
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    SEMICOLON       shift and go to state 77
    KEYWORD_BREAK   shift and go to state 81
    KEYWORD_CONTINUE shift and go to state 82
    IDENTIFIER      shift and go to state 84
    KEYWORD_GOTO    shift and go to state 85
    KEYWORD_IF      shift and go to state 368
    KEYWORD_WHILE   shift and go to state 375
    KEYWORD_FOR     shift and go to state 376
    LBRACE          shift and go to state 44
    KEYWORD_SWITCH  shift and go to state 93
    KEYWORD_DO      shift and go to state 94
    KEYWORD_RETURN  shift and go to state 95
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    statement                      shift and go to state 378
    statement_no_short_if          shift and go to state 414
    statement_without_trailing_substatement shift and go to state 371
    if_then_statement              shift and go to state 72
    if_then_else_statement         shift and go to state 73
    while_statement                shift and go to state 74
    for_statement                  shift and go to state 75
    if_then_else_statement_no_short_if shift and go to state 372
    while_statement_no_short_if    shift and go to state 373
    for_statement_no_short_if      shift and go to state 374
    block                          shift and go to state 76
    expression_list                shift and go to state 78
    switch_stm                     shift and go to state 79
    do_statement                   shift and go to state 80
    return_stm                     shift and go to state 83
    variable_declaration_list      shift and go to state 86
    type                           shift and go to state 87
    expression                     shift and go to state 90
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    assign_exp                     shift and go to state 96
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 410

    (50) switch_itens -> KEYWORD_CASE expression COLON . block_statements
    (52) switch_itens -> KEYWORD_CASE expression COLON . block_statements switch_itens
    (11) block_statements -> . block_statement
    (12) block_statements -> . block_statements block_statement
    (13) block_statement -> . statement
    (14) statement -> . statement_without_trailing_substatement
    (15) statement -> . if_then_statement
    (16) statement -> . if_then_else_statement
    (17) statement -> . while_statement
    (18) statement -> . for_statement
    (19) statement_without_trailing_substatement -> . block
    (20) statement_without_trailing_substatement -> . SEMICOLON
    (21) statement_without_trailing_substatement -> . expression_list SEMICOLON
    (22) statement_without_trailing_substatement -> . switch_stm
    (23) statement_without_trailing_substatement -> . do_statement
    (24) statement_without_trailing_substatement -> . KEYWORD_BREAK SEMICOLON
    (25) statement_without_trailing_substatement -> . KEYWORD_CONTINUE SEMICOLON
    (26) statement_without_trailing_substatement -> . return_stm SEMICOLON
    (27) statement_without_trailing_substatement -> . IDENTIFIER COLON
    (28) statement_without_trailing_substatement -> . KEYWORD_GOTO IDENTIFIER SEMICOLON
    (29) statement_without_trailing_substatement -> . variable_declaration_list SEMICOLON
    (30) statement_without_trailing_substatement -> . type SEMICOLON
    (35) if_then_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (36) if_then_else_statement -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (38) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (47) for_statement -> . KEYWORD_FOR LPAREN for_params RPAREN statement
    (9) block -> . LBRACE RBRACE
    (10) block -> . LBRACE block_statements RBRACE
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (49) switch_stm -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE
    (40) do_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (54) return_stm -> . KEYWORD_RETURN
    (55) return_stm -> . KEYWORD_RETURN expression
    (81) variable_declaration_list -> . type identifier_list
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (157) expression -> . assign_exp
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    SEMICOLON       shift and go to state 77
    KEYWORD_BREAK   shift and go to state 81
    KEYWORD_CONTINUE shift and go to state 82
    IDENTIFIER      shift and go to state 84
    KEYWORD_GOTO    shift and go to state 85
    KEYWORD_IF      shift and go to state 88
    KEYWORD_WHILE   shift and go to state 91
    KEYWORD_FOR     shift and go to state 92
    LBRACE          shift and go to state 44
    KEYWORD_SWITCH  shift and go to state 93
    KEYWORD_DO      shift and go to state 94
    KEYWORD_RETURN  shift and go to state 95
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 90
    block_statements               shift and go to state 415
    block_statement                shift and go to state 69
    statement                      shift and go to state 70
    statement_without_trailing_substatement shift and go to state 71
    if_then_statement              shift and go to state 72
    if_then_else_statement         shift and go to state 73
    while_statement                shift and go to state 74
    for_statement                  shift and go to state 75
    block                          shift and go to state 76
    expression_list                shift and go to state 78
    switch_stm                     shift and go to state 79
    do_statement                   shift and go to state 80
    return_stm                     shift and go to state 83
    variable_declaration_list      shift and go to state 86
    type                           shift and go to state 87
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    assign_exp                     shift and go to state 96
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 411

    (51) switch_itens -> KEYWORD_DEFAULT COLON block_statements .
    (53) switch_itens -> KEYWORD_DEFAULT COLON block_statements . switch_itens
    (12) block_statements -> block_statements . block_statement
    (50) switch_itens -> . KEYWORD_CASE expression COLON block_statements
    (51) switch_itens -> . KEYWORD_DEFAULT COLON block_statements
    (52) switch_itens -> . KEYWORD_CASE expression COLON block_statements switch_itens
    (53) switch_itens -> . KEYWORD_DEFAULT COLON block_statements switch_itens
    (13) block_statement -> . statement
    (14) statement -> . statement_without_trailing_substatement
    (15) statement -> . if_then_statement
    (16) statement -> . if_then_else_statement
    (17) statement -> . while_statement
    (18) statement -> . for_statement
    (19) statement_without_trailing_substatement -> . block
    (20) statement_without_trailing_substatement -> . SEMICOLON
    (21) statement_without_trailing_substatement -> . expression_list SEMICOLON
    (22) statement_without_trailing_substatement -> . switch_stm
    (23) statement_without_trailing_substatement -> . do_statement
    (24) statement_without_trailing_substatement -> . KEYWORD_BREAK SEMICOLON
    (25) statement_without_trailing_substatement -> . KEYWORD_CONTINUE SEMICOLON
    (26) statement_without_trailing_substatement -> . return_stm SEMICOLON
    (27) statement_without_trailing_substatement -> . IDENTIFIER COLON
    (28) statement_without_trailing_substatement -> . KEYWORD_GOTO IDENTIFIER SEMICOLON
    (29) statement_without_trailing_substatement -> . variable_declaration_list SEMICOLON
    (30) statement_without_trailing_substatement -> . type SEMICOLON
    (35) if_then_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (36) if_then_else_statement -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (38) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (47) for_statement -> . KEYWORD_FOR LPAREN for_params RPAREN statement
    (9) block -> . LBRACE RBRACE
    (10) block -> . LBRACE block_statements RBRACE
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (49) switch_stm -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE
    (40) do_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (54) return_stm -> . KEYWORD_RETURN
    (55) return_stm -> . KEYWORD_RETURN expression
    (81) variable_declaration_list -> . type identifier_list
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (157) expression -> . assign_exp
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    RBRACE          reduce using rule 51 (switch_itens -> KEYWORD_DEFAULT COLON block_statements .)
    KEYWORD_CASE    shift and go to state 395
    KEYWORD_DEFAULT shift and go to state 396
    SEMICOLON       shift and go to state 77
    KEYWORD_BREAK   shift and go to state 81
    KEYWORD_CONTINUE shift and go to state 82
    IDENTIFIER      shift and go to state 84
    KEYWORD_GOTO    shift and go to state 85
    KEYWORD_IF      shift and go to state 88
    KEYWORD_WHILE   shift and go to state 91
    KEYWORD_FOR     shift and go to state 92
    LBRACE          shift and go to state 44
    KEYWORD_SWITCH  shift and go to state 93
    KEYWORD_DO      shift and go to state 94
    KEYWORD_RETURN  shift and go to state 95
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    switch_itens                   shift and go to state 416
    block_statement                shift and go to state 182
    expression                     shift and go to state 90
    statement                      shift and go to state 70
    statement_without_trailing_substatement shift and go to state 71
    if_then_statement              shift and go to state 72
    if_then_else_statement         shift and go to state 73
    while_statement                shift and go to state 74
    for_statement                  shift and go to state 75
    block                          shift and go to state 76
    expression_list                shift and go to state 78
    switch_stm                     shift and go to state 79
    do_statement                   shift and go to state 80
    return_stm                     shift and go to state 83
    variable_declaration_list      shift and go to state 86
    type                           shift and go to state 87
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    assign_exp                     shift and go to state 96
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 412

    (36) if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if . KEYWORD_ELSE statement
    (37) if_then_else_statement_no_short_if -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if . KEYWORD_ELSE statement_no_short_if

    KEYWORD_ELSE    shift and go to state 417


state 413

    (39) while_statement_no_short_if -> KEYWORD_WHILE LPAREN expression RPAREN statement_no_short_if .

    KEYWORD_ELSE    reduce using rule 39 (while_statement_no_short_if -> KEYWORD_WHILE LPAREN expression RPAREN statement_no_short_if .)


state 414

    (48) for_statement_no_short_if -> KEYWORD_FOR LPAREN for_params RPAREN statement_no_short_if .

    KEYWORD_ELSE    reduce using rule 48 (for_statement_no_short_if -> KEYWORD_FOR LPAREN for_params RPAREN statement_no_short_if .)


state 415

    (50) switch_itens -> KEYWORD_CASE expression COLON block_statements .
    (52) switch_itens -> KEYWORD_CASE expression COLON block_statements . switch_itens
    (12) block_statements -> block_statements . block_statement
    (50) switch_itens -> . KEYWORD_CASE expression COLON block_statements
    (51) switch_itens -> . KEYWORD_DEFAULT COLON block_statements
    (52) switch_itens -> . KEYWORD_CASE expression COLON block_statements switch_itens
    (53) switch_itens -> . KEYWORD_DEFAULT COLON block_statements switch_itens
    (13) block_statement -> . statement
    (14) statement -> . statement_without_trailing_substatement
    (15) statement -> . if_then_statement
    (16) statement -> . if_then_else_statement
    (17) statement -> . while_statement
    (18) statement -> . for_statement
    (19) statement_without_trailing_substatement -> . block
    (20) statement_without_trailing_substatement -> . SEMICOLON
    (21) statement_without_trailing_substatement -> . expression_list SEMICOLON
    (22) statement_without_trailing_substatement -> . switch_stm
    (23) statement_without_trailing_substatement -> . do_statement
    (24) statement_without_trailing_substatement -> . KEYWORD_BREAK SEMICOLON
    (25) statement_without_trailing_substatement -> . KEYWORD_CONTINUE SEMICOLON
    (26) statement_without_trailing_substatement -> . return_stm SEMICOLON
    (27) statement_without_trailing_substatement -> . IDENTIFIER COLON
    (28) statement_without_trailing_substatement -> . KEYWORD_GOTO IDENTIFIER SEMICOLON
    (29) statement_without_trailing_substatement -> . variable_declaration_list SEMICOLON
    (30) statement_without_trailing_substatement -> . type SEMICOLON
    (35) if_then_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (36) if_then_else_statement -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (38) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (47) for_statement -> . KEYWORD_FOR LPAREN for_params RPAREN statement
    (9) block -> . LBRACE RBRACE
    (10) block -> . LBRACE block_statements RBRACE
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (49) switch_stm -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE
    (40) do_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (54) return_stm -> . KEYWORD_RETURN
    (55) return_stm -> . KEYWORD_RETURN expression
    (81) variable_declaration_list -> . type identifier_list
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (157) expression -> . assign_exp
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    RBRACE          reduce using rule 50 (switch_itens -> KEYWORD_CASE expression COLON block_statements .)
    KEYWORD_CASE    shift and go to state 395
    KEYWORD_DEFAULT shift and go to state 396
    SEMICOLON       shift and go to state 77
    KEYWORD_BREAK   shift and go to state 81
    KEYWORD_CONTINUE shift and go to state 82
    IDENTIFIER      shift and go to state 84
    KEYWORD_GOTO    shift and go to state 85
    KEYWORD_IF      shift and go to state 88
    KEYWORD_WHILE   shift and go to state 91
    KEYWORD_FOR     shift and go to state 92
    LBRACE          shift and go to state 44
    KEYWORD_SWITCH  shift and go to state 93
    KEYWORD_DO      shift and go to state 94
    KEYWORD_RETURN  shift and go to state 95
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 90
    switch_itens                   shift and go to state 418
    block_statement                shift and go to state 182
    statement                      shift and go to state 70
    statement_without_trailing_substatement shift and go to state 71
    if_then_statement              shift and go to state 72
    if_then_else_statement         shift and go to state 73
    while_statement                shift and go to state 74
    for_statement                  shift and go to state 75
    block                          shift and go to state 76
    expression_list                shift and go to state 78
    switch_stm                     shift and go to state 79
    do_statement                   shift and go to state 80
    return_stm                     shift and go to state 83
    variable_declaration_list      shift and go to state 86
    type                           shift and go to state 87
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    assign_exp                     shift and go to state 96
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 416

    (53) switch_itens -> KEYWORD_DEFAULT COLON block_statements switch_itens .

    RBRACE          reduce using rule 53 (switch_itens -> KEYWORD_DEFAULT COLON block_statements switch_itens .)


state 417

    (36) if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE . statement
    (37) if_then_else_statement_no_short_if -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE . statement_no_short_if
    (14) statement -> . statement_without_trailing_substatement
    (15) statement -> . if_then_statement
    (16) statement -> . if_then_else_statement
    (17) statement -> . while_statement
    (18) statement -> . for_statement
    (31) statement_no_short_if -> . statement_without_trailing_substatement
    (32) statement_no_short_if -> . if_then_else_statement_no_short_if
    (33) statement_no_short_if -> . while_statement_no_short_if
    (34) statement_no_short_if -> . for_statement_no_short_if
    (19) statement_without_trailing_substatement -> . block
    (20) statement_without_trailing_substatement -> . SEMICOLON
    (21) statement_without_trailing_substatement -> . expression_list SEMICOLON
    (22) statement_without_trailing_substatement -> . switch_stm
    (23) statement_without_trailing_substatement -> . do_statement
    (24) statement_without_trailing_substatement -> . KEYWORD_BREAK SEMICOLON
    (25) statement_without_trailing_substatement -> . KEYWORD_CONTINUE SEMICOLON
    (26) statement_without_trailing_substatement -> . return_stm SEMICOLON
    (27) statement_without_trailing_substatement -> . IDENTIFIER COLON
    (28) statement_without_trailing_substatement -> . KEYWORD_GOTO IDENTIFIER SEMICOLON
    (29) statement_without_trailing_substatement -> . variable_declaration_list SEMICOLON
    (30) statement_without_trailing_substatement -> . type SEMICOLON
    (35) if_then_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (36) if_then_else_statement -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement
    (38) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (47) for_statement -> . KEYWORD_FOR LPAREN for_params RPAREN statement
    (37) if_then_else_statement_no_short_if -> . KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement_no_short_if
    (39) while_statement_no_short_if -> . KEYWORD_WHILE LPAREN expression RPAREN statement_no_short_if
    (48) for_statement_no_short_if -> . KEYWORD_FOR LPAREN for_params RPAREN statement_no_short_if
    (9) block -> . LBRACE RBRACE
    (10) block -> . LBRACE block_statements RBRACE
    (155) expression_list -> . expression
    (156) expression_list -> . expression COMMA expression_list
    (49) switch_stm -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE
    (40) do_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (54) return_stm -> . KEYWORD_RETURN
    (55) return_stm -> . KEYWORD_RETURN expression
    (81) variable_declaration_list -> . type identifier_list
    (107) type -> . user_types
    (108) type -> . primitive_types
    (109) type -> . type_modifier type
    (157) expression -> . assign_exp
    (117) user_types -> . struct_declaration
    (118) user_types -> . union_declaration
    (119) user_types -> . enum_declaration
    (120) primitive_types -> . TYPE_CHAR
    (121) primitive_types -> . TYPE_INT
    (122) primitive_types -> . TYPE_SHORT
    (123) primitive_types -> . TYPE_LONG
    (124) primitive_types -> . TYPE_FLOAT
    (125) primitive_types -> . TYPE_DOUBLE
    (126) primitive_types -> . TYPE_VOID
    (110) type_modifier -> . KEYWORD_STATIC
    (111) type_modifier -> . KEYWORD_UNSIGNED
    (112) type_modifier -> . KEYWORD_VOLATILE
    (113) type_modifier -> . KEYWORD_EXTERN
    (114) type_modifier -> . KEYWORD_SIGNED
    (115) type_modifier -> . KEYWORD_REGISTER
    (116) type_modifier -> . KEYWORD_CONST
    (169) assign_exp -> . unary_exp assign_operator assign_exp
    (170) assign_exp -> . ternary_conditional_exp
    (127) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE
    (128) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (129) struct_declaration -> . KEYWORD_STRUCT LBRACE RBRACE
    (130) struct_declaration -> . KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE
    (131) struct_declaration -> . KEYWORD_STRUCT IDENTIFIER
    (132) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE RBRACE
    (133) union_declaration -> . KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE
    (134) union_declaration -> . KEYWORD_UNION LBRACE RBRACE
    (135) union_declaration -> . KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE
    (136) union_declaration -> . KEYWORD_UNION IDENTIFIER
    (137) enum_declaration -> . KEYWORD_ENUM LBRACE enum_item_list RBRACE
    (138) enum_declaration -> . KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE
    (139) enum_declaration -> . KEYWORD_ENUM IDENTIFIER
    (216) unary_exp -> . postfix_exp
    (217) unary_exp -> . INCREMENT postfix_exp
    (218) unary_exp -> . DECREMENT postfix_exp
    (219) unary_exp -> . postfix_exp INCREMENT
    (220) unary_exp -> . postfix_exp DECREMENT
    (221) unary_exp -> . cast_exp postfix_exp
    (222) unary_exp -> . sizeof_exp
    (223) unary_exp -> . unary_operator unary_exp
    (171) ternary_conditional_exp -> . logical_exp QUESTION_MARK expression COLON ternary_conditional_exp
    (172) ternary_conditional_exp -> . logical_exp
    (229) postfix_exp -> . postfix_exp LBRACKET expression RBRACKET
    (230) postfix_exp -> . postfix_exp LPAREN RPAREN
    (231) postfix_exp -> . postfix_exp LPAREN function_call_parameters RPAREN
    (232) postfix_exp -> . postfix_exp DOT IDENTIFIER
    (233) postfix_exp -> . postfix_exp ARROW IDENTIFIER
    (234) postfix_exp -> . primary_exp
    (227) cast_exp -> . LPAREN type RPAREN
    (228) cast_exp -> . LPAREN type multiple_times RPAREN
    (224) sizeof_exp -> . KEYWORD_SIZEOF postfix_exp
    (225) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type RPAREN
    (226) sizeof_exp -> . KEYWORD_SIZEOF LPAREN type multiple_times RPAREN
    (210) unary_operator -> . BITWISE_AND
    (211) unary_operator -> . TIMES
    (212) unary_operator -> . PLUS
    (213) unary_operator -> . MINUS
    (214) unary_operator -> . BITWISE_COMPLEMENT
    (215) unary_operator -> . NOT
    (173) logical_exp -> . logical_or_exp
    (237) primary_exp -> . identifier_exp
    (174) logical_or_exp -> . logical_or_exp LOGICAL_OR logical_and_exp
    (175) logical_or_exp -> . logical_and_exp
    (238) identifier_exp -> . IDENTIFIER
    (239) identifier_exp -> . string_exp
    (176) logical_and_exp -> . logical_and_exp LOGICAL_AND bitwise_or_exp
    (177) logical_and_exp -> . bitwise_or_exp
    (240) string_exp -> . STRING
    (241) string_exp -> . number_exp
    (178) bitwise_or_exp -> . bitwise_or_exp BITWISE_OR bitwise_xor_exp
    (179) bitwise_or_exp -> . bitwise_xor_exp
    (242) number_exp -> . integer_number
    (243) number_exp -> . FLOAT_NUMBER
    (244) number_exp -> . CHARACTER
    (245) number_exp -> . parentesis_exp
    (180) bitwise_xor_exp -> . bitwise_xor_exp BITWISE_XOR bitwise_and_exp
    (181) bitwise_xor_exp -> . bitwise_and_exp
    (151) integer_number -> . NUMBER
    (152) integer_number -> . BINARY_NUMBER
    (153) integer_number -> . HEXADECIMAL_NUMBER
    (154) integer_number -> . OCTAL_NUMBER
    (246) parentesis_exp -> . LPAREN expression RPAREN
    (182) bitwise_and_exp -> . bitwise_and_exp BITWISE_AND is_equals_exp
    (183) bitwise_and_exp -> . is_equals_exp
    (184) is_equals_exp -> . is_equals_exp EQUALS_THEN is_not_equals_exp
    (185) is_equals_exp -> . is_not_equals_exp
    (186) is_not_equals_exp -> . is_not_equals_exp NOT_EQUALS greater_then_exp
    (187) is_not_equals_exp -> . greater_then_exp
    (188) greater_then_exp -> . greater_then_exp GREATER_THEN greater_equals_exp
    (189) greater_then_exp -> . greater_equals_exp
    (190) greater_equals_exp -> . greater_equals_exp GREATER_EQUALS less_then_exp
    (191) greater_equals_exp -> . less_then_exp
    (192) less_then_exp -> . less_then_exp LESS_THEN less_equals_exp
    (193) less_then_exp -> . less_equals_exp
    (194) less_equals_exp -> . less_equals_exp LESS_EQUALS left_shift_exp
    (195) less_equals_exp -> . left_shift_exp
    (196) left_shift_exp -> . left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp
    (197) left_shift_exp -> . right_shift_exp
    (198) right_shift_exp -> . right_shift_exp BITWISE_SHIFT_RIGHT plus_exp
    (199) right_shift_exp -> . plus_exp
    (200) plus_exp -> . plus_exp PLUS minus_exp
    (201) plus_exp -> . minus_exp
    (202) minus_exp -> . minus_exp MINUS times_exp
    (203) minus_exp -> . times_exp
    (204) times_exp -> . times_exp TIMES divide_exp
    (205) times_exp -> . divide_exp
    (206) divide_exp -> . divide_exp DIVIDE modulus_exp
    (207) divide_exp -> . modulus_exp
    (208) modulus_exp -> . modulus_exp MODULUS unary_exp
    (209) modulus_exp -> . unary_exp

    SEMICOLON       shift and go to state 77
    KEYWORD_BREAK   shift and go to state 81
    KEYWORD_CONTINUE shift and go to state 82
    IDENTIFIER      shift and go to state 84
    KEYWORD_GOTO    shift and go to state 85
    KEYWORD_IF      shift and go to state 368
    KEYWORD_WHILE   shift and go to state 375
    KEYWORD_FOR     shift and go to state 376
    LBRACE          shift and go to state 44
    KEYWORD_SWITCH  shift and go to state 93
    KEYWORD_DO      shift and go to state 94
    KEYWORD_RETURN  shift and go to state 95
    TYPE_CHAR       shift and go to state 15
    TYPE_INT        shift and go to state 16
    TYPE_SHORT      shift and go to state 17
    TYPE_LONG       shift and go to state 18
    TYPE_FLOAT      shift and go to state 19
    TYPE_DOUBLE     shift and go to state 20
    TYPE_VOID       shift and go to state 21
    KEYWORD_STATIC  shift and go to state 22
    KEYWORD_UNSIGNED shift and go to state 23
    KEYWORD_VOLATILE shift and go to state 24
    KEYWORD_EXTERN  shift and go to state 25
    KEYWORD_SIGNED  shift and go to state 26
    KEYWORD_REGISTER shift and go to state 27
    KEYWORD_CONST   shift and go to state 28
    KEYWORD_STRUCT  shift and go to state 29
    KEYWORD_UNION   shift and go to state 30
    KEYWORD_ENUM    shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    LPAREN          shift and go to state 89
    KEYWORD_SIZEOF  shift and go to state 107
    BITWISE_AND     shift and go to state 108
    TIMES           shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    BITWISE_COMPLEMENT shift and go to state 112
    NOT             shift and go to state 113
    STRING          shift and go to state 119
    FLOAT_NUMBER    shift and go to state 123
    CHARACTER       shift and go to state 124
    NUMBER          shift and go to state 127
    BINARY_NUMBER   shift and go to state 128
    HEXADECIMAL_NUMBER shift and go to state 129
    OCTAL_NUMBER    shift and go to state 130

    expression                     shift and go to state 90
    statement_no_short_if          shift and go to state 419
    statement                      shift and go to state 400
    statement_without_trailing_substatement shift and go to state 371
    if_then_statement              shift and go to state 72
    if_then_else_statement         shift and go to state 73
    while_statement                shift and go to state 74
    for_statement                  shift and go to state 75
    if_then_else_statement_no_short_if shift and go to state 372
    while_statement_no_short_if    shift and go to state 373
    for_statement_no_short_if      shift and go to state 374
    block                          shift and go to state 76
    expression_list                shift and go to state 78
    switch_stm                     shift and go to state 79
    do_statement                   shift and go to state 80
    return_stm                     shift and go to state 83
    variable_declaration_list      shift and go to state 86
    type                           shift and go to state 87
    user_types                     shift and go to state 9
    primitive_types                shift and go to state 10
    type_modifier                  shift and go to state 11
    assign_exp                     shift and go to state 96
    struct_declaration             shift and go to state 12
    union_declaration              shift and go to state 13
    enum_declaration               shift and go to state 14
    unary_exp                      shift and go to state 97
    ternary_conditional_exp        shift and go to state 98
    postfix_exp                    shift and go to state 99
    cast_exp                       shift and go to state 102
    sizeof_exp                     shift and go to state 103
    unary_operator                 shift and go to state 104
    logical_exp                    shift and go to state 105
    primary_exp                    shift and go to state 106
    logical_or_exp                 shift and go to state 114
    identifier_exp                 shift and go to state 115
    logical_and_exp                shift and go to state 116
    string_exp                     shift and go to state 117
    bitwise_or_exp                 shift and go to state 118
    number_exp                     shift and go to state 120
    bitwise_xor_exp                shift and go to state 121
    integer_number                 shift and go to state 122
    parentesis_exp                 shift and go to state 125
    bitwise_and_exp                shift and go to state 126
    is_equals_exp                  shift and go to state 131
    is_not_equals_exp              shift and go to state 132
    greater_then_exp               shift and go to state 133
    greater_equals_exp             shift and go to state 134
    less_then_exp                  shift and go to state 135
    less_equals_exp                shift and go to state 136
    left_shift_exp                 shift and go to state 137
    right_shift_exp                shift and go to state 138
    plus_exp                       shift and go to state 139
    minus_exp                      shift and go to state 140
    times_exp                      shift and go to state 141
    divide_exp                     shift and go to state 142
    modulus_exp                    shift and go to state 143

state 418

    (52) switch_itens -> KEYWORD_CASE expression COLON block_statements switch_itens .

    RBRACE          reduce using rule 52 (switch_itens -> KEYWORD_CASE expression COLON block_statements switch_itens .)


state 419

    (37) if_then_else_statement_no_short_if -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement_no_short_if .

    KEYWORD_ELSE    reduce using rule 37 (if_then_else_statement_no_short_if -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement_no_short_if .)

