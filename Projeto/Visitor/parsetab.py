
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROW ASSIGN BINARY_NUMBER BITWISE_AND BITWISE_AND_ASSIGN BITWISE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGN BITWISE_SHIFT_LEFT BITWISE_SHIFT_RIGHT BITWISE_XOR BITWISE_XOR_ASSIGN CHARACTER COLON COMMA DECREMENT DIVIDE DIVIDE_ASSIGN DOT EQUALS_THEN FLOAT_NUMBER GREATER_EQUALS GREATER_THEN HEXADECIMAL_NUMBER IDENTIFIER INCREMENT KEYWORD_BREAK KEYWORD_CASE KEYWORD_CONST KEYWORD_CONTINUE KEYWORD_DEFAULT KEYWORD_DO KEYWORD_ELSE KEYWORD_ENUM KEYWORD_EXTERN KEYWORD_FOR KEYWORD_GOTO KEYWORD_IF KEYWORD_REGISTER KEYWORD_RETURN KEYWORD_SIGNED KEYWORD_SIZEOF KEYWORD_STATIC KEYWORD_STRUCT KEYWORD_SWITCH KEYWORD_TYPEDEF KEYWORD_UNION KEYWORD_UNSIGNED KEYWORD_VOLATILE KEYWORD_WHILE LBRACE LBRACKET LESS_EQUALS LESS_THEN LOGICAL_AND LOGICAL_OR LPAREN MINUS MINUS_ASSIGN MODULUS MODULUS_ASSIGN NOT NOT_EQUALS NUMBER OCTAL_NUMBER PLUS PLUS_ASSIGN PRE_PROCESSOR QUESTION_MARK RBRACE RBRACKET RPAREN SEMICOLON SHIFT_LEFT_ASSIGN SHIFT_RIGHT_ASSIGN STRING TIMES TIMES_ASSIGN TYPE_CHAR TYPE_DOUBLE TYPE_FLOAT TYPE_INT TYPE_LONG TYPE_SHORT TYPE_VOID\n        program : program_item\n                | program_item program\n    \n        program_item : variable_declaration_list SEMICOLON\n    \n        program_item : function\n    \n        program_item : global_assign_identifier_list SEMICOLON\n    \n        program_item : type SEMICOLON\n    \n        global_assign_identifier_list : IDENTIFIER ASSIGN expression\n                                      | IDENTIFIER ASSIGN expression COMMA global_assign_identifier_list\n    \n        block : LBRACE RBRACE\n              | LBRACE block_statements RBRACE\n    \n        block_statements : block_statement\n                        | block_statements block_statement\n    \n        block_statement : statement\n    \n        statement : statement_without_trailing_substatement\n    \n        statement : if_then_statement\n    \n        statement : if_then_else_statement\n    \n        statement : while_statement\n    \n        statement : for_statement\n    \n        statement_without_trailing_substatement : block\n    \n        statement_without_trailing_substatement : SEMICOLON\n    \n        statement_without_trailing_substatement : expression_list SEMICOLON\n    \n        statement_without_trailing_substatement : switch_stm\n    \n        statement_without_trailing_substatement : do_statement\n    \n        statement_without_trailing_substatement : KEYWORD_BREAK SEMICOLON\n    \n        statement_without_trailing_substatement : KEYWORD_CONTINUE SEMICOLON\n    \n        statement_without_trailing_substatement : return_stm SEMICOLON\n    \n        statement_without_trailing_substatement : IDENTIFIER COLON\n    \n        statement_without_trailing_substatement : KEYWORD_GOTO IDENTIFIER SEMICOLON\n    \n        statement_without_trailing_substatement : variable_declaration_list SEMICOLON\n    \n        statement_without_trailing_substatement : type SEMICOLON\n    \n        statement_no_short_if : statement_without_trailing_substatement\n    \n        statement_no_short_if : if_then_else_statement_no_short_if\n    \n        statement_no_short_if : while_statement_no_short_if\n    \n        statement_no_short_if : for_statement_no_short_if\n    \n        if_then_statement : KEYWORD_IF LPAREN expression RPAREN statement\n    \n        if_then_else_statement : KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement\n    \n        if_then_else_statement_no_short_if : KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement_no_short_if\n    \n        while_statement : KEYWORD_WHILE LPAREN expression RPAREN statement\n    \n        while_statement_no_short_if : KEYWORD_WHILE LPAREN expression RPAREN statement_no_short_if\n    \n        do_statement : KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON\n    \n        for_params : variable_declaration_list SEMICOLON for_param\n    \n        for_params : variable_declaration_list SEMICOLON for_param expression_list\n    \n        for_params : for_param for_param expression_list\n    \n        for_params : for_param for_param\n    \n        for_param : SEMICOLON\n                  | expression_list SEMICOLON\n    \n        for_statement : KEYWORD_FOR LPAREN for_params RPAREN statement\n    \n        for_statement_no_short_if : KEYWORD_FOR LPAREN for_params RPAREN statement_no_short_if\n    \n        switch_stm : KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE\n    \n        switch_itens : KEYWORD_CASE expression COLON block_statements\n    \n        switch_itens : KEYWORD_DEFAULT COLON block_statements\n    \n        switch_itens : KEYWORD_CASE expression COLON block_statements switch_itens\n    \n        switch_itens : KEYWORD_DEFAULT COLON block_statements switch_itens\n    \n        return_stm : KEYWORD_RETURN\n                    | KEYWORD_RETURN expression\n    \n        function : function_signature block\n    \n        function_signature : type identifier LPAREN signature_param_list RPAREN\n                           | type identifier LPAREN RPAREN\n    \n        triple_dot : DOT DOT DOT\n    \n        signature_param_list : signature_param COMMA signature_param_list\n                             | signature_param\n\n    \n        signature_param : type\n    \n        signature_param : type multiple_times\n    \n        signature_param : type multiple_bracket_signature\n    \n        signature_param : type identifier\n    \n        signature_param : type identifier multiple_bracket_signature\n    \n        signature_param : triple_dot\n    \n        multiple_bracket_signature : LBRACKET RBRACKET multiple_bracket_signature\n    \n        multiple_bracket_signature : LBRACKET RBRACKET\n    \n        multiple_bracket_signature : bracket_with_bounds multiple_bracket_signature\n    \n        multiple_bracket_signature : bracket_with_bounds\n    \n        bracket_with_bounds : LBRACKET number_id RBRACKET\n    \n        number_id : IDENTIFIER\n    \n        number_id : integer_number\n    \n        value_list : LBRACE value_list_item RBRACE\n                    | LBRACE RBRACE\n    \n        value_list_item : expression\n                        | expression COMMA value_list_item\n\n    \n        value_list_item :  value_list\n                        | value_list COMMA value_list_item\n    \n        variable_declaration_list : type identifier_list\n    \n        identifier_list : identifier\n                        | identifier COMMA identifier_list\n    \n        identifier_list : identifier multiple_bracket_signature\n                         | identifier multiple_bracket_signature COMMA identifier_list\n    \n        identifier_list : identifier ASSIGN expression\n                        | identifier ASSIGN expression COMMA identifier_list\n    \n        identifier_list : identifier multiple_bracket_signature ASSIGN value_list\n                       | identifier multiple_bracket_signature ASSIGN value_list COMMA identifier_list\n    \n        identifier_list : identifier ASSIGN value_list\n                        | identifier ASSIGN value_list COMMA identifier_list\n    \n        identifier_list : function_pointer\n                        | function_pointer COMMA identifier_list\n    \n        identifier_list : function_pointer ASSIGN expression\n                        | function_pointer ASSIGN expression COMMA identifier_list\n    \n        identifier_list : function_pointer_array\n                        | function_pointer_array COMMA identifier_list\n    \n        identifier_list : function_pointer_array ASSIGN value_list\n                        | function_pointer_array ASSIGN value_list COMMA identifier_list\n    \n        function_pointer : identifier LPAREN signature_param_list RPAREN\n                         | identifier LPAREN RPAREN\n    \n        function_pointer_array : LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN\n                               | LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN\n    \n        identifier : IDENTIFIER\n    \n        identifier : TIMES identifier\n    \n        identifier : LPAREN identifier RPAREN\n    \n        type : user_types\n    \n        type : primitive_types\n    \n        type : type_modifier type\n    \n        type_modifier :   KEYWORD_STATIC\n                        | KEYWORD_UNSIGNED\n                        | KEYWORD_VOLATILE\n                        | KEYWORD_EXTERN\n                        | KEYWORD_SIGNED\n                        | KEYWORD_REGISTER\n                        | KEYWORD_CONST\n    \n        user_types : struct_declaration\n    \n        user_types : union_declaration\n    \n        user_types : enum_declaration\n    \n        primitive_types : TYPE_CHAR\n                        | TYPE_INT\n                        | TYPE_SHORT\n                        | TYPE_LONG\n                        | TYPE_FLOAT\n                        | TYPE_DOUBLE\n                        | TYPE_VOID\n    \n        struct_declaration : KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE\n    \n        struct_declaration : KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE\n    \n        struct_declaration : KEYWORD_STRUCT LBRACE RBRACE\n    \n        struct_declaration : KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE\n    \n        struct_declaration : KEYWORD_STRUCT IDENTIFIER\n    \n        union_declaration : KEYWORD_UNION IDENTIFIER LBRACE RBRACE\n    \n        union_declaration : KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE\n    \n        union_declaration : KEYWORD_UNION LBRACE RBRACE\n    \n        union_declaration : KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE\n    \n        union_declaration : KEYWORD_UNION IDENTIFIER\n    \n        enum_declaration : KEYWORD_ENUM LBRACE enum_item_list RBRACE\n    \n        enum_declaration : KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE\n    \n        enum_declaration : KEYWORD_ENUM IDENTIFIER\n    \n        struct_or_union_member_list : variable_declaration_list_no_assign SEMICOLON\n                                   | variable_declaration_list_no_assign SEMICOLON struct_or_union_member_list\n    \n        variable_declaration_list_no_assign : type variable_list_no_assign\n    \n        variable_list_no_assign : identifier\n                                | variable_list_no_assign COMMA identifier\n    \n        enum_item_list : IDENTIFIER\n    \n        enum_item_list : IDENTIFIER COMMA enum_item_list\n    \n        enum_item_list : IDENTIFIER ASSIGN expression\n    \n        enum_item_list : IDENTIFIER ASSIGN expression COMMA enum_item_list\n    \n        multiple_times : TIMES multiple_times\n                        | TIMES\n    \n        integer_number : NUMBER\n                       | BINARY_NUMBER\n                       | HEXADECIMAL_NUMBER\n                       | OCTAL_NUMBER\n    \n        expression_list : expression\n                        | expression COMMA expression_list\n    \n        expression : assign_exp\n    \n        assign_operator : ASSIGN\n                        | TIMES_ASSIGN\n                        | DIVIDE_ASSIGN\n                        | MODULUS_ASSIGN\n                        | PLUS_ASSIGN\n                        | MINUS_ASSIGN\n                        | SHIFT_LEFT_ASSIGN\n                        | SHIFT_RIGHT_ASSIGN\n                        | BITWISE_AND_ASSIGN\n                        | BITWISE_XOR_ASSIGN\n                        | BITWISE_OR_ASSIGN\n    \n        assign_exp : unary_exp assign_operator assign_exp\n                    | ternary_conditional_exp\n    \n        ternary_conditional_exp : logical_exp QUESTION_MARK expression COLON ternary_conditional_exp\n                                | logical_exp\n    \n        logical_exp : logical_or_exp\n    \n        logical_or_exp : logical_or_exp LOGICAL_OR logical_and_exp\n                        | logical_and_exp\n    \n        logical_and_exp : logical_and_exp LOGICAL_AND bitwise_or_exp\n                        | bitwise_or_exp\n    \n        bitwise_or_exp : bitwise_or_exp BITWISE_OR bitwise_xor_exp\n                        | bitwise_xor_exp\n    \n        bitwise_xor_exp : bitwise_xor_exp BITWISE_XOR bitwise_and_exp\n                        | bitwise_and_exp\n    \n        bitwise_and_exp : bitwise_and_exp BITWISE_AND is_equals_exp\n                        | is_equals_exp\n    \n        is_equals_exp : is_equals_exp EQUALS_THEN is_not_equals_exp\n                       | is_not_equals_exp\n    \n        is_not_equals_exp : is_not_equals_exp NOT_EQUALS greater_then_exp\n                          | greater_then_exp\n    \n        greater_then_exp : greater_then_exp GREATER_THEN greater_equals_exp\n                         | greater_equals_exp\n    \n         greater_equals_exp : greater_equals_exp GREATER_EQUALS less_then_exp\n                            | less_then_exp\n    \n        less_then_exp : less_then_exp LESS_THEN less_equals_exp\n                      | less_equals_exp\n    \n        less_equals_exp : less_equals_exp LESS_EQUALS left_shift_exp\n                        | left_shift_exp\n    \n        left_shift_exp : left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp\n                        | right_shift_exp\n    \n        right_shift_exp : right_shift_exp BITWISE_SHIFT_RIGHT plus_exp\n                        | plus_exp\n    \n        plus_exp : plus_exp PLUS minus_exp\n                 | minus_exp\n    \n        minus_exp : minus_exp MINUS times_exp\n                 | times_exp\n    \n        times_exp : times_exp TIMES divide_exp\n                 | divide_exp\n    \n        divide_exp : divide_exp DIVIDE modulus_exp\n                    | modulus_exp\n    \n        modulus_exp : modulus_exp MODULUS unary_exp\n                    | unary_exp\n    \n        unary_operator : BITWISE_AND\n                       | TIMES\n                       | PLUS\n                       | MINUS\n                       | BITWISE_COMPLEMENT\n                       | NOT\n    \n        unary_exp : postfix_exp\n    \n        unary_exp : INCREMENT postfix_exp\n    \n        unary_exp : DECREMENT postfix_exp\n    \n        unary_exp : postfix_exp INCREMENT\n    \n        unary_exp : postfix_exp DECREMENT\n    \n        unary_exp : cast_exp postfix_exp\n    \n        unary_exp : sizeof_exp\n    \n        unary_exp : unary_operator unary_exp\n    \n        sizeof_exp :  KEYWORD_SIZEOF postfix_exp\n                    | KEYWORD_SIZEOF LPAREN type RPAREN\n                    | KEYWORD_SIZEOF LPAREN type multiple_times RPAREN\n    \n        cast_exp : LPAREN type RPAREN\n                 | LPAREN type multiple_times RPAREN\n    \n        postfix_exp : postfix_exp LBRACKET expression RBRACKET\n    \n        postfix_exp : postfix_exp LPAREN RPAREN\n    \n        postfix_exp : postfix_exp LPAREN function_call_parameters RPAREN\n    \n        postfix_exp : postfix_exp DOT IDENTIFIER\n    \n        postfix_exp : postfix_exp ARROW IDENTIFIER\n    \n        postfix_exp : primary_exp\n    \n        function_call_parameters : expression\n                                  | expression COMMA function_call_parameters\n    \n        primary_exp : identifier_exp\n    \n        identifier_exp : IDENTIFIER\n    \n        identifier_exp : string_exp\n    \n        string_exp : STRING\n    \n        string_exp : number_exp\n    \n        number_exp : integer_number\n    \n        number_exp : FLOAT_NUMBER\n    \n        number_exp : CHARACTER\n    \n        number_exp : parentesis_exp\n    \n        parentesis_exp : LPAREN expression RPAREN\n    '
    
_lr_action_items = {'IDENTIFIER':([0,2,4,6,9,10,12,13,14,15,16,17,18,19,20,21,29,30,31,33,34,35,38,42,43,44,45,46,47,49,51,52,54,56,57,59,61,62,63,64,67,68,69,70,71,72,73,74,75,76,77,79,80,85,87,89,94,95,100,101,102,104,107,108,109,110,111,112,113,147,150,152,156,157,165,169,181,182,183,184,185,186,187,189,190,191,194,195,196,197,200,201,202,203,204,205,206,207,208,209,210,211,214,215,216,217,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,247,251,253,254,255,256,261,268,269,277,278,279,281,289,290,292,324,326,327,330,337,341,342,346,347,348,349,350,351,352,354,357,358,362,369,371,377,378,379,389,390,391,392,395,400,403,405,406,407,408,409,410,411,415,417,],[8,8,-4,41,-107,-108,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,47,49,52,-3,-5,-6,41,41,-56,84,144,-109,-131,-136,155,-139,41,144,172,41,41,41,144,41,-9,84,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,188,41,144,84,144,144,144,144,144,144,-210,-211,-212,-213,-214,-215,-129,41,-134,155,41,41,144,-10,-12,-21,-24,-25,-26,-27,-29,-30,144,144,144,144,144,144,-158,-159,-160,-161,-162,-163,-164,-165,-166,-167,-168,144,144,300,301,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,8,-127,-130,-132,-135,-137,155,144,41,41,41,41,41,-28,-227,-45,144,41,-128,41,-133,-138,41,144,144,84,-228,84,84,144,144,-46,144,144,144,155,-35,-14,-38,-47,144,144,84,144,144,144,-36,-49,84,-40,84,84,84,84,84,84,84,]),'TYPE_CHAR':([0,2,4,11,22,23,24,25,26,27,28,33,34,35,43,44,48,50,53,67,68,69,70,71,72,73,74,75,76,77,79,80,89,94,146,151,181,182,183,184,185,186,187,189,190,196,225,248,263,265,279,346,348,349,367,369,371,377,378,390,392,400,403,405,406,407,408,409,410,411,415,417,],[15,15,-4,15,-110,-111,-112,-113,-114,-115,-116,-3,-5,-6,-56,15,15,15,15,-9,15,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,15,15,15,15,-10,-12,-21,-24,-25,-26,-27,-29,-30,15,15,15,15,15,-28,15,15,15,15,-35,-14,-38,-47,15,15,-36,-49,15,-40,15,15,15,15,15,15,15,]),'TYPE_INT':([0,2,4,11,22,23,24,25,26,27,28,33,34,35,43,44,48,50,53,67,68,69,70,71,72,73,74,75,76,77,79,80,89,94,146,151,181,182,183,184,185,186,187,189,190,196,225,248,263,265,279,346,348,349,367,369,371,377,378,390,392,400,403,405,406,407,408,409,410,411,415,417,],[16,16,-4,16,-110,-111,-112,-113,-114,-115,-116,-3,-5,-6,-56,16,16,16,16,-9,16,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,16,16,16,16,-10,-12,-21,-24,-25,-26,-27,-29,-30,16,16,16,16,16,-28,16,16,16,16,-35,-14,-38,-47,16,16,-36,-49,16,-40,16,16,16,16,16,16,16,]),'TYPE_SHORT':([0,2,4,11,22,23,24,25,26,27,28,33,34,35,43,44,48,50,53,67,68,69,70,71,72,73,74,75,76,77,79,80,89,94,146,151,181,182,183,184,185,186,187,189,190,196,225,248,263,265,279,346,348,349,367,369,371,377,378,390,392,400,403,405,406,407,408,409,410,411,415,417,],[17,17,-4,17,-110,-111,-112,-113,-114,-115,-116,-3,-5,-6,-56,17,17,17,17,-9,17,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,17,17,17,17,-10,-12,-21,-24,-25,-26,-27,-29,-30,17,17,17,17,17,-28,17,17,17,17,-35,-14,-38,-47,17,17,-36,-49,17,-40,17,17,17,17,17,17,17,]),'TYPE_LONG':([0,2,4,11,22,23,24,25,26,27,28,33,34,35,43,44,48,50,53,67,68,69,70,71,72,73,74,75,76,77,79,80,89,94,146,151,181,182,183,184,185,186,187,189,190,196,225,248,263,265,279,346,348,349,367,369,371,377,378,390,392,400,403,405,406,407,408,409,410,411,415,417,],[18,18,-4,18,-110,-111,-112,-113,-114,-115,-116,-3,-5,-6,-56,18,18,18,18,-9,18,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,18,18,18,18,-10,-12,-21,-24,-25,-26,-27,-29,-30,18,18,18,18,18,-28,18,18,18,18,-35,-14,-38,-47,18,18,-36,-49,18,-40,18,18,18,18,18,18,18,]),'TYPE_FLOAT':([0,2,4,11,22,23,24,25,26,27,28,33,34,35,43,44,48,50,53,67,68,69,70,71,72,73,74,75,76,77,79,80,89,94,146,151,181,182,183,184,185,186,187,189,190,196,225,248,263,265,279,346,348,349,367,369,371,377,378,390,392,400,403,405,406,407,408,409,410,411,415,417,],[19,19,-4,19,-110,-111,-112,-113,-114,-115,-116,-3,-5,-6,-56,19,19,19,19,-9,19,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,19,19,19,19,-10,-12,-21,-24,-25,-26,-27,-29,-30,19,19,19,19,19,-28,19,19,19,19,-35,-14,-38,-47,19,19,-36,-49,19,-40,19,19,19,19,19,19,19,]),'TYPE_DOUBLE':([0,2,4,11,22,23,24,25,26,27,28,33,34,35,43,44,48,50,53,67,68,69,70,71,72,73,74,75,76,77,79,80,89,94,146,151,181,182,183,184,185,186,187,189,190,196,225,248,263,265,279,346,348,349,367,369,371,377,378,390,392,400,403,405,406,407,408,409,410,411,415,417,],[20,20,-4,20,-110,-111,-112,-113,-114,-115,-116,-3,-5,-6,-56,20,20,20,20,-9,20,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,20,20,20,20,-10,-12,-21,-24,-25,-26,-27,-29,-30,20,20,20,20,20,-28,20,20,20,20,-35,-14,-38,-47,20,20,-36,-49,20,-40,20,20,20,20,20,20,20,]),'TYPE_VOID':([0,2,4,11,22,23,24,25,26,27,28,33,34,35,43,44,48,50,53,67,68,69,70,71,72,73,74,75,76,77,79,80,89,94,146,151,181,182,183,184,185,186,187,189,190,196,225,248,263,265,279,346,348,349,367,369,371,377,378,390,392,400,403,405,406,407,408,409,410,411,415,417,],[21,21,-4,21,-110,-111,-112,-113,-114,-115,-116,-3,-5,-6,-56,21,21,21,21,-9,21,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,21,21,21,21,-10,-12,-21,-24,-25,-26,-27,-29,-30,21,21,21,21,21,-28,21,21,21,21,-35,-14,-38,-47,21,21,-36,-49,21,-40,21,21,21,21,21,21,21,]),'KEYWORD_STATIC':([0,2,4,11,22,23,24,25,26,27,28,33,34,35,43,44,48,50,53,67,68,69,70,71,72,73,74,75,76,77,79,80,89,94,146,151,181,182,183,184,185,186,187,189,190,196,225,248,263,265,279,346,348,349,367,369,371,377,378,390,392,400,403,405,406,407,408,409,410,411,415,417,],[22,22,-4,22,-110,-111,-112,-113,-114,-115,-116,-3,-5,-6,-56,22,22,22,22,-9,22,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,22,22,22,22,-10,-12,-21,-24,-25,-26,-27,-29,-30,22,22,22,22,22,-28,22,22,22,22,-35,-14,-38,-47,22,22,-36,-49,22,-40,22,22,22,22,22,22,22,]),'KEYWORD_UNSIGNED':([0,2,4,11,22,23,24,25,26,27,28,33,34,35,43,44,48,50,53,67,68,69,70,71,72,73,74,75,76,77,79,80,89,94,146,151,181,182,183,184,185,186,187,189,190,196,225,248,263,265,279,346,348,349,367,369,371,377,378,390,392,400,403,405,406,407,408,409,410,411,415,417,],[23,23,-4,23,-110,-111,-112,-113,-114,-115,-116,-3,-5,-6,-56,23,23,23,23,-9,23,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,23,23,23,23,-10,-12,-21,-24,-25,-26,-27,-29,-30,23,23,23,23,23,-28,23,23,23,23,-35,-14,-38,-47,23,23,-36,-49,23,-40,23,23,23,23,23,23,23,]),'KEYWORD_VOLATILE':([0,2,4,11,22,23,24,25,26,27,28,33,34,35,43,44,48,50,53,67,68,69,70,71,72,73,74,75,76,77,79,80,89,94,146,151,181,182,183,184,185,186,187,189,190,196,225,248,263,265,279,346,348,349,367,369,371,377,378,390,392,400,403,405,406,407,408,409,410,411,415,417,],[24,24,-4,24,-110,-111,-112,-113,-114,-115,-116,-3,-5,-6,-56,24,24,24,24,-9,24,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,24,24,24,24,-10,-12,-21,-24,-25,-26,-27,-29,-30,24,24,24,24,24,-28,24,24,24,24,-35,-14,-38,-47,24,24,-36,-49,24,-40,24,24,24,24,24,24,24,]),'KEYWORD_EXTERN':([0,2,4,11,22,23,24,25,26,27,28,33,34,35,43,44,48,50,53,67,68,69,70,71,72,73,74,75,76,77,79,80,89,94,146,151,181,182,183,184,185,186,187,189,190,196,225,248,263,265,279,346,348,349,367,369,371,377,378,390,392,400,403,405,406,407,408,409,410,411,415,417,],[25,25,-4,25,-110,-111,-112,-113,-114,-115,-116,-3,-5,-6,-56,25,25,25,25,-9,25,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,25,25,25,25,-10,-12,-21,-24,-25,-26,-27,-29,-30,25,25,25,25,25,-28,25,25,25,25,-35,-14,-38,-47,25,25,-36,-49,25,-40,25,25,25,25,25,25,25,]),'KEYWORD_SIGNED':([0,2,4,11,22,23,24,25,26,27,28,33,34,35,43,44,48,50,53,67,68,69,70,71,72,73,74,75,76,77,79,80,89,94,146,151,181,182,183,184,185,186,187,189,190,196,225,248,263,265,279,346,348,349,367,369,371,377,378,390,392,400,403,405,406,407,408,409,410,411,415,417,],[26,26,-4,26,-110,-111,-112,-113,-114,-115,-116,-3,-5,-6,-56,26,26,26,26,-9,26,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,26,26,26,26,-10,-12,-21,-24,-25,-26,-27,-29,-30,26,26,26,26,26,-28,26,26,26,26,-35,-14,-38,-47,26,26,-36,-49,26,-40,26,26,26,26,26,26,26,]),'KEYWORD_REGISTER':([0,2,4,11,22,23,24,25,26,27,28,33,34,35,43,44,48,50,53,67,68,69,70,71,72,73,74,75,76,77,79,80,89,94,146,151,181,182,183,184,185,186,187,189,190,196,225,248,263,265,279,346,348,349,367,369,371,377,378,390,392,400,403,405,406,407,408,409,410,411,415,417,],[27,27,-4,27,-110,-111,-112,-113,-114,-115,-116,-3,-5,-6,-56,27,27,27,27,-9,27,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,27,27,27,27,-10,-12,-21,-24,-25,-26,-27,-29,-30,27,27,27,27,27,-28,27,27,27,27,-35,-14,-38,-47,27,27,-36,-49,27,-40,27,27,27,27,27,27,27,]),'KEYWORD_CONST':([0,2,4,11,22,23,24,25,26,27,28,33,34,35,43,44,48,50,53,67,68,69,70,71,72,73,74,75,76,77,79,80,89,94,146,151,181,182,183,184,185,186,187,189,190,196,225,248,263,265,279,346,348,349,367,369,371,377,378,390,392,400,403,405,406,407,408,409,410,411,415,417,],[28,28,-4,28,-110,-111,-112,-113,-114,-115,-116,-3,-5,-6,-56,28,28,28,28,-9,28,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,28,28,28,28,-10,-12,-21,-24,-25,-26,-27,-29,-30,28,28,28,28,28,-28,28,28,28,28,-35,-14,-38,-47,28,28,-36,-49,28,-40,28,28,28,28,28,28,28,]),'KEYWORD_STRUCT':([0,2,4,11,22,23,24,25,26,27,28,33,34,35,43,44,48,50,53,67,68,69,70,71,72,73,74,75,76,77,79,80,89,94,146,151,181,182,183,184,185,186,187,189,190,196,225,248,263,265,279,346,348,349,367,369,371,377,378,390,392,400,403,405,406,407,408,409,410,411,415,417,],[29,29,-4,29,-110,-111,-112,-113,-114,-115,-116,-3,-5,-6,-56,29,29,29,29,-9,29,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,29,29,29,29,-10,-12,-21,-24,-25,-26,-27,-29,-30,29,29,29,29,29,-28,29,29,29,29,-35,-14,-38,-47,29,29,-36,-49,29,-40,29,29,29,29,29,29,29,]),'KEYWORD_UNION':([0,2,4,11,22,23,24,25,26,27,28,33,34,35,43,44,48,50,53,67,68,69,70,71,72,73,74,75,76,77,79,80,89,94,146,151,181,182,183,184,185,186,187,189,190,196,225,248,263,265,279,346,348,349,367,369,371,377,378,390,392,400,403,405,406,407,408,409,410,411,415,417,],[30,30,-4,30,-110,-111,-112,-113,-114,-115,-116,-3,-5,-6,-56,30,30,30,30,-9,30,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,30,30,30,30,-10,-12,-21,-24,-25,-26,-27,-29,-30,30,30,30,30,30,-28,30,30,30,30,-35,-14,-38,-47,30,30,-36,-49,30,-40,30,30,30,30,30,30,30,]),'KEYWORD_ENUM':([0,2,4,11,22,23,24,25,26,27,28,33,34,35,43,44,48,50,53,67,68,69,70,71,72,73,74,75,76,77,79,80,89,94,146,151,181,182,183,184,185,186,187,189,190,196,225,248,263,265,279,346,348,349,367,369,371,377,378,390,392,400,403,405,406,407,408,409,410,411,415,417,],[31,31,-4,31,-110,-111,-112,-113,-114,-115,-116,-3,-5,-6,-56,31,31,31,31,-9,31,-11,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,31,31,31,31,-10,-12,-21,-24,-25,-26,-27,-29,-30,31,31,31,31,31,-28,31,31,31,31,-35,-14,-38,-47,31,31,-36,-49,31,-40,31,31,31,31,31,31,31,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,32,]),'program_item':([0,2,],[2,2,]),'variable_declaration_list':([0,2,44,68,94,196,346,348,349,390,392,405,407,408,409,410,411,415,417,],[3,3,86,86,86,288,86,86,86,86,288,86,86,86,86,86,86,86,86,]),'function':([0,2,],[4,4,]),'global_assign_identifier_list':([0,2,244,],[5,5,323,]),'type':([0,2,11,44,48,50,53,68,89,94,146,151,196,225,248,263,265,346,348,349,367,390,392,405,407,408,409,410,411,415,417,],[6,6,46,87,150,150,157,87,192,87,150,150,292,303,150,157,157,87,87,87,157,87,292,87,87,87,87,87,87,87,87,]),'function_signature':([0,2,],[7,7,]),'user_types':([0,2,11,44,48,50,53,68,89,94,146,151,196,225,248,263,265,346,348,349,367,390,392,405,407,408,409,410,411,415,417,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'primitive_types':([0,2,11,44,48,50,53,68,89,94,146,151,196,225,248,263,265,346,348,349,367,390,392,405,407,408,409,410,411,415,417,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'type_modifier':([0,2,11,44,48,50,53,68,89,94,146,151,196,225,248,263,265,346,348,349,367,390,392,405,407,408,409,410,411,415,417,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'struct_declaration':([0,2,11,44,48,50,53,68,89,94,146,151,196,225,248,263,265,346,348,349,367,390,392,405,407,408,409,410,411,415,417,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'union_declaration':([0,2,11,44,48,50,53,68,89,94,146,151,196,225,248,263,265,346,348,349,367,390,392,405,407,408,409,410,411,415,417,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'enum_declaration':([0,2,11,44,48,50,53,68,89,94,146,151,196,225,248,263,265,346,348,349,367,390,392,405,407,408,409,410,411,415,417,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'identifier_list':([6,54,62,64,87,165,268,269,277,278,292,337,],[36,164,177,179,36,266,338,339,344,345,36,364,]),'identifier':([6,38,42,54,59,61,62,64,87,150,157,165,261,268,269,277,278,292,326,337,],[37,60,66,163,60,176,163,163,163,250,260,163,66,163,163,163,163,163,361,163,]),'function_pointer':([6,54,62,64,87,165,268,269,277,278,292,337,],[39,39,39,39,39,39,39,39,39,39,39,39,]),'function_pointer_array':([6,54,62,64,87,165,268,269,277,278,292,337,],[40,40,40,40,40,40,40,40,40,40,40,40,]),'block':([7,44,68,94,346,348,349,390,405,407,408,409,410,411,415,417,],[43,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'multiple_bracket_signature':([37,58,157,163,170,176,260,],[55,174,259,55,274,276,331,]),'bracket_with_bounds':([37,58,157,163,170,176,260,],[58,58,58,58,58,58,58,]),'block_statements':([44,405,410,],[68,411,415,]),'block_statement':([44,68,405,410,411,415,],[69,182,69,69,182,182,]),'statement':([44,68,94,346,348,349,390,405,407,408,409,410,411,415,417,],[70,70,198,369,377,378,400,70,369,377,378,70,70,70,400,]),'statement_without_trailing_substatement':([44,68,94,346,348,349,390,405,407,408,409,410,411,415,417,],[71,71,71,371,71,71,71,71,371,371,371,71,71,71,371,]),'if_then_statement':([44,68,94,346,348,349,390,405,407,408,409,410,411,415,417,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'if_then_else_statement':([44,68,94,346,348,349,390,405,407,408,409,410,411,415,417,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'while_statement':([44,68,94,346,348,349,390,405,407,408,409,410,411,415,417,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'for_statement':([44,68,94,346,348,349,390,405,407,408,409,410,411,415,417,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'expression_list':([44,68,94,194,196,290,346,348,349,350,351,379,390,392,405,407,408,409,410,411,415,417,],[78,78,78,285,291,291,78,78,78,291,380,393,78,291,78,78,78,78,78,78,78,78,]),'switch_stm':([44,68,94,346,348,349,390,405,407,408,409,410,411,415,417,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'do_statement':([44,68,94,346,348,349,390,405,407,408,409,410,411,415,417,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'return_stm':([44,68,94,346,348,349,390,405,407,408,409,410,411,415,417,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'expression':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,214,215,219,223,225,256,290,341,342,346,348,349,350,351,354,357,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[90,145,167,178,90,193,90,199,272,280,90,286,90,293,296,299,193,302,193,329,90,272,272,90,90,90,90,90,382,299,90,399,90,401,90,404,90,90,90,90,90,90,90,90,]),'assign_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,256,290,341,342,346,348,349,350,351,354,357,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,295,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'unary_exp':([44,45,56,63,68,89,94,95,104,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[97,97,97,97,97,97,97,97,222,97,97,97,97,97,97,97,97,97,97,97,97,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,322,97,97,97,97,97,97,97,97,97,97,97,305,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'ternary_conditional_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,384,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'postfix_exp':([44,45,56,63,68,89,94,95,100,101,102,104,107,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[99,99,99,99,99,99,99,99,218,220,221,99,224,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'cast_exp':([44,45,56,63,68,89,94,95,104,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'sizeof_exp':([44,45,56,63,68,89,94,95,104,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'unary_operator':([44,45,56,63,68,89,94,95,104,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'logical_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'primary_exp':([44,45,56,63,68,89,94,95,100,101,102,104,107,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'logical_or_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'identifier_exp':([44,45,56,63,68,89,94,95,100,101,102,104,107,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'logical_and_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,226,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,304,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'string_exp':([44,45,56,63,68,89,94,95,100,101,102,104,107,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,]),'bitwise_or_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,226,227,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,306,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'number_exp':([44,45,56,63,68,89,94,95,100,101,102,104,107,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'bitwise_xor_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,307,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'integer_number':([44,45,56,57,63,68,89,94,95,100,101,102,104,107,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[122,122,122,173,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'parentesis_exp':([44,45,56,63,68,89,94,95,100,101,102,104,107,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'bitwise_and_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,308,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'is_equals_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,309,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,]),'is_not_equals_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,310,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,]),'greater_then_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,311,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,]),'greater_equals_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,312,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,]),'less_then_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,313,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,]),'less_equals_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,314,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,]),'left_shift_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,315,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,]),'right_shift_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,316,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,]),'plus_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,317,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,]),'minus_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,318,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,]),'times_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,319,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,]),'divide_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,320,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,]),'modulus_exp':([44,45,56,63,68,89,94,95,169,191,194,195,196,197,200,214,215,219,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,256,290,341,342,346,348,349,350,351,354,357,358,379,389,390,391,392,395,405,407,408,409,410,411,415,417,],[143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,321,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,]),'struct_or_union_member_list':([48,50,146,151,248,],[148,153,246,252,325,]),'variable_declaration_list_no_assign':([48,50,146,151,248,],[149,149,149,149,149,]),'enum_item_list':([51,156,255,362,],[154,257,328,386,]),'signature_param_list':([53,263,265,367,],[158,333,335,388,]),'signature_param':([53,263,265,367,],[160,160,160,160,]),'triple_dot':([53,263,265,367,],[161,161,161,161,]),'value_list':([56,65,166,169,341,342,],[168,180,267,273,273,273,]),'number_id':([57,],[171,]),'assign_operator':([97,],[200,]),'variable_list_no_assign':([150,],[249,]),'multiple_times':([157,192,261,283,303,],[258,282,332,332,360,]),'value_list_item':([169,341,342,],[270,365,366,]),'for_params':([196,392,],[287,402,]),'for_param':([196,290,350,392,],[290,351,379,290,]),'function_call_parameters':([215,357,],[298,383,]),'statement_no_short_if':([346,407,408,409,417,],[370,412,413,414,419,]),'if_then_else_statement_no_short_if':([346,407,408,409,417,],[372,372,372,372,372,]),'while_statement_no_short_if':([346,407,408,409,417,],[373,373,373,373,373,]),'for_statement_no_short_if':([346,407,408,409,417,],[374,374,374,374,374,]),'switch_itens':([381,411,415,],[394,416,418,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program_item','program',1,'p_program','sintatic.py',8),
  ('program -> program_item program','program',2,'p_program','sintatic.py',9),
  ('program_item -> variable_declaration_list SEMICOLON','program_item',2,'p_program_variable_declaration','sintatic.py',20),
  ('program_item -> function','program_item',1,'p_program_function','sintatic.py',27),
  ('program_item -> global_assign_identifier_list SEMICOLON','program_item',2,'p_program_assign','sintatic.py',34),
  ('program_item -> type SEMICOLON','program_item',2,'p_program_type','sintatic.py',41),
  ('global_assign_identifier_list -> IDENTIFIER ASSIGN expression','global_assign_identifier_list',3,'p_global_assign_identifier_list','sintatic.py',48),
  ('global_assign_identifier_list -> IDENTIFIER ASSIGN expression COMMA global_assign_identifier_list','global_assign_identifier_list',5,'p_global_assign_identifier_list','sintatic.py',49),
  ('block -> LBRACE RBRACE','block',2,'p_block','sintatic.py',60),
  ('block -> LBRACE block_statements RBRACE','block',3,'p_block','sintatic.py',61),
  ('block_statements -> block_statement','block_statements',1,'p_block_statements','sintatic.py',71),
  ('block_statements -> block_statements block_statement','block_statements',2,'p_block_statements','sintatic.py',72),
  ('block_statement -> statement','block_statement',1,'p_block_statement','sintatic.py',82),
  ('statement -> statement_without_trailing_substatement','statement',1,'p_statement','sintatic.py',89),
  ('statement -> if_then_statement','statement',1,'p_statement_to_if_then_statement','sintatic.py',96),
  ('statement -> if_then_else_statement','statement',1,'p_statement_to_if_then_else_statement','sintatic.py',103),
  ('statement -> while_statement','statement',1,'p_statement_to_while_statement','sintatic.py',110),
  ('statement -> for_statement','statement',1,'p_statement_to_for_statement','sintatic.py',117),
  ('statement_without_trailing_substatement -> block','statement_without_trailing_substatement',1,'p_statement_without_trailing_substatement','sintatic.py',124),
  ('statement_without_trailing_substatement -> SEMICOLON','statement_without_trailing_substatement',1,'p_swts_to_semicolon','sintatic.py',131),
  ('statement_without_trailing_substatement -> expression_list SEMICOLON','statement_without_trailing_substatement',2,'p_swts_to_expression_list','sintatic.py',138),
  ('statement_without_trailing_substatement -> switch_stm','statement_without_trailing_substatement',1,'p_swts_to_switch_stm','sintatic.py',145),
  ('statement_without_trailing_substatement -> do_statement','statement_without_trailing_substatement',1,'p_swts_to_do_statement','sintatic.py',152),
  ('statement_without_trailing_substatement -> KEYWORD_BREAK SEMICOLON','statement_without_trailing_substatement',2,'p_swts_to_break','sintatic.py',159),
  ('statement_without_trailing_substatement -> KEYWORD_CONTINUE SEMICOLON','statement_without_trailing_substatement',2,'p_swts_to_continue','sintatic.py',166),
  ('statement_without_trailing_substatement -> return_stm SEMICOLON','statement_without_trailing_substatement',2,'p_swts_to_return_stm','sintatic.py',173),
  ('statement_without_trailing_substatement -> IDENTIFIER COLON','statement_without_trailing_substatement',2,'p_swts_to_label','sintatic.py',180),
  ('statement_without_trailing_substatement -> KEYWORD_GOTO IDENTIFIER SEMICOLON','statement_without_trailing_substatement',3,'p_swts_to_goto','sintatic.py',187),
  ('statement_without_trailing_substatement -> variable_declaration_list SEMICOLON','statement_without_trailing_substatement',2,'p_swts_to_variable_declaration_list','sintatic.py',194),
  ('statement_without_trailing_substatement -> type SEMICOLON','statement_without_trailing_substatement',2,'p_swts_to_type','sintatic.py',201),
  ('statement_no_short_if -> statement_without_trailing_substatement','statement_no_short_if',1,'p_statement_no_short_if','sintatic.py',208),
  ('statement_no_short_if -> if_then_else_statement_no_short_if','statement_no_short_if',1,'p_statement_no_short_if_2','sintatic.py',215),
  ('statement_no_short_if -> while_statement_no_short_if','statement_no_short_if',1,'p_statement_no_short_if_3','sintatic.py',222),
  ('statement_no_short_if -> for_statement_no_short_if','statement_no_short_if',1,'p_statement_no_short_if_4','sintatic.py',229),
  ('if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement','if_then_statement',5,'p_if_then_statement','sintatic.py',236),
  ('if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement','if_then_else_statement',7,'p_if_then_else_statement','sintatic.py',243),
  ('if_then_else_statement_no_short_if -> KEYWORD_IF LPAREN expression RPAREN statement_no_short_if KEYWORD_ELSE statement_no_short_if','if_then_else_statement_no_short_if',7,'p_if_then_else_statement_no_short_if','sintatic.py',250),
  ('while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement','while_statement',5,'p_while_statement','sintatic.py',257),
  ('while_statement_no_short_if -> KEYWORD_WHILE LPAREN expression RPAREN statement_no_short_if','while_statement_no_short_if',5,'p_while_statement_no_short_if','sintatic.py',264),
  ('do_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON','do_statement',7,'p_do_statement','sintatic.py',271),
  ('for_params -> variable_declaration_list SEMICOLON for_param','for_params',3,'p_for_params_1','sintatic.py',278),
  ('for_params -> variable_declaration_list SEMICOLON for_param expression_list','for_params',4,'p_for_params_2','sintatic.py',285),
  ('for_params -> for_param for_param expression_list','for_params',3,'p_for_params_3','sintatic.py',292),
  ('for_params -> for_param for_param','for_params',2,'p_for_params_4','sintatic.py',299),
  ('for_param -> SEMICOLON','for_param',1,'p_for_param','sintatic.py',306),
  ('for_param -> expression_list SEMICOLON','for_param',2,'p_for_param','sintatic.py',307),
  ('for_statement -> KEYWORD_FOR LPAREN for_params RPAREN statement','for_statement',5,'p_for_statement','sintatic.py',317),
  ('for_statement_no_short_if -> KEYWORD_FOR LPAREN for_params RPAREN statement_no_short_if','for_statement_no_short_if',5,'p_for_statement_no_short_if','sintatic.py',324),
  ('switch_stm -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE switch_itens RBRACE','switch_stm',7,'p_switch_stm','sintatic.py',331),
  ('switch_itens -> KEYWORD_CASE expression COLON block_statements','switch_itens',4,'p_switch_itens_1','sintatic.py',338),
  ('switch_itens -> KEYWORD_DEFAULT COLON block_statements','switch_itens',3,'p_switch_itens_2','sintatic.py',345),
  ('switch_itens -> KEYWORD_CASE expression COLON block_statements switch_itens','switch_itens',5,'p_switch_itens_3','sintatic.py',352),
  ('switch_itens -> KEYWORD_DEFAULT COLON block_statements switch_itens','switch_itens',4,'p_switch_itens_4','sintatic.py',359),
  ('return_stm -> KEYWORD_RETURN','return_stm',1,'p_return_stm','sintatic.py',366),
  ('return_stm -> KEYWORD_RETURN expression','return_stm',2,'p_return_stm','sintatic.py',367),
  ('function -> function_signature block','function',2,'p_function','sintatic.py',377),
  ('function_signature -> type identifier LPAREN signature_param_list RPAREN','function_signature',5,'p_funcion_signature','sintatic.py',384),
  ('function_signature -> type identifier LPAREN RPAREN','function_signature',4,'p_funcion_signature','sintatic.py',385),
  ('triple_dot -> DOT DOT DOT','triple_dot',3,'p_triple_dot','sintatic.py',395),
  ('signature_param_list -> signature_param COMMA signature_param_list','signature_param_list',3,'p_signature_param_list','sintatic.py',402),
  ('signature_param_list -> signature_param','signature_param_list',1,'p_signature_param_list','sintatic.py',403),
  ('signature_param -> type','signature_param',1,'p_signature_param_1','sintatic.py',414),
  ('signature_param -> type multiple_times','signature_param',2,'p_signature_param_2','sintatic.py',421),
  ('signature_param -> type multiple_bracket_signature','signature_param',2,'p_signature_param_3','sintatic.py',428),
  ('signature_param -> type identifier','signature_param',2,'p_signature_param_4','sintatic.py',435),
  ('signature_param -> type identifier multiple_bracket_signature','signature_param',3,'p_signature_param_5','sintatic.py',442),
  ('signature_param -> triple_dot','signature_param',1,'p_signature_param_6','sintatic.py',449),
  ('multiple_bracket_signature -> LBRACKET RBRACKET multiple_bracket_signature','multiple_bracket_signature',3,'p_multiple_bracket_signature_1','sintatic.py',456),
  ('multiple_bracket_signature -> LBRACKET RBRACKET','multiple_bracket_signature',2,'p_multiple_bracket_signature_2','sintatic.py',463),
  ('multiple_bracket_signature -> bracket_with_bounds multiple_bracket_signature','multiple_bracket_signature',2,'p_multiple_bracket_signature_3','sintatic.py',470),
  ('multiple_bracket_signature -> bracket_with_bounds','multiple_bracket_signature',1,'p_multiple_bracket_signature_4','sintatic.py',477),
  ('bracket_with_bounds -> LBRACKET number_id RBRACKET','bracket_with_bounds',3,'p_bracket_with_bounds','sintatic.py',484),
  ('number_id -> IDENTIFIER','number_id',1,'p_number_id_1','sintatic.py',491),
  ('number_id -> integer_number','number_id',1,'p_number_id_2','sintatic.py',498),
  ('value_list -> LBRACE value_list_item RBRACE','value_list',3,'p_value_list','sintatic.py',505),
  ('value_list -> LBRACE RBRACE','value_list',2,'p_value_list','sintatic.py',506),
  ('value_list_item -> expression','value_list_item',1,'p_value_list_item1','sintatic.py',516),
  ('value_list_item -> expression COMMA value_list_item','value_list_item',3,'p_value_list_item1','sintatic.py',517),
  ('value_list_item -> value_list','value_list_item',1,'p_value_list_item2','sintatic.py',528),
  ('value_list_item -> value_list COMMA value_list_item','value_list_item',3,'p_value_list_item2','sintatic.py',529),
  ('variable_declaration_list -> type identifier_list','variable_declaration_list',2,'p_variable_declaration_list','sintatic.py',539),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','sintatic.py',546),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','sintatic.py',547),
  ('identifier_list -> identifier multiple_bracket_signature','identifier_list',2,'p_identifier_list_array','sintatic.py',557),
  ('identifier_list -> identifier multiple_bracket_signature COMMA identifier_list','identifier_list',4,'p_identifier_list_array','sintatic.py',558),
  ('identifier_list -> identifier ASSIGN expression','identifier_list',3,'p_assign_identifier_list','sintatic.py',568),
  ('identifier_list -> identifier ASSIGN expression COMMA identifier_list','identifier_list',5,'p_assign_identifier_list','sintatic.py',569),
  ('identifier_list -> identifier multiple_bracket_signature ASSIGN value_list','identifier_list',4,'p_assign_identifier_list_array','sintatic.py',579),
  ('identifier_list -> identifier multiple_bracket_signature ASSIGN value_list COMMA identifier_list','identifier_list',6,'p_assign_identifier_list_array','sintatic.py',580),
  ('identifier_list -> identifier ASSIGN value_list','identifier_list',3,'p_assign_identifier_list_non_array','sintatic.py',590),
  ('identifier_list -> identifier ASSIGN value_list COMMA identifier_list','identifier_list',5,'p_assign_identifier_list_non_array','sintatic.py',591),
  ('identifier_list -> function_pointer','identifier_list',1,'p_identifier_list_function_pointer','sintatic.py',601),
  ('identifier_list -> function_pointer COMMA identifier_list','identifier_list',3,'p_identifier_list_function_pointer','sintatic.py',602),
  ('identifier_list -> function_pointer ASSIGN expression','identifier_list',3,'p_identifier_list_function_pointer_assign','sintatic.py',612),
  ('identifier_list -> function_pointer ASSIGN expression COMMA identifier_list','identifier_list',5,'p_identifier_list_function_pointer_assign','sintatic.py',613),
  ('identifier_list -> function_pointer_array','identifier_list',1,'p_identifier_list_function_pointer_array','sintatic.py',623),
  ('identifier_list -> function_pointer_array COMMA identifier_list','identifier_list',3,'p_identifier_list_function_pointer_array','sintatic.py',624),
  ('identifier_list -> function_pointer_array ASSIGN value_list','identifier_list',3,'p_identifier_list_function_pointer_array_assing','sintatic.py',634),
  ('identifier_list -> function_pointer_array ASSIGN value_list COMMA identifier_list','identifier_list',5,'p_identifier_list_function_pointer_array_assing','sintatic.py',635),
  ('function_pointer -> identifier LPAREN signature_param_list RPAREN','function_pointer',4,'p_function_pointer','sintatic.py',645),
  ('function_pointer -> identifier LPAREN RPAREN','function_pointer',3,'p_function_pointer','sintatic.py',646),
  ('function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN signature_param_list RPAREN','function_pointer_array',8,'p_function_pointer_array','sintatic.py',656),
  ('function_pointer_array -> LPAREN TIMES identifier multiple_bracket_signature RPAREN LPAREN RPAREN','function_pointer_array',7,'p_function_pointer_array','sintatic.py',657),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier_1','sintatic.py',667),
  ('identifier -> TIMES identifier','identifier',2,'p_identifier_2','sintatic.py',674),
  ('identifier -> LPAREN identifier RPAREN','identifier',3,'p_identifier_3','sintatic.py',681),
  ('type -> user_types','type',1,'p_type_1','sintatic.py',688),
  ('type -> primitive_types','type',1,'p_type_2','sintatic.py',695),
  ('type -> type_modifier type','type',2,'p_type_3','sintatic.py',702),
  ('type_modifier -> KEYWORD_STATIC','type_modifier',1,'p_type_modifier','sintatic.py',710),
  ('type_modifier -> KEYWORD_UNSIGNED','type_modifier',1,'p_type_modifier','sintatic.py',711),
  ('type_modifier -> KEYWORD_VOLATILE','type_modifier',1,'p_type_modifier','sintatic.py',712),
  ('type_modifier -> KEYWORD_EXTERN','type_modifier',1,'p_type_modifier','sintatic.py',713),
  ('type_modifier -> KEYWORD_SIGNED','type_modifier',1,'p_type_modifier','sintatic.py',714),
  ('type_modifier -> KEYWORD_REGISTER','type_modifier',1,'p_type_modifier','sintatic.py',715),
  ('type_modifier -> KEYWORD_CONST','type_modifier',1,'p_type_modifier','sintatic.py',716),
  ('user_types -> struct_declaration','user_types',1,'p_user_types_1','sintatic.py',723),
  ('user_types -> union_declaration','user_types',1,'p_user_types_2','sintatic.py',730),
  ('user_types -> enum_declaration','user_types',1,'p_user_types_3','sintatic.py',737),
  ('primitive_types -> TYPE_CHAR','primitive_types',1,'p_primitive_types','sintatic.py',744),
  ('primitive_types -> TYPE_INT','primitive_types',1,'p_primitive_types','sintatic.py',745),
  ('primitive_types -> TYPE_SHORT','primitive_types',1,'p_primitive_types','sintatic.py',746),
  ('primitive_types -> TYPE_LONG','primitive_types',1,'p_primitive_types','sintatic.py',747),
  ('primitive_types -> TYPE_FLOAT','primitive_types',1,'p_primitive_types','sintatic.py',748),
  ('primitive_types -> TYPE_DOUBLE','primitive_types',1,'p_primitive_types','sintatic.py',749),
  ('primitive_types -> TYPE_VOID','primitive_types',1,'p_primitive_types','sintatic.py',750),
  ('struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE RBRACE','struct_declaration',4,'p_struct_declaration_1','sintatic.py',757),
  ('struct_declaration -> KEYWORD_STRUCT IDENTIFIER LBRACE struct_or_union_member_list RBRACE','struct_declaration',5,'p_struct_declaration_2','sintatic.py',764),
  ('struct_declaration -> KEYWORD_STRUCT LBRACE RBRACE','struct_declaration',3,'p_struct_declaration_3','sintatic.py',771),
  ('struct_declaration -> KEYWORD_STRUCT LBRACE struct_or_union_member_list RBRACE','struct_declaration',4,'p_struct_declaration_4','sintatic.py',778),
  ('struct_declaration -> KEYWORD_STRUCT IDENTIFIER','struct_declaration',2,'p_struct_declaration_5','sintatic.py',785),
  ('union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE RBRACE','union_declaration',4,'p_union_declaration_1','sintatic.py',792),
  ('union_declaration -> KEYWORD_UNION IDENTIFIER LBRACE struct_or_union_member_list RBRACE','union_declaration',5,'p_union_declaration_2','sintatic.py',799),
  ('union_declaration -> KEYWORD_UNION LBRACE RBRACE','union_declaration',3,'p_union_declaration_3','sintatic.py',806),
  ('union_declaration -> KEYWORD_UNION LBRACE struct_or_union_member_list RBRACE','union_declaration',4,'p_union_declaration_4','sintatic.py',813),
  ('union_declaration -> KEYWORD_UNION IDENTIFIER','union_declaration',2,'p_union_declaration_5','sintatic.py',820),
  ('enum_declaration -> KEYWORD_ENUM LBRACE enum_item_list RBRACE','enum_declaration',4,'p_enum_declaration_1','sintatic.py',827),
  ('enum_declaration -> KEYWORD_ENUM IDENTIFIER LBRACE enum_item_list RBRACE','enum_declaration',5,'p_enum_declaration_2','sintatic.py',834),
  ('enum_declaration -> KEYWORD_ENUM IDENTIFIER','enum_declaration',2,'p_enum_declaration_3','sintatic.py',841),
  ('struct_or_union_member_list -> variable_declaration_list_no_assign SEMICOLON','struct_or_union_member_list',2,'p_struct_or_union_member_list','sintatic.py',848),
  ('struct_or_union_member_list -> variable_declaration_list_no_assign SEMICOLON struct_or_union_member_list','struct_or_union_member_list',3,'p_struct_or_union_member_list','sintatic.py',849),
  ('variable_declaration_list_no_assign -> type variable_list_no_assign','variable_declaration_list_no_assign',2,'p_variable_declaration_list_no_assign','sintatic.py',859),
  ('variable_list_no_assign -> identifier','variable_list_no_assign',1,'p_variable_list_no_assign','sintatic.py',866),
  ('variable_list_no_assign -> variable_list_no_assign COMMA identifier','variable_list_no_assign',3,'p_variable_list_no_assign','sintatic.py',867),
  ('enum_item_list -> IDENTIFIER','enum_item_list',1,'p_enum_item_list_1','sintatic.py',877),
  ('enum_item_list -> IDENTIFIER COMMA enum_item_list','enum_item_list',3,'p_enum_item_list_2','sintatic.py',884),
  ('enum_item_list -> IDENTIFIER ASSIGN expression','enum_item_list',3,'p_enum_item_list_3','sintatic.py',891),
  ('enum_item_list -> IDENTIFIER ASSIGN expression COMMA enum_item_list','enum_item_list',5,'p_enum_item_list_4','sintatic.py',898),
  ('multiple_times -> TIMES multiple_times','multiple_times',2,'p_multiple_times','sintatic.py',905),
  ('multiple_times -> TIMES','multiple_times',1,'p_multiple_times','sintatic.py',906),
  ('integer_number -> NUMBER','integer_number',1,'p_integer_number','sintatic.py',916),
  ('integer_number -> BINARY_NUMBER','integer_number',1,'p_integer_number','sintatic.py',917),
  ('integer_number -> HEXADECIMAL_NUMBER','integer_number',1,'p_integer_number','sintatic.py',918),
  ('integer_number -> OCTAL_NUMBER','integer_number',1,'p_integer_number','sintatic.py',919),
  ('expression_list -> expression','expression_list',1,'p_expression_list','sintatic.py',926),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','sintatic.py',927),
  ('expression -> assign_exp','expression',1,'p_expression','sintatic.py',937),
  ('assign_operator -> ASSIGN','assign_operator',1,'p_assign_operator','sintatic.py',944),
  ('assign_operator -> TIMES_ASSIGN','assign_operator',1,'p_assign_operator','sintatic.py',945),
  ('assign_operator -> DIVIDE_ASSIGN','assign_operator',1,'p_assign_operator','sintatic.py',946),
  ('assign_operator -> MODULUS_ASSIGN','assign_operator',1,'p_assign_operator','sintatic.py',947),
  ('assign_operator -> PLUS_ASSIGN','assign_operator',1,'p_assign_operator','sintatic.py',948),
  ('assign_operator -> MINUS_ASSIGN','assign_operator',1,'p_assign_operator','sintatic.py',949),
  ('assign_operator -> SHIFT_LEFT_ASSIGN','assign_operator',1,'p_assign_operator','sintatic.py',950),
  ('assign_operator -> SHIFT_RIGHT_ASSIGN','assign_operator',1,'p_assign_operator','sintatic.py',951),
  ('assign_operator -> BITWISE_AND_ASSIGN','assign_operator',1,'p_assign_operator','sintatic.py',952),
  ('assign_operator -> BITWISE_XOR_ASSIGN','assign_operator',1,'p_assign_operator','sintatic.py',953),
  ('assign_operator -> BITWISE_OR_ASSIGN','assign_operator',1,'p_assign_operator','sintatic.py',954),
  ('assign_exp -> unary_exp assign_operator assign_exp','assign_exp',3,'p_assign_exp','sintatic.py',961),
  ('assign_exp -> ternary_conditional_exp','assign_exp',1,'p_assign_exp','sintatic.py',962),
  ('ternary_conditional_exp -> logical_exp QUESTION_MARK expression COLON ternary_conditional_exp','ternary_conditional_exp',5,'p_ternary_conditional_exp','sintatic.py',972),
  ('ternary_conditional_exp -> logical_exp','ternary_conditional_exp',1,'p_ternary_conditional_exp','sintatic.py',973),
  ('logical_exp -> logical_or_exp','logical_exp',1,'p_logical_exp','sintatic.py',983),
  ('logical_or_exp -> logical_or_exp LOGICAL_OR logical_and_exp','logical_or_exp',3,'p_logical_or_exp','sintatic.py',990),
  ('logical_or_exp -> logical_and_exp','logical_or_exp',1,'p_logical_or_exp','sintatic.py',991),
  ('logical_and_exp -> logical_and_exp LOGICAL_AND bitwise_or_exp','logical_and_exp',3,'p_logical_and_exp','sintatic.py',1001),
  ('logical_and_exp -> bitwise_or_exp','logical_and_exp',1,'p_logical_and_exp','sintatic.py',1002),
  ('bitwise_or_exp -> bitwise_or_exp BITWISE_OR bitwise_xor_exp','bitwise_or_exp',3,'p_bitwise_or_exp','sintatic.py',1012),
  ('bitwise_or_exp -> bitwise_xor_exp','bitwise_or_exp',1,'p_bitwise_or_exp','sintatic.py',1013),
  ('bitwise_xor_exp -> bitwise_xor_exp BITWISE_XOR bitwise_and_exp','bitwise_xor_exp',3,'p_bitwise_xor_exp','sintatic.py',1023),
  ('bitwise_xor_exp -> bitwise_and_exp','bitwise_xor_exp',1,'p_bitwise_xor_exp','sintatic.py',1024),
  ('bitwise_and_exp -> bitwise_and_exp BITWISE_AND is_equals_exp','bitwise_and_exp',3,'p_bitwise_and_exp','sintatic.py',1034),
  ('bitwise_and_exp -> is_equals_exp','bitwise_and_exp',1,'p_bitwise_and_exp','sintatic.py',1035),
  ('is_equals_exp -> is_equals_exp EQUALS_THEN is_not_equals_exp','is_equals_exp',3,'p_is_equals_exp','sintatic.py',1045),
  ('is_equals_exp -> is_not_equals_exp','is_equals_exp',1,'p_is_equals_exp','sintatic.py',1046),
  ('is_not_equals_exp -> is_not_equals_exp NOT_EQUALS greater_then_exp','is_not_equals_exp',3,'p_is_not_equals','sintatic.py',1056),
  ('is_not_equals_exp -> greater_then_exp','is_not_equals_exp',1,'p_is_not_equals','sintatic.py',1057),
  ('greater_then_exp -> greater_then_exp GREATER_THEN greater_equals_exp','greater_then_exp',3,'p_greater_then_exp','sintatic.py',1067),
  ('greater_then_exp -> greater_equals_exp','greater_then_exp',1,'p_greater_then_exp','sintatic.py',1068),
  ('greater_equals_exp -> greater_equals_exp GREATER_EQUALS less_then_exp','greater_equals_exp',3,'p_greater_equals_exp','sintatic.py',1078),
  ('greater_equals_exp -> less_then_exp','greater_equals_exp',1,'p_greater_equals_exp','sintatic.py',1079),
  ('less_then_exp -> less_then_exp LESS_THEN less_equals_exp','less_then_exp',3,'p_less_then_exp','sintatic.py',1089),
  ('less_then_exp -> less_equals_exp','less_then_exp',1,'p_less_then_exp','sintatic.py',1090),
  ('less_equals_exp -> less_equals_exp LESS_EQUALS left_shift_exp','less_equals_exp',3,'p_less_equals_exp','sintatic.py',1100),
  ('less_equals_exp -> left_shift_exp','less_equals_exp',1,'p_less_equals_exp','sintatic.py',1101),
  ('left_shift_exp -> left_shift_exp BITWISE_SHIFT_LEFT right_shift_exp','left_shift_exp',3,'p_left_shift_exp','sintatic.py',1111),
  ('left_shift_exp -> right_shift_exp','left_shift_exp',1,'p_left_shift_exp','sintatic.py',1112),
  ('right_shift_exp -> right_shift_exp BITWISE_SHIFT_RIGHT plus_exp','right_shift_exp',3,'p_right_shift_exp','sintatic.py',1122),
  ('right_shift_exp -> plus_exp','right_shift_exp',1,'p_right_shift_exp','sintatic.py',1123),
  ('plus_exp -> plus_exp PLUS minus_exp','plus_exp',3,'p_plus_exp','sintatic.py',1133),
  ('plus_exp -> minus_exp','plus_exp',1,'p_plus_exp','sintatic.py',1134),
  ('minus_exp -> minus_exp MINUS times_exp','minus_exp',3,'p_minus_exp','sintatic.py',1144),
  ('minus_exp -> times_exp','minus_exp',1,'p_minus_exp','sintatic.py',1145),
  ('times_exp -> times_exp TIMES divide_exp','times_exp',3,'p_times_exp','sintatic.py',1155),
  ('times_exp -> divide_exp','times_exp',1,'p_times_exp','sintatic.py',1156),
  ('divide_exp -> divide_exp DIVIDE modulus_exp','divide_exp',3,'p_divide_exp','sintatic.py',1166),
  ('divide_exp -> modulus_exp','divide_exp',1,'p_divide_exp','sintatic.py',1167),
  ('modulus_exp -> modulus_exp MODULUS unary_exp','modulus_exp',3,'p_modulus_exp','sintatic.py',1177),
  ('modulus_exp -> unary_exp','modulus_exp',1,'p_modulus_exp','sintatic.py',1178),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','sintatic.py',1188),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','sintatic.py',1189),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','sintatic.py',1190),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','sintatic.py',1191),
  ('unary_operator -> BITWISE_COMPLEMENT','unary_operator',1,'p_unary_operator','sintatic.py',1192),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','sintatic.py',1193),
  ('unary_exp -> postfix_exp','unary_exp',1,'p_unary_exp_1','sintatic.py',1200),
  ('unary_exp -> INCREMENT postfix_exp','unary_exp',2,'p_unary_exp_2','sintatic.py',1207),
  ('unary_exp -> DECREMENT postfix_exp','unary_exp',2,'p_unary_exp_3','sintatic.py',1214),
  ('unary_exp -> postfix_exp INCREMENT','unary_exp',2,'p_unary_exp_4','sintatic.py',1221),
  ('unary_exp -> postfix_exp DECREMENT','unary_exp',2,'p_unary_exp_5','sintatic.py',1228),
  ('unary_exp -> cast_exp postfix_exp','unary_exp',2,'p_unary_exp_6','sintatic.py',1235),
  ('unary_exp -> sizeof_exp','unary_exp',1,'p_unary_exp_7','sintatic.py',1242),
  ('unary_exp -> unary_operator unary_exp','unary_exp',2,'p_unary_exp_8','sintatic.py',1249),
  ('sizeof_exp -> KEYWORD_SIZEOF postfix_exp','sizeof_exp',2,'p_sizeof_exp','sintatic.py',1256),
  ('sizeof_exp -> KEYWORD_SIZEOF LPAREN type RPAREN','sizeof_exp',4,'p_sizeof_exp','sintatic.py',1257),
  ('sizeof_exp -> KEYWORD_SIZEOF LPAREN type multiple_times RPAREN','sizeof_exp',5,'p_sizeof_exp','sintatic.py',1258),
  ('cast_exp -> LPAREN type RPAREN','cast_exp',3,'p_cast_exp','sintatic.py',1270),
  ('cast_exp -> LPAREN type multiple_times RPAREN','cast_exp',4,'p_cast_exp','sintatic.py',1271),
  ('postfix_exp -> postfix_exp LBRACKET expression RBRACKET','postfix_exp',4,'p_postfix_exp_1','sintatic.py',1281),
  ('postfix_exp -> postfix_exp LPAREN RPAREN','postfix_exp',3,'p_postfix_exp_2','sintatic.py',1288),
  ('postfix_exp -> postfix_exp LPAREN function_call_parameters RPAREN','postfix_exp',4,'p_postfix_exp_3','sintatic.py',1295),
  ('postfix_exp -> postfix_exp DOT IDENTIFIER','postfix_exp',3,'p_postfix_exp_4','sintatic.py',1302),
  ('postfix_exp -> postfix_exp ARROW IDENTIFIER','postfix_exp',3,'p_postfix_exp_5','sintatic.py',1309),
  ('postfix_exp -> primary_exp','postfix_exp',1,'p_postfix_exp_6','sintatic.py',1316),
  ('function_call_parameters -> expression','function_call_parameters',1,'p_function_call_parameters','sintatic.py',1323),
  ('function_call_parameters -> expression COMMA function_call_parameters','function_call_parameters',3,'p_function_call_parameters','sintatic.py',1324),
  ('primary_exp -> identifier_exp','primary_exp',1,'p_primary_exp','sintatic.py',1334),
  ('identifier_exp -> IDENTIFIER','identifier_exp',1,'p_identifier_exp_1','sintatic.py',1341),
  ('identifier_exp -> string_exp','identifier_exp',1,'p_identifier_exp_2','sintatic.py',1348),
  ('string_exp -> STRING','string_exp',1,'p_string_exp_1','sintatic.py',1355),
  ('string_exp -> number_exp','string_exp',1,'p_string_exp_2','sintatic.py',1362),
  ('number_exp -> integer_number','number_exp',1,'p_number_exp_1','sintatic.py',1369),
  ('number_exp -> FLOAT_NUMBER','number_exp',1,'p_number_exp_2','sintatic.py',1376),
  ('number_exp -> CHARACTER','number_exp',1,'p_number_exp_3','sintatic.py',1383),
  ('number_exp -> parentesis_exp','number_exp',1,'p_number_exp_4','sintatic.py',1390),
  ('parentesis_exp -> LPAREN expression RPAREN','parentesis_exp',3,'p_parentesis_exp','sintatic.py',1397),
]
